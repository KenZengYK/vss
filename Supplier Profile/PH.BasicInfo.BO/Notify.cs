using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PH.Platform.BO;
using PH.Platform.Email.BO;
using PH.Platform.AuthMgr.BO;

namespace PH.BasicInfo.BO
{
    public class Notify
    {
        /// <summary>
        /// 发送邮件
        /// </summary>
        /// <param name="AUserID">发件人的UserID</param>
        /// <param name="ANotifyType">邮件通知类型，有三种类型：Prepare、Confirm、Approval</param>
        /// <param name="ADataList">需要处理的Supplier List</param>
        /// <param name="AToUsers">指定To的名单, 传空值时，从Email Notify中取配置的人员名单</param>
        public static void SendEmail(string AUserID, string ANotifyType, List<SupplierProfile> ADataList, string AToUserID)
        {
            BasicInfoDataContext db = ContextBuilder.CreateContext<BasicInfoDataContext>();
            EmailNotify obj = db.EmailNotifies.FirstOrDefault(p => p.NotifyType == ANotifyType);
            if (obj == null) return;

            string ToUserName = "";
            string To = "";
            string Cc = GetEmailAddress(obj.CcUser);
            string Bcc = GetEmailAddress(obj.BccUser);

            if (string.IsNullOrEmpty(AToUserID))//如果没有指定To名单，则从Email Notify配置表中取
            {
                To = GetEmailAddress(obj.ToUser);
            }
            else //如果指定了To名单，则只发给指定的人
            {
                AuthMgrDataContext AuthMgrDB = ContextBuilder.CreateContext<AuthMgrDataContext>();
                var user = AuthMgrDB.Auth_User.FirstOrDefault(p => p.UserID == AToUserID);
                if (user == null || string.IsNullOrEmpty(user.Email))
                {
                    To = GetEmailAddress(obj.ToUser);
                }
                else
                {
                    To = user.Email;
                    ToUserName = user.UserName;
                }
            }

            //To = "DavidJiang@phgmt.com.hk";
            //Cc = "JoeWang@phgmt.com.hk";

            string Subject = "";
            StringBuilder sb = new StringBuilder();

            if (string.IsNullOrEmpty(AToUserID))
            {
                sb.AppendLine("Dear All,");
            }
            else
            {
                sb.AppendLine("Dear " + ToUserName + ",");
            }
            sb.AppendLine();

            string SupplierCode = ADataList.FirstOrDefault().ERPSupplier;
            string NewOrChange = string.IsNullOrEmpty(ADataList.FirstOrDefault().LastApprovalPerson) ? "New" : "Change";

            if (ANotifyType == "Prepare")
            {
                Subject = string.Format("{0} ({1}) - To be cfmd by SLMM", SupplierCode, NewOrChange);
                sb.AppendLine("【Sender】 " + AUserID + "    【dd/time】 " + DateTime.Now.ToString("MM-dd HH:mm"));
                sb.AppendLine();
                sb.AppendLine(string.Format(" {0} - To be cfmd", SupplierCode));
            }
            else if (ANotifyType == "Confirm")
            {
                Subject = string.Format("{0} ({1}) - To be appvl by {2}", SupplierCode, NewOrChange, (string.IsNullOrEmpty(AToUserID) ? "HKMM" : AToUserID));
                sb.AppendLine("【Sender】 " + AUserID + "    【dd/time】 " + DateTime.Now.ToString("MM-dd HH:mm"));
                sb.AppendLine();
                sb.AppendLine(string.Format(" {0} - To be appvl", SupplierCode));
            }
            else if (ANotifyType == "Approval")
            {
                Subject = string.Format("{0} ({1}) - Approved by {2} ", SupplierCode, NewOrChange, AUserID);
                sb.AppendLine("【Sender】 " + AUserID + "    【dd/time】 " + DateTime.Now.ToString("MM-dd HH:mm"));
                sb.AppendLine();
                sb.AppendLine(string.Format(" {0} - Approved", SupplierCode));
            }

            //sb.AppendLine();

            //sb.Append("Supper Code".PadRight(20));
            //sb.AppendLine("Supplier Name".PadRight(100));
            ////sb.AppendLine("Supplier Brief Desc.");
            //foreach (var item in ADataList)
            //{
            //    sb.Append(item.ERPSupplier.Trim().PadRight(20));
            //    sb.AppendLine(item.SupplierName.Trim().PadRight(100));
            //    //sb.AppendLine(item.ShortName.Trim());

            //}

            //string Str = string.Join(", ", ADataList.Take(3).Select(p => p.ERPSupplier).ToArray());
            //if (ADataList.Count() > 3)
            //{
            //    Str += ", ...";
            //}

            //Subject = string.Format(Subject, Str);
            //Subject = "Supp Profile (JYTL, WEMI, ABCD, ...) - need to be confirm";



            sb.AppendLine();
            sb.AppendLine("This mail is generated by system, pls don't reply to this mail directly!");
            sb.AppendLine("系統自動發送，請勿回復！");

            string Body = sb.ToString();

            //string From = "PH_PDN@phgmt.com.hk"; //真正在后台发邮件的邮箱地址
            string From = "PH_IMQE@phgmt.com.hk"; //真正在后台发邮件的邮箱地址
            string Password = "phpdn";
            string SmtpServer = "svphhk01.phgmt.com.hk";  //"10.1.1.236";

            MailHelper mail = new MailHelper(From, Password, To, Cc, Bcc, Subject, Body, "", SmtpServer, 25, false);
            //mail.IsBodyHtml = true;
            mail.SendMail("Supp Profile");
        }

        //獲取郵件地址
        private static string GetEmailAddress(string AUserNames)
        {
            if (string.IsNullOrEmpty(AUserNames)) return "";

            AuthMgrDataContext AuthMgrDB = ContextBuilder.CreateContext<AuthMgrDataContext>();

            string[] userNameArray = AUserNames.Split(new string[] { ", ", "," }, StringSplitOptions.RemoveEmptyEntries);
            for (int i = 0; i < userNameArray.Length; i++)
            {
                userNameArray[i] = userNameArray[i].Trim();
            }
            List<string> emailAddressList = (from val in AuthMgrDB.Auth_User
                                             where val.UserName != null && userNameArray.Contains(val.UserName.Trim())
                                             select val.Email).ToList();

            if (emailAddressList.Count == 0) return null;
            string emailAddressStr = null;
            foreach (string val in emailAddressList)
            {
                emailAddressStr += emailAddressStr == null ? val : "," + val;
            }
            return emailAddressStr;
        }
    }
}

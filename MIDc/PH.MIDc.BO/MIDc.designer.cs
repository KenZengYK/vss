#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8806
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PH.MIDc.BO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PH.MIDc")]
	public partial class MIDcDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertARate(ARate instance);
    partial void UpdateARate(ARate instance);
    partial void DeleteARate(ARate instance);
    partial void InsertTechReferInfo(TechReferInfo instance);
    partial void UpdateTechReferInfo(TechReferInfo instance);
    partial void DeleteTechReferInfo(TechReferInfo instance);
    partial void InsertColorDetail(ColorDetail instance);
    partial void UpdateColorDetail(ColorDetail instance);
    partial void DeleteColorDetail(ColorDetail instance);
    partial void InsertCompositionDetail(CompositionDetail instance);
    partial void UpdateCompositionDetail(CompositionDetail instance);
    partial void DeleteCompositionDetail(CompositionDetail instance);
    partial void InsertCustomerBranded(CustomerBranded instance);
    partial void UpdateCustomerBranded(CustomerBranded instance);
    partial void DeleteCustomerBranded(CustomerBranded instance);
    partial void InsertDetailImage(DetailImage instance);
    partial void UpdateDetailImage(DetailImage instance);
    partial void DeleteDetailImage(DetailImage instance);
    partial void InsertPriceHistory(PriceHistory instance);
    partial void UpdatePriceHistory(PriceHistory instance);
    partial void DeletePriceHistory(PriceHistory instance);
    partial void InsertRatioPrice(RatioPrice instance);
    partial void UpdateRatioPrice(RatioPrice instance);
    partial void DeleteRatioPrice(RatioPrice instance);
    partial void InsertRWM(RWM instance);
    partial void UpdateRWM(RWM instance);
    partial void DeleteRWM(RWM instance);
    partial void InsertSampleOrderPO(SampleOrderPO instance);
    partial void UpdateSampleOrderPO(SampleOrderPO instance);
    partial void DeleteSampleOrderPO(SampleOrderPO instance);
    partial void InsertSampleOrderPODetail(SampleOrderPODetail instance);
    partial void UpdateSampleOrderPODetail(SampleOrderPODetail instance);
    partial void DeleteSampleOrderPODetail(SampleOrderPODetail instance);
    partial void InsertSpec(Spec instance);
    partial void UpdateSpec(Spec instance);
    partial void DeleteSpec(Spec instance);
    partial void InsertSpecialLabel(SpecialLabel instance);
    partial void UpdateSpecialLabel(SpecialLabel instance);
    partial void DeleteSpecialLabel(SpecialLabel instance);
    partial void InsertTechInforTest(TechInforTest instance);
    partial void UpdateTechInforTest(TechInforTest instance);
    partial void DeleteTechInforTest(TechInforTest instance);
    partial void InsertTechnicalInformation(TechnicalInformation instance);
    partial void UpdateTechnicalInformation(TechnicalInformation instance);
    partial void DeleteTechnicalInformation(TechnicalInformation instance);
    partial void InsertTechnicalInformationDefault(TechnicalInformationDefault instance);
    partial void UpdateTechnicalInformationDefault(TechnicalInformationDefault instance);
    partial void DeleteTechnicalInformationDefault(TechnicalInformationDefault instance);
    partial void InsertMaterialProcess(MaterialProcess instance);
    partial void UpdateMaterialProcess(MaterialProcess instance);
    partial void DeleteMaterialProcess(MaterialProcess instance);
    partial void InsertMIDcUpFile(MIDcUpFile instance);
    partial void UpdateMIDcUpFile(MIDcUpFile instance);
    partial void DeleteMIDcUpFile(MIDcUpFile instance);
    partial void InsertSubColorDetail(SubColorDetail instance);
    partial void UpdateSubColorDetail(SubColorDetail instance);
    partial void DeleteSubColorDetail(SubColorDetail instance);
    partial void InsertColorSizeCupRangeDetail(ColorSizeCupRangeDetail instance);
    partial void UpdateColorSizeCupRangeDetail(ColorSizeCupRangeDetail instance);
    partial void DeleteColorSizeCupRangeDetail(ColorSizeCupRangeDetail instance);
    partial void InsertSampleOrder(SampleOrder instance);
    partial void UpdateSampleOrder(SampleOrder instance);
    partial void DeleteSampleOrder(SampleOrder instance);
    partial void InsertMIDcEmailNotify(MIDcEmailNotify instance);
    partial void UpdateMIDcEmailNotify(MIDcEmailNotify instance);
    partial void DeleteMIDcEmailNotify(MIDcEmailNotify instance);
    partial void InsertNewColorDetail(NewColorDetail instance);
    partial void UpdateNewColorDetail(NewColorDetail instance);
    partial void DeleteNewColorDetail(NewColorDetail instance);
    partial void InsertNewCupDetail(NewCupDetail instance);
    partial void UpdateNewCupDetail(NewCupDetail instance);
    partial void DeleteNewCupDetail(NewCupDetail instance);
    partial void InsertNewSizeDetail(NewSizeDetail instance);
    partial void UpdateNewSizeDetail(NewSizeDetail instance);
    partial void DeleteNewSizeDetail(NewSizeDetail instance);
    partial void InsertDetailChangeConfirm(DetailChangeConfirm instance);
    partial void UpdateDetailChangeConfirm(DetailChangeConfirm instance);
    partial void DeleteDetailChangeConfirm(DetailChangeConfirm instance);
    partial void InsertColorSizeCupGroup(ColorSizeCupGroup instance);
    partial void UpdateColorSizeCupGroup(ColorSizeCupGroup instance);
    partial void DeleteColorSizeCupGroup(ColorSizeCupGroup instance);
    partial void InsertColorSizeCupRange(ColorSizeCupRange instance);
    partial void UpdateColorSizeCupRange(ColorSizeCupRange instance);
    partial void DeleteColorSizeCupRange(ColorSizeCupRange instance);
    partial void InsertMaterialPriceHeader(MaterialPriceHeader instance);
    partial void UpdateMaterialPriceHeader(MaterialPriceHeader instance);
    partial void DeleteMaterialPriceHeader(MaterialPriceHeader instance);
    partial void InsertMaterialTypeSizeCup(MaterialTypeSizeCup instance);
    partial void UpdateMaterialTypeSizeCup(MaterialTypeSizeCup instance);
    partial void DeleteMaterialTypeSizeCup(MaterialTypeSizeCup instance);
    partial void InsertLogMsg(LogMsg instance);
    partial void UpdateLogMsg(LogMsg instance);
    partial void DeleteLogMsg(LogMsg instance);
    partial void InsertWeightMaterial(WeightMaterial instance);
    partial void UpdateWeightMaterial(WeightMaterial instance);
    partial void DeleteWeightMaterial(WeightMaterial instance);
    partial void InsertWeightStyle(WeightStyle instance);
    partial void UpdateWeightStyle(WeightStyle instance);
    partial void DeleteWeightStyle(WeightStyle instance);
    partial void InsertWipWeight(WipWeight instance);
    partial void UpdateWipWeight(WipWeight instance);
    partial void DeleteWipWeight(WipWeight instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertMaterialPrice(MaterialPrice instance);
    partial void UpdateMaterialPrice(MaterialPrice instance);
    partial void DeleteMaterialPrice(MaterialPrice instance);
    partial void InsertCustomMaterialDeclare(CustomMaterialDeclare instance);
    partial void UpdateCustomMaterialDeclare(CustomMaterialDeclare instance);
    partial void DeleteCustomMaterialDeclare(CustomMaterialDeclare instance);
    partial void InsertCustomMaterialElement(CustomMaterialElement instance);
    partial void UpdateCustomMaterialElement(CustomMaterialElement instance);
    partial void DeleteCustomMaterialElement(CustomMaterialElement instance);
    partial void InsertCustomMaterial(CustomMaterial instance);
    partial void UpdateCustomMaterial(CustomMaterial instance);
    partial void DeleteCustomMaterial(CustomMaterial instance);
    partial void InsertHSCodeList(HSCodeList instance);
    partial void UpdateHSCodeList(HSCodeList instance);
    partial void DeleteHSCodeList(HSCodeList instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertCustomMaterialDeclare_FG(CustomMaterialDeclare_FG instance);
    partial void UpdateCustomMaterialDeclare_FG(CustomMaterialDeclare_FG instance);
    partial void DeleteCustomMaterialDeclare_FG(CustomMaterialDeclare_FG instance);
    partial void InsertColorSuppCustName(ColorSuppCustName instance);
    partial void UpdateColorSuppCustName(ColorSuppCustName instance);
    partial void DeleteColorSuppCustName(ColorSuppCustName instance);
    partial void InsertMaterialType(MaterialType instance);
    partial void UpdateMaterialType(MaterialType instance);
    partial void DeleteMaterialType(MaterialType instance);
    partial void InsertDetail(Detail instance);
    partial void UpdateDetail(Detail instance);
    partial void DeleteDetail(Detail instance);
    partial void InsertMaterialWeight(MaterialWeight instance);
    partial void UpdateMaterialWeight(MaterialWeight instance);
    partial void DeleteMaterialWeight(MaterialWeight instance);
    #endregion
		
		public MIDcDataContext() : 
				base(global::PH.MIDc.BO.Properties.Settings.Default.PH_MIDcConnectionString8, mappingSource)
		{
			OnCreated();
		}
		
		public MIDcDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MIDcDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MIDcDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MIDcDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ARate> ARates
		{
			get
			{
				return this.GetTable<ARate>();
			}
		}
		
		public System.Data.Linq.Table<TechReferInfo> TechReferInfos
		{
			get
			{
				return this.GetTable<TechReferInfo>();
			}
		}
		
		public System.Data.Linq.Table<ColorDetail> ColorDetails
		{
			get
			{
				return this.GetTable<ColorDetail>();
			}
		}
		
		public System.Data.Linq.Table<CompositionDetail> CompositionDetails
		{
			get
			{
				return this.GetTable<CompositionDetail>();
			}
		}
		
		public System.Data.Linq.Table<ConvertH> ConvertHs
		{
			get
			{
				return this.GetTable<ConvertH>();
			}
		}
		
		public System.Data.Linq.Table<CustomerBranded> CustomerBrandeds
		{
			get
			{
				return this.GetTable<CustomerBranded>();
			}
		}
		
		public System.Data.Linq.Table<DetailImage> DetailImages
		{
			get
			{
				return this.GetTable<DetailImage>();
			}
		}
		
		public System.Data.Linq.Table<PriceHistory> PriceHistories
		{
			get
			{
				return this.GetTable<PriceHistory>();
			}
		}
		
		public System.Data.Linq.Table<RatioPrice> RatioPrices
		{
			get
			{
				return this.GetTable<RatioPrice>();
			}
		}
		
		public System.Data.Linq.Table<RoleField> RoleFields
		{
			get
			{
				return this.GetTable<RoleField>();
			}
		}
		
		public System.Data.Linq.Table<RWM> RWMs
		{
			get
			{
				return this.GetTable<RWM>();
			}
		}
		
		public System.Data.Linq.Table<SampleOrderPO> SampleOrderPOs
		{
			get
			{
				return this.GetTable<SampleOrderPO>();
			}
		}
		
		public System.Data.Linq.Table<SampleOrderPODetail> SampleOrderPODetails
		{
			get
			{
				return this.GetTable<SampleOrderPODetail>();
			}
		}
		
		public System.Data.Linq.Table<Spec> Specs
		{
			get
			{
				return this.GetTable<Spec>();
			}
		}
		
		public System.Data.Linq.Table<SpecialLabel> SpecialLabels
		{
			get
			{
				return this.GetTable<SpecialLabel>();
			}
		}
		
		public System.Data.Linq.Table<TechInforTest> TechInforTests
		{
			get
			{
				return this.GetTable<TechInforTest>();
			}
		}
		
		public System.Data.Linq.Table<TechnicalInformation> TechnicalInformations
		{
			get
			{
				return this.GetTable<TechnicalInformation>();
			}
		}
		
		public System.Data.Linq.Table<TechnicalInformationDefault> TechnicalInformationDefaults
		{
			get
			{
				return this.GetTable<TechnicalInformationDefault>();
			}
		}
		
		public System.Data.Linq.Table<MaterialProcess> MaterialProcesses
		{
			get
			{
				return this.GetTable<MaterialProcess>();
			}
		}
		
		public System.Data.Linq.Table<MIDcUpFile> MIDcUpFiles
		{
			get
			{
				return this.GetTable<MIDcUpFile>();
			}
		}
		
		public System.Data.Linq.Table<SubColorDetail> SubColorDetails
		{
			get
			{
				return this.GetTable<SubColorDetail>();
			}
		}
		
		public System.Data.Linq.Table<ColorSizeCupRangeDetail> ColorSizeCupRangeDetails
		{
			get
			{
				return this.GetTable<ColorSizeCupRangeDetail>();
			}
		}
		
		public System.Data.Linq.Table<SampleOrder> SampleOrders
		{
			get
			{
				return this.GetTable<SampleOrder>();
			}
		}
		
		public System.Data.Linq.Table<MIDcEmailNotify> MIDcEmailNotifies
		{
			get
			{
				return this.GetTable<MIDcEmailNotify>();
			}
		}
		
		public System.Data.Linq.Table<NewColorDetail> NewColorDetails
		{
			get
			{
				return this.GetTable<NewColorDetail>();
			}
		}
		
		public System.Data.Linq.Table<NewCupDetail> NewCupDetails
		{
			get
			{
				return this.GetTable<NewCupDetail>();
			}
		}
		
		public System.Data.Linq.Table<NewSizeDetail> NewSizeDetails
		{
			get
			{
				return this.GetTable<NewSizeDetail>();
			}
		}
		
		public System.Data.Linq.Table<DetailChangeConfirm> DetailChangeConfirms
		{
			get
			{
				return this.GetTable<DetailChangeConfirm>();
			}
		}
		
		public System.Data.Linq.Table<ColorSizeCupGroup> ColorSizeCupGroups
		{
			get
			{
				return this.GetTable<ColorSizeCupGroup>();
			}
		}
		
		public System.Data.Linq.Table<ColorSizeCupRange> ColorSizeCupRanges
		{
			get
			{
				return this.GetTable<ColorSizeCupRange>();
			}
		}
		
		public System.Data.Linq.Table<MaterialPriceHeader> MaterialPriceHeaders
		{
			get
			{
				return this.GetTable<MaterialPriceHeader>();
			}
		}
		
		public System.Data.Linq.Table<MaterialTypeSizeCup> MaterialTypeSizeCups
		{
			get
			{
				return this.GetTable<MaterialTypeSizeCup>();
			}
		}
		
		public System.Data.Linq.Table<LogMsg> LogMsgs
		{
			get
			{
				return this.GetTable<LogMsg>();
			}
		}
		
		public System.Data.Linq.Table<V_GetSupplierProfile> V_GetSupplierProfiles
		{
			get
			{
				return this.GetTable<V_GetSupplierProfile>();
			}
		}
		
		public System.Data.Linq.Table<V_PricesOfTimeout> V_PricesOfTimeouts
		{
			get
			{
				return this.GetTable<V_PricesOfTimeout>();
			}
		}
		
		public System.Data.Linq.Table<WeightMaterial> WeightMaterials
		{
			get
			{
				return this.GetTable<WeightMaterial>();
			}
		}
		
		public System.Data.Linq.Table<WeightStyle> WeightStyles
		{
			get
			{
				return this.GetTable<WeightStyle>();
			}
		}
		
		public System.Data.Linq.Table<WipWeight> WipWeights
		{
			get
			{
				return this.GetTable<WipWeight>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<MaterialPrice> MaterialPrices
		{
			get
			{
				return this.GetTable<MaterialPrice>();
			}
		}
		
		public System.Data.Linq.Table<CustomMaterialDeclare> CustomMaterialDeclares
		{
			get
			{
				return this.GetTable<CustomMaterialDeclare>();
			}
		}
		
		public System.Data.Linq.Table<CustomMaterialElement> CustomMaterialElements
		{
			get
			{
				return this.GetTable<CustomMaterialElement>();
			}
		}
		
		public System.Data.Linq.Table<CustomMaterial> CustomMaterials
		{
			get
			{
				return this.GetTable<CustomMaterial>();
			}
		}
		
		public System.Data.Linq.Table<HSCodeList> HSCodeLists
		{
			get
			{
				return this.GetTable<HSCodeList>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<CustomMaterialDeclare_FG> CustomMaterialDeclare_FGs
		{
			get
			{
				return this.GetTable<CustomMaterialDeclare_FG>();
			}
		}
		
		public System.Data.Linq.Table<ColorSuppCustName> ColorSuppCustNames
		{
			get
			{
				return this.GetTable<ColorSuppCustName>();
			}
		}
		
		public System.Data.Linq.Table<MaterialType> MaterialTypes
		{
			get
			{
				return this.GetTable<MaterialType>();
			}
		}
		
		public System.Data.Linq.Table<Detail> Details
		{
			get
			{
				return this.GetTable<Detail>();
			}
		}
		
		public System.Data.Linq.Table<MaterialWeight> MaterialWeights
		{
			get
			{
				return this.GetTable<MaterialWeight>();
			}
		}
	}
	
	[Table(Name="dbo.ARate")]
	public partial class ARate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SupplierUnit;
		
		private string _PHUnit;
		
		private string _Description;
		
		private System.Nullable<decimal> _Rate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplierUnitChanging(string value);
    partial void OnSupplierUnitChanged();
    partial void OnPHUnitChanging(string value);
    partial void OnPHUnitChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    #endregion
		
		public ARate()
		{
			OnCreated();
		}
		
		[Column(Storage="_SupplierUnit", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SupplierUnit
		{
			get
			{
				return this._SupplierUnit;
			}
			set
			{
				if ((this._SupplierUnit != value))
				{
					this.OnSupplierUnitChanging(value);
					this.SendPropertyChanging();
					this._SupplierUnit = value;
					this.SendPropertyChanged("SupplierUnit");
					this.OnSupplierUnitChanged();
				}
			}
		}
		
		[Column(Storage="_PHUnit", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PHUnit
		{
			get
			{
				return this._PHUnit;
			}
			set
			{
				if ((this._PHUnit != value))
				{
					this.OnPHUnitChanging(value);
					this.SendPropertyChanging();
					this._PHUnit = value;
					this.SendPropertyChanged("PHUnit");
					this.OnPHUnitChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Rate", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TechReferInfo")]
	public partial class TechReferInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexNo;
		
		private string _CustmerID;
		
		private string _ReferInfo;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexNoChanging(int value);
    partial void OnIndexNoChanged();
    partial void OnCustmerIDChanging(string value);
    partial void OnCustmerIDChanged();
    partial void OnReferInfoChanging(string value);
    partial void OnReferInfoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TechReferInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_IndexNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					this.OnIndexNoChanging(value);
					this.SendPropertyChanging();
					this._IndexNo = value;
					this.SendPropertyChanged("IndexNo");
					this.OnIndexNoChanged();
				}
			}
		}
		
		[Column(Storage="_CustmerID", DbType="VarChar(50)")]
		public string CustmerID
		{
			get
			{
				return this._CustmerID;
			}
			set
			{
				if ((this._CustmerID != value))
				{
					this.OnCustmerIDChanging(value);
					this.SendPropertyChanging();
					this._CustmerID = value;
					this.SendPropertyChanged("CustmerID");
					this.OnCustmerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReferInfo", DbType="VarChar(50)")]
		public string ReferInfo
		{
			get
			{
				return this._ReferInfo;
			}
			set
			{
				if ((this._ReferInfo != value))
				{
					this.OnReferInfoChanging(value);
					this.SendPropertyChanging();
					this._ReferInfo = value;
					this.SendPropertyChanged("ReferInfo");
					this.OnReferInfoChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ColorDetail")]
	public partial class ColorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _Description;
		
		private EntitySet<SubColorDetail> _SubColorDetails;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ColorDetail()
		{
			this._SubColorDetails = new EntitySet<SubColorDetail>(new Action<SubColorDetail>(this.attach_SubColorDetails), new Action<SubColorDetail>(this.detach_SubColorDetails));
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ColorDetail_SubColorDetail", Storage="_SubColorDetails", ThisKey="SuppRef,Color", OtherKey="SuppRef,Color")]
		public EntitySet<SubColorDetail> SubColorDetails
		{
			get
			{
				return this._SubColorDetails;
			}
			set
			{
				this._SubColorDetails.Assign(value);
			}
		}
		
		[Association(Name="Detail_ColorDetail", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.ColorDetails.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.ColorDetails.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubColorDetails(SubColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.ColorDetail = this;
		}
		
		private void detach_SubColorDetails(SubColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.ColorDetail = null;
		}
	}
	
	[Table(Name="dbo.CompositionDetail")]
	public partial class CompositionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexNo;
		
		private string _SuppRef;
		
		private string _Composition;
		
		private System.Nullable<decimal> _Per;
		
		private string _YarnCount;
		
		private string _SpecialTerms;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexNoChanging(int value);
    partial void OnIndexNoChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnCompositionChanging(string value);
    partial void OnCompositionChanged();
    partial void OnPerChanging(System.Nullable<decimal> value);
    partial void OnPerChanged();
    partial void OnYarnCountChanging(string value);
    partial void OnYarnCountChanged();
    partial void OnSpecialTermsChanging(string value);
    partial void OnSpecialTermsChanged();
    #endregion
		
		public CompositionDetail()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_IndexNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					this.OnIndexNoChanging(value);
					this.SendPropertyChanging();
					this._IndexNo = value;
					this.SendPropertyChanged("IndexNo");
					this.OnIndexNoChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Composition", DbType="VarChar(50)")]
		public string Composition
		{
			get
			{
				return this._Composition;
			}
			set
			{
				if ((this._Composition != value))
				{
					this.OnCompositionChanging(value);
					this.SendPropertyChanging();
					this._Composition = value;
					this.SendPropertyChanged("Composition");
					this.OnCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Per
		{
			get
			{
				return this._Per;
			}
			set
			{
				if ((this._Per != value))
				{
					this.OnPerChanging(value);
					this.SendPropertyChanging();
					this._Per = value;
					this.SendPropertyChanged("Per");
					this.OnPerChanged();
				}
			}
		}
		
		[Column(Storage="_YarnCount", DbType="VarChar(50)")]
		public string YarnCount
		{
			get
			{
				return this._YarnCount;
			}
			set
			{
				if ((this._YarnCount != value))
				{
					this.OnYarnCountChanging(value);
					this.SendPropertyChanging();
					this._YarnCount = value;
					this.SendPropertyChanged("YarnCount");
					this.OnYarnCountChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialTerms", DbType="VarChar(50)")]
		public string SpecialTerms
		{
			get
			{
				return this._SpecialTerms;
			}
			set
			{
				if ((this._SpecialTerms != value))
				{
					this.OnSpecialTermsChanging(value);
					this.SendPropertyChanging();
					this._SpecialTerms = value;
					this.SendPropertyChanged("SpecialTerms");
					this.OnSpecialTermsChanged();
				}
			}
		}
		
		[Association(Name="Detail_CompositionDetail", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.CompositionDetails.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.CompositionDetails.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ConvertHS")]
	public partial class ConvertH
	{
		
		private string _hs1;
		
		private string _hs2;
		
		public ConvertH()
		{
		}
		
		[Column(Storage="_hs1", DbType="VarChar(50)")]
		public string hs1
		{
			get
			{
				return this._hs1;
			}
			set
			{
				if ((this._hs1 != value))
				{
					this._hs1 = value;
				}
			}
		}
		
		[Column(Storage="_hs2", DbType="VarChar(50)")]
		public string hs2
		{
			get
			{
				return this._hs2;
			}
			set
			{
				if ((this._hs2 != value))
				{
					this._hs2 = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.CustomerBranded")]
	public partial class CustomerBranded : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Customer;
		
		private System.Nullable<bool> _Branded;
		
		private System.Nullable<bool> _Selection;
		
		private System.Nullable<decimal> _Price;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnBrandedChanging(System.Nullable<bool> value);
    partial void OnBrandedChanged();
    partial void OnSelectionChanging(System.Nullable<bool> value);
    partial void OnSelectionChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    #endregion
		
		public CustomerBranded()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Customer", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_Branded", DbType="Bit")]
		public System.Nullable<bool> Branded
		{
			get
			{
				return this._Branded;
			}
			set
			{
				if ((this._Branded != value))
				{
					this.OnBrandedChanging(value);
					this.SendPropertyChanging();
					this._Branded = value;
					this.SendPropertyChanged("Branded");
					this.OnBrandedChanged();
				}
			}
		}
		
		[Column(Storage="_Selection", DbType="Bit")]
		public System.Nullable<bool> Selection
		{
			get
			{
				return this._Selection;
			}
			set
			{
				if ((this._Selection != value))
				{
					this.OnSelectionChanging(value);
					this.SendPropertyChanging();
					this._Selection = value;
					this.SendPropertyChanged("Selection");
					this.OnSelectionChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Association(Name="Detail_CustomerBranded", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.CustomerBrandeds.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.CustomerBrandeds.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DetailImage")]
	public partial class DetailImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private byte[] _Photo;
		
		private string _Remark;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnPhotoChanging(byte[] value);
    partial void OnPhotoChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public DetailImage()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="Detail_DetailImage", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.DetailImage = null;
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.DetailImage = this;
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PriceHistory")]
	public partial class PriceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _IndexID;
		
		private string _SuppRef;
		
		private System.DateTime _HistoryDate;
		
		private System.Nullable<decimal> _Price;
		
		private string _Remarks;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(long value);
    partial void OnIndexIDChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnHistoryDateChanging(System.DateTime value);
    partial void OnHistoryDateChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    #endregion
		
		public PriceHistory()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long IndexID
		{
			get
			{
				return this._IndexID;
			}
			set
			{
				if ((this._IndexID != value))
				{
					this.OnIndexIDChanging(value);
					this.SendPropertyChanging();
					this._IndexID = value;
					this.SendPropertyChanged("IndexID");
					this.OnIndexIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_HistoryDate", DbType="DateTime NOT NULL")]
		public System.DateTime HistoryDate
		{
			get
			{
				return this._HistoryDate;
			}
			set
			{
				if ((this._HistoryDate != value))
				{
					this.OnHistoryDateChanging(value);
					this.SendPropertyChanging();
					this._HistoryDate = value;
					this.SendPropertyChanged("HistoryDate");
					this.OnHistoryDateChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(15,6)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Remarks", DbType="VarChar(250)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this.OnRemarksChanging(value);
					this.SendPropertyChanging();
					this._Remarks = value;
					this.SendPropertyChanged("Remarks");
					this.OnRemarksChanged();
				}
			}
		}
		
		[Association(Name="Detail_PriceHistory", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.PriceHistories.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.PriceHistories.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RatioPrice")]
	public partial class RatioPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexID;
		
		private string _SuppRef;
		
		private string _ColorCategory;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _Ratio;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorCategoryChanging(string value);
    partial void OnColorCategoryChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnRatioChanging(System.Nullable<int> value);
    partial void OnRatioChanged();
    #endregion
		
		public RatioPrice()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_IndexID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexID
		{
			get
			{
				return this._IndexID;
			}
			set
			{
				if ((this._IndexID != value))
				{
					this.OnIndexIDChanging(value);
					this.SendPropertyChanging();
					this._IndexID = value;
					this.SendPropertyChanged("IndexID");
					this.OnIndexIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCategory", DbType="VarChar(50)")]
		public string ColorCategory
		{
			get
			{
				return this._ColorCategory;
			}
			set
			{
				if ((this._ColorCategory != value))
				{
					this.OnColorCategoryChanging(value);
					this.SendPropertyChanging();
					this._ColorCategory = value;
					this.SendPropertyChanged("ColorCategory");
					this.OnColorCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(15,6)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ratio", DbType="Int")]
		public System.Nullable<int> Ratio
		{
			get
			{
				return this._Ratio;
			}
			set
			{
				if ((this._Ratio != value))
				{
					this.OnRatioChanging(value);
					this.SendPropertyChanging();
					this._Ratio = value;
					this.SendPropertyChanged("Ratio");
					this.OnRatioChanged();
				}
			}
		}
		
		[Association(Name="Detail_RatioPrice", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.RatioPrices.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.RatioPrices.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RoleField")]
	public partial class RoleField
	{
		
		private int _IndexNo;
		
		private int _RoleID;
		
		private string _ObjectCode;
		
		private string _ControlName;
		
		private string _Status;
		
		private string _ControlType;
		
		private string _OperationType;
		
		private System.Nullable<bool> _OperationValue;
		
		public RoleField()
		{
		}
		
		[Column(Storage="_IndexNo", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					this._IndexNo = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_ObjectCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ObjectCode
		{
			get
			{
				return this._ObjectCode;
			}
			set
			{
				if ((this._ObjectCode != value))
				{
					this._ObjectCode = value;
				}
			}
		}
		
		[Column(Storage="_ControlName", DbType="VarChar(50)")]
		public string ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this._ControlName = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_ControlType", DbType="VarChar(50)")]
		public string ControlType
		{
			get
			{
				return this._ControlType;
			}
			set
			{
				if ((this._ControlType != value))
				{
					this._ControlType = value;
				}
			}
		}
		
		[Column(Storage="_OperationType", DbType="VarChar(50)")]
		public string OperationType
		{
			get
			{
				return this._OperationType;
			}
			set
			{
				if ((this._OperationType != value))
				{
					this._OperationType = value;
				}
			}
		}
		
		[Column(Storage="_OperationValue", DbType="Bit")]
		public System.Nullable<bool> OperationValue
		{
			get
			{
				return this._OperationValue;
			}
			set
			{
				if ((this._OperationValue != value))
				{
					this._OperationValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.RWM")]
	public partial class RWM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _Size;
		
		private int _RWMType;
		
		private System.Nullable<decimal> _Qty;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnRWMTypeChanging(int value);
    partial void OnRWMTypeChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    #endregion
		
		public RWM()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_RWMType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RWMType
		{
			get
			{
				return this._RWMType;
			}
			set
			{
				if ((this._RWMType != value))
				{
					this.OnRWMTypeChanging(value);
					this.SendPropertyChanging();
					this._RWMType = value;
					this.SendPropertyChanged("RWMType");
					this.OnRWMTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Association(Name="Detail_RWM", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.RWMs.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.RWMs.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SampleOrderPO")]
	public partial class SampleOrderPO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SampleOrderPONo;
		
		private string _CommodityCode;
		
		private System.Nullable<System.DateTime> _PO_Date;
		
		private string _ShipmentMode;
		
		private System.Nullable<System.DateTime> _DeliveryDate;
		
		private string _ContractPerson;
		
		private string _Customer;
		
		private string _PrintType;
		
		private string _POState;
		
		private System.Nullable<System.DateTime> _ReadyDate;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private string _SupplierUnit;
		
		private EntitySet<SampleOrderPODetail> _SampleOrderPODetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleOrderPONoChanging(string value);
    partial void OnSampleOrderPONoChanged();
    partial void OnCommodityCodeChanging(string value);
    partial void OnCommodityCodeChanged();
    partial void OnPO_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnPO_DateChanged();
    partial void OnShipmentModeChanging(string value);
    partial void OnShipmentModeChanged();
    partial void OnDeliveryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDeliveryDateChanged();
    partial void OnContractPersonChanging(string value);
    partial void OnContractPersonChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnPrintTypeChanging(string value);
    partial void OnPrintTypeChanged();
    partial void OnPOStateChanging(string value);
    partial void OnPOStateChanged();
    partial void OnReadyDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReadyDateChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnSupplierUnitChanging(string value);
    partial void OnSupplierUnitChanged();
    #endregion
		
		public SampleOrderPO()
		{
			this._SampleOrderPODetails = new EntitySet<SampleOrderPODetail>(new Action<SampleOrderPODetail>(this.attach_SampleOrderPODetails), new Action<SampleOrderPODetail>(this.detach_SampleOrderPODetails));
			OnCreated();
		}
		
		[Column(Storage="_SampleOrderPONo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SampleOrderPONo
		{
			get
			{
				return this._SampleOrderPONo;
			}
			set
			{
				if ((this._SampleOrderPONo != value))
				{
					this.OnSampleOrderPONoChanging(value);
					this.SendPropertyChanging();
					this._SampleOrderPONo = value;
					this.SendPropertyChanged("SampleOrderPONo");
					this.OnSampleOrderPONoChanged();
				}
			}
		}
		
		[Column(Storage="_CommodityCode", DbType="VarChar(50)")]
		public string CommodityCode
		{
			get
			{
				return this._CommodityCode;
			}
			set
			{
				if ((this._CommodityCode != value))
				{
					this.OnCommodityCodeChanging(value);
					this.SendPropertyChanging();
					this._CommodityCode = value;
					this.SendPropertyChanged("CommodityCode");
					this.OnCommodityCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PO_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> PO_Date
		{
			get
			{
				return this._PO_Date;
			}
			set
			{
				if ((this._PO_Date != value))
				{
					this.OnPO_DateChanging(value);
					this.SendPropertyChanging();
					this._PO_Date = value;
					this.SendPropertyChanged("PO_Date");
					this.OnPO_DateChanged();
				}
			}
		}
		
		[Column(Storage="_ShipmentMode", DbType="VarChar(50)")]
		public string ShipmentMode
		{
			get
			{
				return this._ShipmentMode;
			}
			set
			{
				if ((this._ShipmentMode != value))
				{
					this.OnShipmentModeChanging(value);
					this.SendPropertyChanging();
					this._ShipmentMode = value;
					this.SendPropertyChanged("ShipmentMode");
					this.OnShipmentModeChanged();
				}
			}
		}
		
		[Column(Storage="_DeliveryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeliveryDate
		{
			get
			{
				return this._DeliveryDate;
			}
			set
			{
				if ((this._DeliveryDate != value))
				{
					this.OnDeliveryDateChanging(value);
					this.SendPropertyChanging();
					this._DeliveryDate = value;
					this.SendPropertyChanged("DeliveryDate");
					this.OnDeliveryDateChanged();
				}
			}
		}
		
		[Column(Storage="_ContractPerson", DbType="VarChar(50)")]
		public string ContractPerson
		{
			get
			{
				return this._ContractPerson;
			}
			set
			{
				if ((this._ContractPerson != value))
				{
					this.OnContractPersonChanging(value);
					this.SendPropertyChanging();
					this._ContractPerson = value;
					this.SendPropertyChanged("ContractPerson");
					this.OnContractPersonChanged();
				}
			}
		}
		
		[Column(Storage="_Customer", DbType="VarChar(50)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_PrintType", DbType="VarChar(50)")]
		public string PrintType
		{
			get
			{
				return this._PrintType;
			}
			set
			{
				if ((this._PrintType != value))
				{
					this.OnPrintTypeChanging(value);
					this.SendPropertyChanging();
					this._PrintType = value;
					this.SendPropertyChanged("PrintType");
					this.OnPrintTypeChanged();
				}
			}
		}
		
		[Column(Storage="_POState", DbType="VarChar(50)")]
		public string POState
		{
			get
			{
				return this._POState;
			}
			set
			{
				if ((this._POState != value))
				{
					this.OnPOStateChanging(value);
					this.SendPropertyChanging();
					this._POState = value;
					this.SendPropertyChanged("POState");
					this.OnPOStateChanged();
				}
			}
		}
		
		[Column(Storage="_ReadyDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReadyDate
		{
			get
			{
				return this._ReadyDate;
			}
			set
			{
				if ((this._ReadyDate != value))
				{
					this.OnReadyDateChanging(value);
					this.SendPropertyChanging();
					this._ReadyDate = value;
					this.SendPropertyChanged("ReadyDate");
					this.OnReadyDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierUnit", DbType="VarChar(50)")]
		public string SupplierUnit
		{
			get
			{
				return this._SupplierUnit;
			}
			set
			{
				if ((this._SupplierUnit != value))
				{
					this.OnSupplierUnitChanging(value);
					this.SendPropertyChanging();
					this._SupplierUnit = value;
					this.SendPropertyChanged("SupplierUnit");
					this.OnSupplierUnitChanged();
				}
			}
		}
		
		[Association(Name="SampleOrderPO_SampleOrderPODetail", Storage="_SampleOrderPODetails", ThisKey="SampleOrderPONo", OtherKey="SampleOrderPONo")]
		public EntitySet<SampleOrderPODetail> SampleOrderPODetails
		{
			get
			{
				return this._SampleOrderPODetails;
			}
			set
			{
				this._SampleOrderPODetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SampleOrderPODetails(SampleOrderPODetail entity)
		{
			this.SendPropertyChanging();
			entity.SampleOrderPO = this;
		}
		
		private void detach_SampleOrderPODetails(SampleOrderPODetail entity)
		{
			this.SendPropertyChanging();
			entity.SampleOrderPO = null;
		}
	}
	
	[Table(Name="dbo.SampleOrderPODetail")]
	public partial class SampleOrderPODetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Color;
		
		private string _Cup;
		
		private string _Size;
		
		private System.Nullable<decimal> _Qty;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _Amount;
		
		private string _SampleOrderPONo;
		
		private long _ID;
		
		private EntityRef<SampleOrderPO> _SampleOrderPO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnCupChanging(string value);
    partial void OnCupChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnQtyChanging(System.Nullable<decimal> value);
    partial void OnQtyChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnSampleOrderPONoChanging(string value);
    partial void OnSampleOrderPONoChanged();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    #endregion
		
		public SampleOrderPODetail()
		{
			this._SampleOrderPO = default(EntityRef<SampleOrderPO>);
			OnCreated();
		}
		
		[Column(Storage="_Color", DbType="VarChar(50)")]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Cup", DbType="VarChar(50)")]
		public string Cup
		{
			get
			{
				return this._Cup;
			}
			set
			{
				if ((this._Cup != value))
				{
					this.OnCupChanging(value);
					this.SendPropertyChanging();
					this._Cup = value;
					this.SendPropertyChanged("Cup");
					this.OnCupChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Decimal(15,2)")]
		public System.Nullable<decimal> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(15,6)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_SampleOrderPONo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SampleOrderPONo
		{
			get
			{
				return this._SampleOrderPONo;
			}
			set
			{
				if ((this._SampleOrderPONo != value))
				{
					if (this._SampleOrderPO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSampleOrderPONoChanging(value);
					this.SendPropertyChanging();
					this._SampleOrderPONo = value;
					this.SendPropertyChanged("SampleOrderPONo");
					this.OnSampleOrderPONoChanged();
				}
			}
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="SampleOrderPO_SampleOrderPODetail", Storage="_SampleOrderPO", ThisKey="SampleOrderPONo", OtherKey="SampleOrderPONo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SampleOrderPO SampleOrderPO
		{
			get
			{
				return this._SampleOrderPO.Entity;
			}
			set
			{
				SampleOrderPO previousValue = this._SampleOrderPO.Entity;
				if (((previousValue != value) 
							|| (this._SampleOrderPO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SampleOrderPO.Entity = null;
						previousValue.SampleOrderPODetails.Remove(this);
					}
					this._SampleOrderPO.Entity = value;
					if ((value != null))
					{
						value.SampleOrderPODetails.Add(this);
						this._SampleOrderPONo = value.SampleOrderPONo;
					}
					else
					{
						this._SampleOrderPONo = default(string);
					}
					this.SendPropertyChanged("SampleOrderPO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Spec")]
	public partial class Spec : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _ColorCategory;
		
		private string _SupplierWidth;
		
		private string _Supplier_UsableWidth;
		
		private System.Nullable<decimal> _Supplier_Weight_GmSqm;
		
		private System.Nullable<decimal> _Supplier_Weight_GmSqm_Per;
		
		private System.Nullable<decimal> _Supplier_Weight_LinearMeter;
		
		private System.Nullable<decimal> _Supplier_Weight_LinearMeter_Per;
		
		private System.Nullable<decimal> _Supplier_Relaxation_Length_Per;
		
		private System.Nullable<decimal> _Supplier_Relaxation_Width_Per;
		
		private System.Nullable<decimal> _Supplier_Pattern_Length;
		
		private System.Nullable<decimal> _Supplier_Pattern_Length_Per;
		
		private System.Nullable<decimal> _Supplier_Pattern_Width;
		
		private System.Nullable<decimal> _Supplier_Pattern_Width_Per;
		
		private System.Nullable<decimal> _Supplier_Elongation_Length;
		
		private System.Nullable<decimal> _Supplier_Elongation_Length_Per;
		
		private System.Nullable<decimal> _Supplier_Elongation_Width;
		
		private System.Nullable<decimal> _Supplier_Elongation_Width_Per;
		
		private System.Nullable<decimal> _Supplier_Shrinkage_Length_Washing;
		
		private System.Nullable<decimal> _Supplier_Shrinkage_Width_Washing;
		
		private System.Nullable<decimal> _Supplier_Shrinkage_Length_Ironing;
		
		private System.Nullable<decimal> _Supplier_Shrinkage_Width_Ironing;
		
		private System.Nullable<decimal> _Supplier_Shrinkage_ColorFasteness;
		
		private System.Nullable<decimal> _Supplier_Conditions;
		
		private string _PH_UsableWidth;
		
		private System.Nullable<decimal> _PH_Weight_GmSqm;
		
		private System.Nullable<decimal> _PH_Weight_GmSqm_Per;
		
		private System.Nullable<decimal> _PH_Weight_LinearMeter;
		
		private System.Nullable<decimal> _PH_Weight_LinearMeter_Per;
		
		private System.Nullable<decimal> _PH_Relaxation_Length_Per;
		
		private System.Nullable<decimal> _PH_Relaxation_Width_Per;
		
		private System.Nullable<decimal> _PH_Pattern_Length;
		
		private System.Nullable<decimal> _PH_Pattern_Length_Per;
		
		private System.Nullable<decimal> _PH_Pattern_Width;
		
		private System.Nullable<decimal> _PH_Pattern_Width_Per;
		
		private System.Nullable<decimal> _PH_Elongation_Length;
		
		private System.Nullable<decimal> _PH_Elongation_Length_Per;
		
		private System.Nullable<decimal> _PH_Elongation_Width;
		
		private System.Nullable<decimal> _PH_Elongation_Width_Per;
		
		private System.Nullable<decimal> _PH_Shrinkage_Length_Washing;
		
		private System.Nullable<decimal> _PH_Shrinkage_Width_Washing;
		
		private System.Nullable<decimal> _PH_Shrinkage_Length_Ironing;
		
		private System.Nullable<decimal> _PH_Shrinkage_Width_Ironing;
		
		private System.Nullable<decimal> _PH_Shrinkage_ColorFasteness;
		
		private System.Nullable<decimal> _PH_Conditions;
		
		private System.Nullable<int> _Oeko;
		
		private string _Temperature;
		
		private string _Pressure;
		
		private string _Timing;
		
		private string _CoolingTime;
		
		private string _Tester;
		
		private string _Pretreatment;
		
		private string _EffectiveDate;
		
		private string _Description;
		
		private string _UsableWidth1;
		
		private string _UsableWidth2;
		
		private string _Width;
		
		private string _Width2;
		
		private string _Weight;
		
		private string _Weight2;
		
		private string _Weight3;
		
		private string _ShrinkageLenth;
		
		private string _ShrinkageLenth2;
		
		private string _ShrinkageLenth3;
		
		private string _ShrinkageWidth;
		
		private string _ShrinkageWidth2;
		
		private string _ShrinkageWidth3;
		
		private string _ConstructionWales;
		
		private string _ConstructionWales2;
		
		private string _ConstructionWales3;
		
		private string _ConstructionCourses;
		
		private string _ConstructionCourses2;
		
		private string _ConstructionCourses3;
		
		private string _ElongationEffective;
		
		private string _ElongationEffective2;
		
		private string _ElongationLength;
		
		private string _ElongationLength2;
		
		private string _ElongationWidth;
		
		private string _ElongationWidth2;
		
		private string _ModulusLenght;
		
		private string _ModulusLenght2;
		
		private string _ModulusLenght3;
		
		private string _ModulusLenght4;
		
		private string _ModulusLenght5;
		
		private string _ModulusLenght6;
		
		private string _ModulusLenght7;
		
		private string _ModulusLenght8;
		
		private string _ModulusWith;
		
		private string _ModulusWith2;
		
		private string _ModulusWith3;
		
		private string _ModulusWith4;
		
		private string _ModulusWith5;
		
		private string _ModulusWith6;
		
		private string _ModulusWith7;
		
		private string _ModulusWith8;
		
		private string _ModulusTest;
		
		private string _ResidualLenght;
		
		private string _ResidualLenght2;
		
		private string _ResidualWidth;
		
		private string _ResidualWidth2;
		
		private string _RecoveryLength;
		
		private string _RecoveryLength2;
		
		private string _RecoveryWidth;
		
		private string _RecoveryWidth2;
		
		private string _MIType;
		
		private string _MIGauge;
		
		private string _MIOfBar;
		
		private string _MIWidth;
		
		private string _Compostion;
		
		private EntitySet<TechInforTest> _TechInforTests;
		
		private EntitySet<TechnicalInformation> _TechnicalInformations;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnColorCategoryChanging(string value);
    partial void OnColorCategoryChanged();
    partial void OnSupplierWidthChanging(string value);
    partial void OnSupplierWidthChanged();
    partial void OnSupplier_UsableWidthChanging(string value);
    partial void OnSupplier_UsableWidthChanged();
    partial void OnSupplier_Weight_GmSqmChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Weight_GmSqmChanged();
    partial void OnSupplier_Weight_GmSqm_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Weight_GmSqm_PerChanged();
    partial void OnSupplier_Weight_LinearMeterChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Weight_LinearMeterChanged();
    partial void OnSupplier_Weight_LinearMeter_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Weight_LinearMeter_PerChanged();
    partial void OnSupplier_Relaxation_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Relaxation_Length_PerChanged();
    partial void OnSupplier_Relaxation_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Relaxation_Width_PerChanged();
    partial void OnSupplier_Pattern_LengthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Pattern_LengthChanged();
    partial void OnSupplier_Pattern_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Pattern_Length_PerChanged();
    partial void OnSupplier_Pattern_WidthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Pattern_WidthChanged();
    partial void OnSupplier_Pattern_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Pattern_Width_PerChanged();
    partial void OnSupplier_Elongation_LengthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Elongation_LengthChanged();
    partial void OnSupplier_Elongation_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Elongation_Length_PerChanged();
    partial void OnSupplier_Elongation_WidthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Elongation_WidthChanged();
    partial void OnSupplier_Elongation_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Elongation_Width_PerChanged();
    partial void OnSupplier_Shrinkage_Length_WashingChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Shrinkage_Length_WashingChanged();
    partial void OnSupplier_Shrinkage_Width_WashingChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Shrinkage_Width_WashingChanged();
    partial void OnSupplier_Shrinkage_Length_IroningChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Shrinkage_Length_IroningChanged();
    partial void OnSupplier_Shrinkage_Width_IroningChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Shrinkage_Width_IroningChanged();
    partial void OnSupplier_Shrinkage_ColorFastenessChanging(System.Nullable<decimal> value);
    partial void OnSupplier_Shrinkage_ColorFastenessChanged();
    partial void OnSupplier_ConditionsChanging(System.Nullable<decimal> value);
    partial void OnSupplier_ConditionsChanged();
    partial void OnPH_UsableWidthChanging(string value);
    partial void OnPH_UsableWidthChanged();
    partial void OnPH_Weight_GmSqmChanging(System.Nullable<decimal> value);
    partial void OnPH_Weight_GmSqmChanged();
    partial void OnPH_Weight_GmSqm_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Weight_GmSqm_PerChanged();
    partial void OnPH_Weight_LinearMeterChanging(System.Nullable<decimal> value);
    partial void OnPH_Weight_LinearMeterChanged();
    partial void OnPH_Weight_LinearMeter_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Weight_LinearMeter_PerChanged();
    partial void OnPH_Relaxation_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Relaxation_Length_PerChanged();
    partial void OnPH_Relaxation_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Relaxation_Width_PerChanged();
    partial void OnPH_Pattern_LengthChanging(System.Nullable<decimal> value);
    partial void OnPH_Pattern_LengthChanged();
    partial void OnPH_Pattern_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Pattern_Length_PerChanged();
    partial void OnPH_Pattern_WidthChanging(System.Nullable<decimal> value);
    partial void OnPH_Pattern_WidthChanged();
    partial void OnPH_Pattern_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Pattern_Width_PerChanged();
    partial void OnPH_Elongation_LengthChanging(System.Nullable<decimal> value);
    partial void OnPH_Elongation_LengthChanged();
    partial void OnPH_Elongation_Length_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Elongation_Length_PerChanged();
    partial void OnPH_Elongation_WidthChanging(System.Nullable<decimal> value);
    partial void OnPH_Elongation_WidthChanged();
    partial void OnPH_Elongation_Width_PerChanging(System.Nullable<decimal> value);
    partial void OnPH_Elongation_Width_PerChanged();
    partial void OnPH_Shrinkage_Length_WashingChanging(System.Nullable<decimal> value);
    partial void OnPH_Shrinkage_Length_WashingChanged();
    partial void OnPH_Shrinkage_Width_WashingChanging(System.Nullable<decimal> value);
    partial void OnPH_Shrinkage_Width_WashingChanged();
    partial void OnPH_Shrinkage_Length_IroningChanging(System.Nullable<decimal> value);
    partial void OnPH_Shrinkage_Length_IroningChanged();
    partial void OnPH_Shrinkage_Width_IroningChanging(System.Nullable<decimal> value);
    partial void OnPH_Shrinkage_Width_IroningChanged();
    partial void OnPH_Shrinkage_ColorFastenessChanging(System.Nullable<decimal> value);
    partial void OnPH_Shrinkage_ColorFastenessChanged();
    partial void OnPH_ConditionsChanging(System.Nullable<decimal> value);
    partial void OnPH_ConditionsChanged();
    partial void OnOekoChanging(System.Nullable<int> value);
    partial void OnOekoChanged();
    partial void OnTemperatureChanging(string value);
    partial void OnTemperatureChanged();
    partial void OnPressureChanging(string value);
    partial void OnPressureChanged();
    partial void OnTimingChanging(string value);
    partial void OnTimingChanged();
    partial void OnCoolingTimeChanging(string value);
    partial void OnCoolingTimeChanged();
    partial void OnTesterChanging(string value);
    partial void OnTesterChanged();
    partial void OnPretreatmentChanging(string value);
    partial void OnPretreatmentChanged();
    partial void OnEffectiveDateChanging(string value);
    partial void OnEffectiveDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUsableWidth1Changing(string value);
    partial void OnUsableWidth1Changed();
    partial void OnUsableWidth2Changing(string value);
    partial void OnUsableWidth2Changed();
    partial void OnWidthChanging(string value);
    partial void OnWidthChanged();
    partial void OnWidth2Changing(string value);
    partial void OnWidth2Changed();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    partial void OnWeight2Changing(string value);
    partial void OnWeight2Changed();
    partial void OnWeight3Changing(string value);
    partial void OnWeight3Changed();
    partial void OnShrinkageLenthChanging(string value);
    partial void OnShrinkageLenthChanged();
    partial void OnShrinkageLenth2Changing(string value);
    partial void OnShrinkageLenth2Changed();
    partial void OnShrinkageLenth3Changing(string value);
    partial void OnShrinkageLenth3Changed();
    partial void OnShrinkageWidthChanging(string value);
    partial void OnShrinkageWidthChanged();
    partial void OnShrinkageWidth2Changing(string value);
    partial void OnShrinkageWidth2Changed();
    partial void OnShrinkageWidth3Changing(string value);
    partial void OnShrinkageWidth3Changed();
    partial void OnConstructionWalesChanging(string value);
    partial void OnConstructionWalesChanged();
    partial void OnConstructionWales2Changing(string value);
    partial void OnConstructionWales2Changed();
    partial void OnConstructionWales3Changing(string value);
    partial void OnConstructionWales3Changed();
    partial void OnConstructionCoursesChanging(string value);
    partial void OnConstructionCoursesChanged();
    partial void OnConstructionCourses2Changing(string value);
    partial void OnConstructionCourses2Changed();
    partial void OnConstructionCourses3Changing(string value);
    partial void OnConstructionCourses3Changed();
    partial void OnElongationEffectiveChanging(string value);
    partial void OnElongationEffectiveChanged();
    partial void OnElongationEffective2Changing(string value);
    partial void OnElongationEffective2Changed();
    partial void OnElongationLengthChanging(string value);
    partial void OnElongationLengthChanged();
    partial void OnElongationLength2Changing(string value);
    partial void OnElongationLength2Changed();
    partial void OnElongationWidthChanging(string value);
    partial void OnElongationWidthChanged();
    partial void OnElongationWidth2Changing(string value);
    partial void OnElongationWidth2Changed();
    partial void OnModulusLenghtChanging(string value);
    partial void OnModulusLenghtChanged();
    partial void OnModulusLenght2Changing(string value);
    partial void OnModulusLenght2Changed();
    partial void OnModulusLenght3Changing(string value);
    partial void OnModulusLenght3Changed();
    partial void OnModulusLenght4Changing(string value);
    partial void OnModulusLenght4Changed();
    partial void OnModulusLenght5Changing(string value);
    partial void OnModulusLenght5Changed();
    partial void OnModulusLenght6Changing(string value);
    partial void OnModulusLenght6Changed();
    partial void OnModulusLenght7Changing(string value);
    partial void OnModulusLenght7Changed();
    partial void OnModulusLenght8Changing(string value);
    partial void OnModulusLenght8Changed();
    partial void OnModulusWithChanging(string value);
    partial void OnModulusWithChanged();
    partial void OnModulusWith2Changing(string value);
    partial void OnModulusWith2Changed();
    partial void OnModulusWith3Changing(string value);
    partial void OnModulusWith3Changed();
    partial void OnModulusWith4Changing(string value);
    partial void OnModulusWith4Changed();
    partial void OnModulusWith5Changing(string value);
    partial void OnModulusWith5Changed();
    partial void OnModulusWith6Changing(string value);
    partial void OnModulusWith6Changed();
    partial void OnModulusWith7Changing(string value);
    partial void OnModulusWith7Changed();
    partial void OnModulusWith8Changing(string value);
    partial void OnModulusWith8Changed();
    partial void OnModulusTestChanging(string value);
    partial void OnModulusTestChanged();
    partial void OnResidualLenghtChanging(string value);
    partial void OnResidualLenghtChanged();
    partial void OnResidualLenght2Changing(string value);
    partial void OnResidualLenght2Changed();
    partial void OnResidualWidthChanging(string value);
    partial void OnResidualWidthChanged();
    partial void OnResidualWidth2Changing(string value);
    partial void OnResidualWidth2Changed();
    partial void OnRecoveryLengthChanging(string value);
    partial void OnRecoveryLengthChanged();
    partial void OnRecoveryLength2Changing(string value);
    partial void OnRecoveryLength2Changed();
    partial void OnRecoveryWidthChanging(string value);
    partial void OnRecoveryWidthChanged();
    partial void OnRecoveryWidth2Changing(string value);
    partial void OnRecoveryWidth2Changed();
    partial void OnMITypeChanging(string value);
    partial void OnMITypeChanged();
    partial void OnMIGaugeChanging(string value);
    partial void OnMIGaugeChanged();
    partial void OnMIOfBarChanging(string value);
    partial void OnMIOfBarChanged();
    partial void OnMIWidthChanging(string value);
    partial void OnMIWidthChanged();
    partial void OnCompostionChanging(string value);
    partial void OnCompostionChanged();
    #endregion
		
		public Spec()
		{
			this._TechInforTests = new EntitySet<TechInforTest>(new Action<TechInforTest>(this.attach_TechInforTests), new Action<TechInforTest>(this.detach_TechInforTests));
			this._TechnicalInformations = new EntitySet<TechnicalInformation>(new Action<TechnicalInformation>(this.attach_TechnicalInformations), new Action<TechnicalInformation>(this.detach_TechnicalInformations));
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ColorCategory
		{
			get
			{
				return this._ColorCategory;
			}
			set
			{
				if ((this._ColorCategory != value))
				{
					this.OnColorCategoryChanging(value);
					this.SendPropertyChanging();
					this._ColorCategory = value;
					this.SendPropertyChanged("ColorCategory");
					this.OnColorCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierWidth", DbType="VarChar(50)")]
		public string SupplierWidth
		{
			get
			{
				return this._SupplierWidth;
			}
			set
			{
				if ((this._SupplierWidth != value))
				{
					this.OnSupplierWidthChanging(value);
					this.SendPropertyChanging();
					this._SupplierWidth = value;
					this.SendPropertyChanged("SupplierWidth");
					this.OnSupplierWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_UsableWidth", DbType="VarChar(50)")]
		public string Supplier_UsableWidth
		{
			get
			{
				return this._Supplier_UsableWidth;
			}
			set
			{
				if ((this._Supplier_UsableWidth != value))
				{
					this.OnSupplier_UsableWidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_UsableWidth = value;
					this.SendPropertyChanged("Supplier_UsableWidth");
					this.OnSupplier_UsableWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Weight_GmSqm", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Weight_GmSqm
		{
			get
			{
				return this._Supplier_Weight_GmSqm;
			}
			set
			{
				if ((this._Supplier_Weight_GmSqm != value))
				{
					this.OnSupplier_Weight_GmSqmChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Weight_GmSqm = value;
					this.SendPropertyChanged("Supplier_Weight_GmSqm");
					this.OnSupplier_Weight_GmSqmChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Weight_GmSqm_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Weight_GmSqm_Per
		{
			get
			{
				return this._Supplier_Weight_GmSqm_Per;
			}
			set
			{
				if ((this._Supplier_Weight_GmSqm_Per != value))
				{
					this.OnSupplier_Weight_GmSqm_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Weight_GmSqm_Per = value;
					this.SendPropertyChanged("Supplier_Weight_GmSqm_Per");
					this.OnSupplier_Weight_GmSqm_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Weight_LinearMeter", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Weight_LinearMeter
		{
			get
			{
				return this._Supplier_Weight_LinearMeter;
			}
			set
			{
				if ((this._Supplier_Weight_LinearMeter != value))
				{
					this.OnSupplier_Weight_LinearMeterChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Weight_LinearMeter = value;
					this.SendPropertyChanged("Supplier_Weight_LinearMeter");
					this.OnSupplier_Weight_LinearMeterChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Weight_LinearMeter_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Weight_LinearMeter_Per
		{
			get
			{
				return this._Supplier_Weight_LinearMeter_Per;
			}
			set
			{
				if ((this._Supplier_Weight_LinearMeter_Per != value))
				{
					this.OnSupplier_Weight_LinearMeter_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Weight_LinearMeter_Per = value;
					this.SendPropertyChanged("Supplier_Weight_LinearMeter_Per");
					this.OnSupplier_Weight_LinearMeter_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Relaxation_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Relaxation_Length_Per
		{
			get
			{
				return this._Supplier_Relaxation_Length_Per;
			}
			set
			{
				if ((this._Supplier_Relaxation_Length_Per != value))
				{
					this.OnSupplier_Relaxation_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Relaxation_Length_Per = value;
					this.SendPropertyChanged("Supplier_Relaxation_Length_Per");
					this.OnSupplier_Relaxation_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Relaxation_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Relaxation_Width_Per
		{
			get
			{
				return this._Supplier_Relaxation_Width_Per;
			}
			set
			{
				if ((this._Supplier_Relaxation_Width_Per != value))
				{
					this.OnSupplier_Relaxation_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Relaxation_Width_Per = value;
					this.SendPropertyChanged("Supplier_Relaxation_Width_Per");
					this.OnSupplier_Relaxation_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Pattern_Length", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Pattern_Length
		{
			get
			{
				return this._Supplier_Pattern_Length;
			}
			set
			{
				if ((this._Supplier_Pattern_Length != value))
				{
					this.OnSupplier_Pattern_LengthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Pattern_Length = value;
					this.SendPropertyChanged("Supplier_Pattern_Length");
					this.OnSupplier_Pattern_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Pattern_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Pattern_Length_Per
		{
			get
			{
				return this._Supplier_Pattern_Length_Per;
			}
			set
			{
				if ((this._Supplier_Pattern_Length_Per != value))
				{
					this.OnSupplier_Pattern_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Pattern_Length_Per = value;
					this.SendPropertyChanged("Supplier_Pattern_Length_Per");
					this.OnSupplier_Pattern_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Pattern_Width", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Pattern_Width
		{
			get
			{
				return this._Supplier_Pattern_Width;
			}
			set
			{
				if ((this._Supplier_Pattern_Width != value))
				{
					this.OnSupplier_Pattern_WidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Pattern_Width = value;
					this.SendPropertyChanged("Supplier_Pattern_Width");
					this.OnSupplier_Pattern_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Pattern_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Pattern_Width_Per
		{
			get
			{
				return this._Supplier_Pattern_Width_Per;
			}
			set
			{
				if ((this._Supplier_Pattern_Width_Per != value))
				{
					this.OnSupplier_Pattern_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Pattern_Width_Per = value;
					this.SendPropertyChanged("Supplier_Pattern_Width_Per");
					this.OnSupplier_Pattern_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Elongation_Length", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Elongation_Length
		{
			get
			{
				return this._Supplier_Elongation_Length;
			}
			set
			{
				if ((this._Supplier_Elongation_Length != value))
				{
					this.OnSupplier_Elongation_LengthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Elongation_Length = value;
					this.SendPropertyChanged("Supplier_Elongation_Length");
					this.OnSupplier_Elongation_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Elongation_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Elongation_Length_Per
		{
			get
			{
				return this._Supplier_Elongation_Length_Per;
			}
			set
			{
				if ((this._Supplier_Elongation_Length_Per != value))
				{
					this.OnSupplier_Elongation_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Elongation_Length_Per = value;
					this.SendPropertyChanged("Supplier_Elongation_Length_Per");
					this.OnSupplier_Elongation_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Elongation_Width", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Elongation_Width
		{
			get
			{
				return this._Supplier_Elongation_Width;
			}
			set
			{
				if ((this._Supplier_Elongation_Width != value))
				{
					this.OnSupplier_Elongation_WidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Elongation_Width = value;
					this.SendPropertyChanged("Supplier_Elongation_Width");
					this.OnSupplier_Elongation_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Elongation_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Elongation_Width_Per
		{
			get
			{
				return this._Supplier_Elongation_Width_Per;
			}
			set
			{
				if ((this._Supplier_Elongation_Width_Per != value))
				{
					this.OnSupplier_Elongation_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Elongation_Width_Per = value;
					this.SendPropertyChanged("Supplier_Elongation_Width_Per");
					this.OnSupplier_Elongation_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Shrinkage_Length_Washing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Shrinkage_Length_Washing
		{
			get
			{
				return this._Supplier_Shrinkage_Length_Washing;
			}
			set
			{
				if ((this._Supplier_Shrinkage_Length_Washing != value))
				{
					this.OnSupplier_Shrinkage_Length_WashingChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Shrinkage_Length_Washing = value;
					this.SendPropertyChanged("Supplier_Shrinkage_Length_Washing");
					this.OnSupplier_Shrinkage_Length_WashingChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Shrinkage_Width_Washing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Shrinkage_Width_Washing
		{
			get
			{
				return this._Supplier_Shrinkage_Width_Washing;
			}
			set
			{
				if ((this._Supplier_Shrinkage_Width_Washing != value))
				{
					this.OnSupplier_Shrinkage_Width_WashingChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Shrinkage_Width_Washing = value;
					this.SendPropertyChanged("Supplier_Shrinkage_Width_Washing");
					this.OnSupplier_Shrinkage_Width_WashingChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Shrinkage_Length_Ironing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Shrinkage_Length_Ironing
		{
			get
			{
				return this._Supplier_Shrinkage_Length_Ironing;
			}
			set
			{
				if ((this._Supplier_Shrinkage_Length_Ironing != value))
				{
					this.OnSupplier_Shrinkage_Length_IroningChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Shrinkage_Length_Ironing = value;
					this.SendPropertyChanged("Supplier_Shrinkage_Length_Ironing");
					this.OnSupplier_Shrinkage_Length_IroningChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Shrinkage_Width_Ironing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Shrinkage_Width_Ironing
		{
			get
			{
				return this._Supplier_Shrinkage_Width_Ironing;
			}
			set
			{
				if ((this._Supplier_Shrinkage_Width_Ironing != value))
				{
					this.OnSupplier_Shrinkage_Width_IroningChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Shrinkage_Width_Ironing = value;
					this.SendPropertyChanged("Supplier_Shrinkage_Width_Ironing");
					this.OnSupplier_Shrinkage_Width_IroningChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Shrinkage_ColorFasteness", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Shrinkage_ColorFasteness
		{
			get
			{
				return this._Supplier_Shrinkage_ColorFasteness;
			}
			set
			{
				if ((this._Supplier_Shrinkage_ColorFasteness != value))
				{
					this.OnSupplier_Shrinkage_ColorFastenessChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Shrinkage_ColorFasteness = value;
					this.SendPropertyChanged("Supplier_Shrinkage_ColorFasteness");
					this.OnSupplier_Shrinkage_ColorFastenessChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Conditions", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Supplier_Conditions
		{
			get
			{
				return this._Supplier_Conditions;
			}
			set
			{
				if ((this._Supplier_Conditions != value))
				{
					this.OnSupplier_ConditionsChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Conditions = value;
					this.SendPropertyChanged("Supplier_Conditions");
					this.OnSupplier_ConditionsChanged();
				}
			}
		}
		
		[Column(Storage="_PH_UsableWidth", DbType="VarChar(20)")]
		public string PH_UsableWidth
		{
			get
			{
				return this._PH_UsableWidth;
			}
			set
			{
				if ((this._PH_UsableWidth != value))
				{
					this.OnPH_UsableWidthChanging(value);
					this.SendPropertyChanging();
					this._PH_UsableWidth = value;
					this.SendPropertyChanged("PH_UsableWidth");
					this.OnPH_UsableWidthChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Weight_GmSqm", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Weight_GmSqm
		{
			get
			{
				return this._PH_Weight_GmSqm;
			}
			set
			{
				if ((this._PH_Weight_GmSqm != value))
				{
					this.OnPH_Weight_GmSqmChanging(value);
					this.SendPropertyChanging();
					this._PH_Weight_GmSqm = value;
					this.SendPropertyChanged("PH_Weight_GmSqm");
					this.OnPH_Weight_GmSqmChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Weight_GmSqm_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Weight_GmSqm_Per
		{
			get
			{
				return this._PH_Weight_GmSqm_Per;
			}
			set
			{
				if ((this._PH_Weight_GmSqm_Per != value))
				{
					this.OnPH_Weight_GmSqm_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Weight_GmSqm_Per = value;
					this.SendPropertyChanged("PH_Weight_GmSqm_Per");
					this.OnPH_Weight_GmSqm_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Weight_LinearMeter", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Weight_LinearMeter
		{
			get
			{
				return this._PH_Weight_LinearMeter;
			}
			set
			{
				if ((this._PH_Weight_LinearMeter != value))
				{
					this.OnPH_Weight_LinearMeterChanging(value);
					this.SendPropertyChanging();
					this._PH_Weight_LinearMeter = value;
					this.SendPropertyChanged("PH_Weight_LinearMeter");
					this.OnPH_Weight_LinearMeterChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Weight_LinearMeter_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Weight_LinearMeter_Per
		{
			get
			{
				return this._PH_Weight_LinearMeter_Per;
			}
			set
			{
				if ((this._PH_Weight_LinearMeter_Per != value))
				{
					this.OnPH_Weight_LinearMeter_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Weight_LinearMeter_Per = value;
					this.SendPropertyChanged("PH_Weight_LinearMeter_Per");
					this.OnPH_Weight_LinearMeter_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Relaxation_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Relaxation_Length_Per
		{
			get
			{
				return this._PH_Relaxation_Length_Per;
			}
			set
			{
				if ((this._PH_Relaxation_Length_Per != value))
				{
					this.OnPH_Relaxation_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Relaxation_Length_Per = value;
					this.SendPropertyChanged("PH_Relaxation_Length_Per");
					this.OnPH_Relaxation_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Relaxation_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Relaxation_Width_Per
		{
			get
			{
				return this._PH_Relaxation_Width_Per;
			}
			set
			{
				if ((this._PH_Relaxation_Width_Per != value))
				{
					this.OnPH_Relaxation_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Relaxation_Width_Per = value;
					this.SendPropertyChanged("PH_Relaxation_Width_Per");
					this.OnPH_Relaxation_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Pattern_Length", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Pattern_Length
		{
			get
			{
				return this._PH_Pattern_Length;
			}
			set
			{
				if ((this._PH_Pattern_Length != value))
				{
					this.OnPH_Pattern_LengthChanging(value);
					this.SendPropertyChanging();
					this._PH_Pattern_Length = value;
					this.SendPropertyChanged("PH_Pattern_Length");
					this.OnPH_Pattern_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Pattern_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Pattern_Length_Per
		{
			get
			{
				return this._PH_Pattern_Length_Per;
			}
			set
			{
				if ((this._PH_Pattern_Length_Per != value))
				{
					this.OnPH_Pattern_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Pattern_Length_Per = value;
					this.SendPropertyChanged("PH_Pattern_Length_Per");
					this.OnPH_Pattern_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Pattern_Width", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Pattern_Width
		{
			get
			{
				return this._PH_Pattern_Width;
			}
			set
			{
				if ((this._PH_Pattern_Width != value))
				{
					this.OnPH_Pattern_WidthChanging(value);
					this.SendPropertyChanging();
					this._PH_Pattern_Width = value;
					this.SendPropertyChanged("PH_Pattern_Width");
					this.OnPH_Pattern_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Pattern_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Pattern_Width_Per
		{
			get
			{
				return this._PH_Pattern_Width_Per;
			}
			set
			{
				if ((this._PH_Pattern_Width_Per != value))
				{
					this.OnPH_Pattern_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Pattern_Width_Per = value;
					this.SendPropertyChanged("PH_Pattern_Width_Per");
					this.OnPH_Pattern_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Elongation_Length", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Elongation_Length
		{
			get
			{
				return this._PH_Elongation_Length;
			}
			set
			{
				if ((this._PH_Elongation_Length != value))
				{
					this.OnPH_Elongation_LengthChanging(value);
					this.SendPropertyChanging();
					this._PH_Elongation_Length = value;
					this.SendPropertyChanged("PH_Elongation_Length");
					this.OnPH_Elongation_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Elongation_Length_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Elongation_Length_Per
		{
			get
			{
				return this._PH_Elongation_Length_Per;
			}
			set
			{
				if ((this._PH_Elongation_Length_Per != value))
				{
					this.OnPH_Elongation_Length_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Elongation_Length_Per = value;
					this.SendPropertyChanged("PH_Elongation_Length_Per");
					this.OnPH_Elongation_Length_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Elongation_Width", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Elongation_Width
		{
			get
			{
				return this._PH_Elongation_Width;
			}
			set
			{
				if ((this._PH_Elongation_Width != value))
				{
					this.OnPH_Elongation_WidthChanging(value);
					this.SendPropertyChanging();
					this._PH_Elongation_Width = value;
					this.SendPropertyChanged("PH_Elongation_Width");
					this.OnPH_Elongation_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Elongation_Width_Per", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Elongation_Width_Per
		{
			get
			{
				return this._PH_Elongation_Width_Per;
			}
			set
			{
				if ((this._PH_Elongation_Width_Per != value))
				{
					this.OnPH_Elongation_Width_PerChanging(value);
					this.SendPropertyChanging();
					this._PH_Elongation_Width_Per = value;
					this.SendPropertyChanged("PH_Elongation_Width_Per");
					this.OnPH_Elongation_Width_PerChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Shrinkage_Length_Washing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Shrinkage_Length_Washing
		{
			get
			{
				return this._PH_Shrinkage_Length_Washing;
			}
			set
			{
				if ((this._PH_Shrinkage_Length_Washing != value))
				{
					this.OnPH_Shrinkage_Length_WashingChanging(value);
					this.SendPropertyChanging();
					this._PH_Shrinkage_Length_Washing = value;
					this.SendPropertyChanged("PH_Shrinkage_Length_Washing");
					this.OnPH_Shrinkage_Length_WashingChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Shrinkage_Width_Washing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Shrinkage_Width_Washing
		{
			get
			{
				return this._PH_Shrinkage_Width_Washing;
			}
			set
			{
				if ((this._PH_Shrinkage_Width_Washing != value))
				{
					this.OnPH_Shrinkage_Width_WashingChanging(value);
					this.SendPropertyChanging();
					this._PH_Shrinkage_Width_Washing = value;
					this.SendPropertyChanged("PH_Shrinkage_Width_Washing");
					this.OnPH_Shrinkage_Width_WashingChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Shrinkage_Length_Ironing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Shrinkage_Length_Ironing
		{
			get
			{
				return this._PH_Shrinkage_Length_Ironing;
			}
			set
			{
				if ((this._PH_Shrinkage_Length_Ironing != value))
				{
					this.OnPH_Shrinkage_Length_IroningChanging(value);
					this.SendPropertyChanging();
					this._PH_Shrinkage_Length_Ironing = value;
					this.SendPropertyChanged("PH_Shrinkage_Length_Ironing");
					this.OnPH_Shrinkage_Length_IroningChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Shrinkage_Width_Ironing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Shrinkage_Width_Ironing
		{
			get
			{
				return this._PH_Shrinkage_Width_Ironing;
			}
			set
			{
				if ((this._PH_Shrinkage_Width_Ironing != value))
				{
					this.OnPH_Shrinkage_Width_IroningChanging(value);
					this.SendPropertyChanging();
					this._PH_Shrinkage_Width_Ironing = value;
					this.SendPropertyChanged("PH_Shrinkage_Width_Ironing");
					this.OnPH_Shrinkage_Width_IroningChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Shrinkage_ColorFasteness", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Shrinkage_ColorFasteness
		{
			get
			{
				return this._PH_Shrinkage_ColorFasteness;
			}
			set
			{
				if ((this._PH_Shrinkage_ColorFasteness != value))
				{
					this.OnPH_Shrinkage_ColorFastenessChanging(value);
					this.SendPropertyChanging();
					this._PH_Shrinkage_ColorFasteness = value;
					this.SendPropertyChanged("PH_Shrinkage_ColorFasteness");
					this.OnPH_Shrinkage_ColorFastenessChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Conditions", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PH_Conditions
		{
			get
			{
				return this._PH_Conditions;
			}
			set
			{
				if ((this._PH_Conditions != value))
				{
					this.OnPH_ConditionsChanging(value);
					this.SendPropertyChanging();
					this._PH_Conditions = value;
					this.SendPropertyChanged("PH_Conditions");
					this.OnPH_ConditionsChanged();
				}
			}
		}
		
		[Column(Storage="_Oeko", DbType="Int")]
		public System.Nullable<int> Oeko
		{
			get
			{
				return this._Oeko;
			}
			set
			{
				if ((this._Oeko != value))
				{
					this.OnOekoChanging(value);
					this.SendPropertyChanging();
					this._Oeko = value;
					this.SendPropertyChanged("Oeko");
					this.OnOekoChanged();
				}
			}
		}
		
		[Column(Storage="_Temperature", DbType="VarChar(20)")]
		public string Temperature
		{
			get
			{
				return this._Temperature;
			}
			set
			{
				if ((this._Temperature != value))
				{
					this.OnTemperatureChanging(value);
					this.SendPropertyChanging();
					this._Temperature = value;
					this.SendPropertyChanged("Temperature");
					this.OnTemperatureChanged();
				}
			}
		}
		
		[Column(Storage="_Pressure", DbType="VarChar(20)")]
		public string Pressure
		{
			get
			{
				return this._Pressure;
			}
			set
			{
				if ((this._Pressure != value))
				{
					this.OnPressureChanging(value);
					this.SendPropertyChanging();
					this._Pressure = value;
					this.SendPropertyChanged("Pressure");
					this.OnPressureChanged();
				}
			}
		}
		
		[Column(Storage="_Timing", DbType="VarChar(20)")]
		public string Timing
		{
			get
			{
				return this._Timing;
			}
			set
			{
				if ((this._Timing != value))
				{
					this.OnTimingChanging(value);
					this.SendPropertyChanging();
					this._Timing = value;
					this.SendPropertyChanged("Timing");
					this.OnTimingChanged();
				}
			}
		}
		
		[Column(Storage="_CoolingTime", DbType="VarChar(20)")]
		public string CoolingTime
		{
			get
			{
				return this._CoolingTime;
			}
			set
			{
				if ((this._CoolingTime != value))
				{
					this.OnCoolingTimeChanging(value);
					this.SendPropertyChanging();
					this._CoolingTime = value;
					this.SendPropertyChanged("CoolingTime");
					this.OnCoolingTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Tester", DbType="VarChar(50)")]
		public string Tester
		{
			get
			{
				return this._Tester;
			}
			set
			{
				if ((this._Tester != value))
				{
					this.OnTesterChanging(value);
					this.SendPropertyChanging();
					this._Tester = value;
					this.SendPropertyChanged("Tester");
					this.OnTesterChanged();
				}
			}
		}
		
		[Column(Storage="_Pretreatment", DbType="VarChar(50)")]
		public string Pretreatment
		{
			get
			{
				return this._Pretreatment;
			}
			set
			{
				if ((this._Pretreatment != value))
				{
					this.OnPretreatmentChanging(value);
					this.SendPropertyChanging();
					this._Pretreatment = value;
					this.SendPropertyChanged("Pretreatment");
					this.OnPretreatmentChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveDate", DbType="VarChar(20)")]
		public string EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(20)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidth1", DbType="VarChar(20)")]
		public string UsableWidth1
		{
			get
			{
				return this._UsableWidth1;
			}
			set
			{
				if ((this._UsableWidth1 != value))
				{
					this.OnUsableWidth1Changing(value);
					this.SendPropertyChanging();
					this._UsableWidth1 = value;
					this.SendPropertyChanged("UsableWidth1");
					this.OnUsableWidth1Changed();
				}
			}
		}
		
		[Column(Storage="_UsableWidth2", DbType="VarChar(20)")]
		public string UsableWidth2
		{
			get
			{
				return this._UsableWidth2;
			}
			set
			{
				if ((this._UsableWidth2 != value))
				{
					this.OnUsableWidth2Changing(value);
					this.SendPropertyChanging();
					this._UsableWidth2 = value;
					this.SendPropertyChanged("UsableWidth2");
					this.OnUsableWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="VarChar(20)")]
		public string Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Width2", DbType="VarChar(20)")]
		public string Width2
		{
			get
			{
				return this._Width2;
			}
			set
			{
				if ((this._Width2 != value))
				{
					this.OnWidth2Changing(value);
					this.SendPropertyChanging();
					this._Width2 = value;
					this.SendPropertyChanged("Width2");
					this.OnWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="VarChar(20)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Column(Storage="_Weight2", DbType="VarChar(20)")]
		public string Weight2
		{
			get
			{
				return this._Weight2;
			}
			set
			{
				if ((this._Weight2 != value))
				{
					this.OnWeight2Changing(value);
					this.SendPropertyChanging();
					this._Weight2 = value;
					this.SendPropertyChanged("Weight2");
					this.OnWeight2Changed();
				}
			}
		}
		
		[Column(Storage="_Weight3", DbType="VarChar(20)")]
		public string Weight3
		{
			get
			{
				return this._Weight3;
			}
			set
			{
				if ((this._Weight3 != value))
				{
					this.OnWeight3Changing(value);
					this.SendPropertyChanging();
					this._Weight3 = value;
					this.SendPropertyChanged("Weight3");
					this.OnWeight3Changed();
				}
			}
		}
		
		[Column(Storage="_ShrinkageLenth", DbType="VarChar(20)")]
		public string ShrinkageLenth
		{
			get
			{
				return this._ShrinkageLenth;
			}
			set
			{
				if ((this._ShrinkageLenth != value))
				{
					this.OnShrinkageLenthChanging(value);
					this.SendPropertyChanging();
					this._ShrinkageLenth = value;
					this.SendPropertyChanged("ShrinkageLenth");
					this.OnShrinkageLenthChanged();
				}
			}
		}
		
		[Column(Storage="_ShrinkageLenth2", DbType="VarChar(20)")]
		public string ShrinkageLenth2
		{
			get
			{
				return this._ShrinkageLenth2;
			}
			set
			{
				if ((this._ShrinkageLenth2 != value))
				{
					this.OnShrinkageLenth2Changing(value);
					this.SendPropertyChanging();
					this._ShrinkageLenth2 = value;
					this.SendPropertyChanged("ShrinkageLenth2");
					this.OnShrinkageLenth2Changed();
				}
			}
		}
		
		[Column(Storage="_ShrinkageLenth3", DbType="VarChar(20)")]
		public string ShrinkageLenth3
		{
			get
			{
				return this._ShrinkageLenth3;
			}
			set
			{
				if ((this._ShrinkageLenth3 != value))
				{
					this.OnShrinkageLenth3Changing(value);
					this.SendPropertyChanging();
					this._ShrinkageLenth3 = value;
					this.SendPropertyChanged("ShrinkageLenth3");
					this.OnShrinkageLenth3Changed();
				}
			}
		}
		
		[Column(Storage="_ShrinkageWidth", DbType="VarChar(20)")]
		public string ShrinkageWidth
		{
			get
			{
				return this._ShrinkageWidth;
			}
			set
			{
				if ((this._ShrinkageWidth != value))
				{
					this.OnShrinkageWidthChanging(value);
					this.SendPropertyChanging();
					this._ShrinkageWidth = value;
					this.SendPropertyChanged("ShrinkageWidth");
					this.OnShrinkageWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ShrinkageWidth2", DbType="VarChar(20)")]
		public string ShrinkageWidth2
		{
			get
			{
				return this._ShrinkageWidth2;
			}
			set
			{
				if ((this._ShrinkageWidth2 != value))
				{
					this.OnShrinkageWidth2Changing(value);
					this.SendPropertyChanging();
					this._ShrinkageWidth2 = value;
					this.SendPropertyChanged("ShrinkageWidth2");
					this.OnShrinkageWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_ShrinkageWidth3", DbType="VarChar(20)")]
		public string ShrinkageWidth3
		{
			get
			{
				return this._ShrinkageWidth3;
			}
			set
			{
				if ((this._ShrinkageWidth3 != value))
				{
					this.OnShrinkageWidth3Changing(value);
					this.SendPropertyChanging();
					this._ShrinkageWidth3 = value;
					this.SendPropertyChanged("ShrinkageWidth3");
					this.OnShrinkageWidth3Changed();
				}
			}
		}
		
		[Column(Storage="_ConstructionWales", DbType="VarChar(20)")]
		public string ConstructionWales
		{
			get
			{
				return this._ConstructionWales;
			}
			set
			{
				if ((this._ConstructionWales != value))
				{
					this.OnConstructionWalesChanging(value);
					this.SendPropertyChanging();
					this._ConstructionWales = value;
					this.SendPropertyChanged("ConstructionWales");
					this.OnConstructionWalesChanged();
				}
			}
		}
		
		[Column(Storage="_ConstructionWales2", DbType="VarChar(20)")]
		public string ConstructionWales2
		{
			get
			{
				return this._ConstructionWales2;
			}
			set
			{
				if ((this._ConstructionWales2 != value))
				{
					this.OnConstructionWales2Changing(value);
					this.SendPropertyChanging();
					this._ConstructionWales2 = value;
					this.SendPropertyChanged("ConstructionWales2");
					this.OnConstructionWales2Changed();
				}
			}
		}
		
		[Column(Storage="_ConstructionWales3", DbType="VarChar(20)")]
		public string ConstructionWales3
		{
			get
			{
				return this._ConstructionWales3;
			}
			set
			{
				if ((this._ConstructionWales3 != value))
				{
					this.OnConstructionWales3Changing(value);
					this.SendPropertyChanging();
					this._ConstructionWales3 = value;
					this.SendPropertyChanged("ConstructionWales3");
					this.OnConstructionWales3Changed();
				}
			}
		}
		
		[Column(Storage="_ConstructionCourses", DbType="VarChar(20)")]
		public string ConstructionCourses
		{
			get
			{
				return this._ConstructionCourses;
			}
			set
			{
				if ((this._ConstructionCourses != value))
				{
					this.OnConstructionCoursesChanging(value);
					this.SendPropertyChanging();
					this._ConstructionCourses = value;
					this.SendPropertyChanged("ConstructionCourses");
					this.OnConstructionCoursesChanged();
				}
			}
		}
		
		[Column(Storage="_ConstructionCourses2", DbType="VarChar(20)")]
		public string ConstructionCourses2
		{
			get
			{
				return this._ConstructionCourses2;
			}
			set
			{
				if ((this._ConstructionCourses2 != value))
				{
					this.OnConstructionCourses2Changing(value);
					this.SendPropertyChanging();
					this._ConstructionCourses2 = value;
					this.SendPropertyChanged("ConstructionCourses2");
					this.OnConstructionCourses2Changed();
				}
			}
		}
		
		[Column(Storage="_ConstructionCourses3", DbType="VarChar(20)")]
		public string ConstructionCourses3
		{
			get
			{
				return this._ConstructionCourses3;
			}
			set
			{
				if ((this._ConstructionCourses3 != value))
				{
					this.OnConstructionCourses3Changing(value);
					this.SendPropertyChanging();
					this._ConstructionCourses3 = value;
					this.SendPropertyChanged("ConstructionCourses3");
					this.OnConstructionCourses3Changed();
				}
			}
		}
		
		[Column(Storage="_ElongationEffective", DbType="VarChar(20)")]
		public string ElongationEffective
		{
			get
			{
				return this._ElongationEffective;
			}
			set
			{
				if ((this._ElongationEffective != value))
				{
					this.OnElongationEffectiveChanging(value);
					this.SendPropertyChanging();
					this._ElongationEffective = value;
					this.SendPropertyChanged("ElongationEffective");
					this.OnElongationEffectiveChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationEffective2", DbType="VarChar(20)")]
		public string ElongationEffective2
		{
			get
			{
				return this._ElongationEffective2;
			}
			set
			{
				if ((this._ElongationEffective2 != value))
				{
					this.OnElongationEffective2Changing(value);
					this.SendPropertyChanging();
					this._ElongationEffective2 = value;
					this.SendPropertyChanged("ElongationEffective2");
					this.OnElongationEffective2Changed();
				}
			}
		}
		
		[Column(Storage="_ElongationLength", DbType="VarChar(20)")]
		public string ElongationLength
		{
			get
			{
				return this._ElongationLength;
			}
			set
			{
				if ((this._ElongationLength != value))
				{
					this.OnElongationLengthChanging(value);
					this.SendPropertyChanging();
					this._ElongationLength = value;
					this.SendPropertyChanged("ElongationLength");
					this.OnElongationLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationLength2", DbType="VarChar(20)")]
		public string ElongationLength2
		{
			get
			{
				return this._ElongationLength2;
			}
			set
			{
				if ((this._ElongationLength2 != value))
				{
					this.OnElongationLength2Changing(value);
					this.SendPropertyChanging();
					this._ElongationLength2 = value;
					this.SendPropertyChanged("ElongationLength2");
					this.OnElongationLength2Changed();
				}
			}
		}
		
		[Column(Storage="_ElongationWidth", DbType="VarChar(20)")]
		public string ElongationWidth
		{
			get
			{
				return this._ElongationWidth;
			}
			set
			{
				if ((this._ElongationWidth != value))
				{
					this.OnElongationWidthChanging(value);
					this.SendPropertyChanging();
					this._ElongationWidth = value;
					this.SendPropertyChanged("ElongationWidth");
					this.OnElongationWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWidth2", DbType="VarChar(20)")]
		public string ElongationWidth2
		{
			get
			{
				return this._ElongationWidth2;
			}
			set
			{
				if ((this._ElongationWidth2 != value))
				{
					this.OnElongationWidth2Changing(value);
					this.SendPropertyChanging();
					this._ElongationWidth2 = value;
					this.SendPropertyChanged("ElongationWidth2");
					this.OnElongationWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght", DbType="VarChar(20)")]
		public string ModulusLenght
		{
			get
			{
				return this._ModulusLenght;
			}
			set
			{
				if ((this._ModulusLenght != value))
				{
					this.OnModulusLenghtChanging(value);
					this.SendPropertyChanging();
					this._ModulusLenght = value;
					this.SendPropertyChanged("ModulusLenght");
					this.OnModulusLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght2", DbType="VarChar(20)")]
		public string ModulusLenght2
		{
			get
			{
				return this._ModulusLenght2;
			}
			set
			{
				if ((this._ModulusLenght2 != value))
				{
					this.OnModulusLenght2Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght2 = value;
					this.SendPropertyChanged("ModulusLenght2");
					this.OnModulusLenght2Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght3", DbType="VarChar(20)")]
		public string ModulusLenght3
		{
			get
			{
				return this._ModulusLenght3;
			}
			set
			{
				if ((this._ModulusLenght3 != value))
				{
					this.OnModulusLenght3Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght3 = value;
					this.SendPropertyChanged("ModulusLenght3");
					this.OnModulusLenght3Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght4", DbType="VarChar(20)")]
		public string ModulusLenght4
		{
			get
			{
				return this._ModulusLenght4;
			}
			set
			{
				if ((this._ModulusLenght4 != value))
				{
					this.OnModulusLenght4Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght4 = value;
					this.SendPropertyChanged("ModulusLenght4");
					this.OnModulusLenght4Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght5", DbType="VarChar(20)")]
		public string ModulusLenght5
		{
			get
			{
				return this._ModulusLenght5;
			}
			set
			{
				if ((this._ModulusLenght5 != value))
				{
					this.OnModulusLenght5Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght5 = value;
					this.SendPropertyChanged("ModulusLenght5");
					this.OnModulusLenght5Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght6", DbType="VarChar(20)")]
		public string ModulusLenght6
		{
			get
			{
				return this._ModulusLenght6;
			}
			set
			{
				if ((this._ModulusLenght6 != value))
				{
					this.OnModulusLenght6Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght6 = value;
					this.SendPropertyChanged("ModulusLenght6");
					this.OnModulusLenght6Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght7", DbType="VarChar(20)")]
		public string ModulusLenght7
		{
			get
			{
				return this._ModulusLenght7;
			}
			set
			{
				if ((this._ModulusLenght7 != value))
				{
					this.OnModulusLenght7Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght7 = value;
					this.SendPropertyChanged("ModulusLenght7");
					this.OnModulusLenght7Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusLenght8", DbType="VarChar(20)")]
		public string ModulusLenght8
		{
			get
			{
				return this._ModulusLenght8;
			}
			set
			{
				if ((this._ModulusLenght8 != value))
				{
					this.OnModulusLenght8Changing(value);
					this.SendPropertyChanging();
					this._ModulusLenght8 = value;
					this.SendPropertyChanged("ModulusLenght8");
					this.OnModulusLenght8Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith", DbType="VarChar(20)")]
		public string ModulusWith
		{
			get
			{
				return this._ModulusWith;
			}
			set
			{
				if ((this._ModulusWith != value))
				{
					this.OnModulusWithChanging(value);
					this.SendPropertyChanging();
					this._ModulusWith = value;
					this.SendPropertyChanged("ModulusWith");
					this.OnModulusWithChanged();
				}
			}
		}
		
		[Column(Storage="_ModulusWith2", DbType="VarChar(20)")]
		public string ModulusWith2
		{
			get
			{
				return this._ModulusWith2;
			}
			set
			{
				if ((this._ModulusWith2 != value))
				{
					this.OnModulusWith2Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith2 = value;
					this.SendPropertyChanged("ModulusWith2");
					this.OnModulusWith2Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith3", DbType="VarChar(20)")]
		public string ModulusWith3
		{
			get
			{
				return this._ModulusWith3;
			}
			set
			{
				if ((this._ModulusWith3 != value))
				{
					this.OnModulusWith3Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith3 = value;
					this.SendPropertyChanged("ModulusWith3");
					this.OnModulusWith3Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith4", DbType="VarChar(20)")]
		public string ModulusWith4
		{
			get
			{
				return this._ModulusWith4;
			}
			set
			{
				if ((this._ModulusWith4 != value))
				{
					this.OnModulusWith4Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith4 = value;
					this.SendPropertyChanged("ModulusWith4");
					this.OnModulusWith4Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith5", DbType="VarChar(20)")]
		public string ModulusWith5
		{
			get
			{
				return this._ModulusWith5;
			}
			set
			{
				if ((this._ModulusWith5 != value))
				{
					this.OnModulusWith5Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith5 = value;
					this.SendPropertyChanged("ModulusWith5");
					this.OnModulusWith5Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith6", DbType="VarChar(20)")]
		public string ModulusWith6
		{
			get
			{
				return this._ModulusWith6;
			}
			set
			{
				if ((this._ModulusWith6 != value))
				{
					this.OnModulusWith6Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith6 = value;
					this.SendPropertyChanged("ModulusWith6");
					this.OnModulusWith6Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith7", DbType="VarChar(20)")]
		public string ModulusWith7
		{
			get
			{
				return this._ModulusWith7;
			}
			set
			{
				if ((this._ModulusWith7 != value))
				{
					this.OnModulusWith7Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith7 = value;
					this.SendPropertyChanged("ModulusWith7");
					this.OnModulusWith7Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusWith8", DbType="VarChar(20)")]
		public string ModulusWith8
		{
			get
			{
				return this._ModulusWith8;
			}
			set
			{
				if ((this._ModulusWith8 != value))
				{
					this.OnModulusWith8Changing(value);
					this.SendPropertyChanging();
					this._ModulusWith8 = value;
					this.SendPropertyChanged("ModulusWith8");
					this.OnModulusWith8Changed();
				}
			}
		}
		
		[Column(Storage="_ModulusTest", DbType="VarChar(200)")]
		public string ModulusTest
		{
			get
			{
				return this._ModulusTest;
			}
			set
			{
				if ((this._ModulusTest != value))
				{
					this.OnModulusTestChanging(value);
					this.SendPropertyChanging();
					this._ModulusTest = value;
					this.SendPropertyChanged("ModulusTest");
					this.OnModulusTestChanged();
				}
			}
		}
		
		[Column(Storage="_ResidualLenght", DbType="VarChar(20)")]
		public string ResidualLenght
		{
			get
			{
				return this._ResidualLenght;
			}
			set
			{
				if ((this._ResidualLenght != value))
				{
					this.OnResidualLenghtChanging(value);
					this.SendPropertyChanging();
					this._ResidualLenght = value;
					this.SendPropertyChanged("ResidualLenght");
					this.OnResidualLenghtChanged();
				}
			}
		}
		
		[Column(Storage="_ResidualLenght2", DbType="VarChar(20)")]
		public string ResidualLenght2
		{
			get
			{
				return this._ResidualLenght2;
			}
			set
			{
				if ((this._ResidualLenght2 != value))
				{
					this.OnResidualLenght2Changing(value);
					this.SendPropertyChanging();
					this._ResidualLenght2 = value;
					this.SendPropertyChanged("ResidualLenght2");
					this.OnResidualLenght2Changed();
				}
			}
		}
		
		[Column(Storage="_ResidualWidth", DbType="VarChar(20)")]
		public string ResidualWidth
		{
			get
			{
				return this._ResidualWidth;
			}
			set
			{
				if ((this._ResidualWidth != value))
				{
					this.OnResidualWidthChanging(value);
					this.SendPropertyChanging();
					this._ResidualWidth = value;
					this.SendPropertyChanged("ResidualWidth");
					this.OnResidualWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ResidualWidth2", DbType="VarChar(20)")]
		public string ResidualWidth2
		{
			get
			{
				return this._ResidualWidth2;
			}
			set
			{
				if ((this._ResidualWidth2 != value))
				{
					this.OnResidualWidth2Changing(value);
					this.SendPropertyChanging();
					this._ResidualWidth2 = value;
					this.SendPropertyChanged("ResidualWidth2");
					this.OnResidualWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_RecoveryLength", DbType="VarChar(20)")]
		public string RecoveryLength
		{
			get
			{
				return this._RecoveryLength;
			}
			set
			{
				if ((this._RecoveryLength != value))
				{
					this.OnRecoveryLengthChanging(value);
					this.SendPropertyChanging();
					this._RecoveryLength = value;
					this.SendPropertyChanged("RecoveryLength");
					this.OnRecoveryLengthChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryLength2", DbType="VarChar(20)")]
		public string RecoveryLength2
		{
			get
			{
				return this._RecoveryLength2;
			}
			set
			{
				if ((this._RecoveryLength2 != value))
				{
					this.OnRecoveryLength2Changing(value);
					this.SendPropertyChanging();
					this._RecoveryLength2 = value;
					this.SendPropertyChanged("RecoveryLength2");
					this.OnRecoveryLength2Changed();
				}
			}
		}
		
		[Column(Storage="_RecoveryWidth", DbType="VarChar(20)")]
		public string RecoveryWidth
		{
			get
			{
				return this._RecoveryWidth;
			}
			set
			{
				if ((this._RecoveryWidth != value))
				{
					this.OnRecoveryWidthChanging(value);
					this.SendPropertyChanging();
					this._RecoveryWidth = value;
					this.SendPropertyChanged("RecoveryWidth");
					this.OnRecoveryWidthChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryWidth2", DbType="VarChar(20)")]
		public string RecoveryWidth2
		{
			get
			{
				return this._RecoveryWidth2;
			}
			set
			{
				if ((this._RecoveryWidth2 != value))
				{
					this.OnRecoveryWidth2Changing(value);
					this.SendPropertyChanging();
					this._RecoveryWidth2 = value;
					this.SendPropertyChanged("RecoveryWidth2");
					this.OnRecoveryWidth2Changed();
				}
			}
		}
		
		[Column(Storage="_MIType", DbType="VarChar(20)")]
		public string MIType
		{
			get
			{
				return this._MIType;
			}
			set
			{
				if ((this._MIType != value))
				{
					this.OnMITypeChanging(value);
					this.SendPropertyChanging();
					this._MIType = value;
					this.SendPropertyChanged("MIType");
					this.OnMITypeChanged();
				}
			}
		}
		
		[Column(Storage="_MIGauge", DbType="VarChar(20)")]
		public string MIGauge
		{
			get
			{
				return this._MIGauge;
			}
			set
			{
				if ((this._MIGauge != value))
				{
					this.OnMIGaugeChanging(value);
					this.SendPropertyChanging();
					this._MIGauge = value;
					this.SendPropertyChanged("MIGauge");
					this.OnMIGaugeChanged();
				}
			}
		}
		
		[Column(Storage="_MIOfBar", DbType="VarChar(20)")]
		public string MIOfBar
		{
			get
			{
				return this._MIOfBar;
			}
			set
			{
				if ((this._MIOfBar != value))
				{
					this.OnMIOfBarChanging(value);
					this.SendPropertyChanging();
					this._MIOfBar = value;
					this.SendPropertyChanged("MIOfBar");
					this.OnMIOfBarChanged();
				}
			}
		}
		
		[Column(Storage="_MIWidth", DbType="VarChar(20)")]
		public string MIWidth
		{
			get
			{
				return this._MIWidth;
			}
			set
			{
				if ((this._MIWidth != value))
				{
					this.OnMIWidthChanging(value);
					this.SendPropertyChanging();
					this._MIWidth = value;
					this.SendPropertyChanged("MIWidth");
					this.OnMIWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Compostion", DbType="NVarChar(50)")]
		public string Compostion
		{
			get
			{
				return this._Compostion;
			}
			set
			{
				if ((this._Compostion != value))
				{
					this.OnCompostionChanging(value);
					this.SendPropertyChanging();
					this._Compostion = value;
					this.SendPropertyChanged("Compostion");
					this.OnCompostionChanged();
				}
			}
		}
		
		[Association(Name="Spec_TechInforTest", Storage="_TechInforTests", ThisKey="SuppRef,Color,ColorCategory", OtherKey="SuppRef,Color,ColorCategory")]
		public EntitySet<TechInforTest> TechInforTests
		{
			get
			{
				return this._TechInforTests;
			}
			set
			{
				this._TechInforTests.Assign(value);
			}
		}
		
		[Association(Name="Spec_TechnicalInformation", Storage="_TechnicalInformations", ThisKey="SuppRef,Color,ColorCategory", OtherKey="SuppRef,Color,ColorCategory")]
		public EntitySet<TechnicalInformation> TechnicalInformations
		{
			get
			{
				return this._TechnicalInformations;
			}
			set
			{
				this._TechnicalInformations.Assign(value);
			}
		}
		
		[Association(Name="Detail_Spec", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.Specs.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.Specs.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TechInforTests(TechInforTest entity)
		{
			this.SendPropertyChanging();
			entity.Spec = this;
		}
		
		private void detach_TechInforTests(TechInforTest entity)
		{
			this.SendPropertyChanging();
			entity.Spec = null;
		}
		
		private void attach_TechnicalInformations(TechnicalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Spec = this;
		}
		
		private void detach_TechnicalInformations(TechnicalInformation entity)
		{
			this.SendPropertyChanging();
			entity.Spec = null;
		}
	}
	
	[Table(Name="dbo.SpecialLabel")]
	public partial class SpecialLabel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SpecialLabel1;
		
		private string _Group;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecialLabel1Changing(string value);
    partial void OnSpecialLabel1Changed();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SpecialLabel()
		{
			OnCreated();
		}
		
		[Column(Name="SpecialLabel", Storage="_SpecialLabel1", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SpecialLabel1
		{
			get
			{
				return this._SpecialLabel1;
			}
			set
			{
				if ((this._SpecialLabel1 != value))
				{
					this.OnSpecialLabel1Changing(value);
					this.SendPropertyChanging();
					this._SpecialLabel1 = value;
					this.SendPropertyChanged("SpecialLabel1");
					this.OnSpecialLabel1Changed();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TechInforTest")]
	public partial class TechInforTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexNo;
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _ColorCategory;
		
		private string _IDNr;
		
		private string _ProjectNo;
		
		private string _StandardWept;
		
		private string _StandardWarp;
		
		private System.Nullable<decimal> _ElongationWept;
		
		private System.Nullable<decimal> _ElongationWarp;
		
		private System.Nullable<decimal> _RecoveryWept;
		
		private System.Nullable<decimal> _RecoveryWarp;
		
		private System.Nullable<decimal> _FapplyWept;
		
		private System.Nullable<decimal> _FapplyWarp;
		
		private System.Nullable<bool> _AutoResult;
		
		private System.Nullable<bool> _FinalResult;
		
		private string _Remark;
		
		private EntityRef<Spec> _Spec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexNoChanging(int value);
    partial void OnIndexNoChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnColorCategoryChanging(string value);
    partial void OnColorCategoryChanged();
    partial void OnIDNrChanging(string value);
    partial void OnIDNrChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnStandardWeptChanging(string value);
    partial void OnStandardWeptChanged();
    partial void OnStandardWarpChanging(string value);
    partial void OnStandardWarpChanged();
    partial void OnElongationWeptChanging(System.Nullable<decimal> value);
    partial void OnElongationWeptChanged();
    partial void OnElongationWarpChanging(System.Nullable<decimal> value);
    partial void OnElongationWarpChanged();
    partial void OnRecoveryWeptChanging(System.Nullable<decimal> value);
    partial void OnRecoveryWeptChanged();
    partial void OnRecoveryWarpChanging(System.Nullable<decimal> value);
    partial void OnRecoveryWarpChanged();
    partial void OnFapplyWeptChanging(System.Nullable<decimal> value);
    partial void OnFapplyWeptChanged();
    partial void OnFapplyWarpChanging(System.Nullable<decimal> value);
    partial void OnFapplyWarpChanged();
    partial void OnAutoResultChanging(System.Nullable<bool> value);
    partial void OnAutoResultChanged();
    partial void OnFinalResultChanging(System.Nullable<bool> value);
    partial void OnFinalResultChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public TechInforTest()
		{
			this._Spec = default(EntityRef<Spec>);
			OnCreated();
		}
		
		[Column(Storage="_IndexNo", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					this.OnIndexNoChanging(value);
					this.SendPropertyChanging();
					this._IndexNo = value;
					this.SendPropertyChanged("IndexNo");
					this.OnIndexNoChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ColorCategory
		{
			get
			{
				return this._ColorCategory;
			}
			set
			{
				if ((this._ColorCategory != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorCategoryChanging(value);
					this.SendPropertyChanging();
					this._ColorCategory = value;
					this.SendPropertyChanged("ColorCategory");
					this.OnColorCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_IDNr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IDNr
		{
			get
			{
				return this._IDNr;
			}
			set
			{
				if ((this._IDNr != value))
				{
					this.OnIDNrChanging(value);
					this.SendPropertyChanging();
					this._IDNr = value;
					this.SendPropertyChanged("IDNr");
					this.OnIDNrChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(50)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWept", DbType="VarChar(50)")]
		public string StandardWept
		{
			get
			{
				return this._StandardWept;
			}
			set
			{
				if ((this._StandardWept != value))
				{
					this.OnStandardWeptChanging(value);
					this.SendPropertyChanging();
					this._StandardWept = value;
					this.SendPropertyChanged("StandardWept");
					this.OnStandardWeptChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWarp", DbType="VarChar(50)")]
		public string StandardWarp
		{
			get
			{
				return this._StandardWarp;
			}
			set
			{
				if ((this._StandardWarp != value))
				{
					this.OnStandardWarpChanging(value);
					this.SendPropertyChanging();
					this._StandardWarp = value;
					this.SendPropertyChanged("StandardWarp");
					this.OnStandardWarpChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWept", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ElongationWept
		{
			get
			{
				return this._ElongationWept;
			}
			set
			{
				if ((this._ElongationWept != value))
				{
					this.OnElongationWeptChanging(value);
					this.SendPropertyChanging();
					this._ElongationWept = value;
					this.SendPropertyChanged("ElongationWept");
					this.OnElongationWeptChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWarp", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ElongationWarp
		{
			get
			{
				return this._ElongationWarp;
			}
			set
			{
				if ((this._ElongationWarp != value))
				{
					this.OnElongationWarpChanging(value);
					this.SendPropertyChanging();
					this._ElongationWarp = value;
					this.SendPropertyChanged("ElongationWarp");
					this.OnElongationWarpChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryWept", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RecoveryWept
		{
			get
			{
				return this._RecoveryWept;
			}
			set
			{
				if ((this._RecoveryWept != value))
				{
					this.OnRecoveryWeptChanging(value);
					this.SendPropertyChanging();
					this._RecoveryWept = value;
					this.SendPropertyChanged("RecoveryWept");
					this.OnRecoveryWeptChanged();
				}
			}
		}
		
		[Column(Storage="_RecoveryWarp", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RecoveryWarp
		{
			get
			{
				return this._RecoveryWarp;
			}
			set
			{
				if ((this._RecoveryWarp != value))
				{
					this.OnRecoveryWarpChanging(value);
					this.SendPropertyChanging();
					this._RecoveryWarp = value;
					this.SendPropertyChanged("RecoveryWarp");
					this.OnRecoveryWarpChanged();
				}
			}
		}
		
		[Column(Storage="_FapplyWept", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FapplyWept
		{
			get
			{
				return this._FapplyWept;
			}
			set
			{
				if ((this._FapplyWept != value))
				{
					this.OnFapplyWeptChanging(value);
					this.SendPropertyChanging();
					this._FapplyWept = value;
					this.SendPropertyChanged("FapplyWept");
					this.OnFapplyWeptChanged();
				}
			}
		}
		
		[Column(Storage="_FapplyWarp", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FapplyWarp
		{
			get
			{
				return this._FapplyWarp;
			}
			set
			{
				if ((this._FapplyWarp != value))
				{
					this.OnFapplyWarpChanging(value);
					this.SendPropertyChanging();
					this._FapplyWarp = value;
					this.SendPropertyChanged("FapplyWarp");
					this.OnFapplyWarpChanged();
				}
			}
		}
		
		[Column(Storage="_AutoResult", DbType="Bit")]
		public System.Nullable<bool> AutoResult
		{
			get
			{
				return this._AutoResult;
			}
			set
			{
				if ((this._AutoResult != value))
				{
					this.OnAutoResultChanging(value);
					this.SendPropertyChanging();
					this._AutoResult = value;
					this.SendPropertyChanged("AutoResult");
					this.OnAutoResultChanged();
				}
			}
		}
		
		[Column(Storage="_FinalResult", DbType="Bit")]
		public System.Nullable<bool> FinalResult
		{
			get
			{
				return this._FinalResult;
			}
			set
			{
				if ((this._FinalResult != value))
				{
					this.OnFinalResultChanging(value);
					this.SendPropertyChanging();
					this._FinalResult = value;
					this.SendPropertyChanged("FinalResult");
					this.OnFinalResultChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Association(Name="Spec_TechInforTest", Storage="_Spec", ThisKey="SuppRef,Color,ColorCategory", OtherKey="SuppRef,Color,ColorCategory", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Spec Spec
		{
			get
			{
				return this._Spec.Entity;
			}
			set
			{
				Spec previousValue = this._Spec.Entity;
				if (((previousValue != value) 
							|| (this._Spec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spec.Entity = null;
						previousValue.TechInforTests.Remove(this);
					}
					this._Spec.Entity = value;
					if ((value != null))
					{
						value.TechInforTests.Add(this);
						this._SuppRef = value.SuppRef;
						this._Color = value.Color;
						this._ColorCategory = value.ColorCategory;
					}
					else
					{
						this._SuppRef = default(string);
						this._Color = default(string);
						this._ColorCategory = default(string);
					}
					this.SendPropertyChanged("Spec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TechnicalInformation")]
	public partial class TechnicalInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexID;
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _ColorCategory;
		
		private string _TestType;
		
		private string _TestMethod;
		
		private string _Grade;
		
		private string _SpecifyMethod;
		
		private string _Remark;
		
		private string _Group;
		
		private EntityRef<Spec> _Spec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexIDChanging(int value);
    partial void OnIndexIDChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnColorCategoryChanging(string value);
    partial void OnColorCategoryChanged();
    partial void OnTestTypeChanging(string value);
    partial void OnTestTypeChanged();
    partial void OnTestMethodChanging(string value);
    partial void OnTestMethodChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnSpecifyMethodChanging(string value);
    partial void OnSpecifyMethodChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    #endregion
		
		public TechnicalInformation()
		{
			this._Spec = default(EntityRef<Spec>);
			OnCreated();
		}
		
		[Column(Storage="_IndexID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int IndexID
		{
			get
			{
				return this._IndexID;
			}
			set
			{
				if ((this._IndexID != value))
				{
					this.OnIndexIDChanging(value);
					this.SendPropertyChanging();
					this._IndexID = value;
					this.SendPropertyChanged("IndexID");
					this.OnIndexIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCategory", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ColorCategory
		{
			get
			{
				return this._ColorCategory;
			}
			set
			{
				if ((this._ColorCategory != value))
				{
					if (this._Spec.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorCategoryChanging(value);
					this.SendPropertyChanging();
					this._ColorCategory = value;
					this.SendPropertyChanged("ColorCategory");
					this.OnColorCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_TestType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TestType
		{
			get
			{
				return this._TestType;
			}
			set
			{
				if ((this._TestType != value))
				{
					this.OnTestTypeChanging(value);
					this.SendPropertyChanging();
					this._TestType = value;
					this.SendPropertyChanged("TestType");
					this.OnTestTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TestMethod", DbType="VarChar(50)")]
		public string TestMethod
		{
			get
			{
				return this._TestMethod;
			}
			set
			{
				if ((this._TestMethod != value))
				{
					this.OnTestMethodChanging(value);
					this.SendPropertyChanging();
					this._TestMethod = value;
					this.SendPropertyChanged("TestMethod");
					this.OnTestMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="VarChar(50)")]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_SpecifyMethod", DbType="VarChar(50)")]
		public string SpecifyMethod
		{
			get
			{
				return this._SpecifyMethod;
			}
			set
			{
				if ((this._SpecifyMethod != value))
				{
					this.OnSpecifyMethodChanging(value);
					this.SendPropertyChanging();
					this._SpecifyMethod = value;
					this.SendPropertyChanged("SpecifyMethod");
					this.OnSpecifyMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(250)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="VarChar(50)")]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Association(Name="Spec_TechnicalInformation", Storage="_Spec", ThisKey="SuppRef,Color,ColorCategory", OtherKey="SuppRef,Color,ColorCategory", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Spec Spec
		{
			get
			{
				return this._Spec.Entity;
			}
			set
			{
				Spec previousValue = this._Spec.Entity;
				if (((previousValue != value) 
							|| (this._Spec.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spec.Entity = null;
						previousValue.TechnicalInformations.Remove(this);
					}
					this._Spec.Entity = value;
					if ((value != null))
					{
						value.TechnicalInformations.Add(this);
						this._SuppRef = value.SuppRef;
						this._Color = value.Color;
						this._ColorCategory = value.ColorCategory;
					}
					else
					{
						this._SuppRef = default(string);
						this._Color = default(string);
						this._ColorCategory = default(string);
					}
					this.SendPropertyChanged("Spec");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TechnicalInformationDefault")]
	public partial class TechnicalInformationDefault : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeGroup;
		
		private string _TestType;
		
		private string _TestMethod;
		
		private string _Grade;
		
		private string _SpecifyMethod;
		
		private string _Remark;
		
		private string _TestMethodList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeGroupChanging(string value);
    partial void OnTypeGroupChanged();
    partial void OnTestTypeChanging(string value);
    partial void OnTestTypeChanged();
    partial void OnTestMethodChanging(string value);
    partial void OnTestMethodChanged();
    partial void OnGradeChanging(string value);
    partial void OnGradeChanged();
    partial void OnSpecifyMethodChanging(string value);
    partial void OnSpecifyMethodChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnTestMethodListChanging(string value);
    partial void OnTestMethodListChanged();
    #endregion
		
		public TechnicalInformationDefault()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeGroup", DbType="VarChar(200)")]
		public string TypeGroup
		{
			get
			{
				return this._TypeGroup;
			}
			set
			{
				if ((this._TypeGroup != value))
				{
					this.OnTypeGroupChanging(value);
					this.SendPropertyChanging();
					this._TypeGroup = value;
					this.SendPropertyChanged("TypeGroup");
					this.OnTypeGroupChanged();
				}
			}
		}
		
		[Column(Storage="_TestType", DbType="VarChar(200)")]
		public string TestType
		{
			get
			{
				return this._TestType;
			}
			set
			{
				if ((this._TestType != value))
				{
					this.OnTestTypeChanging(value);
					this.SendPropertyChanging();
					this._TestType = value;
					this.SendPropertyChanged("TestType");
					this.OnTestTypeChanged();
				}
			}
		}
		
		[Column(Storage="_TestMethod", DbType="VarChar(200)")]
		public string TestMethod
		{
			get
			{
				return this._TestMethod;
			}
			set
			{
				if ((this._TestMethod != value))
				{
					this.OnTestMethodChanging(value);
					this.SendPropertyChanging();
					this._TestMethod = value;
					this.SendPropertyChanged("TestMethod");
					this.OnTestMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Grade", DbType="VarChar(200)")]
		public string Grade
		{
			get
			{
				return this._Grade;
			}
			set
			{
				if ((this._Grade != value))
				{
					this.OnGradeChanging(value);
					this.SendPropertyChanging();
					this._Grade = value;
					this.SendPropertyChanged("Grade");
					this.OnGradeChanged();
				}
			}
		}
		
		[Column(Storage="_SpecifyMethod", DbType="VarChar(200)")]
		public string SpecifyMethod
		{
			get
			{
				return this._SpecifyMethod;
			}
			set
			{
				if ((this._SpecifyMethod != value))
				{
					this.OnSpecifyMethodChanging(value);
					this.SendPropertyChanging();
					this._SpecifyMethod = value;
					this.SendPropertyChanged("SpecifyMethod");
					this.OnSpecifyMethodChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_TestMethodList", DbType="VarChar(200)")]
		public string TestMethodList
		{
			get
			{
				return this._TestMethodList;
			}
			set
			{
				if ((this._TestMethodList != value))
				{
					this.OnTestMethodListChanging(value);
					this.SendPropertyChanging();
					this._TestMethodList = value;
					this.SendPropertyChanged("TestMethodList");
					this.OnTestMethodListChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MaterialProcess")]
	public partial class MaterialProcess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _MatlForProcess;
		
		private System.Nullable<decimal> _ItemWidth;
		
		private System.Nullable<bool> _IsMain;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnMatlForProcessChanging(string value);
    partial void OnMatlForProcessChanged();
    partial void OnItemWidthChanging(System.Nullable<decimal> value);
    partial void OnItemWidthChanged();
    partial void OnIsMainChanging(System.Nullable<bool> value);
    partial void OnIsMainChanged();
    #endregion
		
		public MaterialProcess()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_MatlForProcess", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatlForProcess
		{
			get
			{
				return this._MatlForProcess;
			}
			set
			{
				if ((this._MatlForProcess != value))
				{
					this.OnMatlForProcessChanging(value);
					this.SendPropertyChanging();
					this._MatlForProcess = value;
					this.SendPropertyChanged("MatlForProcess");
					this.OnMatlForProcessChanged();
				}
			}
		}
		
		[Column(Storage="_ItemWidth", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> ItemWidth
		{
			get
			{
				return this._ItemWidth;
			}
			set
			{
				if ((this._ItemWidth != value))
				{
					this.OnItemWidthChanging(value);
					this.SendPropertyChanging();
					this._ItemWidth = value;
					this.SendPropertyChanged("ItemWidth");
					this.OnItemWidthChanged();
				}
			}
		}
		
		[Column(Storage="_IsMain", DbType="Bit")]
		public System.Nullable<bool> IsMain
		{
			get
			{
				return this._IsMain;
			}
			set
			{
				if ((this._IsMain != value))
				{
					this.OnIsMainChanging(value);
					this.SendPropertyChanging();
					this._IsMain = value;
					this.SendPropertyChanged("IsMain");
					this.OnIsMainChanged();
				}
			}
		}
		
		[Association(Name="Detail_MaterialProcess", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.MaterialProcesses.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.MaterialProcesses.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MIDcUpFile")]
	public partial class MIDcUpFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _FileName;
		
		private byte[] _FileContent;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnFileContentChanging(byte[] value);
    partial void OnFileContentChanged();
    #endregion
		
		public MIDcUpFile()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_FileName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_FileContent", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public byte[] FileContent
		{
			get
			{
				return this._FileContent;
			}
			set
			{
				if ((this._FileContent != value))
				{
					this.OnFileContentChanging(value);
					this.SendPropertyChanging();
					this._FileContent = value;
					this.SendPropertyChanged("FileContent");
					this.OnFileContentChanged();
				}
			}
		}
		
		[Association(Name="Detail_MIDcUpFile", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.MIDcUpFiles.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.MIDcUpFiles.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SubColorDetail")]
	public partial class SubColorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _SubColor;
		
		private string _Description;
		
		private EntityRef<ColorDetail> _ColorDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnSubColorChanging(string value);
    partial void OnSubColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SubColorDetail()
		{
			this._ColorDetail = default(EntityRef<ColorDetail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._ColorDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					if (this._ColorDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_SubColor", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubColor
		{
			get
			{
				return this._SubColor;
			}
			set
			{
				if ((this._SubColor != value))
				{
					this.OnSubColorChanging(value);
					this.SendPropertyChanging();
					this._SubColor = value;
					this.SendPropertyChanged("SubColor");
					this.OnSubColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="ColorDetail_SubColorDetail", Storage="_ColorDetail", ThisKey="SuppRef,Color", OtherKey="SuppRef,Color", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ColorDetail ColorDetail
		{
			get
			{
				return this._ColorDetail.Entity;
			}
			set
			{
				ColorDetail previousValue = this._ColorDetail.Entity;
				if (((previousValue != value) 
							|| (this._ColorDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ColorDetail.Entity = null;
						previousValue.SubColorDetails.Remove(this);
					}
					this._ColorDetail.Entity = value;
					if ((value != null))
					{
						value.SubColorDetails.Add(this);
						this._SuppRef = value.SuppRef;
						this._Color = value.Color;
					}
					else
					{
						this._SuppRef = default(string);
						this._Color = default(string);
					}
					this.SendPropertyChanged("ColorDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ColorSizeCupRangeDetail")]
	public partial class ColorSizeCupRangeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DataCode;
		
		private string _ChildDataCode;
		
		private string _Category;
		
		private string _Description;
		
		private System.Nullable<int> _Seq;
		
		private EntityRef<ColorSizeCupRange> _ColorSizeCupRange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataCodeChanging(string value);
    partial void OnDataCodeChanged();
    partial void OnChildDataCodeChanging(string value);
    partial void OnChildDataCodeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public ColorSizeCupRangeDetail()
		{
			this._ColorSizeCupRange = default(EntityRef<ColorSizeCupRange>);
			OnCreated();
		}
		
		[Column(Storage="_DataCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DataCode
		{
			get
			{
				return this._DataCode;
			}
			set
			{
				if ((this._DataCode != value))
				{
					if (this._ColorSizeCupRange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDataCodeChanging(value);
					this.SendPropertyChanging();
					this._DataCode = value;
					this.SendPropertyChanged("DataCode");
					this.OnDataCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ChildDataCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ChildDataCode
		{
			get
			{
				return this._ChildDataCode;
			}
			set
			{
				if ((this._ChildDataCode != value))
				{
					this.OnChildDataCodeChanging(value);
					this.SendPropertyChanging();
					this._ChildDataCode = value;
					this.SendPropertyChanged("ChildDataCode");
					this.OnChildDataCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					if (this._ColorSizeCupRange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Association(Name="ColorSizeCupRange_ColorSizeCupRangeDetail", Storage="_ColorSizeCupRange", ThisKey="DataCode,Category", OtherKey="DataCode,Category", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ColorSizeCupRange ColorSizeCupRange
		{
			get
			{
				return this._ColorSizeCupRange.Entity;
			}
			set
			{
				ColorSizeCupRange previousValue = this._ColorSizeCupRange.Entity;
				if (((previousValue != value) 
							|| (this._ColorSizeCupRange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ColorSizeCupRange.Entity = null;
						previousValue.ColorSizeCupRangeDetails.Remove(this);
					}
					this._ColorSizeCupRange.Entity = value;
					if ((value != null))
					{
						value.ColorSizeCupRangeDetails.Add(this);
						this._DataCode = value.DataCode;
						this._Category = value.Category;
					}
					else
					{
						this._DataCode = default(string);
						this._Category = default(string);
					}
					this.SendPropertyChanged("ColorSizeCupRange");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SampleOrder")]
	public partial class SampleOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SampleOrderNo;
		
		private string _SeasonNo;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _Supplier;
		
		private string _Factory;
		
		private EntitySet<Detail> _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleOrderNoChanging(string value);
    partial void OnSampleOrderNoChanged();
    partial void OnSeasonNoChanging(string value);
    partial void OnSeasonNoChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnSupplierChanging(string value);
    partial void OnSupplierChanged();
    partial void OnFactoryChanging(string value);
    partial void OnFactoryChanged();
    #endregion
		
		public SampleOrder()
		{
			this._Details = new EntitySet<Detail>(new Action<Detail>(this.attach_Details), new Action<Detail>(this.detach_Details));
			OnCreated();
		}
		
		[Column(Storage="_SampleOrderNo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SampleOrderNo
		{
			get
			{
				return this._SampleOrderNo;
			}
			set
			{
				if ((this._SampleOrderNo != value))
				{
					this.OnSampleOrderNoChanging(value);
					this.SendPropertyChanging();
					this._SampleOrderNo = value;
					this.SendPropertyChanged("SampleOrderNo");
					this.OnSampleOrderNoChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonNo", DbType="VarChar(50)")]
		public string SeasonNo
		{
			get
			{
				return this._SeasonNo;
			}
			set
			{
				if ((this._SeasonNo != value))
				{
					this.OnSeasonNoChanging(value);
					this.SendPropertyChanging();
					this._SeasonNo = value;
					this.SendPropertyChanged("SeasonNo");
					this.OnSeasonNoChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier", DbType="VarChar(50)")]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this.OnSupplierChanging(value);
					this.SendPropertyChanging();
					this._Supplier = value;
					this.SendPropertyChanged("Supplier");
					this.OnSupplierChanged();
				}
			}
		}
		
		[Column(Storage="_Factory", DbType="NVarChar(10)")]
		public string Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				if ((this._Factory != value))
				{
					this.OnFactoryChanging(value);
					this.SendPropertyChanging();
					this._Factory = value;
					this.SendPropertyChanged("Factory");
					this.OnFactoryChanged();
				}
			}
		}
		
		[Association(Name="SampleOrder_Detail", Storage="_Details", ThisKey="SampleOrderNo", OtherKey="SampleOrderNo")]
		public EntitySet<Detail> Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				this._Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.SampleOrder = this;
		}
		
		private void detach_Details(Detail entity)
		{
			this.SendPropertyChanging();
			entity.SampleOrder = null;
		}
	}
	
	[Table(Name="dbo.MIDcEmailNotify")]
	public partial class MIDcEmailNotify : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Currt;
		
		private string _Desc;
		
		private string _Dept;
		
		private string _ActionUsers;
		
		private string _NotifyUsers;
		
		private System.Nullable<bool> _Available;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrtChanging(int value);
    partial void OnCurrtChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    partial void OnDeptChanging(string value);
    partial void OnDeptChanged();
    partial void OnActionUsersChanging(string value);
    partial void OnActionUsersChanged();
    partial void OnNotifyUsersChanging(string value);
    partial void OnNotifyUsersChanged();
    partial void OnAvailableChanging(System.Nullable<bool> value);
    partial void OnAvailableChanged();
    #endregion
		
		public MIDcEmailNotify()
		{
			OnCreated();
		}
		
		[Column(Storage="_Currt", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Currt
		{
			get
			{
				return this._Currt;
			}
			set
			{
				if ((this._Currt != value))
				{
					this.OnCurrtChanging(value);
					this.SendPropertyChanging();
					this._Currt = value;
					this.SendPropertyChanged("Currt");
					this.OnCurrtChanged();
				}
			}
		}
		
		[Column(Name="[Desc]", Storage="_Desc", DbType="NVarChar(100)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[Column(Storage="_Dept", DbType="NVarChar(100)")]
		public string Dept
		{
			get
			{
				return this._Dept;
			}
			set
			{
				if ((this._Dept != value))
				{
					this.OnDeptChanging(value);
					this.SendPropertyChanging();
					this._Dept = value;
					this.SendPropertyChanged("Dept");
					this.OnDeptChanged();
				}
			}
		}
		
		[Column(Storage="_ActionUsers", DbType="NVarChar(500)")]
		public string ActionUsers
		{
			get
			{
				return this._ActionUsers;
			}
			set
			{
				if ((this._ActionUsers != value))
				{
					this.OnActionUsersChanging(value);
					this.SendPropertyChanging();
					this._ActionUsers = value;
					this.SendPropertyChanged("ActionUsers");
					this.OnActionUsersChanged();
				}
			}
		}
		
		[Column(Storage="_NotifyUsers", DbType="NVarChar(500)")]
		public string NotifyUsers
		{
			get
			{
				return this._NotifyUsers;
			}
			set
			{
				if ((this._NotifyUsers != value))
				{
					this.OnNotifyUsersChanging(value);
					this.SendPropertyChanging();
					this._NotifyUsers = value;
					this.SendPropertyChanged("NotifyUsers");
					this.OnNotifyUsersChanged();
				}
			}
		}
		
		[Column(Storage="_Available", DbType="Bit")]
		public System.Nullable<bool> Available
		{
			get
			{
				return this._Available;
			}
			set
			{
				if ((this._Available != value))
				{
					this.OnAvailableChanging(value);
					this.SendPropertyChanging();
					this._Available = value;
					this.SendPropertyChanged("Available");
					this.OnAvailableChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewColorDetail")]
	public partial class NewColorDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Color;
		
		private string _Description;
		
		private string _Version;
		
		private EntityRef<MaterialPriceHeader> _MaterialPriceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public NewColorDetail()
		{
			this._MaterialPriceHeader = default(EntityRef<MaterialPriceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._MaterialPriceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewColorDetail", Storage="_MaterialPriceHeader", ThisKey="Version", OtherKey="Version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialPriceHeader MaterialPriceHeader
		{
			get
			{
				return this._MaterialPriceHeader.Entity;
			}
			set
			{
				MaterialPriceHeader previousValue = this._MaterialPriceHeader.Entity;
				if (((previousValue != value) 
							|| (this._MaterialPriceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialPriceHeader.Entity = null;
						previousValue.NewColorDetails.Remove(this);
					}
					this._MaterialPriceHeader.Entity = value;
					if ((value != null))
					{
						value.NewColorDetails.Add(this);
						this._Version = value.Version;
					}
					else
					{
						this._Version = default(string);
					}
					this.SendPropertyChanged("MaterialPriceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewCupDetail")]
	public partial class NewCupDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Cup;
		
		private string _Description;
		
		private string _Version;
		
		private EntityRef<MaterialPriceHeader> _MaterialPriceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnCupChanging(string value);
    partial void OnCupChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public NewCupDetail()
		{
			this._MaterialPriceHeader = default(EntityRef<MaterialPriceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Cup", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cup
		{
			get
			{
				return this._Cup;
			}
			set
			{
				if ((this._Cup != value))
				{
					this.OnCupChanging(value);
					this.SendPropertyChanging();
					this._Cup = value;
					this.SendPropertyChanged("Cup");
					this.OnCupChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._MaterialPriceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewCupDetail", Storage="_MaterialPriceHeader", ThisKey="Version", OtherKey="Version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialPriceHeader MaterialPriceHeader
		{
			get
			{
				return this._MaterialPriceHeader.Entity;
			}
			set
			{
				MaterialPriceHeader previousValue = this._MaterialPriceHeader.Entity;
				if (((previousValue != value) 
							|| (this._MaterialPriceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialPriceHeader.Entity = null;
						previousValue.NewCupDetails.Remove(this);
					}
					this._MaterialPriceHeader.Entity = value;
					if ((value != null))
					{
						value.NewCupDetails.Add(this);
						this._Version = value.Version;
					}
					else
					{
						this._Version = default(string);
					}
					this.SendPropertyChanged("MaterialPriceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.NewSizeDetail")]
	public partial class NewSizeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _Size;
		
		private string _Description;
		
		private string _Version;
		
		private EntityRef<MaterialPriceHeader> _MaterialPriceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    #endregion
		
		public NewSizeDetail()
		{
			this._MaterialPriceHeader = default(EntityRef<MaterialPriceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._MaterialPriceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewSizeDetail", Storage="_MaterialPriceHeader", ThisKey="Version", OtherKey="Version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialPriceHeader MaterialPriceHeader
		{
			get
			{
				return this._MaterialPriceHeader.Entity;
			}
			set
			{
				MaterialPriceHeader previousValue = this._MaterialPriceHeader.Entity;
				if (((previousValue != value) 
							|| (this._MaterialPriceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialPriceHeader.Entity = null;
						previousValue.NewSizeDetails.Remove(this);
					}
					this._MaterialPriceHeader.Entity = value;
					if ((value != null))
					{
						value.NewSizeDetails.Add(this);
						this._Version = value.Version;
					}
					else
					{
						this._Version = default(string);
					}
					this.SendPropertyChanged("MaterialPriceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DetailChangeConfirm")]
	public partial class DetailChangeConfirm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private int _Version;
		
		private string _ChangeType;
		
		private string _ChangeUser;
		
		private System.Nullable<System.DateTime> _ChangeDate;
		
		private string _ConfirmType;
		
		private string _ConfirmUser;
		
		private System.Nullable<System.DateTime> _ConfirmDate;
		
		private string _Status;
		
		private EntityRef<Detail> _Detail;
		
		private EntityRef<Detail> _Detail1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnVersionChanging(int value);
    partial void OnVersionChanged();
    partial void OnChangeTypeChanging(string value);
    partial void OnChangeTypeChanged();
    partial void OnChangeUserChanging(string value);
    partial void OnChangeUserChanged();
    partial void OnChangeDateChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeDateChanged();
    partial void OnConfirmTypeChanging(string value);
    partial void OnConfirmTypeChanged();
    partial void OnConfirmUserChanging(string value);
    partial void OnConfirmUserChanged();
    partial void OnConfirmDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public DetailChangeConfirm()
		{
			this._Detail = default(EntityRef<Detail>);
			this._Detail1 = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeType", DbType="NVarChar(20)")]
		public string ChangeType
		{
			get
			{
				return this._ChangeType;
			}
			set
			{
				if ((this._ChangeType != value))
				{
					this.OnChangeTypeChanging(value);
					this.SendPropertyChanging();
					this._ChangeType = value;
					this.SendPropertyChanged("ChangeType");
					this.OnChangeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeUser", DbType="NVarChar(50)")]
		public string ChangeUser
		{
			get
			{
				return this._ChangeUser;
			}
			set
			{
				if ((this._ChangeUser != value))
				{
					this.OnChangeUserChanging(value);
					this.SendPropertyChanging();
					this._ChangeUser = value;
					this.SendPropertyChanged("ChangeUser");
					this.OnChangeUserChanged();
				}
			}
		}
		
		[Column(Storage="_ChangeDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChangeDate
		{
			get
			{
				return this._ChangeDate;
			}
			set
			{
				if ((this._ChangeDate != value))
				{
					this.OnChangeDateChanging(value);
					this.SendPropertyChanging();
					this._ChangeDate = value;
					this.SendPropertyChanged("ChangeDate");
					this.OnChangeDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmType", DbType="NVarChar(20)")]
		public string ConfirmType
		{
			get
			{
				return this._ConfirmType;
			}
			set
			{
				if ((this._ConfirmType != value))
				{
					this.OnConfirmTypeChanging(value);
					this.SendPropertyChanging();
					this._ConfirmType = value;
					this.SendPropertyChanged("ConfirmType");
					this.OnConfirmTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmUser", DbType="NVarChar(50)")]
		public string ConfirmUser
		{
			get
			{
				return this._ConfirmUser;
			}
			set
			{
				if ((this._ConfirmUser != value))
				{
					this.OnConfirmUserChanging(value);
					this.SendPropertyChanging();
					this._ConfirmUser = value;
					this.SendPropertyChanged("ConfirmUser");
					this.OnConfirmUserChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfirmDate
		{
			get
			{
				return this._ConfirmDate;
			}
			set
			{
				if ((this._ConfirmDate != value))
				{
					this.OnConfirmDateChanging(value);
					this.SendPropertyChanging();
					this._ConfirmDate = value;
					this.SendPropertyChanged("ConfirmDate");
					this.OnConfirmDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(15)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Detail_DetailChangeConfirm", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true)]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.DetailChangeConfirms.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.DetailChangeConfirms.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		[Association(Name="Detail_DetailChangeConfirm1", Storage="_Detail1", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail1
		{
			get
			{
				return this._Detail1.Entity;
			}
			set
			{
				Detail previousValue = this._Detail1.Entity;
				if (((previousValue != value) 
							|| (this._Detail1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail1.Entity = null;
						previousValue.DetailChangeConfirms1.Remove(this);
					}
					this._Detail1.Entity = value;
					if ((value != null))
					{
						value.DetailChangeConfirms1.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ColorSizeCupGroup")]
	public partial class ColorSizeCupGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupCode;
		
		private string _GroupName;
		
		private string _Category;
		
		private string _CreateUser;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _AlterUser;
		
		private System.Nullable<System.DateTime> _AlterDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupCodeChanging(int value);
    partial void OnGroupCodeChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnCreateUserChanging(string value);
    partial void OnCreateUserChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnAlterUserChanging(string value);
    partial void OnAlterUserChanged();
    partial void OnAlterDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAlterDateChanged();
    #endregion
		
		public ColorSizeCupGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_GroupCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this.OnGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._GroupCode = value;
					this.SendPropertyChanged("GroupCode");
					this.OnGroupCodeChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(30)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_CreateUser", DbType="NVarChar(50)")]
		public string CreateUser
		{
			get
			{
				return this._CreateUser;
			}
			set
			{
				if ((this._CreateUser != value))
				{
					this.OnCreateUserChanging(value);
					this.SendPropertyChanging();
					this._CreateUser = value;
					this.SendPropertyChanged("CreateUser");
					this.OnCreateUserChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AlterUser", DbType="NVarChar(50)")]
		public string AlterUser
		{
			get
			{
				return this._AlterUser;
			}
			set
			{
				if ((this._AlterUser != value))
				{
					this.OnAlterUserChanging(value);
					this.SendPropertyChanging();
					this._AlterUser = value;
					this.SendPropertyChanged("AlterUser");
					this.OnAlterUserChanged();
				}
			}
		}
		
		[Column(Storage="_AlterDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlterDate
		{
			get
			{
				return this._AlterDate;
			}
			set
			{
				if ((this._AlterDate != value))
				{
					this.OnAlterDateChanging(value);
					this.SendPropertyChanging();
					this._AlterDate = value;
					this.SendPropertyChanged("AlterDate");
					this.OnAlterDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ColorSizeCupRange")]
	public partial class ColorSizeCupRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DataCode;
		
		private string _Category;
		
		private string _Description;
		
		private System.Nullable<bool> _IsRange;
		
		private System.Nullable<int> _Seq;
		
		private System.Nullable<int> _GroupCode;
		
		private EntitySet<ColorSizeCupRangeDetail> _ColorSizeCupRangeDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDataCodeChanging(string value);
    partial void OnDataCodeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsRangeChanging(System.Nullable<bool> value);
    partial void OnIsRangeChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    partial void OnGroupCodeChanging(System.Nullable<int> value);
    partial void OnGroupCodeChanged();
    #endregion
		
		public ColorSizeCupRange()
		{
			this._ColorSizeCupRangeDetails = new EntitySet<ColorSizeCupRangeDetail>(new Action<ColorSizeCupRangeDetail>(this.attach_ColorSizeCupRangeDetails), new Action<ColorSizeCupRangeDetail>(this.detach_ColorSizeCupRangeDetails));
			OnCreated();
		}
		
		[Column(Storage="_DataCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DataCode
		{
			get
			{
				return this._DataCode;
			}
			set
			{
				if ((this._DataCode != value))
				{
					this.OnDataCodeChanging(value);
					this.SendPropertyChanging();
					this._DataCode = value;
					this.SendPropertyChanged("DataCode");
					this.OnDataCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_IsRange", DbType="Bit")]
		public System.Nullable<bool> IsRange
		{
			get
			{
				return this._IsRange;
			}
			set
			{
				if ((this._IsRange != value))
				{
					this.OnIsRangeChanging(value);
					this.SendPropertyChanging();
					this._IsRange = value;
					this.SendPropertyChanged("IsRange");
					this.OnIsRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Column(Storage="_GroupCode", DbType="Int")]
		public System.Nullable<int> GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this.OnGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._GroupCode = value;
					this.SendPropertyChanged("GroupCode");
					this.OnGroupCodeChanged();
				}
			}
		}
		
		[Association(Name="ColorSizeCupRange_ColorSizeCupRangeDetail", Storage="_ColorSizeCupRangeDetails", ThisKey="DataCode,Category", OtherKey="DataCode,Category")]
		public EntitySet<ColorSizeCupRangeDetail> ColorSizeCupRangeDetails
		{
			get
			{
				return this._ColorSizeCupRangeDetails;
			}
			set
			{
				this._ColorSizeCupRangeDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ColorSizeCupRangeDetails(ColorSizeCupRangeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ColorSizeCupRange = this;
		}
		
		private void detach_ColorSizeCupRangeDetails(ColorSizeCupRangeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ColorSizeCupRange = null;
		}
	}
	
	[Table(Name="dbo.MaterialPriceHeader")]
	public partial class MaterialPriceHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _PriceType;
		
		private string _Category;
		
		private System.Nullable<bool> _IsMultiPrice;
		
		private System.DateTime _EffectFromDate;
		
		private System.Nullable<System.DateTime> _EffectEndDate;
		
		private string _Version;
		
		private System.Nullable<decimal> _WastageOnCAC;
		
		private System.Nullable<decimal> _Relaxtion;
		
		private System.Nullable<decimal> _ValueAdjustAddDyeing;
		
		private System.Nullable<decimal> _PriceIncrProtect;
		
		private System.Nullable<decimal> _UncertainQuality;
		
		private System.Nullable<decimal> _OthersBuffer;
		
		private EntitySet<NewColorDetail> _NewColorDetails;
		
		private EntitySet<NewCupDetail> _NewCupDetails;
		
		private EntitySet<NewSizeDetail> _NewSizeDetails;
		
		private EntitySet<MaterialPrice> _MaterialPrices;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnPriceTypeChanging(string value);
    partial void OnPriceTypeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnIsMultiPriceChanging(System.Nullable<bool> value);
    partial void OnIsMultiPriceChanged();
    partial void OnEffectFromDateChanging(System.DateTime value);
    partial void OnEffectFromDateChanged();
    partial void OnEffectEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectEndDateChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnWastageOnCACChanging(System.Nullable<decimal> value);
    partial void OnWastageOnCACChanged();
    partial void OnRelaxtionChanging(System.Nullable<decimal> value);
    partial void OnRelaxtionChanged();
    partial void OnValueAdjustAddDyeingChanging(System.Nullable<decimal> value);
    partial void OnValueAdjustAddDyeingChanged();
    partial void OnPriceIncrProtectChanging(System.Nullable<decimal> value);
    partial void OnPriceIncrProtectChanged();
    partial void OnUncertainQualityChanging(System.Nullable<decimal> value);
    partial void OnUncertainQualityChanged();
    partial void OnOthersBufferChanging(System.Nullable<decimal> value);
    partial void OnOthersBufferChanged();
    #endregion
		
		public MaterialPriceHeader()
		{
			this._NewColorDetails = new EntitySet<NewColorDetail>(new Action<NewColorDetail>(this.attach_NewColorDetails), new Action<NewColorDetail>(this.detach_NewColorDetails));
			this._NewCupDetails = new EntitySet<NewCupDetail>(new Action<NewCupDetail>(this.attach_NewCupDetails), new Action<NewCupDetail>(this.detach_NewCupDetails));
			this._NewSizeDetails = new EntitySet<NewSizeDetail>(new Action<NewSizeDetail>(this.attach_NewSizeDetails), new Action<NewSizeDetail>(this.detach_NewSizeDetails));
			this._MaterialPrices = new EntitySet<MaterialPrice>(new Action<MaterialPrice>(this.attach_MaterialPrices), new Action<MaterialPrice>(this.detach_MaterialPrices));
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_PriceType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PriceType
		{
			get
			{
				return this._PriceType;
			}
			set
			{
				if ((this._PriceType != value))
				{
					this.OnPriceTypeChanging(value);
					this.SendPropertyChanging();
					this._PriceType = value;
					this.SendPropertyChanged("PriceType");
					this.OnPriceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_IsMultiPrice", DbType="Bit")]
		public System.Nullable<bool> IsMultiPrice
		{
			get
			{
				return this._IsMultiPrice;
			}
			set
			{
				if ((this._IsMultiPrice != value))
				{
					this.OnIsMultiPriceChanging(value);
					this.SendPropertyChanging();
					this._IsMultiPrice = value;
					this.SendPropertyChanged("IsMultiPrice");
					this.OnIsMultiPriceChanged();
				}
			}
		}
		
		[Column(Storage="_EffectFromDate", DbType="DateTime NOT NULL")]
		public System.DateTime EffectFromDate
		{
			get
			{
				return this._EffectFromDate;
			}
			set
			{
				if ((this._EffectFromDate != value))
				{
					this.OnEffectFromDateChanging(value);
					this.SendPropertyChanging();
					this._EffectFromDate = value;
					this.SendPropertyChanged("EffectFromDate");
					this.OnEffectFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_EffectEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectEndDate
		{
			get
			{
				return this._EffectEndDate;
			}
			set
			{
				if ((this._EffectEndDate != value))
				{
					this.OnEffectEndDateChanging(value);
					this.SendPropertyChanging();
					this._EffectEndDate = value;
					this.SendPropertyChanged("EffectEndDate");
					this.OnEffectEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_WastageOnCAC", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> WastageOnCAC
		{
			get
			{
				return this._WastageOnCAC;
			}
			set
			{
				if ((this._WastageOnCAC != value))
				{
					this.OnWastageOnCACChanging(value);
					this.SendPropertyChanging();
					this._WastageOnCAC = value;
					this.SendPropertyChanged("WastageOnCAC");
					this.OnWastageOnCACChanged();
				}
			}
		}
		
		[Column(Storage="_Relaxtion", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Relaxtion
		{
			get
			{
				return this._Relaxtion;
			}
			set
			{
				if ((this._Relaxtion != value))
				{
					this.OnRelaxtionChanging(value);
					this.SendPropertyChanging();
					this._Relaxtion = value;
					this.SendPropertyChanged("Relaxtion");
					this.OnRelaxtionChanged();
				}
			}
		}
		
		[Column(Storage="_ValueAdjustAddDyeing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> ValueAdjustAddDyeing
		{
			get
			{
				return this._ValueAdjustAddDyeing;
			}
			set
			{
				if ((this._ValueAdjustAddDyeing != value))
				{
					this.OnValueAdjustAddDyeingChanging(value);
					this.SendPropertyChanging();
					this._ValueAdjustAddDyeing = value;
					this.SendPropertyChanged("ValueAdjustAddDyeing");
					this.OnValueAdjustAddDyeingChanged();
				}
			}
		}
		
		[Column(Storage="_PriceIncrProtect", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PriceIncrProtect
		{
			get
			{
				return this._PriceIncrProtect;
			}
			set
			{
				if ((this._PriceIncrProtect != value))
				{
					this.OnPriceIncrProtectChanging(value);
					this.SendPropertyChanging();
					this._PriceIncrProtect = value;
					this.SendPropertyChanged("PriceIncrProtect");
					this.OnPriceIncrProtectChanged();
				}
			}
		}
		
		[Column(Storage="_UncertainQuality", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> UncertainQuality
		{
			get
			{
				return this._UncertainQuality;
			}
			set
			{
				if ((this._UncertainQuality != value))
				{
					this.OnUncertainQualityChanging(value);
					this.SendPropertyChanging();
					this._UncertainQuality = value;
					this.SendPropertyChanged("UncertainQuality");
					this.OnUncertainQualityChanged();
				}
			}
		}
		
		[Column(Storage="_OthersBuffer", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> OthersBuffer
		{
			get
			{
				return this._OthersBuffer;
			}
			set
			{
				if ((this._OthersBuffer != value))
				{
					this.OnOthersBufferChanging(value);
					this.SendPropertyChanging();
					this._OthersBuffer = value;
					this.SendPropertyChanged("OthersBuffer");
					this.OnOthersBufferChanged();
				}
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewColorDetail", Storage="_NewColorDetails", ThisKey="Version", OtherKey="Version")]
		public EntitySet<NewColorDetail> NewColorDetails
		{
			get
			{
				return this._NewColorDetails;
			}
			set
			{
				this._NewColorDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewCupDetail", Storage="_NewCupDetails", ThisKey="Version", OtherKey="Version")]
		public EntitySet<NewCupDetail> NewCupDetails
		{
			get
			{
				return this._NewCupDetails;
			}
			set
			{
				this._NewCupDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialPriceHeader_NewSizeDetail", Storage="_NewSizeDetails", ThisKey="Version", OtherKey="Version")]
		public EntitySet<NewSizeDetail> NewSizeDetails
		{
			get
			{
				return this._NewSizeDetails;
			}
			set
			{
				this._NewSizeDetails.Assign(value);
			}
		}
		
		[Association(Name="MaterialPriceHeader_MaterialPrice", Storage="_MaterialPrices", ThisKey="Version", OtherKey="Version")]
		public EntitySet<MaterialPrice> MaterialPrices
		{
			get
			{
				return this._MaterialPrices;
			}
			set
			{
				this._MaterialPrices.Assign(value);
			}
		}
		
		[Association(Name="Detail_MaterialPriceHeader", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.MaterialPriceHeaders.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.MaterialPriceHeaders.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewColorDetails(NewColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = this;
		}
		
		private void detach_NewColorDetails(NewColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = null;
		}
		
		private void attach_NewCupDetails(NewCupDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = this;
		}
		
		private void detach_NewCupDetails(NewCupDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = null;
		}
		
		private void attach_NewSizeDetails(NewSizeDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = this;
		}
		
		private void detach_NewSizeDetails(NewSizeDetail entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = null;
		}
		
		private void attach_MaterialPrices(MaterialPrice entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = this;
		}
		
		private void detach_MaterialPrices(MaterialPrice entity)
		{
			this.SendPropertyChanging();
			entity.MaterialPriceHeader = null;
		}
	}
	
	[Table(Name="dbo.MaterialTypeSizeCup")]
	public partial class MaterialTypeSizeCup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MatType;
		
		private string _Category;
		
		private string _SizeCup;
		
		private string _Description;
		
		private System.Nullable<int> _Seq;
		
		private System.Nullable<int> _GroupCode;
		
		private EntityRef<MaterialType> _MaterialType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMatTypeChanging(string value);
    partial void OnMatTypeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnSizeCupChanging(string value);
    partial void OnSizeCupChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    partial void OnGroupCodeChanging(System.Nullable<int> value);
    partial void OnGroupCodeChanged();
    #endregion
		
		public MaterialTypeSizeCup()
		{
			this._MaterialType = default(EntityRef<MaterialType>);
			OnCreated();
		}
		
		[Column(Storage="_MatType", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MatType
		{
			get
			{
				return this._MatType;
			}
			set
			{
				if ((this._MatType != value))
				{
					if (this._MaterialType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatTypeChanging(value);
					this.SendPropertyChanging();
					this._MatType = value;
					this.SendPropertyChanged("MatType");
					this.OnMatTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_SizeCup", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SizeCup
		{
			get
			{
				return this._SizeCup;
			}
			set
			{
				if ((this._SizeCup != value))
				{
					this.OnSizeCupChanging(value);
					this.SendPropertyChanging();
					this._SizeCup = value;
					this.SendPropertyChanged("SizeCup");
					this.OnSizeCupChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Column(Storage="_GroupCode", DbType="Int")]
		public System.Nullable<int> GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this.OnGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._GroupCode = value;
					this.SendPropertyChanged("GroupCode");
					this.OnGroupCodeChanged();
				}
			}
		}
		
		[Association(Name="MaterialType_MaterialTypeSizeCup", Storage="_MaterialType", ThisKey="MatType", OtherKey="MaterialType1", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialType MaterialType
		{
			get
			{
				return this._MaterialType.Entity;
			}
			set
			{
				MaterialType previousValue = this._MaterialType.Entity;
				if (((previousValue != value) 
							|| (this._MaterialType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialType.Entity = null;
						previousValue.MaterialTypeSizeCups.Remove(this);
					}
					this._MaterialType.Entity = value;
					if ((value != null))
					{
						value.MaterialTypeSizeCups.Add(this);
						this._MatType = value.MaterialType1;
					}
					else
					{
						this._MatType = default(string);
					}
					this.SendPropertyChanged("MaterialType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LogMsg")]
	public partial class LogMsg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TimeId;
		
		private string _LogType;
		
		private string _LogTxt;
		
		private string _CreateOr;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTimeIdChanging(string value);
    partial void OnTimeIdChanged();
    partial void OnLogTypeChanging(string value);
    partial void OnLogTypeChanged();
    partial void OnLogTxtChanging(string value);
    partial void OnLogTxtChanged();
    partial void OnCreateOrChanging(string value);
    partial void OnCreateOrChanged();
    #endregion
		
		public LogMsg()
		{
			OnCreated();
		}
		
		[Column(Storage="_TimeId", DbType="NVarChar(17) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TimeId
		{
			get
			{
				return this._TimeId;
			}
			set
			{
				if ((this._TimeId != value))
				{
					this.OnTimeIdChanging(value);
					this.SendPropertyChanging();
					this._TimeId = value;
					this.SendPropertyChanged("TimeId");
					this.OnTimeIdChanged();
				}
			}
		}
		
		[Column(Storage="_LogType", DbType="NVarChar(20)")]
		public string LogType
		{
			get
			{
				return this._LogType;
			}
			set
			{
				if ((this._LogType != value))
				{
					this.OnLogTypeChanging(value);
					this.SendPropertyChanging();
					this._LogType = value;
					this.SendPropertyChanged("LogType");
					this.OnLogTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LogTxt", DbType="NVarChar(4000)")]
		public string LogTxt
		{
			get
			{
				return this._LogTxt;
			}
			set
			{
				if ((this._LogTxt != value))
				{
					this.OnLogTxtChanging(value);
					this.SendPropertyChanging();
					this._LogTxt = value;
					this.SendPropertyChanged("LogTxt");
					this.OnLogTxtChanged();
				}
			}
		}
		
		[Column(Storage="_CreateOr", DbType="NVarChar(50)")]
		public string CreateOr
		{
			get
			{
				return this._CreateOr;
			}
			set
			{
				if ((this._CreateOr != value))
				{
					this.OnCreateOrChanging(value);
					this.SendPropertyChanging();
					this._CreateOr = value;
					this.SendPropertyChanged("CreateOr");
					this.OnCreateOrChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.V_GetSupplierProfile")]
	public partial class V_GetSupplierProfile
	{
		
		private string _ERPSupplier;
		
		private string _Supplier;
		
		private string _SupplierName;
		
		private string _Address;
		
		private string _TEL;
		
		private string _Fax;
		
		private string _MobilePhone;
		
		private string _EMail;
		
		private string _Country;
		
		private string _Beneficiary;
		
		private string _Agent;
		
		private string _Active;
		
		private string _AttnPerson;
		
		private string _Remarks;
		
		private string _Currency;
		
		private System.Nullable<decimal> _StandardDev;
		
		private System.Nullable<decimal> _TradingDis;
		
		private System.Nullable<decimal> _FurtherDis;
		
		private string _CreditDays;
		
		private System.Nullable<decimal> _EstInterest;
		
		private System.Nullable<decimal> _BankCharge;
		
		private System.Nullable<decimal> _StockInterest;
		
		private System.Nullable<decimal> _Transportation;
		
		private System.Nullable<decimal> _InlandForwarderHandling;
		
		private System.Nullable<decimal> _InlandTransportation;
		
		private System.Nullable<decimal> _TransitLoadingTransportation;
		
		private System.Nullable<decimal> _Frieght;
		
		private System.Nullable<decimal> _Frieght_Air;
		
		private System.Nullable<decimal> _Frieght_Boat;
		
		private System.Nullable<decimal> _AdditionalFrieght;
		
		private System.Nullable<decimal> _SubCharge;
		
		private string _DeliveryTerms;
		
		private string _SupplierUOM;
		
		private string _ShipMode;
		
		private string _DischargePort;
		
		private string _DeliveryMode;
		
		private System.Nullable<decimal> _TransitTimeTruck;
		
		private System.Nullable<decimal> _TransitTimeAir;
		
		private System.Nullable<decimal> _TransitTimeBoat;
		
		private string _MaterialGroup;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<double> _DevelopmentCapability;
		
		private System.Nullable<double> _ProductionLeadtime;
		
		private System.Nullable<double> _Quality;
		
		private System.Nullable<double> _Shipment;
		
		private System.Nullable<double> _OverallService;
		
		private System.Nullable<double> _Color;
		
		private string _PaymentMethod;
		
		private string _PostCode;
		
		private string _AlphaSequenceField;
		
		private string _PortofDischarge;
		
		private string _FirstStation;
		
		private string _ForwarderShippingLine;
		
		private string _SuppDelWording;
		
		private string _WeekOnThisDay;
		
		private string _SupplierGrp;
		
		private string _BusinessNature;
		
		private string _PaymentTerms;
		
		private string _Multiplepxpolicy;
		
		private string _Dimension;
		
		private System.Nullable<System.DateTime> _IncotermsEffectivedDate;
		
		private string _PHUOM;
		
		private System.Nullable<double> _ShipmentTolerant;
		
		private string _WidthSpec;
		
		private System.Nullable<double> _UOMConvert;
		
		private string _ForwarderShippingCoName;
		
		private string _ForwarderShippingContact;
		
		private string _ForwarderShippingTel;
		
		private System.Nullable<bool> _AssignedBy;
		
		private System.Nullable<bool> _DeleteFlag;
		
		private System.Nullable<bool> _GoodsPack;
		
		private string _PDD;
		
		private System.Nullable<System.DateTime> _PDDDate;
		
		private string _IQC;
		
		private System.Nullable<System.DateTime> _IQCDate;
		
		private string _FabricTec;
		
		private System.Nullable<System.DateTime> _FabricTecDate;
		
		private string _PUR;
		
		private System.Nullable<System.DateTime> _PURDate;
		
		private System.Nullable<bool> _HaveSupplementSheet;
		
		private string _SupplierGroup;
		
		private System.Nullable<bool> _AssociatePartner;
		
		private string _CustDependent;
		
		private string _PreparePerson;
		
		private System.Nullable<System.DateTime> _PrepareDate;
		
		private string _ConfirmPerson;
		
		private System.Nullable<System.DateTime> _ConfirmDate;
		
		private string _ApprovalPerson;
		
		private System.Nullable<System.DateTime> _ApprovalDate;
		
		private string _SupplierStatusDescription;
		
		public V_GetSupplierProfile()
		{
		}
		
		[Column(Storage="_ERPSupplier", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ERPSupplier
		{
			get
			{
				return this._ERPSupplier;
			}
			set
			{
				if ((this._ERPSupplier != value))
				{
					this._ERPSupplier = value;
				}
			}
		}
		
		[Column(Storage="_Supplier", DbType="VarChar(50)")]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this._Supplier = value;
				}
			}
		}
		
		[Column(Storage="_SupplierName", DbType="NVarChar(100)")]
		public string SupplierName
		{
			get
			{
				return this._SupplierName;
			}
			set
			{
				if ((this._SupplierName != value))
				{
					this._SupplierName = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(500)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_TEL", DbType="NVarChar(50)")]
		public string TEL
		{
			get
			{
				return this._TEL;
			}
			set
			{
				if ((this._TEL != value))
				{
					this._TEL = value;
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this._Fax = value;
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="NVarChar(50)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this._MobilePhone = value;
				}
			}
		}
		
		[Column(Storage="_EMail", DbType="NVarChar(150)")]
		public string EMail
		{
			get
			{
				return this._EMail;
			}
			set
			{
				if ((this._EMail != value))
				{
					this._EMail = value;
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this._Country = value;
				}
			}
		}
		
		[Column(Storage="_Beneficiary", DbType="NVarChar(50)")]
		public string Beneficiary
		{
			get
			{
				return this._Beneficiary;
			}
			set
			{
				if ((this._Beneficiary != value))
				{
					this._Beneficiary = value;
				}
			}
		}
		
		[Column(Storage="_Agent", DbType="NVarChar(50)")]
		public string Agent
		{
			get
			{
				return this._Agent;
			}
			set
			{
				if ((this._Agent != value))
				{
					this._Agent = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="NVarChar(50)")]
		public string Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_AttnPerson", DbType="NVarChar(50)")]
		public string AttnPerson
		{
			get
			{
				return this._AttnPerson;
			}
			set
			{
				if ((this._AttnPerson != value))
				{
					this._AttnPerson = value;
				}
			}
		}
		
		[Column(Storage="_Remarks", DbType="NVarChar(2000)")]
		public string Remarks
		{
			get
			{
				return this._Remarks;
			}
			set
			{
				if ((this._Remarks != value))
				{
					this._Remarks = value;
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="NVarChar(5)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this._Currency = value;
				}
			}
		}
		
		[Column(Storage="_StandardDev", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardDev
		{
			get
			{
				return this._StandardDev;
			}
			set
			{
				if ((this._StandardDev != value))
				{
					this._StandardDev = value;
				}
			}
		}
		
		[Column(Storage="_TradingDis", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TradingDis
		{
			get
			{
				return this._TradingDis;
			}
			set
			{
				if ((this._TradingDis != value))
				{
					this._TradingDis = value;
				}
			}
		}
		
		[Column(Storage="_FurtherDis", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> FurtherDis
		{
			get
			{
				return this._FurtherDis;
			}
			set
			{
				if ((this._FurtherDis != value))
				{
					this._FurtherDis = value;
				}
			}
		}
		
		[Column(Storage="_CreditDays", DbType="NVarChar(20)")]
		public string CreditDays
		{
			get
			{
				return this._CreditDays;
			}
			set
			{
				if ((this._CreditDays != value))
				{
					this._CreditDays = value;
				}
			}
		}
		
		[Column(Storage="_EstInterest", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EstInterest
		{
			get
			{
				return this._EstInterest;
			}
			set
			{
				if ((this._EstInterest != value))
				{
					this._EstInterest = value;
				}
			}
		}
		
		[Column(Storage="_BankCharge", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> BankCharge
		{
			get
			{
				return this._BankCharge;
			}
			set
			{
				if ((this._BankCharge != value))
				{
					this._BankCharge = value;
				}
			}
		}
		
		[Column(Storage="_StockInterest", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StockInterest
		{
			get
			{
				return this._StockInterest;
			}
			set
			{
				if ((this._StockInterest != value))
				{
					this._StockInterest = value;
				}
			}
		}
		
		[Column(Storage="_Transportation", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Transportation
		{
			get
			{
				return this._Transportation;
			}
			set
			{
				if ((this._Transportation != value))
				{
					this._Transportation = value;
				}
			}
		}
		
		[Column(Storage="_InlandForwarderHandling", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> InlandForwarderHandling
		{
			get
			{
				return this._InlandForwarderHandling;
			}
			set
			{
				if ((this._InlandForwarderHandling != value))
				{
					this._InlandForwarderHandling = value;
				}
			}
		}
		
		[Column(Storage="_InlandTransportation", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> InlandTransportation
		{
			get
			{
				return this._InlandTransportation;
			}
			set
			{
				if ((this._InlandTransportation != value))
				{
					this._InlandTransportation = value;
				}
			}
		}
		
		[Column(Storage="_TransitLoadingTransportation", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TransitLoadingTransportation
		{
			get
			{
				return this._TransitLoadingTransportation;
			}
			set
			{
				if ((this._TransitLoadingTransportation != value))
				{
					this._TransitLoadingTransportation = value;
				}
			}
		}
		
		[Column(Storage="_Frieght", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Frieght
		{
			get
			{
				return this._Frieght;
			}
			set
			{
				if ((this._Frieght != value))
				{
					this._Frieght = value;
				}
			}
		}
		
		[Column(Storage="_Frieght_Air", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Frieght_Air
		{
			get
			{
				return this._Frieght_Air;
			}
			set
			{
				if ((this._Frieght_Air != value))
				{
					this._Frieght_Air = value;
				}
			}
		}
		
		[Column(Storage="_Frieght_Boat", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Frieght_Boat
		{
			get
			{
				return this._Frieght_Boat;
			}
			set
			{
				if ((this._Frieght_Boat != value))
				{
					this._Frieght_Boat = value;
				}
			}
		}
		
		[Column(Storage="_AdditionalFrieght", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AdditionalFrieght
		{
			get
			{
				return this._AdditionalFrieght;
			}
			set
			{
				if ((this._AdditionalFrieght != value))
				{
					this._AdditionalFrieght = value;
				}
			}
		}
		
		[Column(Storage="_SubCharge", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> SubCharge
		{
			get
			{
				return this._SubCharge;
			}
			set
			{
				if ((this._SubCharge != value))
				{
					this._SubCharge = value;
				}
			}
		}
		
		[Column(Storage="_DeliveryTerms", DbType="NVarChar(50)")]
		public string DeliveryTerms
		{
			get
			{
				return this._DeliveryTerms;
			}
			set
			{
				if ((this._DeliveryTerms != value))
				{
					this._DeliveryTerms = value;
				}
			}
		}
		
		[Column(Storage="_SupplierUOM", DbType="NVarChar(50)")]
		public string SupplierUOM
		{
			get
			{
				return this._SupplierUOM;
			}
			set
			{
				if ((this._SupplierUOM != value))
				{
					this._SupplierUOM = value;
				}
			}
		}
		
		[Column(Storage="_ShipMode", DbType="NVarChar(50)")]
		public string ShipMode
		{
			get
			{
				return this._ShipMode;
			}
			set
			{
				if ((this._ShipMode != value))
				{
					this._ShipMode = value;
				}
			}
		}
		
		[Column(Storage="_DischargePort", DbType="NVarChar(50)")]
		public string DischargePort
		{
			get
			{
				return this._DischargePort;
			}
			set
			{
				if ((this._DischargePort != value))
				{
					this._DischargePort = value;
				}
			}
		}
		
		[Column(Storage="_DeliveryMode", DbType="NVarChar(50)")]
		public string DeliveryMode
		{
			get
			{
				return this._DeliveryMode;
			}
			set
			{
				if ((this._DeliveryMode != value))
				{
					this._DeliveryMode = value;
				}
			}
		}
		
		[Column(Storage="_TransitTimeTruck", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TransitTimeTruck
		{
			get
			{
				return this._TransitTimeTruck;
			}
			set
			{
				if ((this._TransitTimeTruck != value))
				{
					this._TransitTimeTruck = value;
				}
			}
		}
		
		[Column(Storage="_TransitTimeAir", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TransitTimeAir
		{
			get
			{
				return this._TransitTimeAir;
			}
			set
			{
				if ((this._TransitTimeAir != value))
				{
					this._TransitTimeAir = value;
				}
			}
		}
		
		[Column(Storage="_TransitTimeBoat", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TransitTimeBoat
		{
			get
			{
				return this._TransitTimeBoat;
			}
			set
			{
				if ((this._TransitTimeBoat != value))
				{
					this._TransitTimeBoat = value;
				}
			}
		}
		
		[Column(Storage="_MaterialGroup", DbType="NVarChar(50)")]
		public string MaterialGroup
		{
			get
			{
				return this._MaterialGroup;
			}
			set
			{
				if ((this._MaterialGroup != value))
				{
					this._MaterialGroup = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
		
		[Column(Storage="_DevelopmentCapability", DbType="Float")]
		public System.Nullable<double> DevelopmentCapability
		{
			get
			{
				return this._DevelopmentCapability;
			}
			set
			{
				if ((this._DevelopmentCapability != value))
				{
					this._DevelopmentCapability = value;
				}
			}
		}
		
		[Column(Storage="_ProductionLeadtime", DbType="Float")]
		public System.Nullable<double> ProductionLeadtime
		{
			get
			{
				return this._ProductionLeadtime;
			}
			set
			{
				if ((this._ProductionLeadtime != value))
				{
					this._ProductionLeadtime = value;
				}
			}
		}
		
		[Column(Storage="_Quality", DbType="Float")]
		public System.Nullable<double> Quality
		{
			get
			{
				return this._Quality;
			}
			set
			{
				if ((this._Quality != value))
				{
					this._Quality = value;
				}
			}
		}
		
		[Column(Storage="_Shipment", DbType="Float")]
		public System.Nullable<double> Shipment
		{
			get
			{
				return this._Shipment;
			}
			set
			{
				if ((this._Shipment != value))
				{
					this._Shipment = value;
				}
			}
		}
		
		[Column(Storage="_OverallService", DbType="Float")]
		public System.Nullable<double> OverallService
		{
			get
			{
				return this._OverallService;
			}
			set
			{
				if ((this._OverallService != value))
				{
					this._OverallService = value;
				}
			}
		}
		
		[Column(Storage="_Color", DbType="Float")]
		public System.Nullable<double> Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this._Color = value;
				}
			}
		}
		
		[Column(Storage="_PaymentMethod", DbType="NVarChar(30)")]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this._PaymentMethod = value;
				}
			}
		}
		
		[Column(Storage="_PostCode", DbType="NVarChar(10)")]
		public string PostCode
		{
			get
			{
				return this._PostCode;
			}
			set
			{
				if ((this._PostCode != value))
				{
					this._PostCode = value;
				}
			}
		}
		
		[Column(Storage="_AlphaSequenceField", DbType="NVarChar(10)")]
		public string AlphaSequenceField
		{
			get
			{
				return this._AlphaSequenceField;
			}
			set
			{
				if ((this._AlphaSequenceField != value))
				{
					this._AlphaSequenceField = value;
				}
			}
		}
		
		[Column(Storage="_PortofDischarge", DbType="NVarChar(20)")]
		public string PortofDischarge
		{
			get
			{
				return this._PortofDischarge;
			}
			set
			{
				if ((this._PortofDischarge != value))
				{
					this._PortofDischarge = value;
				}
			}
		}
		
		[Column(Storage="_FirstStation", DbType="NVarChar(20)")]
		public string FirstStation
		{
			get
			{
				return this._FirstStation;
			}
			set
			{
				if ((this._FirstStation != value))
				{
					this._FirstStation = value;
				}
			}
		}
		
		[Column(Storage="_ForwarderShippingLine", DbType="NVarChar(20)")]
		public string ForwarderShippingLine
		{
			get
			{
				return this._ForwarderShippingLine;
			}
			set
			{
				if ((this._ForwarderShippingLine != value))
				{
					this._ForwarderShippingLine = value;
				}
			}
		}
		
		[Column(Storage="_SuppDelWording", DbType="NVarChar(15)")]
		public string SuppDelWording
		{
			get
			{
				return this._SuppDelWording;
			}
			set
			{
				if ((this._SuppDelWording != value))
				{
					this._SuppDelWording = value;
				}
			}
		}
		
		[Column(Storage="_WeekOnThisDay", DbType="NVarChar(15)")]
		public string WeekOnThisDay
		{
			get
			{
				return this._WeekOnThisDay;
			}
			set
			{
				if ((this._WeekOnThisDay != value))
				{
					this._WeekOnThisDay = value;
				}
			}
		}
		
		[Column(Storage="_SupplierGrp", DbType="NVarChar(100)")]
		public string SupplierGrp
		{
			get
			{
				return this._SupplierGrp;
			}
			set
			{
				if ((this._SupplierGrp != value))
				{
					this._SupplierGrp = value;
				}
			}
		}
		
		[Column(Storage="_BusinessNature", DbType="NVarChar(50)")]
		public string BusinessNature
		{
			get
			{
				return this._BusinessNature;
			}
			set
			{
				if ((this._BusinessNature != value))
				{
					this._BusinessNature = value;
				}
			}
		}
		
		[Column(Storage="_PaymentTerms", DbType="NVarChar(50)")]
		public string PaymentTerms
		{
			get
			{
				return this._PaymentTerms;
			}
			set
			{
				if ((this._PaymentTerms != value))
				{
					this._PaymentTerms = value;
				}
			}
		}
		
		[Column(Storage="_Multiplepxpolicy", DbType="NVarChar(50)")]
		public string Multiplepxpolicy
		{
			get
			{
				return this._Multiplepxpolicy;
			}
			set
			{
				if ((this._Multiplepxpolicy != value))
				{
					this._Multiplepxpolicy = value;
				}
			}
		}
		
		[Column(Storage="_Dimension", DbType="VarChar(10)")]
		public string Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this._Dimension = value;
				}
			}
		}
		
		[Column(Storage="_IncotermsEffectivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IncotermsEffectivedDate
		{
			get
			{
				return this._IncotermsEffectivedDate;
			}
			set
			{
				if ((this._IncotermsEffectivedDate != value))
				{
					this._IncotermsEffectivedDate = value;
				}
			}
		}
		
		[Column(Storage="_PHUOM", DbType="NVarChar(10)")]
		public string PHUOM
		{
			get
			{
				return this._PHUOM;
			}
			set
			{
				if ((this._PHUOM != value))
				{
					this._PHUOM = value;
				}
			}
		}
		
		[Column(Storage="_ShipmentTolerant", DbType="Float")]
		public System.Nullable<double> ShipmentTolerant
		{
			get
			{
				return this._ShipmentTolerant;
			}
			set
			{
				if ((this._ShipmentTolerant != value))
				{
					this._ShipmentTolerant = value;
				}
			}
		}
		
		[Column(Storage="_WidthSpec", DbType="NVarChar(10)")]
		public string WidthSpec
		{
			get
			{
				return this._WidthSpec;
			}
			set
			{
				if ((this._WidthSpec != value))
				{
					this._WidthSpec = value;
				}
			}
		}
		
		[Column(Storage="_UOMConvert", DbType="Float")]
		public System.Nullable<double> UOMConvert
		{
			get
			{
				return this._UOMConvert;
			}
			set
			{
				if ((this._UOMConvert != value))
				{
					this._UOMConvert = value;
				}
			}
		}
		
		[Column(Storage="_ForwarderShippingCoName", DbType="NVarChar(100)")]
		public string ForwarderShippingCoName
		{
			get
			{
				return this._ForwarderShippingCoName;
			}
			set
			{
				if ((this._ForwarderShippingCoName != value))
				{
					this._ForwarderShippingCoName = value;
				}
			}
		}
		
		[Column(Storage="_ForwarderShippingContact", DbType="NVarChar(50)")]
		public string ForwarderShippingContact
		{
			get
			{
				return this._ForwarderShippingContact;
			}
			set
			{
				if ((this._ForwarderShippingContact != value))
				{
					this._ForwarderShippingContact = value;
				}
			}
		}
		
		[Column(Storage="_ForwarderShippingTel", DbType="NVarChar(50)")]
		public string ForwarderShippingTel
		{
			get
			{
				return this._ForwarderShippingTel;
			}
			set
			{
				if ((this._ForwarderShippingTel != value))
				{
					this._ForwarderShippingTel = value;
				}
			}
		}
		
		[Column(Storage="_AssignedBy", DbType="Bit")]
		public System.Nullable<bool> AssignedBy
		{
			get
			{
				return this._AssignedBy;
			}
			set
			{
				if ((this._AssignedBy != value))
				{
					this._AssignedBy = value;
				}
			}
		}
		
		[Column(Storage="_DeleteFlag", DbType="Bit")]
		public System.Nullable<bool> DeleteFlag
		{
			get
			{
				return this._DeleteFlag;
			}
			set
			{
				if ((this._DeleteFlag != value))
				{
					this._DeleteFlag = value;
				}
			}
		}
		
		[Column(Storage="_GoodsPack", DbType="Bit")]
		public System.Nullable<bool> GoodsPack
		{
			get
			{
				return this._GoodsPack;
			}
			set
			{
				if ((this._GoodsPack != value))
				{
					this._GoodsPack = value;
				}
			}
		}
		
		[Column(Storage="_PDD", DbType="NVarChar(20)")]
		public string PDD
		{
			get
			{
				return this._PDD;
			}
			set
			{
				if ((this._PDD != value))
				{
					this._PDD = value;
				}
			}
		}
		
		[Column(Storage="_PDDDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PDDDate
		{
			get
			{
				return this._PDDDate;
			}
			set
			{
				if ((this._PDDDate != value))
				{
					this._PDDDate = value;
				}
			}
		}
		
		[Column(Storage="_IQC", DbType="NVarChar(20)")]
		public string IQC
		{
			get
			{
				return this._IQC;
			}
			set
			{
				if ((this._IQC != value))
				{
					this._IQC = value;
				}
			}
		}
		
		[Column(Storage="_IQCDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IQCDate
		{
			get
			{
				return this._IQCDate;
			}
			set
			{
				if ((this._IQCDate != value))
				{
					this._IQCDate = value;
				}
			}
		}
		
		[Column(Storage="_FabricTec", DbType="NVarChar(20)")]
		public string FabricTec
		{
			get
			{
				return this._FabricTec;
			}
			set
			{
				if ((this._FabricTec != value))
				{
					this._FabricTec = value;
				}
			}
		}
		
		[Column(Storage="_FabricTecDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FabricTecDate
		{
			get
			{
				return this._FabricTecDate;
			}
			set
			{
				if ((this._FabricTecDate != value))
				{
					this._FabricTecDate = value;
				}
			}
		}
		
		[Column(Storage="_PUR", DbType="NVarChar(20)")]
		public string PUR
		{
			get
			{
				return this._PUR;
			}
			set
			{
				if ((this._PUR != value))
				{
					this._PUR = value;
				}
			}
		}
		
		[Column(Storage="_PURDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PURDate
		{
			get
			{
				return this._PURDate;
			}
			set
			{
				if ((this._PURDate != value))
				{
					this._PURDate = value;
				}
			}
		}
		
		[Column(Storage="_HaveSupplementSheet", DbType="Bit")]
		public System.Nullable<bool> HaveSupplementSheet
		{
			get
			{
				return this._HaveSupplementSheet;
			}
			set
			{
				if ((this._HaveSupplementSheet != value))
				{
					this._HaveSupplementSheet = value;
				}
			}
		}
		
		[Column(Storage="_SupplierGroup", DbType="NVarChar(200)")]
		public string SupplierGroup
		{
			get
			{
				return this._SupplierGroup;
			}
			set
			{
				if ((this._SupplierGroup != value))
				{
					this._SupplierGroup = value;
				}
			}
		}
		
		[Column(Storage="_AssociatePartner", DbType="Bit")]
		public System.Nullable<bool> AssociatePartner
		{
			get
			{
				return this._AssociatePartner;
			}
			set
			{
				if ((this._AssociatePartner != value))
				{
					this._AssociatePartner = value;
				}
			}
		}
		
		[Column(Storage="_CustDependent", DbType="NVarChar(200)")]
		public string CustDependent
		{
			get
			{
				return this._CustDependent;
			}
			set
			{
				if ((this._CustDependent != value))
				{
					this._CustDependent = value;
				}
			}
		}
		
		[Column(Storage="_PreparePerson", DbType="NVarChar(20)")]
		public string PreparePerson
		{
			get
			{
				return this._PreparePerson;
			}
			set
			{
				if ((this._PreparePerson != value))
				{
					this._PreparePerson = value;
				}
			}
		}
		
		[Column(Storage="_PrepareDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PrepareDate
		{
			get
			{
				return this._PrepareDate;
			}
			set
			{
				if ((this._PrepareDate != value))
				{
					this._PrepareDate = value;
				}
			}
		}
		
		[Column(Storage="_ConfirmPerson", DbType="NVarChar(20)")]
		public string ConfirmPerson
		{
			get
			{
				return this._ConfirmPerson;
			}
			set
			{
				if ((this._ConfirmPerson != value))
				{
					this._ConfirmPerson = value;
				}
			}
		}
		
		[Column(Storage="_ConfirmDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfirmDate
		{
			get
			{
				return this._ConfirmDate;
			}
			set
			{
				if ((this._ConfirmDate != value))
				{
					this._ConfirmDate = value;
				}
			}
		}
		
		[Column(Storage="_ApprovalPerson", DbType="NVarChar(20)")]
		public string ApprovalPerson
		{
			get
			{
				return this._ApprovalPerson;
			}
			set
			{
				if ((this._ApprovalPerson != value))
				{
					this._ApprovalPerson = value;
				}
			}
		}
		
		[Column(Storage="_ApprovalDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApprovalDate
		{
			get
			{
				return this._ApprovalDate;
			}
			set
			{
				if ((this._ApprovalDate != value))
				{
					this._ApprovalDate = value;
				}
			}
		}
		
		[Column(Storage="_SupplierStatusDescription", DbType="NVarChar(200)")]
		public string SupplierStatusDescription
		{
			get
			{
				return this._SupplierStatusDescription;
			}
			set
			{
				if ((this._SupplierStatusDescription != value))
				{
					this._SupplierStatusDescription = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.V_PricesOfTimeout")]
	public partial class V_PricesOfTimeout
	{
		
		private string _SuppRef;
		
		private string _PriceType;
		
		private string _Category;
		
		private System.Nullable<bool> _IsMultiPrice;
		
		private System.DateTime _EffectFromDate;
		
		private System.Nullable<System.DateTime> _EffectEndDate;
		
		private string _Version;
		
		private System.Nullable<decimal> _WastageOnCAC;
		
		private System.Nullable<decimal> _Relaxtion;
		
		private System.Nullable<decimal> _ValueAdjustAddDyeing;
		
		private System.Nullable<decimal> _PriceIncrProtect;
		
		private System.Nullable<decimal> _UncertainQuality;
		
		private System.Nullable<decimal> _OthersBuffer;
		
		public V_PricesOfTimeout()
		{
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this._SuppRef = value;
				}
			}
		}
		
		[Column(Storage="_PriceType", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string PriceType
		{
			get
			{
				return this._PriceType;
			}
			set
			{
				if ((this._PriceType != value))
				{
					this._PriceType = value;
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this._Category = value;
				}
			}
		}
		
		[Column(Storage="_IsMultiPrice", DbType="Bit")]
		public System.Nullable<bool> IsMultiPrice
		{
			get
			{
				return this._IsMultiPrice;
			}
			set
			{
				if ((this._IsMultiPrice != value))
				{
					this._IsMultiPrice = value;
				}
			}
		}
		
		[Column(Storage="_EffectFromDate", DbType="DateTime NOT NULL")]
		public System.DateTime EffectFromDate
		{
			get
			{
				return this._EffectFromDate;
			}
			set
			{
				if ((this._EffectFromDate != value))
				{
					this._EffectFromDate = value;
				}
			}
		}
		
		[Column(Storage="_EffectEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectEndDate
		{
			get
			{
				return this._EffectEndDate;
			}
			set
			{
				if ((this._EffectEndDate != value))
				{
					this._EffectEndDate = value;
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_WastageOnCAC", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> WastageOnCAC
		{
			get
			{
				return this._WastageOnCAC;
			}
			set
			{
				if ((this._WastageOnCAC != value))
				{
					this._WastageOnCAC = value;
				}
			}
		}
		
		[Column(Storage="_Relaxtion", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Relaxtion
		{
			get
			{
				return this._Relaxtion;
			}
			set
			{
				if ((this._Relaxtion != value))
				{
					this._Relaxtion = value;
				}
			}
		}
		
		[Column(Storage="_ValueAdjustAddDyeing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> ValueAdjustAddDyeing
		{
			get
			{
				return this._ValueAdjustAddDyeing;
			}
			set
			{
				if ((this._ValueAdjustAddDyeing != value))
				{
					this._ValueAdjustAddDyeing = value;
				}
			}
		}
		
		[Column(Storage="_PriceIncrProtect", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PriceIncrProtect
		{
			get
			{
				return this._PriceIncrProtect;
			}
			set
			{
				if ((this._PriceIncrProtect != value))
				{
					this._PriceIncrProtect = value;
				}
			}
		}
		
		[Column(Storage="_UncertainQuality", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> UncertainQuality
		{
			get
			{
				return this._UncertainQuality;
			}
			set
			{
				if ((this._UncertainQuality != value))
				{
					this._UncertainQuality = value;
				}
			}
		}
		
		[Column(Storage="_OthersBuffer", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> OthersBuffer
		{
			get
			{
				return this._OthersBuffer;
			}
			set
			{
				if ((this._OthersBuffer != value))
				{
					this._OthersBuffer = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.WeightMaterial")]
	public partial class WeightMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaterialName;
		
		private string _MaterialHSCode;
		
		private System.Nullable<int> _Seq;
		
		private EntitySet<WipWeight> _WipWeights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialNameChanging(string value);
    partial void OnMaterialNameChanged();
    partial void OnMaterialHSCodeChanging(string value);
    partial void OnMaterialHSCodeChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public WeightMaterial()
		{
			this._WipWeights = new EntitySet<WipWeight>(new Action<WipWeight>(this.attach_WipWeights), new Action<WipWeight>(this.detach_WipWeights));
			OnCreated();
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					this.OnMaterialNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialName = value;
					this.SendPropertyChanged("MaterialName");
					this.OnMaterialNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialHSCode", DbType="VarChar(20)")]
		public string MaterialHSCode
		{
			get
			{
				return this._MaterialHSCode;
			}
			set
			{
				if ((this._MaterialHSCode != value))
				{
					this.OnMaterialHSCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialHSCode = value;
					this.SendPropertyChanged("MaterialHSCode");
					this.OnMaterialHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Association(Name="WeightMaterial_WipWeight", Storage="_WipWeights", ThisKey="MaterialName", OtherKey="MaterialName")]
		public EntitySet<WipWeight> WipWeights
		{
			get
			{
				return this._WipWeights;
			}
			set
			{
				this._WipWeights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WipWeights(WipWeight entity)
		{
			this.SendPropertyChanging();
			entity.WeightMaterial = this;
		}
		
		private void detach_WipWeights(WipWeight entity)
		{
			this.SendPropertyChanging();
			entity.WeightMaterial = null;
		}
	}
	
	[Table(Name="dbo.WeightStyle")]
	public partial class WeightStyle : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StyleName;
		
		private string _StyleHSCode;
		
		private System.Nullable<int> _Seq;
		
		private EntitySet<WipWeight> _WipWeights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStyleNameChanging(string value);
    partial void OnStyleNameChanged();
    partial void OnStyleHSCodeChanging(string value);
    partial void OnStyleHSCodeChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public WeightStyle()
		{
			this._WipWeights = new EntitySet<WipWeight>(new Action<WipWeight>(this.attach_WipWeights), new Action<WipWeight>(this.detach_WipWeights));
			OnCreated();
		}
		
		[Column(Storage="_StyleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StyleName
		{
			get
			{
				return this._StyleName;
			}
			set
			{
				if ((this._StyleName != value))
				{
					this.OnStyleNameChanging(value);
					this.SendPropertyChanging();
					this._StyleName = value;
					this.SendPropertyChanged("StyleName");
					this.OnStyleNameChanged();
				}
			}
		}
		
		[Column(Storage="_StyleHSCode", DbType="VarChar(20)")]
		public string StyleHSCode
		{
			get
			{
				return this._StyleHSCode;
			}
			set
			{
				if ((this._StyleHSCode != value))
				{
					this.OnStyleHSCodeChanging(value);
					this.SendPropertyChanging();
					this._StyleHSCode = value;
					this.SendPropertyChanged("StyleHSCode");
					this.OnStyleHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Association(Name="WeightStyle_WipWeight", Storage="_WipWeights", ThisKey="StyleName", OtherKey="StyleName")]
		public EntitySet<WipWeight> WipWeights
		{
			get
			{
				return this._WipWeights;
			}
			set
			{
				this._WipWeights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WipWeights(WipWeight entity)
		{
			this.SendPropertyChanging();
			entity.WeightStyle = this;
		}
		
		private void detach_WipWeights(WipWeight entity)
		{
			this.SendPropertyChanging();
			entity.WeightStyle = null;
		}
	}
	
	[Table(Name="dbo.WipWeight")]
	public partial class WipWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StyleName;
		
		private string _MaterialName;
		
		private System.Nullable<decimal> _Weight;
		
		private EntityRef<WeightMaterial> _WeightMaterial;
		
		private EntityRef<WeightStyle> _WeightStyle;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStyleNameChanging(string value);
    partial void OnStyleNameChanged();
    partial void OnMaterialNameChanging(string value);
    partial void OnMaterialNameChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    #endregion
		
		public WipWeight()
		{
			this._WeightMaterial = default(EntityRef<WeightMaterial>);
			this._WeightStyle = default(EntityRef<WeightStyle>);
			OnCreated();
		}
		
		[Column(Storage="_StyleName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StyleName
		{
			get
			{
				return this._StyleName;
			}
			set
			{
				if ((this._StyleName != value))
				{
					if (this._WeightStyle.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStyleNameChanging(value);
					this.SendPropertyChanging();
					this._StyleName = value;
					this.SendPropertyChanged("StyleName");
					this.OnStyleNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialName
		{
			get
			{
				return this._MaterialName;
			}
			set
			{
				if ((this._MaterialName != value))
				{
					if (this._WeightMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialNameChanging(value);
					this.SendPropertyChanging();
					this._MaterialName = value;
					this.SendPropertyChanged("MaterialName");
					this.OnMaterialNameChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Decimal(15,5)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Association(Name="WeightMaterial_WipWeight", Storage="_WeightMaterial", ThisKey="MaterialName", OtherKey="MaterialName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WeightMaterial WeightMaterial
		{
			get
			{
				return this._WeightMaterial.Entity;
			}
			set
			{
				WeightMaterial previousValue = this._WeightMaterial.Entity;
				if (((previousValue != value) 
							|| (this._WeightMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeightMaterial.Entity = null;
						previousValue.WipWeights.Remove(this);
					}
					this._WeightMaterial.Entity = value;
					if ((value != null))
					{
						value.WipWeights.Add(this);
						this._MaterialName = value.MaterialName;
					}
					else
					{
						this._MaterialName = default(string);
					}
					this.SendPropertyChanged("WeightMaterial");
				}
			}
		}
		
		[Association(Name="WeightStyle_WipWeight", Storage="_WeightStyle", ThisKey="StyleName", OtherKey="StyleName", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public WeightStyle WeightStyle
		{
			get
			{
				return this._WeightStyle.Entity;
			}
			set
			{
				WeightStyle previousValue = this._WeightStyle.Entity;
				if (((previousValue != value) 
							|| (this._WeightStyle.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WeightStyle.Entity = null;
						previousValue.WipWeights.Remove(this);
					}
					this._WeightStyle.Entity = value;
					if ((value != null))
					{
						value.WipWeights.Add(this);
						this._StyleName = value.StyleName;
					}
					else
					{
						this._StyleName = default(string);
					}
					this.SendPropertyChanged("WeightStyle");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Color")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Color1;
		
		private string _Description;
		
		private string _Season;
		
		private string _Status;
		
		private string _ColorType;
		
		private string _PantoneNumber;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private EntitySet<ColorSuppCustName> _ColorSuppCustNames;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColor1Changing(string value);
    partial void OnColor1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSeasonChanging(string value);
    partial void OnSeasonChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnColorTypeChanging(string value);
    partial void OnColorTypeChanged();
    partial void OnPantoneNumberChanging(string value);
    partial void OnPantoneNumberChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    #endregion
		
		public Color()
		{
			this._ColorSuppCustNames = new EntitySet<ColorSuppCustName>(new Action<ColorSuppCustName>(this.attach_ColorSuppCustNames), new Action<ColorSuppCustName>(this.detach_ColorSuppCustNames));
			OnCreated();
		}
		
		[Column(Name="Color", Storage="_Color1", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if ((this._Color1 != value))
				{
					this.OnColor1Changing(value);
					this.SendPropertyChanging();
					this._Color1 = value;
					this.SendPropertyChanged("Color1");
					this.OnColor1Changed();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Season", DbType="VarChar(50)")]
		public string Season
		{
			get
			{
				return this._Season;
			}
			set
			{
				if ((this._Season != value))
				{
					this.OnSeasonChanging(value);
					this.SendPropertyChanging();
					this._Season = value;
					this.SendPropertyChanged("Season");
					this.OnSeasonChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ColorType", DbType="NVarChar(50)")]
		public string ColorType
		{
			get
			{
				return this._ColorType;
			}
			set
			{
				if ((this._ColorType != value))
				{
					this.OnColorTypeChanging(value);
					this.SendPropertyChanging();
					this._ColorType = value;
					this.SendPropertyChanged("ColorType");
					this.OnColorTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PantoneNumber", DbType="NVarChar(50)")]
		public string PantoneNumber
		{
			get
			{
				return this._PantoneNumber;
			}
			set
			{
				if ((this._PantoneNumber != value))
				{
					this.OnPantoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PantoneNumber = value;
					this.SendPropertyChanged("PantoneNumber");
					this.OnPantoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Association(Name="Color_ColorSuppCustName", Storage="_ColorSuppCustNames", ThisKey="Color1", OtherKey="ColorID")]
		public EntitySet<ColorSuppCustName> ColorSuppCustNames
		{
			get
			{
				return this._ColorSuppCustNames;
			}
			set
			{
				this._ColorSuppCustNames.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ColorSuppCustNames(ColorSuppCustName entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_ColorSuppCustNames(ColorSuppCustName entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[Table(Name="dbo.MaterialPrice")]
	public partial class MaterialPrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _PriceType;
		
		private string _Category;
		
		private System.DateTime _EffectFromDate;
		
		private System.Nullable<System.DateTime> _EffectEndDate;
		
		private string _ColorRange;
		
		private string _Size;
		
		private string _Cup;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<int> _Ratio;
		
		private string _Version;
		
		private System.Nullable<int> _RestLength;
		
		private EntityRef<MaterialPriceHeader> _MaterialPriceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnPriceTypeChanging(string value);
    partial void OnPriceTypeChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnEffectFromDateChanging(System.DateTime value);
    partial void OnEffectFromDateChanged();
    partial void OnEffectEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectEndDateChanged();
    partial void OnColorRangeChanging(string value);
    partial void OnColorRangeChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnCupChanging(string value);
    partial void OnCupChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnRatioChanging(System.Nullable<int> value);
    partial void OnRatioChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnRestLengthChanging(System.Nullable<int> value);
    partial void OnRestLengthChanged();
    #endregion
		
		public MaterialPrice()
		{
			this._MaterialPriceHeader = default(EntityRef<MaterialPriceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_PriceType", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PriceType
		{
			get
			{
				return this._PriceType;
			}
			set
			{
				if ((this._PriceType != value))
				{
					this.OnPriceTypeChanging(value);
					this.SendPropertyChanging();
					this._PriceType = value;
					this.SendPropertyChanged("PriceType");
					this.OnPriceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_EffectFromDate", DbType="DateTime NOT NULL")]
		public System.DateTime EffectFromDate
		{
			get
			{
				return this._EffectFromDate;
			}
			set
			{
				if ((this._EffectFromDate != value))
				{
					this.OnEffectFromDateChanging(value);
					this.SendPropertyChanging();
					this._EffectFromDate = value;
					this.SendPropertyChanged("EffectFromDate");
					this.OnEffectFromDateChanged();
				}
			}
		}
		
		[Column(Storage="_EffectEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectEndDate
		{
			get
			{
				return this._EffectEndDate;
			}
			set
			{
				if ((this._EffectEndDate != value))
				{
					this.OnEffectEndDateChanging(value);
					this.SendPropertyChanging();
					this._EffectEndDate = value;
					this.SendPropertyChanged("EffectEndDate");
					this.OnEffectEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_ColorRange", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ColorRange
		{
			get
			{
				return this._ColorRange;
			}
			set
			{
				if ((this._ColorRange != value))
				{
					this.OnColorRangeChanging(value);
					this.SendPropertyChanging();
					this._ColorRange = value;
					this.SendPropertyChanged("ColorRange");
					this.OnColorRangeChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Cup", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cup
		{
			get
			{
				return this._Cup;
			}
			set
			{
				if ((this._Cup != value))
				{
					this.OnCupChanging(value);
					this.SendPropertyChanging();
					this._Cup = value;
					this.SendPropertyChanged("Cup");
					this.OnCupChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(16,9)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Ratio", DbType="Int")]
		public System.Nullable<int> Ratio
		{
			get
			{
				return this._Ratio;
			}
			set
			{
				if ((this._Ratio != value))
				{
					this.OnRatioChanging(value);
					this.SendPropertyChanging();
					this._Ratio = value;
					this.SendPropertyChanged("Ratio");
					this.OnRatioChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="NVarChar(140) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					if (this._MaterialPriceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_RestLength", DbType="Int")]
		public System.Nullable<int> RestLength
		{
			get
			{
				return this._RestLength;
			}
			set
			{
				if ((this._RestLength != value))
				{
					this.OnRestLengthChanging(value);
					this.SendPropertyChanging();
					this._RestLength = value;
					this.SendPropertyChanged("RestLength");
					this.OnRestLengthChanged();
				}
			}
		}
		
		[Association(Name="MaterialPriceHeader_MaterialPrice", Storage="_MaterialPriceHeader", ThisKey="Version", OtherKey="Version", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MaterialPriceHeader MaterialPriceHeader
		{
			get
			{
				return this._MaterialPriceHeader.Entity;
			}
			set
			{
				MaterialPriceHeader previousValue = this._MaterialPriceHeader.Entity;
				if (((previousValue != value) 
							|| (this._MaterialPriceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MaterialPriceHeader.Entity = null;
						previousValue.MaterialPrices.Remove(this);
					}
					this._MaterialPriceHeader.Entity = value;
					if ((value != null))
					{
						value.MaterialPrices.Add(this);
						this._Version = value.Version;
					}
					else
					{
						this._Version = default(string);
					}
					this.SendPropertyChanged("MaterialPriceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomMaterialDeclare")]
	public partial class CustomMaterialDeclare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SuppRef;
		
		private string _MidcHSCode;
		
		private string _ElementNo;
		
		private string _CustomNo;
		
		private System.Nullable<int> _HSCodeSeq;
		
		private string _Remark;
		
		private System.Nullable<int> _SortId;
		
		private string _Currency;
		
		private System.Nullable<bool> _IsMailMaterial;
		
		private string _Unit;
		
		private string _StandardUnit;
		
		private System.Nullable<double> _DeclareQty;
		
		private System.Nullable<double> _DeclarePrice;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnMidcHSCodeChanging(string value);
    partial void OnMidcHSCodeChanged();
    partial void OnElementNoChanging(string value);
    partial void OnElementNoChanged();
    partial void OnCustomNoChanging(string value);
    partial void OnCustomNoChanged();
    partial void OnHSCodeSeqChanging(System.Nullable<int> value);
    partial void OnHSCodeSeqChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnSortIdChanging(System.Nullable<int> value);
    partial void OnSortIdChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnIsMailMaterialChanging(System.Nullable<bool> value);
    partial void OnIsMailMaterialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnStandardUnitChanging(string value);
    partial void OnStandardUnitChanged();
    partial void OnDeclareQtyChanging(System.Nullable<double> value);
    partial void OnDeclareQtyChanged();
    partial void OnDeclarePriceChanging(System.Nullable<double> value);
    partial void OnDeclarePriceChanged();
    #endregion
		
		public CustomMaterialDeclare()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_MidcHSCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MidcHSCode
		{
			get
			{
				return this._MidcHSCode;
			}
			set
			{
				if ((this._MidcHSCode != value))
				{
					this.OnMidcHSCodeChanging(value);
					this.SendPropertyChanging();
					this._MidcHSCode = value;
					this.SendPropertyChanged("MidcHSCode");
					this.OnMidcHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ElementNo", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ElementNo
		{
			get
			{
				return this._ElementNo;
			}
			set
			{
				if ((this._ElementNo != value))
				{
					this.OnElementNoChanging(value);
					this.SendPropertyChanging();
					this._ElementNo = value;
					this.SendPropertyChanged("ElementNo");
					this.OnElementNoChanged();
				}
			}
		}
		
		[Column(Storage="_CustomNo", DbType="VarChar(50)")]
		public string CustomNo
		{
			get
			{
				return this._CustomNo;
			}
			set
			{
				if ((this._CustomNo != value))
				{
					this.OnCustomNoChanging(value);
					this.SendPropertyChanging();
					this._CustomNo = value;
					this.SendPropertyChanged("CustomNo");
					this.OnCustomNoChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeSeq", DbType="Int")]
		public System.Nullable<int> HSCodeSeq
		{
			get
			{
				return this._HSCodeSeq;
			}
			set
			{
				if ((this._HSCodeSeq != value))
				{
					this.OnHSCodeSeqChanging(value);
					this.SendPropertyChanging();
					this._HSCodeSeq = value;
					this.SendPropertyChanged("HSCodeSeq");
					this.OnHSCodeSeqChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_SortId", DbType="Int")]
		public System.Nullable<int> SortId
		{
			get
			{
				return this._SortId;
			}
			set
			{
				if ((this._SortId != value))
				{
					this.OnSortIdChanging(value);
					this.SendPropertyChanging();
					this._SortId = value;
					this.SendPropertyChanged("SortId");
					this.OnSortIdChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="VarChar(100)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_IsMailMaterial", DbType="Bit")]
		public System.Nullable<bool> IsMailMaterial
		{
			get
			{
				return this._IsMailMaterial;
			}
			set
			{
				if ((this._IsMailMaterial != value))
				{
					this.OnIsMailMaterialChanging(value);
					this.SendPropertyChanging();
					this._IsMailMaterial = value;
					this.SendPropertyChanged("IsMailMaterial");
					this.OnIsMailMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(100)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_StandardUnit", DbType="VarChar(100)")]
		public string StandardUnit
		{
			get
			{
				return this._StandardUnit;
			}
			set
			{
				if ((this._StandardUnit != value))
				{
					this.OnStandardUnitChanging(value);
					this.SendPropertyChanging();
					this._StandardUnit = value;
					this.SendPropertyChanged("StandardUnit");
					this.OnStandardUnitChanged();
				}
			}
		}
		
		[Column(Storage="_DeclareQty", DbType="Float")]
		public System.Nullable<double> DeclareQty
		{
			get
			{
				return this._DeclareQty;
			}
			set
			{
				if ((this._DeclareQty != value))
				{
					this.OnDeclareQtyChanging(value);
					this.SendPropertyChanging();
					this._DeclareQty = value;
					this.SendPropertyChanged("DeclareQty");
					this.OnDeclareQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DeclarePrice", DbType="Float")]
		public System.Nullable<double> DeclarePrice
		{
			get
			{
				return this._DeclarePrice;
			}
			set
			{
				if ((this._DeclarePrice != value))
				{
					this.OnDeclarePriceChanging(value);
					this.SendPropertyChanging();
					this._DeclarePrice = value;
					this.SendPropertyChanged("DeclarePrice");
					this.OnDeclarePriceChanged();
				}
			}
		}
		
		[Association(Name="Detail_CustomMaterialDeclare", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.CustomMaterialDeclares.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.CustomMaterialDeclares.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomMaterialElement")]
	public partial class CustomMaterialElement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexNo;
		
		private int _RecId;
		
		private string _CustomNo;
		
		private System.Nullable<int> _HSCodeSeq;
		
		private string _ElementNo;
		
		private string _Remark;
		
		private System.Nullable<int> _SortId;
		
		private System.Nullable<bool> _IsMailMaterial;
		
		private string _Unit;
		
		private string _StandardUnit;
		
		private System.Nullable<double> _DeclareQty;
		
		private System.Nullable<double> _DeclarePrice;
		
		private string _Currency;
		
		private EntityRef<CustomMaterial> _CustomMaterial;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexNoChanging(int value);
    partial void OnIndexNoChanged();
    partial void OnRecIdChanging(int value);
    partial void OnRecIdChanged();
    partial void OnCustomNoChanging(string value);
    partial void OnCustomNoChanged();
    partial void OnHSCodeSeqChanging(System.Nullable<int> value);
    partial void OnHSCodeSeqChanged();
    partial void OnElementNoChanging(string value);
    partial void OnElementNoChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnSortIdChanging(System.Nullable<int> value);
    partial void OnSortIdChanged();
    partial void OnIsMailMaterialChanging(System.Nullable<bool> value);
    partial void OnIsMailMaterialChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnStandardUnitChanging(string value);
    partial void OnStandardUnitChanged();
    partial void OnDeclareQtyChanging(System.Nullable<double> value);
    partial void OnDeclareQtyChanged();
    partial void OnDeclarePriceChanging(System.Nullable<double> value);
    partial void OnDeclarePriceChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    #endregion
		
		public CustomMaterialElement()
		{
			this._CustomMaterial = default(EntityRef<CustomMaterial>);
			OnCreated();
		}
		
		[Column(Storage="_IndexNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IndexNo
		{
			get
			{
				return this._IndexNo;
			}
			set
			{
				if ((this._IndexNo != value))
				{
					if (this._CustomMaterial.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndexNoChanging(value);
					this.SendPropertyChanging();
					this._IndexNo = value;
					this.SendPropertyChanged("IndexNo");
					this.OnIndexNoChanged();
				}
			}
		}
		
		[Column(Storage="_RecId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RecId
		{
			get
			{
				return this._RecId;
			}
			set
			{
				if ((this._RecId != value))
				{
					this.OnRecIdChanging(value);
					this.SendPropertyChanging();
					this._RecId = value;
					this.SendPropertyChanged("RecId");
					this.OnRecIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomNo
		{
			get
			{
				return this._CustomNo;
			}
			set
			{
				if ((this._CustomNo != value))
				{
					this.OnCustomNoChanging(value);
					this.SendPropertyChanging();
					this._CustomNo = value;
					this.SendPropertyChanged("CustomNo");
					this.OnCustomNoChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeSeq", DbType="Int")]
		public System.Nullable<int> HSCodeSeq
		{
			get
			{
				return this._HSCodeSeq;
			}
			set
			{
				if ((this._HSCodeSeq != value))
				{
					this.OnHSCodeSeqChanging(value);
					this.SendPropertyChanging();
					this._HSCodeSeq = value;
					this.SendPropertyChanged("HSCodeSeq");
					this.OnHSCodeSeqChanged();
				}
			}
		}
		
		[Column(Storage="_ElementNo", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string ElementNo
		{
			get
			{
				return this._ElementNo;
			}
			set
			{
				if ((this._ElementNo != value))
				{
					this.OnElementNoChanging(value);
					this.SendPropertyChanging();
					this._ElementNo = value;
					this.SendPropertyChanged("ElementNo");
					this.OnElementNoChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_SortId", DbType="Int")]
		public System.Nullable<int> SortId
		{
			get
			{
				return this._SortId;
			}
			set
			{
				if ((this._SortId != value))
				{
					this.OnSortIdChanging(value);
					this.SendPropertyChanging();
					this._SortId = value;
					this.SendPropertyChanged("SortId");
					this.OnSortIdChanged();
				}
			}
		}
		
		[Column(Storage="_IsMailMaterial", DbType="Bit")]
		public System.Nullable<bool> IsMailMaterial
		{
			get
			{
				return this._IsMailMaterial;
			}
			set
			{
				if ((this._IsMailMaterial != value))
				{
					this.OnIsMailMaterialChanging(value);
					this.SendPropertyChanging();
					this._IsMailMaterial = value;
					this.SendPropertyChanged("IsMailMaterial");
					this.OnIsMailMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(100)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[Column(Storage="_StandardUnit", DbType="VarChar(100)")]
		public string StandardUnit
		{
			get
			{
				return this._StandardUnit;
			}
			set
			{
				if ((this._StandardUnit != value))
				{
					this.OnStandardUnitChanging(value);
					this.SendPropertyChanging();
					this._StandardUnit = value;
					this.SendPropertyChanged("StandardUnit");
					this.OnStandardUnitChanged();
				}
			}
		}
		
		[Column(Storage="_DeclareQty", DbType="Float")]
		public System.Nullable<double> DeclareQty
		{
			get
			{
				return this._DeclareQty;
			}
			set
			{
				if ((this._DeclareQty != value))
				{
					this.OnDeclareQtyChanging(value);
					this.SendPropertyChanging();
					this._DeclareQty = value;
					this.SendPropertyChanged("DeclareQty");
					this.OnDeclareQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DeclarePrice", DbType="Float")]
		public System.Nullable<double> DeclarePrice
		{
			get
			{
				return this._DeclarePrice;
			}
			set
			{
				if ((this._DeclarePrice != value))
				{
					this.OnDeclarePriceChanging(value);
					this.SendPropertyChanging();
					this._DeclarePrice = value;
					this.SendPropertyChanged("DeclarePrice");
					this.OnDeclarePriceChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="VarChar(100)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Association(Name="CustomMaterial_CustomMaterialElement", Storage="_CustomMaterial", ThisKey="IndexNo", OtherKey="Indexno", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CustomMaterial CustomMaterial
		{
			get
			{
				return this._CustomMaterial.Entity;
			}
			set
			{
				CustomMaterial previousValue = this._CustomMaterial.Entity;
				if (((previousValue != value) 
							|| (this._CustomMaterial.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomMaterial.Entity = null;
						previousValue.CustomMaterialElements.Remove(this);
					}
					this._CustomMaterial.Entity = value;
					if ((value != null))
					{
						value.CustomMaterialElements.Add(this);
						this._IndexNo = value.Indexno;
					}
					else
					{
						this._IndexNo = default(int);
					}
					this.SendPropertyChanged("CustomMaterial");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomMaterial")]
	public partial class CustomMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Indexno;
		
		private string _materialName;
		
		private string _Memo;
		
		private string _CustomNo;
		
		private string _MidcHSCode;
		
		private string _FGType;
		
		private System.Nullable<int> _IndexValue;
		
		private System.Nullable<decimal> _UnitPrice;
		
		private System.Nullable<int> _HSCodeSeq;
		
		private string _STATUS;
		
		private string _HSUnit;
		
		private System.Nullable<decimal> _PriceRatio;
		
		private string _Currency;
		
		private string _materialNameCN;
		
		private string _materialNameEN;
		
		private System.Nullable<bool> _IsMailMaterial;
		
		private string _StandardUnit;
		
		private System.Nullable<double> _DeclareQty;
		
		private System.Nullable<double> _DeclarePrice;
		
		private string _HSCodeFlag;
		
		private string _CustomNoBD;
		
		private EntitySet<CustomMaterialElement> _CustomMaterialElements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexnoChanging(int value);
    partial void OnIndexnoChanged();
    partial void OnmaterialNameChanging(string value);
    partial void OnmaterialNameChanged();
    partial void OnMemoChanging(string value);
    partial void OnMemoChanged();
    partial void OnCustomNoChanging(string value);
    partial void OnCustomNoChanged();
    partial void OnMidcHSCodeChanging(string value);
    partial void OnMidcHSCodeChanged();
    partial void OnFGTypeChanging(string value);
    partial void OnFGTypeChanged();
    partial void OnIndexValueChanging(System.Nullable<int> value);
    partial void OnIndexValueChanged();
    partial void OnUnitPriceChanging(System.Nullable<decimal> value);
    partial void OnUnitPriceChanged();
    partial void OnHSCodeSeqChanging(System.Nullable<int> value);
    partial void OnHSCodeSeqChanged();
    partial void OnSTATUSChanging(string value);
    partial void OnSTATUSChanged();
    partial void OnHSUnitChanging(string value);
    partial void OnHSUnitChanged();
    partial void OnPriceRatioChanging(System.Nullable<decimal> value);
    partial void OnPriceRatioChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnmaterialNameCNChanging(string value);
    partial void OnmaterialNameCNChanged();
    partial void OnmaterialNameENChanging(string value);
    partial void OnmaterialNameENChanged();
    partial void OnIsMailMaterialChanging(System.Nullable<bool> value);
    partial void OnIsMailMaterialChanged();
    partial void OnStandardUnitChanging(string value);
    partial void OnStandardUnitChanged();
    partial void OnDeclareQtyChanging(System.Nullable<double> value);
    partial void OnDeclareQtyChanged();
    partial void OnDeclarePriceChanging(System.Nullable<double> value);
    partial void OnDeclarePriceChanged();
    partial void OnHSCodeFlagChanging(string value);
    partial void OnHSCodeFlagChanged();
    partial void OnCustomNoBDChanging(string value);
    partial void OnCustomNoBDChanged();
    #endregion
		
		public CustomMaterial()
		{
			this._CustomMaterialElements = new EntitySet<CustomMaterialElement>(new Action<CustomMaterialElement>(this.attach_CustomMaterialElements), new Action<CustomMaterialElement>(this.detach_CustomMaterialElements));
			OnCreated();
		}
		
		[Column(Storage="_Indexno", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Indexno
		{
			get
			{
				return this._Indexno;
			}
			set
			{
				if ((this._Indexno != value))
				{
					this.OnIndexnoChanging(value);
					this.SendPropertyChanging();
					this._Indexno = value;
					this.SendPropertyChanged("Indexno");
					this.OnIndexnoChanged();
				}
			}
		}
		
		[Column(Storage="_materialName", DbType="NVarChar(200)")]
		public string materialName
		{
			get
			{
				return this._materialName;
			}
			set
			{
				if ((this._materialName != value))
				{
					this.OnmaterialNameChanging(value);
					this.SendPropertyChanging();
					this._materialName = value;
					this.SendPropertyChanged("materialName");
					this.OnmaterialNameChanged();
				}
			}
		}
		
		[Column(Storage="_Memo", DbType="NVarChar(200)")]
		public string Memo
		{
			get
			{
				return this._Memo;
			}
			set
			{
				if ((this._Memo != value))
				{
					this.OnMemoChanging(value);
					this.SendPropertyChanging();
					this._Memo = value;
					this.SendPropertyChanged("Memo");
					this.OnMemoChanged();
				}
			}
		}
		
		[Column(Storage="_CustomNo", DbType="VarChar(50)")]
		public string CustomNo
		{
			get
			{
				return this._CustomNo;
			}
			set
			{
				if ((this._CustomNo != value))
				{
					this.OnCustomNoChanging(value);
					this.SendPropertyChanging();
					this._CustomNo = value;
					this.SendPropertyChanged("CustomNo");
					this.OnCustomNoChanged();
				}
			}
		}
		
		[Column(Storage="_MidcHSCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MidcHSCode
		{
			get
			{
				return this._MidcHSCode;
			}
			set
			{
				if ((this._MidcHSCode != value))
				{
					this.OnMidcHSCodeChanging(value);
					this.SendPropertyChanging();
					this._MidcHSCode = value;
					this.SendPropertyChanged("MidcHSCode");
					this.OnMidcHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_FGType", DbType="VarChar(50)")]
		public string FGType
		{
			get
			{
				return this._FGType;
			}
			set
			{
				if ((this._FGType != value))
				{
					this.OnFGTypeChanging(value);
					this.SendPropertyChanging();
					this._FGType = value;
					this.SendPropertyChanged("FGType");
					this.OnFGTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IndexValue", DbType="Int")]
		public System.Nullable<int> IndexValue
		{
			get
			{
				return this._IndexValue;
			}
			set
			{
				if ((this._IndexValue != value))
				{
					this.OnIndexValueChanging(value);
					this.SendPropertyChanging();
					this._IndexValue = value;
					this.SendPropertyChanged("IndexValue");
					this.OnIndexValueChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeSeq", DbType="Int")]
		public System.Nullable<int> HSCodeSeq
		{
			get
			{
				return this._HSCodeSeq;
			}
			set
			{
				if ((this._HSCodeSeq != value))
				{
					this.OnHSCodeSeqChanging(value);
					this.SendPropertyChanging();
					this._HSCodeSeq = value;
					this.SendPropertyChanged("HSCodeSeq");
					this.OnHSCodeSeqChanged();
				}
			}
		}
		
		[Column(Storage="_STATUS", DbType="NVarChar(50)")]
		public string STATUS
		{
			get
			{
				return this._STATUS;
			}
			set
			{
				if ((this._STATUS != value))
				{
					this.OnSTATUSChanging(value);
					this.SendPropertyChanging();
					this._STATUS = value;
					this.SendPropertyChanged("STATUS");
					this.OnSTATUSChanged();
				}
			}
		}
		
		[Column(Storage="_HSUnit", DbType="NVarChar(50)")]
		public string HSUnit
		{
			get
			{
				return this._HSUnit;
			}
			set
			{
				if ((this._HSUnit != value))
				{
					this.OnHSUnitChanging(value);
					this.SendPropertyChanging();
					this._HSUnit = value;
					this.SendPropertyChanged("HSUnit");
					this.OnHSUnitChanged();
				}
			}
		}
		
		[Column(Storage="_PriceRatio", DbType="Decimal(18,6)")]
		public System.Nullable<decimal> PriceRatio
		{
			get
			{
				return this._PriceRatio;
			}
			set
			{
				if ((this._PriceRatio != value))
				{
					this.OnPriceRatioChanging(value);
					this.SendPropertyChanging();
					this._PriceRatio = value;
					this.SendPropertyChanged("PriceRatio");
					this.OnPriceRatioChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="VarChar(100)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_materialNameCN", DbType="NVarChar(200)")]
		public string materialNameCN
		{
			get
			{
				return this._materialNameCN;
			}
			set
			{
				if ((this._materialNameCN != value))
				{
					this.OnmaterialNameCNChanging(value);
					this.SendPropertyChanging();
					this._materialNameCN = value;
					this.SendPropertyChanged("materialNameCN");
					this.OnmaterialNameCNChanged();
				}
			}
		}
		
		[Column(Storage="_materialNameEN", DbType="NVarChar(200)")]
		public string materialNameEN
		{
			get
			{
				return this._materialNameEN;
			}
			set
			{
				if ((this._materialNameEN != value))
				{
					this.OnmaterialNameENChanging(value);
					this.SendPropertyChanging();
					this._materialNameEN = value;
					this.SendPropertyChanged("materialNameEN");
					this.OnmaterialNameENChanged();
				}
			}
		}
		
		[Column(Storage="_IsMailMaterial", DbType="Bit")]
		public System.Nullable<bool> IsMailMaterial
		{
			get
			{
				return this._IsMailMaterial;
			}
			set
			{
				if ((this._IsMailMaterial != value))
				{
					this.OnIsMailMaterialChanging(value);
					this.SendPropertyChanging();
					this._IsMailMaterial = value;
					this.SendPropertyChanged("IsMailMaterial");
					this.OnIsMailMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_StandardUnit", DbType="VarChar(100)")]
		public string StandardUnit
		{
			get
			{
				return this._StandardUnit;
			}
			set
			{
				if ((this._StandardUnit != value))
				{
					this.OnStandardUnitChanging(value);
					this.SendPropertyChanging();
					this._StandardUnit = value;
					this.SendPropertyChanged("StandardUnit");
					this.OnStandardUnitChanged();
				}
			}
		}
		
		[Column(Storage="_DeclareQty", DbType="Float")]
		public System.Nullable<double> DeclareQty
		{
			get
			{
				return this._DeclareQty;
			}
			set
			{
				if ((this._DeclareQty != value))
				{
					this.OnDeclareQtyChanging(value);
					this.SendPropertyChanging();
					this._DeclareQty = value;
					this.SendPropertyChanged("DeclareQty");
					this.OnDeclareQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DeclarePrice", DbType="Float")]
		public System.Nullable<double> DeclarePrice
		{
			get
			{
				return this._DeclarePrice;
			}
			set
			{
				if ((this._DeclarePrice != value))
				{
					this.OnDeclarePriceChanging(value);
					this.SendPropertyChanging();
					this._DeclarePrice = value;
					this.SendPropertyChanged("DeclarePrice");
					this.OnDeclarePriceChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeFlag", DbType="NVarChar(10)")]
		public string HSCodeFlag
		{
			get
			{
				return this._HSCodeFlag;
			}
			set
			{
				if ((this._HSCodeFlag != value))
				{
					this.OnHSCodeFlagChanging(value);
					this.SendPropertyChanging();
					this._HSCodeFlag = value;
					this.SendPropertyChanged("HSCodeFlag");
					this.OnHSCodeFlagChanged();
				}
			}
		}
		
		[Column(Storage="_CustomNoBD", DbType="VarChar(50)")]
		public string CustomNoBD
		{
			get
			{
				return this._CustomNoBD;
			}
			set
			{
				if ((this._CustomNoBD != value))
				{
					this.OnCustomNoBDChanging(value);
					this.SendPropertyChanging();
					this._CustomNoBD = value;
					this.SendPropertyChanged("CustomNoBD");
					this.OnCustomNoBDChanged();
				}
			}
		}
		
		[Association(Name="CustomMaterial_CustomMaterialElement", Storage="_CustomMaterialElements", ThisKey="Indexno", OtherKey="IndexNo")]
		public EntitySet<CustomMaterialElement> CustomMaterialElements
		{
			get
			{
				return this._CustomMaterialElements;
			}
			set
			{
				this._CustomMaterialElements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomMaterialElements(CustomMaterialElement entity)
		{
			this.SendPropertyChanging();
			entity.CustomMaterial = this;
		}
		
		private void detach_CustomMaterialElements(CustomMaterialElement entity)
		{
			this.SendPropertyChanging();
			entity.CustomMaterial = null;
		}
	}
	
	[Table(Name="dbo.HSCodeList")]
	public partial class HSCodeList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Seq;
		
		private string _HSCode;
		
		private string _HSCodeBD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeqChanging(int value);
    partial void OnSeqChanged();
    partial void OnHSCodeChanging(string value);
    partial void OnHSCodeChanged();
    partial void OnHSCodeBDChanging(string value);
    partial void OnHSCodeBDChanged();
    #endregion
		
		public HSCodeList()
		{
			OnCreated();
		}
		
		[Column(Storage="_Seq", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[Column(Storage="_HSCode", DbType="NVarChar(20)")]
		public string HSCode
		{
			get
			{
				return this._HSCode;
			}
			set
			{
				if ((this._HSCode != value))
				{
					this.OnHSCodeChanging(value);
					this.SendPropertyChanging();
					this._HSCode = value;
					this.SendPropertyChanged("HSCode");
					this.OnHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeBD", DbType="NVarChar(20)")]
		public string HSCodeBD
		{
			get
			{
				return this._HSCodeBD;
			}
			set
			{
				if ((this._HSCodeBD != value))
				{
					this.OnHSCodeBDChanging(value);
					this.SendPropertyChanging();
					this._HSCodeBD = value;
					this.SendPropertyChanged("HSCodeBD");
					this.OnHSCodeBDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _BrandCode;
		
		private string _BrandName_EN;
		
		private string _BrandName_CN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnBrandCodeChanging(string value);
    partial void OnBrandCodeChanged();
    partial void OnBrandName_ENChanging(string value);
    partial void OnBrandName_ENChanged();
    partial void OnBrandName_CNChanging(string value);
    partial void OnBrandName_CNChanged();
    #endregion
		
		public Brand()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_BrandCode", DbType="VarChar(20)")]
		public string BrandCode
		{
			get
			{
				return this._BrandCode;
			}
			set
			{
				if ((this._BrandCode != value))
				{
					this.OnBrandCodeChanging(value);
					this.SendPropertyChanging();
					this._BrandCode = value;
					this.SendPropertyChanged("BrandCode");
					this.OnBrandCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BrandName_EN", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string BrandName_EN
		{
			get
			{
				return this._BrandName_EN;
			}
			set
			{
				if ((this._BrandName_EN != value))
				{
					this.OnBrandName_ENChanging(value);
					this.SendPropertyChanging();
					this._BrandName_EN = value;
					this.SendPropertyChanged("BrandName_EN");
					this.OnBrandName_ENChanged();
				}
			}
		}
		
		[Column(Storage="_BrandName_CN", DbType="NVarChar(200)")]
		public string BrandName_CN
		{
			get
			{
				return this._BrandName_CN;
			}
			set
			{
				if ((this._BrandName_CN != value))
				{
					this.OnBrandName_CNChanging(value);
					this.SendPropertyChanging();
					this._BrandName_CN = value;
					this.SendPropertyChanged("BrandName_CN");
					this.OnBrandName_CNChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CustomMaterialDeclare_FG")]
	public partial class CustomMaterialDeclare_FG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StyleNo;
		
		private string _MidcHSCode;
		
		private string _ElementNo;
		
		private string _CustomNo;
		
		private System.Nullable<int> _HSCodeSeq;
		
		private string _Remark;
		
		private System.Nullable<int> _SortId;
		
		private string _UpdatedRemark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStyleNoChanging(string value);
    partial void OnStyleNoChanged();
    partial void OnMidcHSCodeChanging(string value);
    partial void OnMidcHSCodeChanged();
    partial void OnElementNoChanging(string value);
    partial void OnElementNoChanged();
    partial void OnCustomNoChanging(string value);
    partial void OnCustomNoChanged();
    partial void OnHSCodeSeqChanging(System.Nullable<int> value);
    partial void OnHSCodeSeqChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnSortIdChanging(System.Nullable<int> value);
    partial void OnSortIdChanged();
    partial void OnUpdatedRemarkChanging(string value);
    partial void OnUpdatedRemarkChanged();
    #endregion
		
		public CustomMaterialDeclare_FG()
		{
			OnCreated();
		}
		
		[Column(Storage="_StyleNo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StyleNo
		{
			get
			{
				return this._StyleNo;
			}
			set
			{
				if ((this._StyleNo != value))
				{
					this.OnStyleNoChanging(value);
					this.SendPropertyChanging();
					this._StyleNo = value;
					this.SendPropertyChanged("StyleNo");
					this.OnStyleNoChanged();
				}
			}
		}
		
		[Column(Storage="_MidcHSCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MidcHSCode
		{
			get
			{
				return this._MidcHSCode;
			}
			set
			{
				if ((this._MidcHSCode != value))
				{
					this.OnMidcHSCodeChanging(value);
					this.SendPropertyChanging();
					this._MidcHSCode = value;
					this.SendPropertyChanged("MidcHSCode");
					this.OnMidcHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ElementNo", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ElementNo
		{
			get
			{
				return this._ElementNo;
			}
			set
			{
				if ((this._ElementNo != value))
				{
					this.OnElementNoChanging(value);
					this.SendPropertyChanging();
					this._ElementNo = value;
					this.SendPropertyChanged("ElementNo");
					this.OnElementNoChanged();
				}
			}
		}
		
		[Column(Storage="_CustomNo", DbType="VarChar(50)")]
		public string CustomNo
		{
			get
			{
				return this._CustomNo;
			}
			set
			{
				if ((this._CustomNo != value))
				{
					this.OnCustomNoChanging(value);
					this.SendPropertyChanging();
					this._CustomNo = value;
					this.SendPropertyChanged("CustomNo");
					this.OnCustomNoChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeSeq", DbType="Int")]
		public System.Nullable<int> HSCodeSeq
		{
			get
			{
				return this._HSCodeSeq;
			}
			set
			{
				if ((this._HSCodeSeq != value))
				{
					this.OnHSCodeSeqChanging(value);
					this.SendPropertyChanging();
					this._HSCodeSeq = value;
					this.SendPropertyChanged("HSCodeSeq");
					this.OnHSCodeSeqChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_SortId", DbType="Int")]
		public System.Nullable<int> SortId
		{
			get
			{
				return this._SortId;
			}
			set
			{
				if ((this._SortId != value))
				{
					this.OnSortIdChanging(value);
					this.SendPropertyChanging();
					this._SortId = value;
					this.SendPropertyChanged("SortId");
					this.OnSortIdChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedRemark", DbType="NVarChar(200)")]
		public string UpdatedRemark
		{
			get
			{
				return this._UpdatedRemark;
			}
			set
			{
				if ((this._UpdatedRemark != value))
				{
					this.OnUpdatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._UpdatedRemark = value;
					this.SendPropertyChanged("UpdatedRemark");
					this.OnUpdatedRemarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ColorSuppCustName")]
	public partial class ColorSuppCustName : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _ColorID;
		
		private string _Flag;
		
		private string _Code;
		
		private string _ColorName;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnColorIDChanging(string value);
    partial void OnColorIDChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    #endregion
		
		public ColorSuppCustName()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_ColorID", DbType="VarChar(20)")]
		public string ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorName", DbType="VarChar(300)")]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[Association(Name="Color_ColorSuppCustName", Storage="_Color", ThisKey="ColorID", OtherKey="Color1", IsForeignKey=true, DeleteRule="CASCADE")]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.ColorSuppCustNames.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.ColorSuppCustNames.Add(this);
						this._ColorID = value.Color1;
					}
					else
					{
						this._ColorID = default(string);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MaterialType")]
	public partial class MaterialType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaterialType1;
		
		private string _Description;
		
		private string _MaterialGroup;
		
		private string _HsCode;
		
		private System.Nullable<int> _Dimension;
		
		private string _SuppSizeCupElement;
		
		private string _YieldUsage;
		
		private string _Status;
		
		private string _CN;
		
		private string _TH;
		
		private string _HSCodeRMB;
		
		private string _HSCodeXRMB;
		
		private System.Nullable<int> _POPCBulkDays_SL;
		
		private System.Nullable<int> _POPCOverseaBulkDays_SL;
		
		private System.Nullable<int> _POPCBulkDays_BD;
		
		private System.Nullable<int> _POPCOverseaBulkDays_BD;
		
		private EntitySet<MaterialTypeSizeCup> _MaterialTypeSizeCups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialType1Changing(string value);
    partial void OnMaterialType1Changed();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMaterialGroupChanging(string value);
    partial void OnMaterialGroupChanged();
    partial void OnHsCodeChanging(string value);
    partial void OnHsCodeChanged();
    partial void OnDimensionChanging(System.Nullable<int> value);
    partial void OnDimensionChanged();
    partial void OnSuppSizeCupElementChanging(string value);
    partial void OnSuppSizeCupElementChanged();
    partial void OnYieldUsageChanging(string value);
    partial void OnYieldUsageChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCNChanging(string value);
    partial void OnCNChanged();
    partial void OnTHChanging(string value);
    partial void OnTHChanged();
    partial void OnHSCodeRMBChanging(string value);
    partial void OnHSCodeRMBChanged();
    partial void OnHSCodeXRMBChanging(string value);
    partial void OnHSCodeXRMBChanged();
    partial void OnPOPCBulkDays_SLChanging(System.Nullable<int> value);
    partial void OnPOPCBulkDays_SLChanged();
    partial void OnPOPCOverseaBulkDays_SLChanging(System.Nullable<int> value);
    partial void OnPOPCOverseaBulkDays_SLChanged();
    partial void OnPOPCBulkDays_BDChanging(System.Nullable<int> value);
    partial void OnPOPCBulkDays_BDChanged();
    partial void OnPOPCOverseaBulkDays_BDChanging(System.Nullable<int> value);
    partial void OnPOPCOverseaBulkDays_BDChanged();
    #endregion
		
		public MaterialType()
		{
			this._MaterialTypeSizeCups = new EntitySet<MaterialTypeSizeCup>(new Action<MaterialTypeSizeCup>(this.attach_MaterialTypeSizeCups), new Action<MaterialTypeSizeCup>(this.detach_MaterialTypeSizeCups));
			OnCreated();
		}
		
		[Column(Name="MaterialType", Storage="_MaterialType1", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialType1
		{
			get
			{
				return this._MaterialType1;
			}
			set
			{
				if ((this._MaterialType1 != value))
				{
					this.OnMaterialType1Changing(value);
					this.SendPropertyChanging();
					this._MaterialType1 = value;
					this.SendPropertyChanged("MaterialType1");
					this.OnMaterialType1Changed();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialGroup", DbType="VarChar(20)")]
		public string MaterialGroup
		{
			get
			{
				return this._MaterialGroup;
			}
			set
			{
				if ((this._MaterialGroup != value))
				{
					this.OnMaterialGroupChanging(value);
					this.SendPropertyChanging();
					this._MaterialGroup = value;
					this.SendPropertyChanged("MaterialGroup");
					this.OnMaterialGroupChanged();
				}
			}
		}
		
		[Column(Storage="_HsCode", DbType="VarChar(20)")]
		public string HsCode
		{
			get
			{
				return this._HsCode;
			}
			set
			{
				if ((this._HsCode != value))
				{
					this.OnHsCodeChanging(value);
					this.SendPropertyChanging();
					this._HsCode = value;
					this.SendPropertyChanged("HsCode");
					this.OnHsCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Dimension", DbType="Int")]
		public System.Nullable<int> Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this.OnDimensionChanging(value);
					this.SendPropertyChanging();
					this._Dimension = value;
					this.SendPropertyChanged("Dimension");
					this.OnDimensionChanged();
				}
			}
		}
		
		[Column(Storage="_SuppSizeCupElement", DbType="NVarChar(20)")]
		public string SuppSizeCupElement
		{
			get
			{
				return this._SuppSizeCupElement;
			}
			set
			{
				if ((this._SuppSizeCupElement != value))
				{
					this.OnSuppSizeCupElementChanging(value);
					this.SendPropertyChanging();
					this._SuppSizeCupElement = value;
					this.SendPropertyChanged("SuppSizeCupElement");
					this.OnSuppSizeCupElementChanged();
				}
			}
		}
		
		[Column(Storage="_YieldUsage", DbType="NVarChar(20)")]
		public string YieldUsage
		{
			get
			{
				return this._YieldUsage;
			}
			set
			{
				if ((this._YieldUsage != value))
				{
					this.OnYieldUsageChanging(value);
					this.SendPropertyChanging();
					this._YieldUsage = value;
					this.SendPropertyChanged("YieldUsage");
					this.OnYieldUsageChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_CN", DbType="NVarChar(250)")]
		public string CN
		{
			get
			{
				return this._CN;
			}
			set
			{
				if ((this._CN != value))
				{
					this.OnCNChanging(value);
					this.SendPropertyChanging();
					this._CN = value;
					this.SendPropertyChanged("CN");
					this.OnCNChanged();
				}
			}
		}
		
		[Column(Storage="_TH", DbType="NVarChar(250)")]
		public string TH
		{
			get
			{
				return this._TH;
			}
			set
			{
				if ((this._TH != value))
				{
					this.OnTHChanging(value);
					this.SendPropertyChanging();
					this._TH = value;
					this.SendPropertyChanged("TH");
					this.OnTHChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeRMB", DbType="VarChar(20)")]
		public string HSCodeRMB
		{
			get
			{
				return this._HSCodeRMB;
			}
			set
			{
				if ((this._HSCodeRMB != value))
				{
					this.OnHSCodeRMBChanging(value);
					this.SendPropertyChanging();
					this._HSCodeRMB = value;
					this.SendPropertyChanged("HSCodeRMB");
					this.OnHSCodeRMBChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeXRMB", DbType="VarChar(20)")]
		public string HSCodeXRMB
		{
			get
			{
				return this._HSCodeXRMB;
			}
			set
			{
				if ((this._HSCodeXRMB != value))
				{
					this.OnHSCodeXRMBChanging(value);
					this.SendPropertyChanging();
					this._HSCodeXRMB = value;
					this.SendPropertyChanged("HSCodeXRMB");
					this.OnHSCodeXRMBChanged();
				}
			}
		}
		
		[Column(Storage="_POPCBulkDays_SL", DbType="Int")]
		public System.Nullable<int> POPCBulkDays_SL
		{
			get
			{
				return this._POPCBulkDays_SL;
			}
			set
			{
				if ((this._POPCBulkDays_SL != value))
				{
					this.OnPOPCBulkDays_SLChanging(value);
					this.SendPropertyChanging();
					this._POPCBulkDays_SL = value;
					this.SendPropertyChanged("POPCBulkDays_SL");
					this.OnPOPCBulkDays_SLChanged();
				}
			}
		}
		
		[Column(Storage="_POPCOverseaBulkDays_SL", DbType="Int")]
		public System.Nullable<int> POPCOverseaBulkDays_SL
		{
			get
			{
				return this._POPCOverseaBulkDays_SL;
			}
			set
			{
				if ((this._POPCOverseaBulkDays_SL != value))
				{
					this.OnPOPCOverseaBulkDays_SLChanging(value);
					this.SendPropertyChanging();
					this._POPCOverseaBulkDays_SL = value;
					this.SendPropertyChanged("POPCOverseaBulkDays_SL");
					this.OnPOPCOverseaBulkDays_SLChanged();
				}
			}
		}
		
		[Column(Storage="_POPCBulkDays_BD", DbType="Int")]
		public System.Nullable<int> POPCBulkDays_BD
		{
			get
			{
				return this._POPCBulkDays_BD;
			}
			set
			{
				if ((this._POPCBulkDays_BD != value))
				{
					this.OnPOPCBulkDays_BDChanging(value);
					this.SendPropertyChanging();
					this._POPCBulkDays_BD = value;
					this.SendPropertyChanged("POPCBulkDays_BD");
					this.OnPOPCBulkDays_BDChanged();
				}
			}
		}
		
		[Column(Storage="_POPCOverseaBulkDays_BD", DbType="Int")]
		public System.Nullable<int> POPCOverseaBulkDays_BD
		{
			get
			{
				return this._POPCOverseaBulkDays_BD;
			}
			set
			{
				if ((this._POPCOverseaBulkDays_BD != value))
				{
					this.OnPOPCOverseaBulkDays_BDChanging(value);
					this.SendPropertyChanging();
					this._POPCOverseaBulkDays_BD = value;
					this.SendPropertyChanged("POPCOverseaBulkDays_BD");
					this.OnPOPCOverseaBulkDays_BDChanged();
				}
			}
		}
		
		[Association(Name="MaterialType_MaterialTypeSizeCup", Storage="_MaterialTypeSizeCups", ThisKey="MaterialType1", OtherKey="MatType")]
		public EntitySet<MaterialTypeSizeCup> MaterialTypeSizeCups
		{
			get
			{
				return this._MaterialTypeSizeCups;
			}
			set
			{
				this._MaterialTypeSizeCups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaterialTypeSizeCups(MaterialTypeSizeCup entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = this;
		}
		
		private void detach_MaterialTypeSizeCups(MaterialTypeSizeCup entity)
		{
			this.SendPropertyChanging();
			entity.MaterialType = null;
		}
	}
	
	[Table(Name="dbo.Detail")]
	public partial class Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SampleOrderNo;
		
		private string _MaterialType;
		
		private string _MaterialCode;
		
		private string _SuppRef;
		
		private string _Status;
		
		private string _MIDStatus;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _PromoteUser;
		
		private System.Nullable<System.DateTime> _PromoteDate;
		
		private System.Nullable<bool> _Branded;
		
		private string _Supplier;
		
		private System.Nullable<bool> _Edging_Single;
		
		private System.Nullable<bool> _Edging_DoubleScallops;
		
		private string _Commodity;
		
		private string _Pattern;
		
		private string _Lace;
		
		private string _Customer;
		
		private string _SpecialLabel;
		
		private string _SeasonNo;
		
		private string _RiskItem;
		
		private string _Description;
		
		private System.Nullable<int> _Oeko;
		
		private System.Nullable<decimal> _ValueAdjustAddDyeing;
		
		private System.Nullable<decimal> _PriceIncrProtect;
		
		private System.Nullable<decimal> _UncertainQuality;
		
		private System.Nullable<decimal> _OthersBuffer;
		
		private System.Nullable<decimal> _WastageOnCAC;
		
		private System.Nullable<decimal> _Relaxtion;
		
		private System.Nullable<decimal> _TargetPrice;
		
		private string _Gauge;
		
		private string _Composition;
		
		private string _Density;
		
		private string _GauagePerinch;
		
		private System.Nullable<int> _MinOrder;
		
		private System.Nullable<int> _MinColor;
		
		private System.Nullable<int> _MinStartProduct;
		
		private string _LastQtnRef;
		
		private System.Nullable<System.DateTime> _LastQtnDate;
		
		private System.Nullable<double> _QtnPriceValidityDays;
		
		private System.Nullable<System.DateTime> _QtnPriceExpiryDate;
		
		private string _SubchargeOrder;
		
		private string _SubchargeShipMode;
		
		private string _DyeingMultiple;
		
		private string _PackUnit;
		
		private string _SubPackUnit;
		
		private System.Nullable<decimal> _SubPackQty;
		
		private System.Nullable<int> _SubPackNo;
		
		private System.Nullable<int> _QAStatus;
		
		private System.Nullable<double> _YarnDays;
		
		private System.Nullable<double> _GeigeDays;
		
		private System.Nullable<double> _RunningDays;
		
		private string _ExclusiveBy;
		
		private System.Nullable<bool> _LeadTimeHYCheck;
		
		private System.Nullable<bool> _LeadTimeGeigeCheck;
		
		private System.Nullable<bool> _LeadTimeRunningCheck;
		
		private string _SupplierUnit;
		
		private string _PHUnit;
		
		private System.Nullable<decimal> _SupplierWidth;
		
		private System.Nullable<decimal> _UsableWidth;
		
		private System.Nullable<decimal> _MarkerWidth;
		
		private System.Nullable<decimal> _TubularWidth;
		
		private string _SupplierWidthS;
		
		private string _UsableWidthS;
		
		private string _MarkerWidthS;
		
		private string _TubularWidthS;
		
		private System.Nullable<decimal> _WeightGmSqm;
		
		private string _WeightGmSqmS;
		
		private System.Nullable<decimal> _SuppM;
		
		private System.Nullable<decimal> _MarkerM;
		
		private System.Nullable<decimal> _TubularM;
		
		private System.Nullable<decimal> _RateToPHUnitBK;
		
		private System.Nullable<decimal> _ScallopHeight;
		
		private System.Nullable<decimal> _PerCone;
		
		private string _Comments;
		
		private string _DataPreparedBy;
		
		private string _HangerDataPreparedBy;
		
		private System.Nullable<bool> _Confirmed;
		
		private string _ConfirmedBy;
		
		private System.Nullable<System.DateTime> _ConfirmDate;
		
		private System.Nullable<bool> _Approved;
		
		private string _ApprovedBy;
		
		private System.Nullable<System.DateTime> _ApproveDate;
		
		private System.Nullable<bool> _HangerPassed;
		
		private string _HangerPassedBy;
		
		private System.Nullable<System.DateTime> _HangerPassedDate;
		
		private System.Nullable<bool> _FormPassed;
		
		private string _FormPassedBy;
		
		private System.Nullable<System.DateTime> _FormPassedDate;
		
		private string _HsCode;
		
		private string _WeightHsCode;
		
		private string _ImageFile;
		
		private System.Nullable<decimal> _AllInPrice1;
		
		private System.Nullable<decimal> _SQMPrice1;
		
		private System.Nullable<decimal> _avgPrice_Supplier1;
		
		private System.Nullable<decimal> _AvgPrice_PH1;
		
		private string _MaterialGroup;
		
		private string _DestinationPort;
		
		private System.Nullable<decimal> _RateToPHUnit1;
		
		private System.Nullable<System.DateTime> _OrderShptLeadtime;
		
		private System.Data.Linq.Binary _Photo;
		
		private System.Nullable<decimal> _TechWarp;
		
		private System.Nullable<decimal> _TechWept;
		
		private System.Nullable<decimal> _TechWarpF;
		
		private System.Nullable<decimal> _TechWeptF;
		
		private System.Nullable<System.DateTime> _DataPreparedDate;
		
		private string _Dimension;
		
		private System.Nullable<bool> _LiabilityFollowUp;
		
		private System.Nullable<System.DateTime> _HangerDataPreparedDate;
		
		private string _SizeMatrix;
		
		private System.Nullable<int> _Version;
		
		private System.Nullable<int> _AmendmentNo;
		
		private System.Nullable<bool> _Hanger;
		
		private string _YieldUsage;
		
		private string _SingleRangeSize;
		
		private string _UnitForSize;
		
		private System.Nullable<bool> _IsPurchaseItem;
		
		private string _Operation;
		
		private System.Nullable<bool> _IsMultiPrice;
		
		private System.Nullable<int> _MultiPriceOption;
		
		private System.Nullable<int> _Liability;
		
		private string _LiabilityForCustomer;
		
		private System.Nullable<bool> _CustomerAppointed;
		
		private System.Nullable<int> _PurchaseWidthOption;
		
		private System.Nullable<decimal> _PurchaseWidth;
		
		private System.Nullable<bool> _HasSpecialPrice;
		
		private System.Nullable<bool> _HasCustFavorPrice;
		
		private System.Nullable<bool> _HasVolumePrice;
		
		private System.Nullable<bool> _HasPeriodPrice;
		
		private System.Nullable<bool> _TMIDCompleted;
		
		private string _TMIDCompletedBy;
		
		private System.Nullable<System.DateTime> _TMIDCompletedDate;
		
		private System.Nullable<bool> _PMIDWIP;
		
		private string _PMIDWIPBy;
		
		private System.Nullable<System.DateTime> _PMIDWIPDate;
		
		private System.Nullable<bool> _PMIDCompleted;
		
		private string _PMIDCompletedBy;
		
		private System.Nullable<System.DateTime> _PMIDCompletedDate;
		
		private System.Nullable<bool> _HaveSizeMatrix;
		
		private string _SampleGroup;
		
		private string _SizeSpec;
		
		private System.Nullable<bool> _HasCollectivePrice;
		
		private string _OldHSCode;
		
		private string _HSCodeBD;
		
		private string _David_OldHSCode;
		
		private System.Nullable<System.DateTime> _David_UpdateTime;
		
		private System.Nullable<decimal> _PatternShapeRepeatStandard;
		
		private string _PatternShapeRepeatS;
		
		private System.Nullable<decimal> _PatternShapeRepeatMin;
		
		private System.Nullable<decimal> _PatternShapeRepeatMax;
		
		private System.Nullable<decimal> _GramWeightPerPurchaseUnit;
		
		private string _RiskQA;
		
		private System.Nullable<System.DateTime> _POLastDate;
		
		private EntitySet<ColorDetail> _ColorDetails;
		
		private EntitySet<CompositionDetail> _CompositionDetails;
		
		private EntitySet<CustomerBranded> _CustomerBrandeds;
		
		private EntityRef<DetailImage> _DetailImage;
		
		private EntitySet<PriceHistory> _PriceHistories;
		
		private EntitySet<RatioPrice> _RatioPrices;
		
		private EntitySet<RWM> _RWMs;
		
		private EntitySet<Spec> _Specs;
		
		private EntitySet<MaterialProcess> _MaterialProcesses;
		
		private EntitySet<MIDcUpFile> _MIDcUpFiles;
		
		private EntitySet<DetailChangeConfirm> _DetailChangeConfirms;
		
		private EntitySet<DetailChangeConfirm> _DetailChangeConfirms1;
		
		private EntitySet<MaterialPriceHeader> _MaterialPriceHeaders;
		
		private EntitySet<CustomMaterialDeclare> _CustomMaterialDeclares;
		
		private EntitySet<MaterialWeight> _MaterialWeights;
		
		private EntityRef<SampleOrder> _SampleOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSampleOrderNoChanging(string value);
    partial void OnSampleOrderNoChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnMIDStatusChanging(string value);
    partial void OnMIDStatusChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnPromoteUserChanging(string value);
    partial void OnPromoteUserChanged();
    partial void OnPromoteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPromoteDateChanged();
    partial void OnBrandedChanging(System.Nullable<bool> value);
    partial void OnBrandedChanged();
    partial void OnSupplierChanging(string value);
    partial void OnSupplierChanged();
    partial void OnEdging_SingleChanging(System.Nullable<bool> value);
    partial void OnEdging_SingleChanged();
    partial void OnEdging_DoubleScallopsChanging(System.Nullable<bool> value);
    partial void OnEdging_DoubleScallopsChanged();
    partial void OnCommodityChanging(string value);
    partial void OnCommodityChanged();
    partial void OnPatternChanging(string value);
    partial void OnPatternChanged();
    partial void OnLaceChanging(string value);
    partial void OnLaceChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnSpecialLabelChanging(string value);
    partial void OnSpecialLabelChanged();
    partial void OnSeasonNoChanging(string value);
    partial void OnSeasonNoChanged();
    partial void OnRiskItemChanging(string value);
    partial void OnRiskItemChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOekoChanging(System.Nullable<int> value);
    partial void OnOekoChanged();
    partial void OnValueAdjustAddDyeingChanging(System.Nullable<decimal> value);
    partial void OnValueAdjustAddDyeingChanged();
    partial void OnPriceIncrProtectChanging(System.Nullable<decimal> value);
    partial void OnPriceIncrProtectChanged();
    partial void OnUncertainQualityChanging(System.Nullable<decimal> value);
    partial void OnUncertainQualityChanged();
    partial void OnOthersBufferChanging(System.Nullable<decimal> value);
    partial void OnOthersBufferChanged();
    partial void OnWastageOnCACChanging(System.Nullable<decimal> value);
    partial void OnWastageOnCACChanged();
    partial void OnRelaxtionChanging(System.Nullable<decimal> value);
    partial void OnRelaxtionChanged();
    partial void OnTargetPriceChanging(System.Nullable<decimal> value);
    partial void OnTargetPriceChanged();
    partial void OnGaugeChanging(string value);
    partial void OnGaugeChanged();
    partial void OnCompositionChanging(string value);
    partial void OnCompositionChanged();
    partial void OnDensityChanging(string value);
    partial void OnDensityChanged();
    partial void OnGauagePerinchChanging(string value);
    partial void OnGauagePerinchChanged();
    partial void OnMinOrderChanging(System.Nullable<int> value);
    partial void OnMinOrderChanged();
    partial void OnMinColorChanging(System.Nullable<int> value);
    partial void OnMinColorChanged();
    partial void OnMinStartProductChanging(System.Nullable<int> value);
    partial void OnMinStartProductChanged();
    partial void OnLastQtnRefChanging(string value);
    partial void OnLastQtnRefChanged();
    partial void OnLastQtnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastQtnDateChanged();
    partial void OnQtnPriceValidityDaysChanging(System.Nullable<double> value);
    partial void OnQtnPriceValidityDaysChanged();
    partial void OnQtnPriceExpiryDateChanging(System.Nullable<System.DateTime> value);
    partial void OnQtnPriceExpiryDateChanged();
    partial void OnSubchargeOrderChanging(string value);
    partial void OnSubchargeOrderChanged();
    partial void OnSubchargeShipModeChanging(string value);
    partial void OnSubchargeShipModeChanged();
    partial void OnDyeingMultipleChanging(string value);
    partial void OnDyeingMultipleChanged();
    partial void OnPackUnitChanging(string value);
    partial void OnPackUnitChanged();
    partial void OnSubPackUnitChanging(string value);
    partial void OnSubPackUnitChanged();
    partial void OnSubPackQtyChanging(System.Nullable<decimal> value);
    partial void OnSubPackQtyChanged();
    partial void OnSubPackNoChanging(System.Nullable<int> value);
    partial void OnSubPackNoChanged();
    partial void OnQAStatusChanging(System.Nullable<int> value);
    partial void OnQAStatusChanged();
    partial void OnYarnDaysChanging(System.Nullable<double> value);
    partial void OnYarnDaysChanged();
    partial void OnGeigeDaysChanging(System.Nullable<double> value);
    partial void OnGeigeDaysChanged();
    partial void OnRunningDaysChanging(System.Nullable<double> value);
    partial void OnRunningDaysChanged();
    partial void OnExclusiveByChanging(string value);
    partial void OnExclusiveByChanged();
    partial void OnLeadTimeHYCheckChanging(System.Nullable<bool> value);
    partial void OnLeadTimeHYCheckChanged();
    partial void OnLeadTimeGeigeCheckChanging(System.Nullable<bool> value);
    partial void OnLeadTimeGeigeCheckChanged();
    partial void OnLeadTimeRunningCheckChanging(System.Nullable<bool> value);
    partial void OnLeadTimeRunningCheckChanged();
    partial void OnSupplierUnitChanging(string value);
    partial void OnSupplierUnitChanged();
    partial void OnPHUnitChanging(string value);
    partial void OnPHUnitChanged();
    partial void OnSupplierWidthChanging(System.Nullable<decimal> value);
    partial void OnSupplierWidthChanged();
    partial void OnUsableWidthChanging(System.Nullable<decimal> value);
    partial void OnUsableWidthChanged();
    partial void OnMarkerWidthChanging(System.Nullable<decimal> value);
    partial void OnMarkerWidthChanged();
    partial void OnTubularWidthChanging(System.Nullable<decimal> value);
    partial void OnTubularWidthChanged();
    partial void OnSupplierWidthSChanging(string value);
    partial void OnSupplierWidthSChanged();
    partial void OnUsableWidthSChanging(string value);
    partial void OnUsableWidthSChanged();
    partial void OnMarkerWidthSChanging(string value);
    partial void OnMarkerWidthSChanged();
    partial void OnTubularWidthSChanging(string value);
    partial void OnTubularWidthSChanged();
    partial void OnWeightGmSqmChanging(System.Nullable<decimal> value);
    partial void OnWeightGmSqmChanged();
    partial void OnWeightGmSqmSChanging(string value);
    partial void OnWeightGmSqmSChanged();
    partial void OnSuppMChanging(System.Nullable<decimal> value);
    partial void OnSuppMChanged();
    partial void OnMarkerMChanging(System.Nullable<decimal> value);
    partial void OnMarkerMChanged();
    partial void OnTubularMChanging(System.Nullable<decimal> value);
    partial void OnTubularMChanged();
    partial void OnRateToPHUnitBKChanging(System.Nullable<decimal> value);
    partial void OnRateToPHUnitBKChanged();
    partial void OnScallopHeightChanging(System.Nullable<decimal> value);
    partial void OnScallopHeightChanged();
    partial void OnPerConeChanging(System.Nullable<decimal> value);
    partial void OnPerConeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDataPreparedByChanging(string value);
    partial void OnDataPreparedByChanged();
    partial void OnHangerDataPreparedByChanging(string value);
    partial void OnHangerDataPreparedByChanged();
    partial void OnConfirmedChanging(System.Nullable<bool> value);
    partial void OnConfirmedChanged();
    partial void OnConfirmedByChanging(string value);
    partial void OnConfirmedByChanged();
    partial void OnConfirmDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmDateChanged();
    partial void OnApprovedChanging(System.Nullable<bool> value);
    partial void OnApprovedChanged();
    partial void OnApprovedByChanging(string value);
    partial void OnApprovedByChanged();
    partial void OnApproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnApproveDateChanged();
    partial void OnHangerPassedChanging(System.Nullable<bool> value);
    partial void OnHangerPassedChanged();
    partial void OnHangerPassedByChanging(string value);
    partial void OnHangerPassedByChanged();
    partial void OnHangerPassedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHangerPassedDateChanged();
    partial void OnFormPassedChanging(System.Nullable<bool> value);
    partial void OnFormPassedChanged();
    partial void OnFormPassedByChanging(string value);
    partial void OnFormPassedByChanged();
    partial void OnFormPassedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFormPassedDateChanged();
    partial void OnHsCodeChanging(string value);
    partial void OnHsCodeChanged();
    partial void OnWeightHsCodeChanging(string value);
    partial void OnWeightHsCodeChanged();
    partial void OnImageFileChanging(string value);
    partial void OnImageFileChanged();
    partial void OnAllInPrice1Changing(System.Nullable<decimal> value);
    partial void OnAllInPrice1Changed();
    partial void OnSQMPrice1Changing(System.Nullable<decimal> value);
    partial void OnSQMPrice1Changed();
    partial void OnavgPrice_Supplier1Changing(System.Nullable<decimal> value);
    partial void OnavgPrice_Supplier1Changed();
    partial void OnAvgPrice_PH1Changing(System.Nullable<decimal> value);
    partial void OnAvgPrice_PH1Changed();
    partial void OnMaterialGroupChanging(string value);
    partial void OnMaterialGroupChanged();
    partial void OnDestinationPortChanging(string value);
    partial void OnDestinationPortChanged();
    partial void OnRateToPHUnit1Changing(System.Nullable<decimal> value);
    partial void OnRateToPHUnit1Changed();
    partial void OnOrderShptLeadtimeChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderShptLeadtimeChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnTechWarpChanging(System.Nullable<decimal> value);
    partial void OnTechWarpChanged();
    partial void OnTechWeptChanging(System.Nullable<decimal> value);
    partial void OnTechWeptChanged();
    partial void OnTechWarpFChanging(System.Nullable<decimal> value);
    partial void OnTechWarpFChanged();
    partial void OnTechWeptFChanging(System.Nullable<decimal> value);
    partial void OnTechWeptFChanged();
    partial void OnDataPreparedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDataPreparedDateChanged();
    partial void OnDimensionChanging(string value);
    partial void OnDimensionChanged();
    partial void OnLiabilityFollowUpChanging(System.Nullable<bool> value);
    partial void OnLiabilityFollowUpChanged();
    partial void OnHangerDataPreparedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHangerDataPreparedDateChanged();
    partial void OnSizeMatrixChanging(string value);
    partial void OnSizeMatrixChanged();
    partial void OnVersionChanging(System.Nullable<int> value);
    partial void OnVersionChanged();
    partial void OnAmendmentNoChanging(System.Nullable<int> value);
    partial void OnAmendmentNoChanged();
    partial void OnHangerChanging(System.Nullable<bool> value);
    partial void OnHangerChanged();
    partial void OnYieldUsageChanging(string value);
    partial void OnYieldUsageChanged();
    partial void OnSingleRangeSizeChanging(string value);
    partial void OnSingleRangeSizeChanged();
    partial void OnUnitForSizeChanging(string value);
    partial void OnUnitForSizeChanged();
    partial void OnIsPurchaseItemChanging(System.Nullable<bool> value);
    partial void OnIsPurchaseItemChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnIsMultiPriceChanging(System.Nullable<bool> value);
    partial void OnIsMultiPriceChanged();
    partial void OnMultiPriceOptionChanging(System.Nullable<int> value);
    partial void OnMultiPriceOptionChanged();
    partial void OnLiabilityChanging(System.Nullable<int> value);
    partial void OnLiabilityChanged();
    partial void OnLiabilityForCustomerChanging(string value);
    partial void OnLiabilityForCustomerChanged();
    partial void OnCustomerAppointedChanging(System.Nullable<bool> value);
    partial void OnCustomerAppointedChanged();
    partial void OnPurchaseWidthOptionChanging(System.Nullable<int> value);
    partial void OnPurchaseWidthOptionChanged();
    partial void OnPurchaseWidthChanging(System.Nullable<decimal> value);
    partial void OnPurchaseWidthChanged();
    partial void OnHasSpecialPriceChanging(System.Nullable<bool> value);
    partial void OnHasSpecialPriceChanged();
    partial void OnHasCustFavorPriceChanging(System.Nullable<bool> value);
    partial void OnHasCustFavorPriceChanged();
    partial void OnHasVolumePriceChanging(System.Nullable<bool> value);
    partial void OnHasVolumePriceChanged();
    partial void OnHasPeriodPriceChanging(System.Nullable<bool> value);
    partial void OnHasPeriodPriceChanged();
    partial void OnTMIDCompletedChanging(System.Nullable<bool> value);
    partial void OnTMIDCompletedChanged();
    partial void OnTMIDCompletedByChanging(string value);
    partial void OnTMIDCompletedByChanged();
    partial void OnTMIDCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTMIDCompletedDateChanged();
    partial void OnPMIDWIPChanging(System.Nullable<bool> value);
    partial void OnPMIDWIPChanged();
    partial void OnPMIDWIPByChanging(string value);
    partial void OnPMIDWIPByChanged();
    partial void OnPMIDWIPDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPMIDWIPDateChanged();
    partial void OnPMIDCompletedChanging(System.Nullable<bool> value);
    partial void OnPMIDCompletedChanged();
    partial void OnPMIDCompletedByChanging(string value);
    partial void OnPMIDCompletedByChanged();
    partial void OnPMIDCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPMIDCompletedDateChanged();
    partial void OnHaveSizeMatrixChanging(System.Nullable<bool> value);
    partial void OnHaveSizeMatrixChanged();
    partial void OnSampleGroupChanging(string value);
    partial void OnSampleGroupChanged();
    partial void OnSizeSpecChanging(string value);
    partial void OnSizeSpecChanged();
    partial void OnHasCollectivePriceChanging(System.Nullable<bool> value);
    partial void OnHasCollectivePriceChanged();
    partial void OnOldHSCodeChanging(string value);
    partial void OnOldHSCodeChanged();
    partial void OnHSCodeBDChanging(string value);
    partial void OnHSCodeBDChanged();
    partial void OnDavid_OldHSCodeChanging(string value);
    partial void OnDavid_OldHSCodeChanged();
    partial void OnDavid_UpdateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDavid_UpdateTimeChanged();
    partial void OnPatternShapeRepeatStandardChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeRepeatStandardChanged();
    partial void OnPatternShapeRepeatSChanging(string value);
    partial void OnPatternShapeRepeatSChanged();
    partial void OnPatternShapeRepeatMinChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeRepeatMinChanged();
    partial void OnPatternShapeRepeatMaxChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeRepeatMaxChanged();
    partial void OnGramWeightPerPurchaseUnitChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPerPurchaseUnitChanged();
    partial void OnRiskQAChanging(string value);
    partial void OnRiskQAChanged();
    partial void OnPOLastDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPOLastDateChanged();
    #endregion
		
		public Detail()
		{
			this._ColorDetails = new EntitySet<ColorDetail>(new Action<ColorDetail>(this.attach_ColorDetails), new Action<ColorDetail>(this.detach_ColorDetails));
			this._CompositionDetails = new EntitySet<CompositionDetail>(new Action<CompositionDetail>(this.attach_CompositionDetails), new Action<CompositionDetail>(this.detach_CompositionDetails));
			this._CustomerBrandeds = new EntitySet<CustomerBranded>(new Action<CustomerBranded>(this.attach_CustomerBrandeds), new Action<CustomerBranded>(this.detach_CustomerBrandeds));
			this._DetailImage = default(EntityRef<DetailImage>);
			this._PriceHistories = new EntitySet<PriceHistory>(new Action<PriceHistory>(this.attach_PriceHistories), new Action<PriceHistory>(this.detach_PriceHistories));
			this._RatioPrices = new EntitySet<RatioPrice>(new Action<RatioPrice>(this.attach_RatioPrices), new Action<RatioPrice>(this.detach_RatioPrices));
			this._RWMs = new EntitySet<RWM>(new Action<RWM>(this.attach_RWMs), new Action<RWM>(this.detach_RWMs));
			this._Specs = new EntitySet<Spec>(new Action<Spec>(this.attach_Specs), new Action<Spec>(this.detach_Specs));
			this._MaterialProcesses = new EntitySet<MaterialProcess>(new Action<MaterialProcess>(this.attach_MaterialProcesses), new Action<MaterialProcess>(this.detach_MaterialProcesses));
			this._MIDcUpFiles = new EntitySet<MIDcUpFile>(new Action<MIDcUpFile>(this.attach_MIDcUpFiles), new Action<MIDcUpFile>(this.detach_MIDcUpFiles));
			this._DetailChangeConfirms = new EntitySet<DetailChangeConfirm>(new Action<DetailChangeConfirm>(this.attach_DetailChangeConfirms), new Action<DetailChangeConfirm>(this.detach_DetailChangeConfirms));
			this._DetailChangeConfirms1 = new EntitySet<DetailChangeConfirm>(new Action<DetailChangeConfirm>(this.attach_DetailChangeConfirms1), new Action<DetailChangeConfirm>(this.detach_DetailChangeConfirms1));
			this._MaterialPriceHeaders = new EntitySet<MaterialPriceHeader>(new Action<MaterialPriceHeader>(this.attach_MaterialPriceHeaders), new Action<MaterialPriceHeader>(this.detach_MaterialPriceHeaders));
			this._CustomMaterialDeclares = new EntitySet<CustomMaterialDeclare>(new Action<CustomMaterialDeclare>(this.attach_CustomMaterialDeclares), new Action<CustomMaterialDeclare>(this.detach_CustomMaterialDeclares));
			this._MaterialWeights = new EntitySet<MaterialWeight>(new Action<MaterialWeight>(this.attach_MaterialWeights), new Action<MaterialWeight>(this.detach_MaterialWeights));
			this._SampleOrder = default(EntityRef<SampleOrder>);
			OnCreated();
		}
		
		[Column(Storage="_SampleOrderNo", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SampleOrderNo
		{
			get
			{
				return this._SampleOrderNo;
			}
			set
			{
				if ((this._SampleOrderNo != value))
				{
					if (this._SampleOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSampleOrderNoChanging(value);
					this.SendPropertyChanging();
					this._SampleOrderNo = value;
					this.SendPropertyChanged("SampleOrderNo");
					this.OnSampleOrderNoChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(50)")]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialCode", DbType="VarChar(50)")]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MIDStatus", DbType="VarChar(50)")]
		public string MIDStatus
		{
			get
			{
				return this._MIDStatus;
			}
			set
			{
				if ((this._MIDStatus != value))
				{
					this.OnMIDStatusChanging(value);
					this.SendPropertyChanging();
					this._MIDStatus = value;
					this.SendPropertyChanged("MIDStatus");
					this.OnMIDStatusChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_PromoteUser", DbType="NVarChar(200)")]
		public string PromoteUser
		{
			get
			{
				return this._PromoteUser;
			}
			set
			{
				if ((this._PromoteUser != value))
				{
					this.OnPromoteUserChanging(value);
					this.SendPropertyChanging();
					this._PromoteUser = value;
					this.SendPropertyChanged("PromoteUser");
					this.OnPromoteUserChanged();
				}
			}
		}
		
		[Column(Storage="_PromoteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PromoteDate
		{
			get
			{
				return this._PromoteDate;
			}
			set
			{
				if ((this._PromoteDate != value))
				{
					this.OnPromoteDateChanging(value);
					this.SendPropertyChanging();
					this._PromoteDate = value;
					this.SendPropertyChanged("PromoteDate");
					this.OnPromoteDateChanged();
				}
			}
		}
		
		[Column(Storage="_Branded", DbType="Bit")]
		public System.Nullable<bool> Branded
		{
			get
			{
				return this._Branded;
			}
			set
			{
				if ((this._Branded != value))
				{
					this.OnBrandedChanging(value);
					this.SendPropertyChanging();
					this._Branded = value;
					this.SendPropertyChanged("Branded");
					this.OnBrandedChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier", DbType="NVarChar(200)")]
		public string Supplier
		{
			get
			{
				return this._Supplier;
			}
			set
			{
				if ((this._Supplier != value))
				{
					this.OnSupplierChanging(value);
					this.SendPropertyChanging();
					this._Supplier = value;
					this.SendPropertyChanged("Supplier");
					this.OnSupplierChanged();
				}
			}
		}
		
		[Column(Storage="_Edging_Single", DbType="Bit")]
		public System.Nullable<bool> Edging_Single
		{
			get
			{
				return this._Edging_Single;
			}
			set
			{
				if ((this._Edging_Single != value))
				{
					this.OnEdging_SingleChanging(value);
					this.SendPropertyChanging();
					this._Edging_Single = value;
					this.SendPropertyChanged("Edging_Single");
					this.OnEdging_SingleChanged();
				}
			}
		}
		
		[Column(Storage="_Edging_DoubleScallops", DbType="Bit")]
		public System.Nullable<bool> Edging_DoubleScallops
		{
			get
			{
				return this._Edging_DoubleScallops;
			}
			set
			{
				if ((this._Edging_DoubleScallops != value))
				{
					this.OnEdging_DoubleScallopsChanging(value);
					this.SendPropertyChanging();
					this._Edging_DoubleScallops = value;
					this.SendPropertyChanged("Edging_DoubleScallops");
					this.OnEdging_DoubleScallopsChanged();
				}
			}
		}
		
		[Column(Storage="_Commodity", DbType="VarChar(4000)")]
		public string Commodity
		{
			get
			{
				return this._Commodity;
			}
			set
			{
				if ((this._Commodity != value))
				{
					this.OnCommodityChanging(value);
					this.SendPropertyChanging();
					this._Commodity = value;
					this.SendPropertyChanged("Commodity");
					this.OnCommodityChanged();
				}
			}
		}
		
		[Column(Storage="_Pattern", DbType="NVarChar(200)")]
		public string Pattern
		{
			get
			{
				return this._Pattern;
			}
			set
			{
				if ((this._Pattern != value))
				{
					this.OnPatternChanging(value);
					this.SendPropertyChanging();
					this._Pattern = value;
					this.SendPropertyChanged("Pattern");
					this.OnPatternChanged();
				}
			}
		}
		
		[Column(Storage="_Lace", DbType="NVarChar(200)")]
		public string Lace
		{
			get
			{
				return this._Lace;
			}
			set
			{
				if ((this._Lace != value))
				{
					this.OnLaceChanging(value);
					this.SendPropertyChanging();
					this._Lace = value;
					this.SendPropertyChanged("Lace");
					this.OnLaceChanged();
				}
			}
		}
		
		[Column(Storage="_Customer", DbType="NVarChar(200)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialLabel", DbType="NVarChar(200)")]
		public string SpecialLabel
		{
			get
			{
				return this._SpecialLabel;
			}
			set
			{
				if ((this._SpecialLabel != value))
				{
					this.OnSpecialLabelChanging(value);
					this.SendPropertyChanging();
					this._SpecialLabel = value;
					this.SendPropertyChanged("SpecialLabel");
					this.OnSpecialLabelChanged();
				}
			}
		}
		
		[Column(Storage="_SeasonNo", DbType="NVarChar(200)")]
		public string SeasonNo
		{
			get
			{
				return this._SeasonNo;
			}
			set
			{
				if ((this._SeasonNo != value))
				{
					this.OnSeasonNoChanging(value);
					this.SendPropertyChanging();
					this._SeasonNo = value;
					this.SendPropertyChanged("SeasonNo");
					this.OnSeasonNoChanged();
				}
			}
		}
		
		[Column(Storage="_RiskItem", DbType="NVarChar(200)")]
		public string RiskItem
		{
			get
			{
				return this._RiskItem;
			}
			set
			{
				if ((this._RiskItem != value))
				{
					this.OnRiskItemChanging(value);
					this.SendPropertyChanging();
					this._RiskItem = value;
					this.SendPropertyChanged("RiskItem");
					this.OnRiskItemChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Oeko", DbType="Int")]
		public System.Nullable<int> Oeko
		{
			get
			{
				return this._Oeko;
			}
			set
			{
				if ((this._Oeko != value))
				{
					this.OnOekoChanging(value);
					this.SendPropertyChanging();
					this._Oeko = value;
					this.SendPropertyChanged("Oeko");
					this.OnOekoChanged();
				}
			}
		}
		
		[Column(Storage="_ValueAdjustAddDyeing", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> ValueAdjustAddDyeing
		{
			get
			{
				return this._ValueAdjustAddDyeing;
			}
			set
			{
				if ((this._ValueAdjustAddDyeing != value))
				{
					this.OnValueAdjustAddDyeingChanging(value);
					this.SendPropertyChanging();
					this._ValueAdjustAddDyeing = value;
					this.SendPropertyChanged("ValueAdjustAddDyeing");
					this.OnValueAdjustAddDyeingChanged();
				}
			}
		}
		
		[Column(Storage="_PriceIncrProtect", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PriceIncrProtect
		{
			get
			{
				return this._PriceIncrProtect;
			}
			set
			{
				if ((this._PriceIncrProtect != value))
				{
					this.OnPriceIncrProtectChanging(value);
					this.SendPropertyChanging();
					this._PriceIncrProtect = value;
					this.SendPropertyChanged("PriceIncrProtect");
					this.OnPriceIncrProtectChanged();
				}
			}
		}
		
		[Column(Storage="_UncertainQuality", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> UncertainQuality
		{
			get
			{
				return this._UncertainQuality;
			}
			set
			{
				if ((this._UncertainQuality != value))
				{
					this.OnUncertainQualityChanging(value);
					this.SendPropertyChanging();
					this._UncertainQuality = value;
					this.SendPropertyChanged("UncertainQuality");
					this.OnUncertainQualityChanged();
				}
			}
		}
		
		[Column(Storage="_OthersBuffer", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> OthersBuffer
		{
			get
			{
				return this._OthersBuffer;
			}
			set
			{
				if ((this._OthersBuffer != value))
				{
					this.OnOthersBufferChanging(value);
					this.SendPropertyChanging();
					this._OthersBuffer = value;
					this.SendPropertyChanged("OthersBuffer");
					this.OnOthersBufferChanged();
				}
			}
		}
		
		[Column(Storage="_WastageOnCAC", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> WastageOnCAC
		{
			get
			{
				return this._WastageOnCAC;
			}
			set
			{
				if ((this._WastageOnCAC != value))
				{
					this.OnWastageOnCACChanging(value);
					this.SendPropertyChanging();
					this._WastageOnCAC = value;
					this.SendPropertyChanged("WastageOnCAC");
					this.OnWastageOnCACChanged();
				}
			}
		}
		
		[Column(Storage="_Relaxtion", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> Relaxtion
		{
			get
			{
				return this._Relaxtion;
			}
			set
			{
				if ((this._Relaxtion != value))
				{
					this.OnRelaxtionChanging(value);
					this.SendPropertyChanging();
					this._Relaxtion = value;
					this.SendPropertyChanged("Relaxtion");
					this.OnRelaxtionChanged();
				}
			}
		}
		
		[Column(Storage="_TargetPrice", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TargetPrice
		{
			get
			{
				return this._TargetPrice;
			}
			set
			{
				if ((this._TargetPrice != value))
				{
					this.OnTargetPriceChanging(value);
					this.SendPropertyChanging();
					this._TargetPrice = value;
					this.SendPropertyChanged("TargetPrice");
					this.OnTargetPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Gauge", DbType="NVarChar(200)")]
		public string Gauge
		{
			get
			{
				return this._Gauge;
			}
			set
			{
				if ((this._Gauge != value))
				{
					this.OnGaugeChanging(value);
					this.SendPropertyChanging();
					this._Gauge = value;
					this.SendPropertyChanged("Gauge");
					this.OnGaugeChanged();
				}
			}
		}
		
		[Column(Storage="_Composition", DbType="NVarChar(200)")]
		public string Composition
		{
			get
			{
				return this._Composition;
			}
			set
			{
				if ((this._Composition != value))
				{
					this.OnCompositionChanging(value);
					this.SendPropertyChanging();
					this._Composition = value;
					this.SendPropertyChanged("Composition");
					this.OnCompositionChanged();
				}
			}
		}
		
		[Column(Storage="_Density", DbType="NVarChar(200)")]
		public string Density
		{
			get
			{
				return this._Density;
			}
			set
			{
				if ((this._Density != value))
				{
					this.OnDensityChanging(value);
					this.SendPropertyChanging();
					this._Density = value;
					this.SendPropertyChanged("Density");
					this.OnDensityChanged();
				}
			}
		}
		
		[Column(Storage="_GauagePerinch", DbType="NVarChar(200)")]
		public string GauagePerinch
		{
			get
			{
				return this._GauagePerinch;
			}
			set
			{
				if ((this._GauagePerinch != value))
				{
					this.OnGauagePerinchChanging(value);
					this.SendPropertyChanging();
					this._GauagePerinch = value;
					this.SendPropertyChanged("GauagePerinch");
					this.OnGauagePerinchChanged();
				}
			}
		}
		
		[Column(Storage="_MinOrder", DbType="Int")]
		public System.Nullable<int> MinOrder
		{
			get
			{
				return this._MinOrder;
			}
			set
			{
				if ((this._MinOrder != value))
				{
					this.OnMinOrderChanging(value);
					this.SendPropertyChanging();
					this._MinOrder = value;
					this.SendPropertyChanged("MinOrder");
					this.OnMinOrderChanged();
				}
			}
		}
		
		[Column(Storage="_MinColor", DbType="Int")]
		public System.Nullable<int> MinColor
		{
			get
			{
				return this._MinColor;
			}
			set
			{
				if ((this._MinColor != value))
				{
					this.OnMinColorChanging(value);
					this.SendPropertyChanging();
					this._MinColor = value;
					this.SendPropertyChanged("MinColor");
					this.OnMinColorChanged();
				}
			}
		}
		
		[Column(Storage="_MinStartProduct", DbType="Int")]
		public System.Nullable<int> MinStartProduct
		{
			get
			{
				return this._MinStartProduct;
			}
			set
			{
				if ((this._MinStartProduct != value))
				{
					this.OnMinStartProductChanging(value);
					this.SendPropertyChanging();
					this._MinStartProduct = value;
					this.SendPropertyChanged("MinStartProduct");
					this.OnMinStartProductChanged();
				}
			}
		}
		
		[Column(Storage="_LastQtnRef", DbType="NVarChar(200)")]
		public string LastQtnRef
		{
			get
			{
				return this._LastQtnRef;
			}
			set
			{
				if ((this._LastQtnRef != value))
				{
					this.OnLastQtnRefChanging(value);
					this.SendPropertyChanging();
					this._LastQtnRef = value;
					this.SendPropertyChanged("LastQtnRef");
					this.OnLastQtnRefChanged();
				}
			}
		}
		
		[Column(Storage="_LastQtnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastQtnDate
		{
			get
			{
				return this._LastQtnDate;
			}
			set
			{
				if ((this._LastQtnDate != value))
				{
					this.OnLastQtnDateChanging(value);
					this.SendPropertyChanging();
					this._LastQtnDate = value;
					this.SendPropertyChanged("LastQtnDate");
					this.OnLastQtnDateChanged();
				}
			}
		}
		
		[Column(Storage="_QtnPriceValidityDays", DbType="Float")]
		public System.Nullable<double> QtnPriceValidityDays
		{
			get
			{
				return this._QtnPriceValidityDays;
			}
			set
			{
				if ((this._QtnPriceValidityDays != value))
				{
					this.OnQtnPriceValidityDaysChanging(value);
					this.SendPropertyChanging();
					this._QtnPriceValidityDays = value;
					this.SendPropertyChanged("QtnPriceValidityDays");
					this.OnQtnPriceValidityDaysChanged();
				}
			}
		}
		
		[Column(Storage="_QtnPriceExpiryDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> QtnPriceExpiryDate
		{
			get
			{
				return this._QtnPriceExpiryDate;
			}
			set
			{
				if ((this._QtnPriceExpiryDate != value))
				{
					this.OnQtnPriceExpiryDateChanging(value);
					this.SendPropertyChanging();
					this._QtnPriceExpiryDate = value;
					this.SendPropertyChanged("QtnPriceExpiryDate");
					this.OnQtnPriceExpiryDateChanged();
				}
			}
		}
		
		[Column(Storage="_SubchargeOrder", DbType="NVarChar(200)")]
		public string SubchargeOrder
		{
			get
			{
				return this._SubchargeOrder;
			}
			set
			{
				if ((this._SubchargeOrder != value))
				{
					this.OnSubchargeOrderChanging(value);
					this.SendPropertyChanging();
					this._SubchargeOrder = value;
					this.SendPropertyChanged("SubchargeOrder");
					this.OnSubchargeOrderChanged();
				}
			}
		}
		
		[Column(Storage="_SubchargeShipMode", DbType="NVarChar(200)")]
		public string SubchargeShipMode
		{
			get
			{
				return this._SubchargeShipMode;
			}
			set
			{
				if ((this._SubchargeShipMode != value))
				{
					this.OnSubchargeShipModeChanging(value);
					this.SendPropertyChanging();
					this._SubchargeShipMode = value;
					this.SendPropertyChanged("SubchargeShipMode");
					this.OnSubchargeShipModeChanged();
				}
			}
		}
		
		[Column(Storage="_DyeingMultiple", DbType="NVarChar(200)")]
		public string DyeingMultiple
		{
			get
			{
				return this._DyeingMultiple;
			}
			set
			{
				if ((this._DyeingMultiple != value))
				{
					this.OnDyeingMultipleChanging(value);
					this.SendPropertyChanging();
					this._DyeingMultiple = value;
					this.SendPropertyChanged("DyeingMultiple");
					this.OnDyeingMultipleChanged();
				}
			}
		}
		
		[Column(Storage="_PackUnit", DbType="NVarChar(200)")]
		public string PackUnit
		{
			get
			{
				return this._PackUnit;
			}
			set
			{
				if ((this._PackUnit != value))
				{
					this.OnPackUnitChanging(value);
					this.SendPropertyChanging();
					this._PackUnit = value;
					this.SendPropertyChanged("PackUnit");
					this.OnPackUnitChanged();
				}
			}
		}
		
		[Column(Storage="_SubPackUnit", DbType="NVarChar(200)")]
		public string SubPackUnit
		{
			get
			{
				return this._SubPackUnit;
			}
			set
			{
				if ((this._SubPackUnit != value))
				{
					this.OnSubPackUnitChanging(value);
					this.SendPropertyChanging();
					this._SubPackUnit = value;
					this.SendPropertyChanged("SubPackUnit");
					this.OnSubPackUnitChanged();
				}
			}
		}
		
		[Column(Storage="_SubPackQty", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> SubPackQty
		{
			get
			{
				return this._SubPackQty;
			}
			set
			{
				if ((this._SubPackQty != value))
				{
					this.OnSubPackQtyChanging(value);
					this.SendPropertyChanging();
					this._SubPackQty = value;
					this.SendPropertyChanged("SubPackQty");
					this.OnSubPackQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SubPackNo", DbType="Int")]
		public System.Nullable<int> SubPackNo
		{
			get
			{
				return this._SubPackNo;
			}
			set
			{
				if ((this._SubPackNo != value))
				{
					this.OnSubPackNoChanging(value);
					this.SendPropertyChanging();
					this._SubPackNo = value;
					this.SendPropertyChanged("SubPackNo");
					this.OnSubPackNoChanged();
				}
			}
		}
		
		[Column(Storage="_QAStatus", DbType="Int")]
		public System.Nullable<int> QAStatus
		{
			get
			{
				return this._QAStatus;
			}
			set
			{
				if ((this._QAStatus != value))
				{
					this.OnQAStatusChanging(value);
					this.SendPropertyChanging();
					this._QAStatus = value;
					this.SendPropertyChanged("QAStatus");
					this.OnQAStatusChanged();
				}
			}
		}
		
		[Column(Storage="_YarnDays", DbType="Float")]
		public System.Nullable<double> YarnDays
		{
			get
			{
				return this._YarnDays;
			}
			set
			{
				if ((this._YarnDays != value))
				{
					this.OnYarnDaysChanging(value);
					this.SendPropertyChanging();
					this._YarnDays = value;
					this.SendPropertyChanged("YarnDays");
					this.OnYarnDaysChanged();
				}
			}
		}
		
		[Column(Storage="_GeigeDays", DbType="Float")]
		public System.Nullable<double> GeigeDays
		{
			get
			{
				return this._GeigeDays;
			}
			set
			{
				if ((this._GeigeDays != value))
				{
					this.OnGeigeDaysChanging(value);
					this.SendPropertyChanging();
					this._GeigeDays = value;
					this.SendPropertyChanged("GeigeDays");
					this.OnGeigeDaysChanged();
				}
			}
		}
		
		[Column(Storage="_RunningDays", DbType="Float")]
		public System.Nullable<double> RunningDays
		{
			get
			{
				return this._RunningDays;
			}
			set
			{
				if ((this._RunningDays != value))
				{
					this.OnRunningDaysChanging(value);
					this.SendPropertyChanging();
					this._RunningDays = value;
					this.SendPropertyChanged("RunningDays");
					this.OnRunningDaysChanged();
				}
			}
		}
		
		[Column(Storage="_ExclusiveBy", DbType="VarChar(50)")]
		public string ExclusiveBy
		{
			get
			{
				return this._ExclusiveBy;
			}
			set
			{
				if ((this._ExclusiveBy != value))
				{
					this.OnExclusiveByChanging(value);
					this.SendPropertyChanging();
					this._ExclusiveBy = value;
					this.SendPropertyChanged("ExclusiveBy");
					this.OnExclusiveByChanged();
				}
			}
		}
		
		[Column(Storage="_LeadTimeHYCheck", DbType="Bit")]
		public System.Nullable<bool> LeadTimeHYCheck
		{
			get
			{
				return this._LeadTimeHYCheck;
			}
			set
			{
				if ((this._LeadTimeHYCheck != value))
				{
					this.OnLeadTimeHYCheckChanging(value);
					this.SendPropertyChanging();
					this._LeadTimeHYCheck = value;
					this.SendPropertyChanged("LeadTimeHYCheck");
					this.OnLeadTimeHYCheckChanged();
				}
			}
		}
		
		[Column(Storage="_LeadTimeGeigeCheck", DbType="Bit")]
		public System.Nullable<bool> LeadTimeGeigeCheck
		{
			get
			{
				return this._LeadTimeGeigeCheck;
			}
			set
			{
				if ((this._LeadTimeGeigeCheck != value))
				{
					this.OnLeadTimeGeigeCheckChanging(value);
					this.SendPropertyChanging();
					this._LeadTimeGeigeCheck = value;
					this.SendPropertyChanged("LeadTimeGeigeCheck");
					this.OnLeadTimeGeigeCheckChanged();
				}
			}
		}
		
		[Column(Storage="_LeadTimeRunningCheck", DbType="Bit")]
		public System.Nullable<bool> LeadTimeRunningCheck
		{
			get
			{
				return this._LeadTimeRunningCheck;
			}
			set
			{
				if ((this._LeadTimeRunningCheck != value))
				{
					this.OnLeadTimeRunningCheckChanging(value);
					this.SendPropertyChanging();
					this._LeadTimeRunningCheck = value;
					this.SendPropertyChanged("LeadTimeRunningCheck");
					this.OnLeadTimeRunningCheckChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierUnit", DbType="NVarChar(200)")]
		public string SupplierUnit
		{
			get
			{
				return this._SupplierUnit;
			}
			set
			{
				if ((this._SupplierUnit != value))
				{
					this.OnSupplierUnitChanging(value);
					this.SendPropertyChanging();
					this._SupplierUnit = value;
					this.SendPropertyChanged("SupplierUnit");
					this.OnSupplierUnitChanged();
				}
			}
		}
		
		[Column(Storage="_PHUnit", DbType="NVarChar(200)")]
		public string PHUnit
		{
			get
			{
				return this._PHUnit;
			}
			set
			{
				if ((this._PHUnit != value))
				{
					this.OnPHUnitChanging(value);
					this.SendPropertyChanging();
					this._PHUnit = value;
					this.SendPropertyChanged("PHUnit");
					this.OnPHUnitChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> SupplierWidth
		{
			get
			{
				return this._SupplierWidth;
			}
			set
			{
				if ((this._SupplierWidth != value))
				{
					this.OnSupplierWidthChanging(value);
					this.SendPropertyChanging();
					this._SupplierWidth = value;
					this.SendPropertyChanged("SupplierWidth");
					this.OnSupplierWidthChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> UsableWidth
		{
			get
			{
				return this._UsableWidth;
			}
			set
			{
				if ((this._UsableWidth != value))
				{
					this.OnUsableWidthChanging(value);
					this.SendPropertyChanging();
					this._UsableWidth = value;
					this.SendPropertyChanged("UsableWidth");
					this.OnUsableWidthChanged();
				}
			}
		}
		
		[Column(Storage="_MarkerWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> MarkerWidth
		{
			get
			{
				return this._MarkerWidth;
			}
			set
			{
				if ((this._MarkerWidth != value))
				{
					this.OnMarkerWidthChanging(value);
					this.SendPropertyChanging();
					this._MarkerWidth = value;
					this.SendPropertyChanged("MarkerWidth");
					this.OnMarkerWidthChanged();
				}
			}
		}
		
		[Column(Storage="_TubularWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TubularWidth
		{
			get
			{
				return this._TubularWidth;
			}
			set
			{
				if ((this._TubularWidth != value))
				{
					this.OnTubularWidthChanging(value);
					this.SendPropertyChanging();
					this._TubularWidth = value;
					this.SendPropertyChanged("TubularWidth");
					this.OnTubularWidthChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierWidthS", DbType="NVarChar(200)")]
		public string SupplierWidthS
		{
			get
			{
				return this._SupplierWidthS;
			}
			set
			{
				if ((this._SupplierWidthS != value))
				{
					this.OnSupplierWidthSChanging(value);
					this.SendPropertyChanging();
					this._SupplierWidthS = value;
					this.SendPropertyChanged("SupplierWidthS");
					this.OnSupplierWidthSChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidthS", DbType="NVarChar(200)")]
		public string UsableWidthS
		{
			get
			{
				return this._UsableWidthS;
			}
			set
			{
				if ((this._UsableWidthS != value))
				{
					this.OnUsableWidthSChanging(value);
					this.SendPropertyChanging();
					this._UsableWidthS = value;
					this.SendPropertyChanged("UsableWidthS");
					this.OnUsableWidthSChanged();
				}
			}
		}
		
		[Column(Storage="_MarkerWidthS", DbType="NVarChar(200)")]
		public string MarkerWidthS
		{
			get
			{
				return this._MarkerWidthS;
			}
			set
			{
				if ((this._MarkerWidthS != value))
				{
					this.OnMarkerWidthSChanging(value);
					this.SendPropertyChanging();
					this._MarkerWidthS = value;
					this.SendPropertyChanged("MarkerWidthS");
					this.OnMarkerWidthSChanged();
				}
			}
		}
		
		[Column(Storage="_TubularWidthS", DbType="NVarChar(200)")]
		public string TubularWidthS
		{
			get
			{
				return this._TubularWidthS;
			}
			set
			{
				if ((this._TubularWidthS != value))
				{
					this.OnTubularWidthSChanging(value);
					this.SendPropertyChanging();
					this._TubularWidthS = value;
					this.SendPropertyChanged("TubularWidthS");
					this.OnTubularWidthSChanged();
				}
			}
		}
		
		[Column(Storage="_WeightGmSqm", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> WeightGmSqm
		{
			get
			{
				return this._WeightGmSqm;
			}
			set
			{
				if ((this._WeightGmSqm != value))
				{
					this.OnWeightGmSqmChanging(value);
					this.SendPropertyChanging();
					this._WeightGmSqm = value;
					this.SendPropertyChanged("WeightGmSqm");
					this.OnWeightGmSqmChanged();
				}
			}
		}
		
		[Column(Storage="_WeightGmSqmS", DbType="NVarChar(50)")]
		public string WeightGmSqmS
		{
			get
			{
				return this._WeightGmSqmS;
			}
			set
			{
				if ((this._WeightGmSqmS != value))
				{
					this.OnWeightGmSqmSChanging(value);
					this.SendPropertyChanging();
					this._WeightGmSqmS = value;
					this.SendPropertyChanged("WeightGmSqmS");
					this.OnWeightGmSqmSChanged();
				}
			}
		}
		
		[Column(Storage="_SuppM", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> SuppM
		{
			get
			{
				return this._SuppM;
			}
			set
			{
				if ((this._SuppM != value))
				{
					this.OnSuppMChanging(value);
					this.SendPropertyChanging();
					this._SuppM = value;
					this.SendPropertyChanged("SuppM");
					this.OnSuppMChanged();
				}
			}
		}
		
		[Column(Storage="_MarkerM", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> MarkerM
		{
			get
			{
				return this._MarkerM;
			}
			set
			{
				if ((this._MarkerM != value))
				{
					this.OnMarkerMChanging(value);
					this.SendPropertyChanging();
					this._MarkerM = value;
					this.SendPropertyChanged("MarkerM");
					this.OnMarkerMChanged();
				}
			}
		}
		
		[Column(Storage="_TubularM", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TubularM
		{
			get
			{
				return this._TubularM;
			}
			set
			{
				if ((this._TubularM != value))
				{
					this.OnTubularMChanging(value);
					this.SendPropertyChanging();
					this._TubularM = value;
					this.SendPropertyChanged("TubularM");
					this.OnTubularMChanged();
				}
			}
		}
		
		[Column(Storage="_RateToPHUnitBK", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> RateToPHUnitBK
		{
			get
			{
				return this._RateToPHUnitBK;
			}
			set
			{
				if ((this._RateToPHUnitBK != value))
				{
					this.OnRateToPHUnitBKChanging(value);
					this.SendPropertyChanging();
					this._RateToPHUnitBK = value;
					this.SendPropertyChanged("RateToPHUnitBK");
					this.OnRateToPHUnitBKChanged();
				}
			}
		}
		
		[Column(Storage="_ScallopHeight", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> ScallopHeight
		{
			get
			{
				return this._ScallopHeight;
			}
			set
			{
				if ((this._ScallopHeight != value))
				{
					this.OnScallopHeightChanging(value);
					this.SendPropertyChanging();
					this._ScallopHeight = value;
					this.SendPropertyChanged("ScallopHeight");
					this.OnScallopHeightChanged();
				}
			}
		}
		
		[Column(Storage="_PerCone", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PerCone
		{
			get
			{
				return this._PerCone;
			}
			set
			{
				if ((this._PerCone != value))
				{
					this.OnPerConeChanging(value);
					this.SendPropertyChanging();
					this._PerCone = value;
					this.SendPropertyChanged("PerCone");
					this.OnPerConeChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(4000)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_DataPreparedBy", DbType="NVarChar(200)")]
		public string DataPreparedBy
		{
			get
			{
				return this._DataPreparedBy;
			}
			set
			{
				if ((this._DataPreparedBy != value))
				{
					this.OnDataPreparedByChanging(value);
					this.SendPropertyChanging();
					this._DataPreparedBy = value;
					this.SendPropertyChanged("DataPreparedBy");
					this.OnDataPreparedByChanged();
				}
			}
		}
		
		[Column(Storage="_HangerDataPreparedBy", DbType="NVarChar(50)")]
		public string HangerDataPreparedBy
		{
			get
			{
				return this._HangerDataPreparedBy;
			}
			set
			{
				if ((this._HangerDataPreparedBy != value))
				{
					this.OnHangerDataPreparedByChanging(value);
					this.SendPropertyChanging();
					this._HangerDataPreparedBy = value;
					this.SendPropertyChanged("HangerDataPreparedBy");
					this.OnHangerDataPreparedByChanged();
				}
			}
		}
		
		[Column(Storage="_Confirmed", DbType="Bit")]
		public System.Nullable<bool> Confirmed
		{
			get
			{
				return this._Confirmed;
			}
			set
			{
				if ((this._Confirmed != value))
				{
					this.OnConfirmedChanging(value);
					this.SendPropertyChanging();
					this._Confirmed = value;
					this.SendPropertyChanged("Confirmed");
					this.OnConfirmedChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmedBy", DbType="NVarChar(200)")]
		public string ConfirmedBy
		{
			get
			{
				return this._ConfirmedBy;
			}
			set
			{
				if ((this._ConfirmedBy != value))
				{
					this.OnConfirmedByChanging(value);
					this.SendPropertyChanging();
					this._ConfirmedBy = value;
					this.SendPropertyChanged("ConfirmedBy");
					this.OnConfirmedByChanged();
				}
			}
		}
		
		[Column(Storage="_ConfirmDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfirmDate
		{
			get
			{
				return this._ConfirmDate;
			}
			set
			{
				if ((this._ConfirmDate != value))
				{
					this.OnConfirmDateChanging(value);
					this.SendPropertyChanging();
					this._ConfirmDate = value;
					this.SendPropertyChanged("ConfirmDate");
					this.OnConfirmDateChanged();
				}
			}
		}
		
		[Column(Storage="_Approved", DbType="Bit")]
		public System.Nullable<bool> Approved
		{
			get
			{
				return this._Approved;
			}
			set
			{
				if ((this._Approved != value))
				{
					this.OnApprovedChanging(value);
					this.SendPropertyChanging();
					this._Approved = value;
					this.SendPropertyChanged("Approved");
					this.OnApprovedChanged();
				}
			}
		}
		
		[Column(Storage="_ApprovedBy", DbType="NVarChar(200)")]
		public string ApprovedBy
		{
			get
			{
				return this._ApprovedBy;
			}
			set
			{
				if ((this._ApprovedBy != value))
				{
					this.OnApprovedByChanging(value);
					this.SendPropertyChanging();
					this._ApprovedBy = value;
					this.SendPropertyChanged("ApprovedBy");
					this.OnApprovedByChanged();
				}
			}
		}
		
		[Column(Storage="_ApproveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ApproveDate
		{
			get
			{
				return this._ApproveDate;
			}
			set
			{
				if ((this._ApproveDate != value))
				{
					this.OnApproveDateChanging(value);
					this.SendPropertyChanging();
					this._ApproveDate = value;
					this.SendPropertyChanged("ApproveDate");
					this.OnApproveDateChanged();
				}
			}
		}
		
		[Column(Storage="_HangerPassed", DbType="Bit")]
		public System.Nullable<bool> HangerPassed
		{
			get
			{
				return this._HangerPassed;
			}
			set
			{
				if ((this._HangerPassed != value))
				{
					this.OnHangerPassedChanging(value);
					this.SendPropertyChanging();
					this._HangerPassed = value;
					this.SendPropertyChanged("HangerPassed");
					this.OnHangerPassedChanged();
				}
			}
		}
		
		[Column(Storage="_HangerPassedBy", DbType="NVarChar(200)")]
		public string HangerPassedBy
		{
			get
			{
				return this._HangerPassedBy;
			}
			set
			{
				if ((this._HangerPassedBy != value))
				{
					this.OnHangerPassedByChanging(value);
					this.SendPropertyChanging();
					this._HangerPassedBy = value;
					this.SendPropertyChanged("HangerPassedBy");
					this.OnHangerPassedByChanged();
				}
			}
		}
		
		[Column(Storage="_HangerPassedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HangerPassedDate
		{
			get
			{
				return this._HangerPassedDate;
			}
			set
			{
				if ((this._HangerPassedDate != value))
				{
					this.OnHangerPassedDateChanging(value);
					this.SendPropertyChanging();
					this._HangerPassedDate = value;
					this.SendPropertyChanged("HangerPassedDate");
					this.OnHangerPassedDateChanged();
				}
			}
		}
		
		[Column(Storage="_FormPassed", DbType="Bit")]
		public System.Nullable<bool> FormPassed
		{
			get
			{
				return this._FormPassed;
			}
			set
			{
				if ((this._FormPassed != value))
				{
					this.OnFormPassedChanging(value);
					this.SendPropertyChanging();
					this._FormPassed = value;
					this.SendPropertyChanged("FormPassed");
					this.OnFormPassedChanged();
				}
			}
		}
		
		[Column(Storage="_FormPassedBy", DbType="NVarChar(200)")]
		public string FormPassedBy
		{
			get
			{
				return this._FormPassedBy;
			}
			set
			{
				if ((this._FormPassedBy != value))
				{
					this.OnFormPassedByChanging(value);
					this.SendPropertyChanging();
					this._FormPassedBy = value;
					this.SendPropertyChanged("FormPassedBy");
					this.OnFormPassedByChanged();
				}
			}
		}
		
		[Column(Storage="_FormPassedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FormPassedDate
		{
			get
			{
				return this._FormPassedDate;
			}
			set
			{
				if ((this._FormPassedDate != value))
				{
					this.OnFormPassedDateChanging(value);
					this.SendPropertyChanging();
					this._FormPassedDate = value;
					this.SendPropertyChanged("FormPassedDate");
					this.OnFormPassedDateChanged();
				}
			}
		}
		
		[Column(Storage="_HsCode", DbType="NVarChar(200)")]
		public string HsCode
		{
			get
			{
				return this._HsCode;
			}
			set
			{
				if ((this._HsCode != value))
				{
					this.OnHsCodeChanging(value);
					this.SendPropertyChanging();
					this._HsCode = value;
					this.SendPropertyChanged("HsCode");
					this.OnHsCodeChanged();
				}
			}
		}
		
		[Column(Storage="_WeightHsCode", DbType="NVarChar(200)")]
		public string WeightHsCode
		{
			get
			{
				return this._WeightHsCode;
			}
			set
			{
				if ((this._WeightHsCode != value))
				{
					this.OnWeightHsCodeChanging(value);
					this.SendPropertyChanging();
					this._WeightHsCode = value;
					this.SendPropertyChanged("WeightHsCode");
					this.OnWeightHsCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ImageFile", DbType="NVarChar(200)")]
		public string ImageFile
		{
			get
			{
				return this._ImageFile;
			}
			set
			{
				if ((this._ImageFile != value))
				{
					this.OnImageFileChanging(value);
					this.SendPropertyChanging();
					this._ImageFile = value;
					this.SendPropertyChanged("ImageFile");
					this.OnImageFileChanged();
				}
			}
		}
		
		[Column(Storage="_AllInPrice1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AllInPrice1
		{
			get
			{
				return this._AllInPrice1;
			}
			set
			{
				if ((this._AllInPrice1 != value))
				{
					this.OnAllInPrice1Changing(value);
					this.SendPropertyChanging();
					this._AllInPrice1 = value;
					this.SendPropertyChanged("AllInPrice1");
					this.OnAllInPrice1Changed();
				}
			}
		}
		
		[Column(Storage="_SQMPrice1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> SQMPrice1
		{
			get
			{
				return this._SQMPrice1;
			}
			set
			{
				if ((this._SQMPrice1 != value))
				{
					this.OnSQMPrice1Changing(value);
					this.SendPropertyChanging();
					this._SQMPrice1 = value;
					this.SendPropertyChanged("SQMPrice1");
					this.OnSQMPrice1Changed();
				}
			}
		}
		
		[Column(Storage="_avgPrice_Supplier1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> avgPrice_Supplier1
		{
			get
			{
				return this._avgPrice_Supplier1;
			}
			set
			{
				if ((this._avgPrice_Supplier1 != value))
				{
					this.OnavgPrice_Supplier1Changing(value);
					this.SendPropertyChanging();
					this._avgPrice_Supplier1 = value;
					this.SendPropertyChanged("avgPrice_Supplier1");
					this.OnavgPrice_Supplier1Changed();
				}
			}
		}
		
		[Column(Storage="_AvgPrice_PH1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AvgPrice_PH1
		{
			get
			{
				return this._AvgPrice_PH1;
			}
			set
			{
				if ((this._AvgPrice_PH1 != value))
				{
					this.OnAvgPrice_PH1Changing(value);
					this.SendPropertyChanging();
					this._AvgPrice_PH1 = value;
					this.SendPropertyChanged("AvgPrice_PH1");
					this.OnAvgPrice_PH1Changed();
				}
			}
		}
		
		[Column(Storage="_MaterialGroup", DbType="NVarChar(200)")]
		public string MaterialGroup
		{
			get
			{
				return this._MaterialGroup;
			}
			set
			{
				if ((this._MaterialGroup != value))
				{
					this.OnMaterialGroupChanging(value);
					this.SendPropertyChanging();
					this._MaterialGroup = value;
					this.SendPropertyChanged("MaterialGroup");
					this.OnMaterialGroupChanged();
				}
			}
		}
		
		[Column(Storage="_DestinationPort", DbType="NVarChar(200)")]
		public string DestinationPort
		{
			get
			{
				return this._DestinationPort;
			}
			set
			{
				if ((this._DestinationPort != value))
				{
					this.OnDestinationPortChanging(value);
					this.SendPropertyChanging();
					this._DestinationPort = value;
					this.SendPropertyChanged("DestinationPort");
					this.OnDestinationPortChanged();
				}
			}
		}
		
		[Column(Storage="_RateToPHUnit1", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> RateToPHUnit1
		{
			get
			{
				return this._RateToPHUnit1;
			}
			set
			{
				if ((this._RateToPHUnit1 != value))
				{
					this.OnRateToPHUnit1Changing(value);
					this.SendPropertyChanging();
					this._RateToPHUnit1 = value;
					this.SendPropertyChanged("RateToPHUnit1");
					this.OnRateToPHUnit1Changed();
				}
			}
		}
		
		[Column(Storage="_OrderShptLeadtime", DbType="DateTime")]
		public System.Nullable<System.DateTime> OrderShptLeadtime
		{
			get
			{
				return this._OrderShptLeadtime;
			}
			set
			{
				if ((this._OrderShptLeadtime != value))
				{
					this.OnOrderShptLeadtimeChanging(value);
					this.SendPropertyChanging();
					this._OrderShptLeadtime = value;
					this.SendPropertyChanged("OrderShptLeadtime");
					this.OnOrderShptLeadtimeChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_TechWarp", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TechWarp
		{
			get
			{
				return this._TechWarp;
			}
			set
			{
				if ((this._TechWarp != value))
				{
					this.OnTechWarpChanging(value);
					this.SendPropertyChanging();
					this._TechWarp = value;
					this.SendPropertyChanged("TechWarp");
					this.OnTechWarpChanged();
				}
			}
		}
		
		[Column(Storage="_TechWept", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TechWept
		{
			get
			{
				return this._TechWept;
			}
			set
			{
				if ((this._TechWept != value))
				{
					this.OnTechWeptChanging(value);
					this.SendPropertyChanging();
					this._TechWept = value;
					this.SendPropertyChanged("TechWept");
					this.OnTechWeptChanged();
				}
			}
		}
		
		[Column(Storage="_TechWarpF", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TechWarpF
		{
			get
			{
				return this._TechWarpF;
			}
			set
			{
				if ((this._TechWarpF != value))
				{
					this.OnTechWarpFChanging(value);
					this.SendPropertyChanging();
					this._TechWarpF = value;
					this.SendPropertyChanged("TechWarpF");
					this.OnTechWarpFChanged();
				}
			}
		}
		
		[Column(Storage="_TechWeptF", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> TechWeptF
		{
			get
			{
				return this._TechWeptF;
			}
			set
			{
				if ((this._TechWeptF != value))
				{
					this.OnTechWeptFChanging(value);
					this.SendPropertyChanging();
					this._TechWeptF = value;
					this.SendPropertyChanged("TechWeptF");
					this.OnTechWeptFChanged();
				}
			}
		}
		
		[Column(Storage="_DataPreparedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DataPreparedDate
		{
			get
			{
				return this._DataPreparedDate;
			}
			set
			{
				if ((this._DataPreparedDate != value))
				{
					this.OnDataPreparedDateChanging(value);
					this.SendPropertyChanging();
					this._DataPreparedDate = value;
					this.SendPropertyChanged("DataPreparedDate");
					this.OnDataPreparedDateChanged();
				}
			}
		}
		
		[Column(Storage="_Dimension", DbType="NVarChar(20)")]
		public string Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this.OnDimensionChanging(value);
					this.SendPropertyChanging();
					this._Dimension = value;
					this.SendPropertyChanged("Dimension");
					this.OnDimensionChanged();
				}
			}
		}
		
		[Column(Storage="_LiabilityFollowUp", DbType="Bit")]
		public System.Nullable<bool> LiabilityFollowUp
		{
			get
			{
				return this._LiabilityFollowUp;
			}
			set
			{
				if ((this._LiabilityFollowUp != value))
				{
					this.OnLiabilityFollowUpChanging(value);
					this.SendPropertyChanging();
					this._LiabilityFollowUp = value;
					this.SendPropertyChanged("LiabilityFollowUp");
					this.OnLiabilityFollowUpChanged();
				}
			}
		}
		
		[Column(Storage="_HangerDataPreparedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HangerDataPreparedDate
		{
			get
			{
				return this._HangerDataPreparedDate;
			}
			set
			{
				if ((this._HangerDataPreparedDate != value))
				{
					this.OnHangerDataPreparedDateChanging(value);
					this.SendPropertyChanging();
					this._HangerDataPreparedDate = value;
					this.SendPropertyChanged("HangerDataPreparedDate");
					this.OnHangerDataPreparedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SizeMatrix", DbType="NVarChar(50)")]
		public string SizeMatrix
		{
			get
			{
				return this._SizeMatrix;
			}
			set
			{
				if ((this._SizeMatrix != value))
				{
					this.OnSizeMatrixChanging(value);
					this.SendPropertyChanging();
					this._SizeMatrix = value;
					this.SendPropertyChanged("SizeMatrix");
					this.OnSizeMatrixChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Storage="_AmendmentNo", DbType="Int")]
		public System.Nullable<int> AmendmentNo
		{
			get
			{
				return this._AmendmentNo;
			}
			set
			{
				if ((this._AmendmentNo != value))
				{
					this.OnAmendmentNoChanging(value);
					this.SendPropertyChanging();
					this._AmendmentNo = value;
					this.SendPropertyChanged("AmendmentNo");
					this.OnAmendmentNoChanged();
				}
			}
		}
		
		[Column(Storage="_Hanger", DbType="Bit")]
		public System.Nullable<bool> Hanger
		{
			get
			{
				return this._Hanger;
			}
			set
			{
				if ((this._Hanger != value))
				{
					this.OnHangerChanging(value);
					this.SendPropertyChanging();
					this._Hanger = value;
					this.SendPropertyChanged("Hanger");
					this.OnHangerChanged();
				}
			}
		}
		
		[Column(Storage="_YieldUsage", DbType="NVarChar(20)")]
		public string YieldUsage
		{
			get
			{
				return this._YieldUsage;
			}
			set
			{
				if ((this._YieldUsage != value))
				{
					this.OnYieldUsageChanging(value);
					this.SendPropertyChanging();
					this._YieldUsage = value;
					this.SendPropertyChanged("YieldUsage");
					this.OnYieldUsageChanged();
				}
			}
		}
		
		[Column(Storage="_SingleRangeSize", DbType="NVarChar(20)")]
		public string SingleRangeSize
		{
			get
			{
				return this._SingleRangeSize;
			}
			set
			{
				if ((this._SingleRangeSize != value))
				{
					this.OnSingleRangeSizeChanging(value);
					this.SendPropertyChanging();
					this._SingleRangeSize = value;
					this.SendPropertyChanged("SingleRangeSize");
					this.OnSingleRangeSizeChanged();
				}
			}
		}
		
		[Column(Storage="_UnitForSize", DbType="NVarChar(10)")]
		public string UnitForSize
		{
			get
			{
				return this._UnitForSize;
			}
			set
			{
				if ((this._UnitForSize != value))
				{
					this.OnUnitForSizeChanging(value);
					this.SendPropertyChanging();
					this._UnitForSize = value;
					this.SendPropertyChanged("UnitForSize");
					this.OnUnitForSizeChanged();
				}
			}
		}
		
		[Column(Storage="_IsPurchaseItem", DbType="Bit")]
		public System.Nullable<bool> IsPurchaseItem
		{
			get
			{
				return this._IsPurchaseItem;
			}
			set
			{
				if ((this._IsPurchaseItem != value))
				{
					this.OnIsPurchaseItemChanging(value);
					this.SendPropertyChanging();
					this._IsPurchaseItem = value;
					this.SendPropertyChanged("IsPurchaseItem");
					this.OnIsPurchaseItemChanged();
				}
			}
		}
		
		[Column(Storage="_Operation", DbType="NVarChar(20)")]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[Column(Storage="_IsMultiPrice", DbType="Bit")]
		public System.Nullable<bool> IsMultiPrice
		{
			get
			{
				return this._IsMultiPrice;
			}
			set
			{
				if ((this._IsMultiPrice != value))
				{
					this.OnIsMultiPriceChanging(value);
					this.SendPropertyChanging();
					this._IsMultiPrice = value;
					this.SendPropertyChanged("IsMultiPrice");
					this.OnIsMultiPriceChanged();
				}
			}
		}
		
		[Column(Storage="_MultiPriceOption", DbType="Int")]
		public System.Nullable<int> MultiPriceOption
		{
			get
			{
				return this._MultiPriceOption;
			}
			set
			{
				if ((this._MultiPriceOption != value))
				{
					this.OnMultiPriceOptionChanging(value);
					this.SendPropertyChanging();
					this._MultiPriceOption = value;
					this.SendPropertyChanged("MultiPriceOption");
					this.OnMultiPriceOptionChanged();
				}
			}
		}
		
		[Column(Storage="_Liability", DbType="Int")]
		public System.Nullable<int> Liability
		{
			get
			{
				return this._Liability;
			}
			set
			{
				if ((this._Liability != value))
				{
					this.OnLiabilityChanging(value);
					this.SendPropertyChanging();
					this._Liability = value;
					this.SendPropertyChanged("Liability");
					this.OnLiabilityChanged();
				}
			}
		}
		
		[Column(Storage="_LiabilityForCustomer", DbType="NVarChar(100)")]
		public string LiabilityForCustomer
		{
			get
			{
				return this._LiabilityForCustomer;
			}
			set
			{
				if ((this._LiabilityForCustomer != value))
				{
					this.OnLiabilityForCustomerChanging(value);
					this.SendPropertyChanging();
					this._LiabilityForCustomer = value;
					this.SendPropertyChanged("LiabilityForCustomer");
					this.OnLiabilityForCustomerChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerAppointed", DbType="Bit")]
		public System.Nullable<bool> CustomerAppointed
		{
			get
			{
				return this._CustomerAppointed;
			}
			set
			{
				if ((this._CustomerAppointed != value))
				{
					this.OnCustomerAppointedChanging(value);
					this.SendPropertyChanging();
					this._CustomerAppointed = value;
					this.SendPropertyChanged("CustomerAppointed");
					this.OnCustomerAppointedChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseWidthOption", DbType="Int")]
		public System.Nullable<int> PurchaseWidthOption
		{
			get
			{
				return this._PurchaseWidthOption;
			}
			set
			{
				if ((this._PurchaseWidthOption != value))
				{
					this.OnPurchaseWidthOptionChanging(value);
					this.SendPropertyChanging();
					this._PurchaseWidthOption = value;
					this.SendPropertyChanged("PurchaseWidthOption");
					this.OnPurchaseWidthOptionChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PurchaseWidth
		{
			get
			{
				return this._PurchaseWidth;
			}
			set
			{
				if ((this._PurchaseWidth != value))
				{
					this.OnPurchaseWidthChanging(value);
					this.SendPropertyChanging();
					this._PurchaseWidth = value;
					this.SendPropertyChanged("PurchaseWidth");
					this.OnPurchaseWidthChanged();
				}
			}
		}
		
		[Column(Storage="_HasSpecialPrice", DbType="Bit")]
		public System.Nullable<bool> HasSpecialPrice
		{
			get
			{
				return this._HasSpecialPrice;
			}
			set
			{
				if ((this._HasSpecialPrice != value))
				{
					this.OnHasSpecialPriceChanging(value);
					this.SendPropertyChanging();
					this._HasSpecialPrice = value;
					this.SendPropertyChanged("HasSpecialPrice");
					this.OnHasSpecialPriceChanged();
				}
			}
		}
		
		[Column(Storage="_HasCustFavorPrice", DbType="Bit")]
		public System.Nullable<bool> HasCustFavorPrice
		{
			get
			{
				return this._HasCustFavorPrice;
			}
			set
			{
				if ((this._HasCustFavorPrice != value))
				{
					this.OnHasCustFavorPriceChanging(value);
					this.SendPropertyChanging();
					this._HasCustFavorPrice = value;
					this.SendPropertyChanged("HasCustFavorPrice");
					this.OnHasCustFavorPriceChanged();
				}
			}
		}
		
		[Column(Storage="_HasVolumePrice", DbType="Bit")]
		public System.Nullable<bool> HasVolumePrice
		{
			get
			{
				return this._HasVolumePrice;
			}
			set
			{
				if ((this._HasVolumePrice != value))
				{
					this.OnHasVolumePriceChanging(value);
					this.SendPropertyChanging();
					this._HasVolumePrice = value;
					this.SendPropertyChanged("HasVolumePrice");
					this.OnHasVolumePriceChanged();
				}
			}
		}
		
		[Column(Storage="_HasPeriodPrice", DbType="Bit")]
		public System.Nullable<bool> HasPeriodPrice
		{
			get
			{
				return this._HasPeriodPrice;
			}
			set
			{
				if ((this._HasPeriodPrice != value))
				{
					this.OnHasPeriodPriceChanging(value);
					this.SendPropertyChanging();
					this._HasPeriodPrice = value;
					this.SendPropertyChanged("HasPeriodPrice");
					this.OnHasPeriodPriceChanged();
				}
			}
		}
		
		[Column(Storage="_TMIDCompleted", DbType="Bit")]
		public System.Nullable<bool> TMIDCompleted
		{
			get
			{
				return this._TMIDCompleted;
			}
			set
			{
				if ((this._TMIDCompleted != value))
				{
					this.OnTMIDCompletedChanging(value);
					this.SendPropertyChanging();
					this._TMIDCompleted = value;
					this.SendPropertyChanged("TMIDCompleted");
					this.OnTMIDCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_TMIDCompletedBy", DbType="NVarChar(50)")]
		public string TMIDCompletedBy
		{
			get
			{
				return this._TMIDCompletedBy;
			}
			set
			{
				if ((this._TMIDCompletedBy != value))
				{
					this.OnTMIDCompletedByChanging(value);
					this.SendPropertyChanging();
					this._TMIDCompletedBy = value;
					this.SendPropertyChanged("TMIDCompletedBy");
					this.OnTMIDCompletedByChanged();
				}
			}
		}
		
		[Column(Storage="_TMIDCompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TMIDCompletedDate
		{
			get
			{
				return this._TMIDCompletedDate;
			}
			set
			{
				if ((this._TMIDCompletedDate != value))
				{
					this.OnTMIDCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._TMIDCompletedDate = value;
					this.SendPropertyChanged("TMIDCompletedDate");
					this.OnTMIDCompletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDWIP", DbType="Bit")]
		public System.Nullable<bool> PMIDWIP
		{
			get
			{
				return this._PMIDWIP;
			}
			set
			{
				if ((this._PMIDWIP != value))
				{
					this.OnPMIDWIPChanging(value);
					this.SendPropertyChanging();
					this._PMIDWIP = value;
					this.SendPropertyChanged("PMIDWIP");
					this.OnPMIDWIPChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDWIPBy", DbType="NVarChar(50)")]
		public string PMIDWIPBy
		{
			get
			{
				return this._PMIDWIPBy;
			}
			set
			{
				if ((this._PMIDWIPBy != value))
				{
					this.OnPMIDWIPByChanging(value);
					this.SendPropertyChanging();
					this._PMIDWIPBy = value;
					this.SendPropertyChanged("PMIDWIPBy");
					this.OnPMIDWIPByChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDWIPDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PMIDWIPDate
		{
			get
			{
				return this._PMIDWIPDate;
			}
			set
			{
				if ((this._PMIDWIPDate != value))
				{
					this.OnPMIDWIPDateChanging(value);
					this.SendPropertyChanging();
					this._PMIDWIPDate = value;
					this.SendPropertyChanged("PMIDWIPDate");
					this.OnPMIDWIPDateChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDCompleted", DbType="Bit")]
		public System.Nullable<bool> PMIDCompleted
		{
			get
			{
				return this._PMIDCompleted;
			}
			set
			{
				if ((this._PMIDCompleted != value))
				{
					this.OnPMIDCompletedChanging(value);
					this.SendPropertyChanging();
					this._PMIDCompleted = value;
					this.SendPropertyChanged("PMIDCompleted");
					this.OnPMIDCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDCompletedBy", DbType="NVarChar(50)")]
		public string PMIDCompletedBy
		{
			get
			{
				return this._PMIDCompletedBy;
			}
			set
			{
				if ((this._PMIDCompletedBy != value))
				{
					this.OnPMIDCompletedByChanging(value);
					this.SendPropertyChanging();
					this._PMIDCompletedBy = value;
					this.SendPropertyChanged("PMIDCompletedBy");
					this.OnPMIDCompletedByChanged();
				}
			}
		}
		
		[Column(Storage="_PMIDCompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PMIDCompletedDate
		{
			get
			{
				return this._PMIDCompletedDate;
			}
			set
			{
				if ((this._PMIDCompletedDate != value))
				{
					this.OnPMIDCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._PMIDCompletedDate = value;
					this.SendPropertyChanged("PMIDCompletedDate");
					this.OnPMIDCompletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_HaveSizeMatrix", DbType="Bit")]
		public System.Nullable<bool> HaveSizeMatrix
		{
			get
			{
				return this._HaveSizeMatrix;
			}
			set
			{
				if ((this._HaveSizeMatrix != value))
				{
					this.OnHaveSizeMatrixChanging(value);
					this.SendPropertyChanging();
					this._HaveSizeMatrix = value;
					this.SendPropertyChanged("HaveSizeMatrix");
					this.OnHaveSizeMatrixChanged();
				}
			}
		}
		
		[Column(Storage="_SampleGroup", DbType="NVarChar(5)")]
		public string SampleGroup
		{
			get
			{
				return this._SampleGroup;
			}
			set
			{
				if ((this._SampleGroup != value))
				{
					this.OnSampleGroupChanging(value);
					this.SendPropertyChanging();
					this._SampleGroup = value;
					this.SendPropertyChanged("SampleGroup");
					this.OnSampleGroupChanged();
				}
			}
		}
		
		[Column(Storage="_SizeSpec", DbType="NVarChar(100)")]
		public string SizeSpec
		{
			get
			{
				return this._SizeSpec;
			}
			set
			{
				if ((this._SizeSpec != value))
				{
					this.OnSizeSpecChanging(value);
					this.SendPropertyChanging();
					this._SizeSpec = value;
					this.SendPropertyChanged("SizeSpec");
					this.OnSizeSpecChanged();
				}
			}
		}
		
		[Column(Storage="_HasCollectivePrice", DbType="Bit")]
		public System.Nullable<bool> HasCollectivePrice
		{
			get
			{
				return this._HasCollectivePrice;
			}
			set
			{
				if ((this._HasCollectivePrice != value))
				{
					this.OnHasCollectivePriceChanging(value);
					this.SendPropertyChanging();
					this._HasCollectivePrice = value;
					this.SendPropertyChanged("HasCollectivePrice");
					this.OnHasCollectivePriceChanged();
				}
			}
		}
		
		[Column(Storage="_OldHSCode", DbType="NVarChar(200)")]
		public string OldHSCode
		{
			get
			{
				return this._OldHSCode;
			}
			set
			{
				if ((this._OldHSCode != value))
				{
					this.OnOldHSCodeChanging(value);
					this.SendPropertyChanging();
					this._OldHSCode = value;
					this.SendPropertyChanged("OldHSCode");
					this.OnOldHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_HSCodeBD", DbType="NVarChar(200)")]
		public string HSCodeBD
		{
			get
			{
				return this._HSCodeBD;
			}
			set
			{
				if ((this._HSCodeBD != value))
				{
					this.OnHSCodeBDChanging(value);
					this.SendPropertyChanging();
					this._HSCodeBD = value;
					this.SendPropertyChanged("HSCodeBD");
					this.OnHSCodeBDChanged();
				}
			}
		}
		
		[Column(Storage="_David_OldHSCode", DbType="NVarChar(200)")]
		public string David_OldHSCode
		{
			get
			{
				return this._David_OldHSCode;
			}
			set
			{
				if ((this._David_OldHSCode != value))
				{
					this.OnDavid_OldHSCodeChanging(value);
					this.SendPropertyChanging();
					this._David_OldHSCode = value;
					this.SendPropertyChanged("David_OldHSCode");
					this.OnDavid_OldHSCodeChanged();
				}
			}
		}
		
		[Column(Storage="_David_UpdateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> David_UpdateTime
		{
			get
			{
				return this._David_UpdateTime;
			}
			set
			{
				if ((this._David_UpdateTime != value))
				{
					this.OnDavid_UpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._David_UpdateTime = value;
					this.SendPropertyChanged("David_UpdateTime");
					this.OnDavid_UpdateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRepeatStandard", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PatternShapeRepeatStandard
		{
			get
			{
				return this._PatternShapeRepeatStandard;
			}
			set
			{
				if ((this._PatternShapeRepeatStandard != value))
				{
					this.OnPatternShapeRepeatStandardChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRepeatStandard = value;
					this.SendPropertyChanged("PatternShapeRepeatStandard");
					this.OnPatternShapeRepeatStandardChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRepeatS", DbType="VarChar(100)")]
		public string PatternShapeRepeatS
		{
			get
			{
				return this._PatternShapeRepeatS;
			}
			set
			{
				if ((this._PatternShapeRepeatS != value))
				{
					this.OnPatternShapeRepeatSChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRepeatS = value;
					this.SendPropertyChanged("PatternShapeRepeatS");
					this.OnPatternShapeRepeatSChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRepeatMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PatternShapeRepeatMin
		{
			get
			{
				return this._PatternShapeRepeatMin;
			}
			set
			{
				if ((this._PatternShapeRepeatMin != value))
				{
					this.OnPatternShapeRepeatMinChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRepeatMin = value;
					this.SendPropertyChanged("PatternShapeRepeatMin");
					this.OnPatternShapeRepeatMinChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRepeatMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> PatternShapeRepeatMax
		{
			get
			{
				return this._PatternShapeRepeatMax;
			}
			set
			{
				if ((this._PatternShapeRepeatMax != value))
				{
					this.OnPatternShapeRepeatMaxChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRepeatMax = value;
					this.SendPropertyChanged("PatternShapeRepeatMax");
					this.OnPatternShapeRepeatMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerPurchaseUnit", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> GramWeightPerPurchaseUnit
		{
			get
			{
				return this._GramWeightPerPurchaseUnit;
			}
			set
			{
				if ((this._GramWeightPerPurchaseUnit != value))
				{
					this.OnGramWeightPerPurchaseUnitChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerPurchaseUnit = value;
					this.SendPropertyChanged("GramWeightPerPurchaseUnit");
					this.OnGramWeightPerPurchaseUnitChanged();
				}
			}
		}
		
		[Column(Storage="_RiskQA", DbType="NVarChar(200)")]
		public string RiskQA
		{
			get
			{
				return this._RiskQA;
			}
			set
			{
				if ((this._RiskQA != value))
				{
					this.OnRiskQAChanging(value);
					this.SendPropertyChanging();
					this._RiskQA = value;
					this.SendPropertyChanged("RiskQA");
					this.OnRiskQAChanged();
				}
			}
		}
		
		[Column(Storage="_POLastDate")]
		public System.Nullable<System.DateTime> POLastDate
		{
			get
			{
				return this._POLastDate;
			}
			set
			{
				if ((this._POLastDate != value))
				{
					this.OnPOLastDateChanging(value);
					this.SendPropertyChanging();
					this._POLastDate = value;
					this.SendPropertyChanged("POLastDate");
					this.OnPOLastDateChanged();
				}
			}
		}
		
		[Association(Name="Detail_ColorDetail", Storage="_ColorDetails", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<ColorDetail> ColorDetails
		{
			get
			{
				return this._ColorDetails;
			}
			set
			{
				this._ColorDetails.Assign(value);
			}
		}
		
		[Association(Name="Detail_CompositionDetail", Storage="_CompositionDetails", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<CompositionDetail> CompositionDetails
		{
			get
			{
				return this._CompositionDetails;
			}
			set
			{
				this._CompositionDetails.Assign(value);
			}
		}
		
		[Association(Name="Detail_CustomerBranded", Storage="_CustomerBrandeds", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<CustomerBranded> CustomerBrandeds
		{
			get
			{
				return this._CustomerBrandeds;
			}
			set
			{
				this._CustomerBrandeds.Assign(value);
			}
		}
		
		[Association(Name="Detail_DetailImage", Storage="_DetailImage", ThisKey="SuppRef", OtherKey="SuppRef", IsUnique=true, IsForeignKey=false)]
		public DetailImage DetailImage
		{
			get
			{
				return this._DetailImage.Entity;
			}
			set
			{
				DetailImage previousValue = this._DetailImage.Entity;
				if (((previousValue != value) 
							|| (this._DetailImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DetailImage.Entity = null;
						previousValue.Detail = null;
					}
					this._DetailImage.Entity = value;
					if ((value != null))
					{
						value.Detail = this;
					}
					this.SendPropertyChanged("DetailImage");
				}
			}
		}
		
		[Association(Name="Detail_PriceHistory", Storage="_PriceHistories", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<PriceHistory> PriceHistories
		{
			get
			{
				return this._PriceHistories;
			}
			set
			{
				this._PriceHistories.Assign(value);
			}
		}
		
		[Association(Name="Detail_RatioPrice", Storage="_RatioPrices", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<RatioPrice> RatioPrices
		{
			get
			{
				return this._RatioPrices;
			}
			set
			{
				this._RatioPrices.Assign(value);
			}
		}
		
		[Association(Name="Detail_RWM", Storage="_RWMs", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<RWM> RWMs
		{
			get
			{
				return this._RWMs;
			}
			set
			{
				this._RWMs.Assign(value);
			}
		}
		
		[Association(Name="Detail_Spec", Storage="_Specs", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<Spec> Specs
		{
			get
			{
				return this._Specs;
			}
			set
			{
				this._Specs.Assign(value);
			}
		}
		
		[Association(Name="Detail_MaterialProcess", Storage="_MaterialProcesses", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<MaterialProcess> MaterialProcesses
		{
			get
			{
				return this._MaterialProcesses;
			}
			set
			{
				this._MaterialProcesses.Assign(value);
			}
		}
		
		[Association(Name="Detail_MIDcUpFile", Storage="_MIDcUpFiles", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<MIDcUpFile> MIDcUpFiles
		{
			get
			{
				return this._MIDcUpFiles;
			}
			set
			{
				this._MIDcUpFiles.Assign(value);
			}
		}
		
		[Association(Name="Detail_DetailChangeConfirm", Storage="_DetailChangeConfirms", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<DetailChangeConfirm> DetailChangeConfirms
		{
			get
			{
				return this._DetailChangeConfirms;
			}
			set
			{
				this._DetailChangeConfirms.Assign(value);
			}
		}
		
		[Association(Name="Detail_DetailChangeConfirm1", Storage="_DetailChangeConfirms1", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<DetailChangeConfirm> DetailChangeConfirms1
		{
			get
			{
				return this._DetailChangeConfirms1;
			}
			set
			{
				this._DetailChangeConfirms1.Assign(value);
			}
		}
		
		[Association(Name="Detail_MaterialPriceHeader", Storage="_MaterialPriceHeaders", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<MaterialPriceHeader> MaterialPriceHeaders
		{
			get
			{
				return this._MaterialPriceHeaders;
			}
			set
			{
				this._MaterialPriceHeaders.Assign(value);
			}
		}
		
		[Association(Name="Detail_CustomMaterialDeclare", Storage="_CustomMaterialDeclares", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<CustomMaterialDeclare> CustomMaterialDeclares
		{
			get
			{
				return this._CustomMaterialDeclares;
			}
			set
			{
				this._CustomMaterialDeclares.Assign(value);
			}
		}
		
		[Association(Name="Detail_MaterialWeight", Storage="_MaterialWeights", ThisKey="SuppRef", OtherKey="SuppRef")]
		public EntitySet<MaterialWeight> MaterialWeights
		{
			get
			{
				return this._MaterialWeights;
			}
			set
			{
				this._MaterialWeights.Assign(value);
			}
		}
		
		[Association(Name="SampleOrder_Detail", Storage="_SampleOrder", ThisKey="SampleOrderNo", OtherKey="SampleOrderNo", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SampleOrder SampleOrder
		{
			get
			{
				return this._SampleOrder.Entity;
			}
			set
			{
				SampleOrder previousValue = this._SampleOrder.Entity;
				if (((previousValue != value) 
							|| (this._SampleOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SampleOrder.Entity = null;
						previousValue.Details.Remove(this);
					}
					this._SampleOrder.Entity = value;
					if ((value != null))
					{
						value.Details.Add(this);
						this._SampleOrderNo = value.SampleOrderNo;
					}
					else
					{
						this._SampleOrderNo = default(string);
					}
					this.SendPropertyChanged("SampleOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_ColorDetails(ColorDetail entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_CompositionDetails(CompositionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_CompositionDetails(CompositionDetail entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_CustomerBrandeds(CustomerBranded entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_CustomerBrandeds(CustomerBranded entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_PriceHistories(PriceHistory entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_RatioPrices(RatioPrice entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_RatioPrices(RatioPrice entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_RWMs(RWM entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_RWMs(RWM entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_Specs(Spec entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_Specs(Spec entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_MaterialProcesses(MaterialProcess entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_MaterialProcesses(MaterialProcess entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_MIDcUpFiles(MIDcUpFile entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_MIDcUpFiles(MIDcUpFile entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_DetailChangeConfirms(DetailChangeConfirm entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_DetailChangeConfirms(DetailChangeConfirm entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_DetailChangeConfirms1(DetailChangeConfirm entity)
		{
			this.SendPropertyChanging();
			entity.Detail1 = this;
		}
		
		private void detach_DetailChangeConfirms1(DetailChangeConfirm entity)
		{
			this.SendPropertyChanging();
			entity.Detail1 = null;
		}
		
		private void attach_MaterialPriceHeaders(MaterialPriceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_MaterialPriceHeaders(MaterialPriceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_CustomMaterialDeclares(CustomMaterialDeclare entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_CustomMaterialDeclares(CustomMaterialDeclare entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
		
		private void attach_MaterialWeights(MaterialWeight entity)
		{
			this.SendPropertyChanging();
			entity.Detail = this;
		}
		
		private void detach_MaterialWeights(MaterialWeight entity)
		{
			this.SendPropertyChanging();
			entity.Detail = null;
		}
	}
	
	[Table(Name="dbo.MaterialWeight")]
	public partial class MaterialWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _SuppRef;
		
		private string _Size;
		
		private string _Cup;
		
		private System.Nullable<decimal> _Weight;
		
		private EntityRef<Detail> _Detail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnSizeChanging(string value);
    partial void OnSizeChanged();
    partial void OnCupChanging(string value);
    partial void OnCupChanged();
    partial void OnWeightChanging(System.Nullable<decimal> value);
    partial void OnWeightChanged();
    #endregion
		
		public MaterialWeight()
		{
			this._Detail = default(EntityRef<Detail>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					if (this._Detail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="VarChar(50)")]
		public string Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Cup", DbType="VarChar(50)")]
		public string Cup
		{
			get
			{
				return this._Cup;
			}
			set
			{
				if ((this._Cup != value))
				{
					this.OnCupChanging(value);
					this.SendPropertyChanging();
					this._Cup = value;
					this.SendPropertyChanged("Cup");
					this.OnCupChanged();
				}
			}
		}
		
		[Column(Storage="_Weight", DbType="Decimal(15,8)")]
		public System.Nullable<decimal> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Association(Name="Detail_MaterialWeight", Storage="_Detail", ThisKey="SuppRef", OtherKey="SuppRef", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Detail Detail
		{
			get
			{
				return this._Detail.Entity;
			}
			set
			{
				Detail previousValue = this._Detail.Entity;
				if (((previousValue != value) 
							|| (this._Detail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Detail.Entity = null;
						previousValue.MaterialWeights.Remove(this);
					}
					this._Detail.Entity = value;
					if ((value != null))
					{
						value.MaterialWeights.Add(this);
						this._SuppRef = value.SuppRef;
					}
					else
					{
						this._SuppRef = default(string);
					}
					this.SendPropertyChanged("Detail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

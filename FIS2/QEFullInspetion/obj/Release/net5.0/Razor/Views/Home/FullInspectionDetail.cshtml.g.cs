#pragma checksum "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a5554ce62c6da65f039c7111d597772eb34d5b8b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(QEFullInspetion.Models.Home.Views_Home_FullInspectionDetail), @"mvc.1.0.view", @"/Views/Home/FullInspectionDetail.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/FullInspectionDetail.cshtml", typeof(QEFullInspetion.Models.Home.Views_Home_FullInspectionDetail))]
namespace QEFullInspetion.Models.Home
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using QEFullInspetion;

#line default
#line hidden
#line 4 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#line 5 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using QEFullInspetion.Controllers;

#line default
#line hidden
#line 6 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#line 7 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
#line 9 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc.Localization;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a5554ce62c6da65f039c7111d597772eb34d5b8b", @"/Views/Home/FullInspectionDetail.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"251332470f42861d90f80ee159614452477d5f26", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_FullInspectionDetail : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/polyfill.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/exceljs.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/FileSaver.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 44, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a5554ce62c6da65f039c7111d597772eb34d5b8b4924", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(44, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(46, 43, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a5554ce62c6da65f039c7111d597772eb34d5b8b6099", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(89, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(91, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a5554ce62c6da65f039c7111d597772eb34d5b8b7274", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(136, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
#line 5 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
  
    ViewData["FullInspectionHeader"] = Context.Request.Query["FullInspectionHeader"].ToString();
    ViewData["Language"] = Context.Request.Cookies["Language"].ToString();
    ViewData["UserName"] = Context.User.FindFirstValue(ClaimTypes.NameIdentifier);
    ViewData["OnlyShowTodayData"] = Context.Request.Query["OnlyShowTodayData"].ToString();
    ViewData["ShowStr"] = "Fty: " + Context.Request.Query["Fty"].ToString() + ", " +
                          "Ws: " + Context.Request.Query["Ws"].ToString() + ", " +
                          "Line#: " + Context.Request.Query["Line"].ToString() + ", " +
                          "Proj#: " + Context.Request.Query["ProjectNo"].ToString() + ", " +
                          "QN#: " + Context.Request.Query["QNNo"].ToString();

#line default
#line hidden
            BeginContext(929, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(986, 4, true);
            WriteLiteral("<h2>");
            EndContext();
            BeginContext(991, 24, false);
#line 18 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
Write(Localizer["Spreadsheet"]);

#line default
#line hidden
            EndContext();
            BeginContext(1015, 20, true);
            WriteLiteral("</h2>\r\n\r\n<div>\r\n    ");
            EndContext();
            BeginContext(1037, 20081, false);
#line 21 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
Write(Html.DevExtreme().DataGrid<QEFullInspetion.Controllers.FullInspectionDetailsViewModel>()
        .ID("gridFullInspectionDetail")
        .FocusedRowEnabled(true)
        .Export(e => e.Enabled(true).Texts(t => t.ExportAll(Localizer["Export all data"].Value)))
        .OnExporting("exporting")

        //.ColumnAutoWidth(true)

        .Paging(p => p.PageSize(12))
        .Pager(pager => {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
            pager.InfoText("Page {0} of {1} ({2} rows)");
        })
        .DataSource(d => d.WebApi()
            .Controller("FullInspectionDetails")
            .LoadAction("Get")
            .LoadParams(new { FullInspectionHeader = ViewData["FullInspectionHeader"], OnlyShowTodayData = ViewData["OnlyShowTodayData"] })
            .InsertAction("Post")
            .UpdateAction("Put")
            .DeleteAction("Delete")
            .Key("Oid")
        )
        .Sorting(sort => sort.Mode(GridSortingMode.Single))
        .ShowBorders(true)
        .RemoteOperations(true)
        .RepaintChangesOnly(true)
        .Editing(e => e
            .AllowAdding(Convert.ToBoolean(ViewData["EditRight"]))
            .AllowUpdating(Convert.ToBoolean(ViewData["EditRight"]))
            .AllowDeleting(Convert.ToBoolean(ViewData["DeleteRight"]))
            .Mode(GridEditMode.Popup)
            .Texts(t => t
                .AddRow(Localizer["Add post box"].Value)
                .SaveRowChanges(Localizer["Save"].Value)
                .CancelRowChanges(Localizer["Cancel"].Value)
                .ConfirmDeleteMessage(Localizer["Are you sure you want to delete this record?"].Value)
            )

        

       .Form(f => f.ID("EditForm")
               .Items(items => {
                   items.AddGroup()
                   .Caption(Localizer["PostBox"].Value)
                   .ColCount(4)
                   .ColSpan(2)
                   .Items(groupItems => {
                       //groupItems.AddSimpleFor(m => m.RecordNoShow);
                       groupItems.AddSimpleFor(m => m.BoxNo).ValidationRules(v => v.AddRequired().Message(Localizer["Please input a box#"].Value));
                       groupItems.AddSimpleFor(m => m.Size);
                       groupItems.AddSimpleFor(m => m.ProductQty)
                        .ValidationRules(v => {
                            v.AddRequired().Message(Localizer["Please input pcs"].Value);
                            v.AddCustom().Message("檢查數超過了QN數").ValidationCallback("ValidationProductQtyCallback");
                        });

                       groupItems.AddSimpleFor(m => m.DefectiveGarmentQty)
                        .ValidationRules(v => {
                            v.AddRequired().Message(Localizer["Please input defective garment qty"].Value);
                            v.AddCompare()
                                .ComparisonType(ComparisonOperator.LessThanOrEqual)
                                .Message(Localizer["The defective garment qty can not be greater than Pcs"].Value)
                                .ComparisonTarget("ValidationDefectiveGarmentQty");
                        });

                       //groupItems.AddSimpleFor(m => m.DefectiveGarmentPercent);
                       groupItems.AddSimpleFor(m => m.RejectStage);
                       groupItems.AddSimpleFor(m => m.Repaired);
                       groupItems.AddSimpleFor(m => m.RejectQty);
                       //groupItems.AddSimpleFor(m => m.CheckPointSigned);

                       groupItems.AddSimpleFor(m => m.InspectionDate).Label(l => l.Text(Localizer["Insp. dd"].Value));
                   });

                   items.AddGroup().Name("DefectGroup")
                   .Caption(Localizer["Defective Garment Information"].Value)
                   .ColCount(4)
                   .ColSpan(2)
                   .Items(groupItems => {

                       groupItems.AddSimpleFor(m => m.DefectQty).ColSpan(4)
                        .Label(l => l.Text(Localizer["A) Defect Cde"].Value))
                        .Editor(e => e.NumberBox().Width(130).Max(3).Min(1));

                       //.Editor(e => e.NumberBox().Width(120).Max(3).Min(1).OnValueChanged("OnValueChangedDefectQty"));

                       groupItems.AddSimpleFor(m => m.DefectCode1).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameEN1).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameCN1).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameBD1).Label(l => l.Text(Localizer["Desc. (BD)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectCode2).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameEN2).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameCN2).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameBD2).Label(l => l.Text(Localizer["Desc. (BD)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectCode3).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameEN3).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameCN3).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.DefectNameBD3).Label(l => l.Text(Localizer["Desc. (BD)"].Value));

                       groupItems.AddSimpleFor(m => m.PODQty).ColSpan(4)
                            .Label(l => l.Text(Localizer["B) POD Cde"].Value))
                            .Editor(e => e.NumberBox().Width(130).Max(3).Min(1));

                       //.Editor(e => e.NumberBox().Width(120).Max(3).Min(1).OnValueChanged("OnValueChangedPODQty"));

                       groupItems.AddSimpleFor(m => m.PODCode1).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameEN1).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameCN1).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameBD1).Label(l => l.Text(Localizer["Desc. (BD)"].Value));
                       groupItems.AddSimpleFor(m => m.PODCode2).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameEN2).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameCN2).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameBD2).Label(l => l.Text(Localizer["Desc. (BD)"].Value));
                       groupItems.AddSimpleFor(m => m.PODCode3).Label(l => l.Text(Localizer["Cde"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameEN3).Label(l => l.Text(Localizer["Desc. (EN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameCN3).Label(l => l.Text(Localizer["Desc. (CN)"].Value));
                       groupItems.AddSimpleFor(m => m.PODNameBD3).Label(l => l.Text(Localizer["Desc. (BD)"].Value));
                   });
               }))
       )
  .Columns(columns => {
  columns.AddFor(m => m.Oid).Visible(false);
  columns.AddFor(m => m.FullInspectionHeader).Visible(false);
  columns.AddFor(m => m.InspectionDate).Width(90)
           //.AllowEditing(false)
           .SortOrder(SortOrder.Asc)
           .Alignment(HorizontalAlignment.Left)
           .Format("yyyy-MM-dd")
           .Caption(Localizer["Insp. dd"].Value)
           .HeaderCellTemplate(Localizer["<text><div>Insp. dd</div></text>"].Value);

  columns.AddFor(m => m.Inspector).Width(80)
           .AllowEditing(false)
           .Caption(Localizer["Inspector"].Value);

  columns.AddFor(m => m.RecordNoShow).Width(50)
           .AllowEditing(false)
           .Alignment(HorizontalAlignment.Left)
           .Caption(Localizer["Data Seq."].Value)
           .HeaderCellTemplate(Localizer["<text><div>Data<br>Seq.</div></text>"].Value);

  columns.AddFor(m => m.CheckPointSigned).Width(80)
           .AllowEditing(false)
           .Caption(Localizer["Chk Pt. Cfmd by"].Value)
           .Alignment(HorizontalAlignment.Left)
           .HeaderCellTemplate(Localizer["<text><div>Chk Pt.<br>Cfmd by</div></text>"].Value);

  columns.AddFor(m => m.BoxNo).Width(50)
           .Alignment(HorizontalAlignment.Left)
           .HeaderCellTemplate(Localizer["<strong><text><div>Box#</div></text></strong>"].Value);

  columns.AddFor(m => m.Size).Caption(Localizer["Sz"].Value).Alignment(HorizontalAlignment.Left).Width(50)
               .CellTemplate(item => new global::Microsoft.AspNetCore.Mvc.Razor.HelperResult(async(__razor_template_writer) => {
    PushWriter(__razor_template_writer);
    BeginContext(11355, 27, true);
    WriteLiteral("<div><%- data.Size %></div>");
    EndContext();
    PopWriter();
}
))
                    .Lookup(p => p.DataSource(d => d.Mvc()
                    .Controller("DataHelper")
                    .LoadAction("GetSize")
                    .LoadParams(new { FullInspectionHeader = ViewData["FullInspectionHeader"] })
                    .Key("Size"))
                    .DisplayExpr("Size")
                    .ValueExpr("Size")
                );
      columns.AddFor(m => m.ProductQty).Caption(Localizer["Pcs"].Value).Alignment(HorizontalAlignment.Left).Width(50);
      columns.AddFor(m => m.DefectiveGarmentQty).Width(50)
              .Alignment(HorizontalAlignment.Left)
              .Caption(Localizer["Def. Gmts"].Value)
              .HeaderCellTemplate(Localizer["<text><div>Def.<br>Gmts</div></text>"].Value);

      columns.AddFor(m => m.DefectiveGarmentPercent).Width(68)
              .Alignment(HorizontalAlignment.Left)
              .Caption(Localizer["Def.%"].Value)
              .HeaderCellTemplate(Localizer["<text><div>Def.<br>%</div></text>"].Value);

      columns.AddFor(m => m.RejectStage)
              .Caption(Localizer["Rej. Stage"].Value)
              .Alignment(HorizontalAlignment.Left)
              .Width(50)
              .Lookup(p => p.DataSource(new JS("RejectStageList")))
              .HeaderCellTemplate(Localizer["<text><div>Rej.<br>Stage</div></text>"].Value);

      columns.AddFor(m => m.Repaired)
        .Caption(Localizer["Repaired"].Value)
        .Alignment(HorizontalAlignment.Center)
        .Width(70);

      columns.AddFor(m => m.RejectQty).Caption(Localizer["Scrap Qty"].Value).Alignment(HorizontalAlignment.Left).Width(50)
        .HeaderCellTemplate(Localizer["<text><div>Scrap<br>Qty</div></text>"].Value);

      //疵點
      columns.AddFor(m => m.DefectQty).Width(63)
                .Caption(Localizer["A) Defect Cde"].Value)
                .Alignment(HorizontalAlignment.Left)
                .HeaderCellTemplate(Localizer["<text><div>Def. Pts<br>Qty</div></text>"].Value);

      columns.AddFor(m => m.DefectCode1).Caption(Localizer["Cde"].Value).Width(60)
        .Alignment(HorizontalAlignment.Left)
        .AllowSorting(false)
        .SetCellValue("SetDefectNameValue1")
        //.HeaderCellTemplate(Localizer["<text><div>Def.<br>Cde</div></text>"].Value)
        .EditCellTemplate(new TemplateName("DefectDropDownBoxTemplate"));


      columns.AddFor(m => m.DefectNameEN1).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (EN)"].Value)
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectNameCN1).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (CN)"].Value)
          .Visible(ViewData["Language"].ToString() == "CN")
          .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.DefectNameBD1).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (BD)"].Value)
          .Visible(ViewData["Language"].ToString() == "EN")
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectCode2).Caption(Localizer["Code"].Value).Width(60)
                  .Alignment(HorizontalAlignment.Left)
                  .AllowSorting(false)
                  .SetCellValue("SetDefectNameValue2")
                  //.HeaderCellTemplate(Localizer["<text><div>Def.<br>Cde</div></text>"].Value)
                  .EditCellTemplate(new TemplateName("DefectDropDownBoxTemplate"));


      columns.AddFor(m => m.DefectNameEN2).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (EN)"].Value)
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectNameCN2).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (CN)"].Value)
          .Visible(ViewData["Language"].ToString() == "CN")
          .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.DefectNameBD2).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (BD)"].Value)
          .Visible(ViewData["Language"].ToString() == "EN")
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectCode3).Caption(Localizer["Code"].Value).Width(60)
        .Alignment(HorizontalAlignment.Left)
        .AllowSorting(false)
        .SetCellValue("SetDefectNameValue3")
        //.HeaderCellTemplate(Localizer["<text><div>Def.<br>Cde</div></text>"].Value)
        .EditCellTemplate(new TemplateName("DefectDropDownBoxTemplate"));


      columns.AddFor(m => m.DefectNameEN3).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (EN)"].Value)
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectNameCN3).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (CN)"].Value)
          .Visible(ViewData["Language"].ToString() == "CN")
          .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.DefectNameBD3).Width(130)
          .AllowEditing(false)
          .Caption(Localizer["Desc. (BD)"].Value)
          .Visible(ViewData["Language"].ToString() == "EN")
          .Alignment(HorizontalAlignment.Left);

      //疵點位置
      columns.AddFor(m => m.PODQty).Alignment(HorizontalAlignment.Left).Width(60).HeaderCellTemplate(Localizer["<text><div>POD<br>Qty</div></text>"].Value);
      columns.AddFor(m => m.PODCode1).Caption(Localizer["Cde"].Value).Width(60)
              .Alignment(HorizontalAlignment.Left)
              .AllowSorting(false)
              .SetCellValue("SetPODNameValue1")
              //.HeaderCellTemplate(Localizer["<text><div>POD<br>Cde</div></text>"].Value)
              .EditCellTemplate(new TemplateName("PODDropDownBoxTemplate"));
      columns.AddFor(m => m.PODNameEN1).Width(130)
              .AllowEditing(false)
              .Caption(Localizer["Desc. (EN)"].Value)
             .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameCN1).Width(130)
              .AllowEditing(false)
              .Caption(Localizer["Desc. (CN)"].Value)
              .Visible(ViewData["Language"].ToString() == "CN")
              .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameBD1).Width(130)
              .AllowEditing(false)
              .Caption(Localizer["Desc. (BD)"].Value)
              .Visible(ViewData["Language"].ToString() == "EN")
              .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.PODCode2).Caption(Localizer["Code"].Value).Width(60)
             .Alignment(HorizontalAlignment.Left)
             .AllowSorting(false)
             .SetCellValue("SetPODNameValue2")
             //.HeaderCellTemplate(Localizer["<text><div>POD<br>Cde</div></text>"].Value)
             .EditCellTemplate(new TemplateName("PODDropDownBoxTemplate"));
      columns.AddFor(m => m.PODNameEN2)
             .Width(130).AllowEditing(false)
             .Caption(Localizer["Desc. (EN)"].Value)
             .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameCN2).Width(130)
             .AllowEditing(false)
             .Caption(Localizer["Desc. (CN)"].Value)
             .Visible(ViewData["Language"].ToString() == "CN")
             .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameBD2).Width(130)
             .AllowEditing(false)
             .Caption(Localizer["Desc. (BD)"].Value)
             .Visible(ViewData["Language"].ToString() == "EN")
             .Alignment(HorizontalAlignment.Left);

      columns.AddFor(m => m.PODCode3).Caption(Localizer["Code"].Value).Width(60)
             .Alignment(HorizontalAlignment.Left)
             .AllowSorting(false)
             .SetCellValue("SetPODNameValue3")
             //.HeaderCellTemplate(Localizer["<text><div>POD<br>Cde</div></text>"].Value)
             .EditCellTemplate(new TemplateName("PODDropDownBoxTemplate"));
      columns.AddFor(m => m.PODNameEN3)
             .Width(130).AllowEditing(false)
             .Caption(Localizer["Desc. (EN)"].Value)
             .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameCN3).Width(130)
             .AllowEditing(false)
             .Caption(Localizer["Desc. (CN)"].Value)
             .Visible(ViewData["Language"].ToString() == "CN")
             .Alignment(HorizontalAlignment.Left);
      columns.AddFor(m => m.PODNameBD3).Width(130)
             .AllowEditing(false)
             .Caption(Localizer["Desc. (BD)"].Value)
             .Visible(ViewData["Language"].ToString() == "EN")
             .Alignment(HorizontalAlignment.Left);

      columns.Add().Name("CommandButton")
             .Caption(Localizer["Function"].Value)
             .Type(GridCommandColumnType.Buttons)
             .Buttons(b =>
             {
                 //b.Add().Text(Localizer["Add Defect"].Value).OnClick("AddDefect").Visible(Convert.ToBoolean(ViewData["EditRight"]));
                 b.Add().Name(GridColumnButtonName.Edit).Text(Localizer["Edit"].Value).Visible(Convert.ToBoolean(ViewData["EditRight"]));
                 b.Add().Name("Remark").Text(Localizer["Remark"].Value).OnClick("onRemarkClick");
                 b.Add().Text(Localizer["Chk Pt. cfm"].Value).OnClick("CheckPointConfirm").Visible(Convert.ToBoolean(ViewData["ConfirmCheckPointRight"]));
                 b.Add().Name(GridColumnButtonName.Delete).Text(Localizer["Delete"].Value).Visible(Convert.ToBoolean(ViewData["DeleteRight"]));
             });
  })
        .OnInitNewRow("OnInitNewRow")
        .OnToolbarPreparing("toolbar_preparing")
        .OnCellPrepared("OnCellPrepared")
        .OnEditingStart("OnEditingStart")
        .Summary(s =>
            s.TotalItems(items => {
                items.AddFor(m => m.RecordNoShow).SummaryType(SummaryType.Count).DisplayFormat("Ttl");
                items.AddFor(m => m.CheckPointSigned).SummaryType(SummaryType.Count).CustomizeText("CalTotalCheckPointSigned");
                items.AddFor(m => m.BoxNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalBoxNo");
                items.AddFor(m => m.Size).SummaryType(SummaryType.Count).CustomizeText("CalTotalSize");
                items.AddFor(m => m.ProductQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
                items.AddFor(m => m.DefectiveGarmentQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
                items.AddFor(m => m.DefectiveGarmentPercent).SummaryType(SummaryType.Count).CustomizeText("CalDefectiveGarmentPercent");
                items.AddFor(m => m.Repaired).SummaryType(SummaryType.Count).CustomizeText("CalTotalRepaired");
                items.AddFor(m => m.RejectQty).SummaryType(SummaryType.Count).CustomizeText("CalTotalRejectQty");
            })
      )
);

#line default
#line hidden
            EndContext();
            BeginContext(22269, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
#line 410 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     using (Html.DevExtreme().NamedTemplate("DefectDropDownBoxTemplate"))
    {
        

#line default
#line hidden
            BeginContext(22365, 510, false);
#line 412 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
    Write(Html.DevExtreme().DropDownBox()
        .Width(130)
        .DataSource(d => d.Mvc().Controller("DataHelper").LoadAction("GetDefect").Key("DefectCode"))
        .Value(new JS("value"))
        .ValueExpr("DefectCode")
        .DisplayExpr("DefectCode")
        .DropDownOptions(options => options.Width(800))
        .Option("setValue", new JS("setValue"))
        .ShowClearButton(true)
        .OnValueChanged("ClearDefect")
        .ContentTemplate(new TemplateName("DefectContentTemplate"))
    );

#line default
#line hidden
            EndContext();
#line 423 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     
    }

#line default
#line hidden
            BeginContext(22885, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 426 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     using (Html.DevExtreme().NamedTemplate("DefectContentTemplate"))
    {
        

#line default
#line hidden
            BeginContext(22975, 1331, false);
#line 428 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
    Write(Html.DevExtreme().DataGrid()
            .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
            )
            .DataSource(d => d.Mvc()
            .Controller("DataHelper")
            .LoadAction("GetDefect")
            .Key("DefectCode"))
            .RemoteOperations(true)
            .Height(250)
            .Columns(c => {
                c.Add().DataField("DefectCode").Width(90).Caption(Localizer["Def. Cde"].Value);
                c.Add().DataField("DefectNameEN").Width(180).Caption(Localizer["Defect Desc. (EN)"].Value);
                c.Add().DataField("DefectNameCN").Width(180).Caption(Localizer["Defect Desc. (CN)"].Value);
                c.Add().DataField("DefectNameBD").Width(100).Caption(Localizer["Defect Desc. (BD)"].Value);
            })
        .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
        .HoverStateEnabled(true)
        .RemoteOperations(true)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS("[component.option('value')]"))
        .FocusedRowEnabled(true)
        .FocusedRowKey(new JS("component.option('value')"))
        .OnSelectionChanged("function(selectionChangedArgs) { onDefectSelectionChanged(selectionChangedArgs, component) }")
    );

#line default
#line hidden
            EndContext();
#line 453 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     
    }

#line default
#line hidden
            BeginContext(24316, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 456 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     using (Html.DevExtreme().NamedTemplate("PODDropDownBoxTemplate"))
    {
        

#line default
#line hidden
            BeginContext(24407, 492, false);
#line 458 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
    Write(Html.DevExtreme().DropDownBox()
        .Width(130)
        .DataSource(d => d.Mvc().Controller("DataHelper").LoadAction("GetPOD").Key("PODCode"))
        .Value(new JS("value"))
        .ValueExpr("PODCode")
        .DisplayExpr("PODCode")
        .DropDownOptions(options => options.Width(800))
        .Option("setValue", new JS("setValue"))
        .ShowClearButton(true)
        .OnValueChanged("ClearPOD")
        .ContentTemplate(new TemplateName("PODContentTemplate"))
    );

#line default
#line hidden
            EndContext();
#line 469 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     
    }

#line default
#line hidden
            BeginContext(24909, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 472 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     using (Html.DevExtreme().NamedTemplate("PODContentTemplate"))
    {
        

#line default
#line hidden
            BeginContext(24996, 1347, false);
#line 474 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
    Write(Html.DevExtreme().DataGrid()
            .FilterRow(filterRow => filterRow
                .Visible(true)
                .ApplyFilter(GridApplyFilterMode.Auto)
            )

            .DataSource(d => d.Mvc()
                .Controller("DataHelper")
                .LoadAction("GetPOD")
                .Key("PODCode"))
                .RemoteOperations(true)
                .Height(250)
                .Columns(c => {
                    c.Add().DataField("PODCode").Width(90).Caption(Localizer["POD Cde"].Value);
                    c.Add().DataField("PODNameCN").Width(180).Caption(Localizer["POD Desc. (CN)"].Value);
                    c.Add().DataField("PODNameEN").Width(180).Caption(Localizer["POD Desc. (EN)"].Value);
                    c.Add().DataField("PODNameBD").Width(100).Caption(Localizer["POD Desc. (BD)"].Value);
                 })
        .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
        .HoverStateEnabled(true)
        .RemoteOperations(true)
        .Selection(s => s.Mode(SelectionMode.Single))
        .SelectedRowKeys(new JS("[component.option('value')]"))
        .FocusedRowEnabled(true)
        .FocusedRowKey(new JS("component.option('value')"))
        .OnSelectionChanged("function(selectionChangedArgs) { onPODSelectionChanged(selectionChangedArgs, component) }")
    );

#line default
#line hidden
            EndContext();
#line 500 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
     
    }

#line default
#line hidden
            BeginContext(26353, 6218, true);
            WriteLiteral(@"
</div>

<script>
    var defectCode;
    var defectNameEN;
    var defectNameCN;
    var defectNameBD;
    var podNameEN;
    var podNameCN;
    var podNameBD;

    function onDefectSelectionChanged(selectionChangedArgs, component) {
        var setValue = component.option('setValue');
        var selectedRowKey = selectionChangedArgs.selectedRowKeys[0];
        var data = selectionChangedArgs.selectedRowsData[0];
        defectNameEN = data.DefectNameEN;
        defectNameCN = data.DefectNameCN;
        defectNameBD = data.DefectNameBD;
        component.option('value', selectedRowKey);
        setValue(selectedRowKey);
        if (selectionChangedArgs.selectedRowKeys.length > 0) {
            component.close();
        }
    }

    function SetDefectNameValue1(newData, value, currentRowData) {
        newData.DefectCode1 = value;
        newData.DefectNameEN1 = value == """" ? """" : defectNameEN;
        newData.DefectNameCN1 = value == """" ? """" : defectNameCN;
        newData.Def");
            WriteLiteral(@"ectNameBD1 = value == """" ? """" : defectNameBD;
        if (currentRowData.DefectCode3 !== undefined && currentRowData.DefectCode3 !== null && currentRowData.DefectCode3.length > 0) newData.DefectQty = 3
        else if (currentRowData.DefectCode2 !== undefined && currentRowData.DefectCode2 !== null && currentRowData.DefectCode2.length > 0) newData.DefectQty = 2
        else { newData.DefectQty = value == """" ? null : 1; }
    }
    function SetDefectNameValue2(newData, value, currentRowData) {
        newData.DefectCode2 = value;
        newData.DefectNameEN2 = value == """" ? """" : defectNameEN;
        newData.DefectNameCN2 = value == """" ? """" : defectNameCN;
        newData.DefectNameBD2 = value == """" ? """" : defectNameBD;
        if (value == """") {
            if (currentRowData.DefectCode3 !== undefined && currentRowData.DefectCode3 !== null && currentRowData.DefectCode3.length > 0) newData.DefectQty = 3
            else if (currentRowData.DefectCode1 !== undefined && currentRowData.DefectCode1 !== ");
            WriteLiteral(@"null && currentRowData.DefectCode1.length > 0) newData.DefectQty = 1
            else newData.DefectQty = null;
        }
        else {
            if (currentRowData.DefectCode3 !== undefined && currentRowData.DefectCode3 !== null && currentRowData.DefectCode3.length > 0) newData.DefectQty = 3
            else { newData.DefectQty = 2; }
        }
    }
    function SetDefectNameValue3(newData, value, currentRowData) {
        newData.DefectCode3 = value;
        newData.DefectNameEN3 = value == """" ? """" : defectNameEN;
        newData.DefectNameCN3 = value == """" ? """" : defectNameCN;
        newData.DefectNameBD3 = value == """" ? """" : defectNameBD;
        if (value == """") {
            if (currentRowData.DefectCode2 !== undefined && currentRowData.DefectCode2 !== null && currentRowData.DefectCode2.length > 0) newData.DefectQty = 2
            else if (currentRowData.DefectCode1 !== undefined && currentRowData.DefectCode1 !== null && currentRowData.DefectCode1.length > 0) newData.DefectQty = 1
");
            WriteLiteral(@"            else newData.DefectQty = null;
        }
        else { newData.DefectQty = 3; }
    }

    function onPODSelectionChanged(selectionChangedArgs, component) {
        var setValue = component.option('setValue');
        var selectedRowKey = selectionChangedArgs.selectedRowKeys[0];
        var data = selectionChangedArgs.selectedRowsData[0];
        podNameEN = data.PODNameEN;
        podNameCN = data.PODNameCN;
        podNameBD = data.PODNameBD;
        component.option('value', selectedRowKey);
        setValue(selectedRowKey);
        if (selectionChangedArgs.selectedRowKeys.length > 0) {
            component.close();
        }
    }

    function SetPODNameValue1(newData, value, currentRowData) {
        newData.PODCode1 = value;
        newData.PODNameEN1 = value == """" ? """" : podNameEN;
        newData.PODNameCN1 = value == """" ? """" : podNameCN;
        newData.PODNameBD1 = value == """" ? """" : podNameBD;
        if (currentRowData.PODCode3 !== undefined && currentRowData");
            WriteLiteral(@".PODCode3 !== null && currentRowData.PODCode3.length > 0) newData.PODQty = 3
        else if (currentRowData.PODCode2 !== undefined && currentRowData.PODCode2 !== null && currentRowData.PODCode2.length > 0) newData.PODQty = 2
        else { newData.PODQty = value == """" ? null : 1; }
    }
    function SetPODNameValue2(newData, value, currentRowData) {
        newData.PODCode2 = value;
        newData.PODNameEN2 = value == """" ? """" : podNameEN;
        newData.PODNameCN2 = value == """" ? """" : podNameCN;
        newData.PODNameBD2 = value == """" ? """" : podNameBD;
        if (value == """") {
            if (currentRowData.PODCode3 !== undefined && currentRowData.PODCode3 !== null && currentRowData.PODCode3.length > 0) newData.PODQty = 3
            else if (currentRowData.PODCode1 !== undefined && currentRowData.PODCode1 !== null && currentRowData.PODCode1.length > 0) newData.PODQty = 1
            else newData.PODQty = null;
        }
        else {
            if (currentRowData.PODCode3 !== undefin");
            WriteLiteral(@"ed && currentRowData.PODCode3 !== null && currentRowData.PODCode3.length > 0) newData.PODQty = 3
            else { newData.PODQty = 2; }
        }
    }
    function SetPODNameValue3(newData, value, currentRowData) {
        newData.PODCode3 = value;
        newData.PODNameEN3 = value == """" ? """" : podNameEN;
        newData.PODNameCN3 = value == """" ? """" : podNameCN;
        newData.PODNameBD3 = value == """" ? """" : podNameBD;
        if (value == """") {
            if (currentRowData.PODCode2 !== undefined && currentRowData.PODCode2 !== null && currentRowData.PODCode2.length > 0) newData.PODQty = 2
            else if (currentRowData.PODCode1 !== undefined && currentRowData.PODCode1 !== null && currentRowData.PODCode1.length > 0) newData.PODQty = 1
            else newData.PODQty = null;
        }
        else { newData.PODQty = 3; }
    }

    function toolbar_preparing(e) {
        var dataGrid = e.component;

        e.toolbarOptions.items.unshift({
            location: ""after"",
      ");
            WriteLiteral("      widget: \"dxButton\",\r\n            options: {\r\n                text: \'");
            EndContext();
            BeginContext(32572, 19, false);
#line 623 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                  Write(Localizer["Return"]);

#line default
#line hidden
            EndContext();
            BeginContext(32591, 307, true);
            WriteLiteral(@"',
                width: 80,
                onClick: function (e) {
                    window.location.href = ""/Home/FullInspectionHeader"";
                }
            }
        },{
            location: ""before"",
            widget: ""dxButton"",
            options: {
                text: '");
            EndContext();
            BeginContext(32899, 19, false);
#line 633 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                  Write(ViewData["ShowStr"]);

#line default
#line hidden
            EndContext();
            BeginContext(32918, 180, true);
            WriteLiteral("\',\r\n                readonly: true\r\n            }\r\n        }, {\r\n            location: \"before\",\r\n            widget: \"dxCheckBox\",\r\n            options: {\r\n                text: \'");
            EndContext();
            BeginContext(33099, 43, false);
#line 640 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                  Write(Localizer["Only show record checked today"]);

#line default
#line hidden
            EndContext();
            BeginContext(33142, 75, true);
            WriteLiteral("\',\r\n                name: \"chkOnlyShowToadayData\",\r\n                value: ");
            EndContext();
            BeginContext(33218, 29, false);
#line 642 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                  Write(ViewData["OnlyShowTodayData"]);

#line default
#line hidden
            EndContext();
            BeginContext(33247, 196, true);
            WriteLiteral(",\r\n                onValueChanged: function (e) {\r\n                    var showdata = e.value ? 1 : 0;\r\n                    window.location.href = \'/Home/FullInspectionDetail?FullInspectionHeader=");
            EndContext();
            BeginContext(33444, 32, false);
#line 645 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                       Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(33476, 65, true);
            WriteLiteral("&OnlyShowTodayData=\' + showdata +\r\n                        \"&Fty=");
            EndContext();
            BeginContext(33542, 28, false);
#line 646 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                         Write(Context.Request.Query["Fty"]);

#line default
#line hidden
            EndContext();
            BeginContext(33570, 4, true);
            WriteLiteral("&Ws=");
            EndContext();
            BeginContext(33575, 27, false);
#line 646 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                          Write(Context.Request.Query["Ws"]);

#line default
#line hidden
            EndContext();
            BeginContext(33602, 6, true);
            WriteLiteral("&Line=");
            EndContext();
            BeginContext(33609, 29, false);
#line 646 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                            Write(Context.Request.Query["Line"]);

#line default
#line hidden
            EndContext();
            BeginContext(33638, 11, true);
            WriteLiteral("&ProjectNo=");
            EndContext();
            BeginContext(33650, 34, false);
#line 646 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                                                                     Write(Context.Request.Query["ProjectNo"]);

#line default
#line hidden
            EndContext();
            BeginContext(33684, 6, true);
            WriteLiteral("&QNNo=");
            EndContext();
            BeginContext(33691, 29, false);
#line 646 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                                                                                                              Write(Context.Request.Query["QNNo"]);

#line default
#line hidden
            EndContext();
            BeginContext(33720, 198, true);
            WriteLiteral("\";\r\n                }\r\n            }\r\n        }, {\r\n            location: \"after\",\r\n            widget: \"dxButton\",\r\n            options: {\r\n                icon: \"refresh\",\r\n                hint: \'");
            EndContext();
            BeginContext(33919, 20, false);
#line 654 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                  Write(Localizer["Refresh"]);

#line default
#line hidden
            EndContext();
            BeginContext(33939, 472, true);
            WriteLiteral(@"',
                onClick: function () {
                    dataGrid.refresh();
                }
            }
        });
    }

    var totalBoxNo;
    var totalRepaired;
    var totalSize;
    var defectiveGarmentPercent;
    var totalCheckPointSigned;
    var totalRejectQty;
    function CalTotalCheckPointSigned(data) {
        $.ajax({
            url: ""/api/FullInspectionHeaders/GetTotalInformation"",
            data: { FullInspectionHeader: ");
            EndContext();
            BeginContext(34412, 32, false);
#line 671 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                     Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(34444, 21, true);
            WriteLiteral(", OnlyShowTodayData: ");
            EndContext();
            BeginContext(34466, 29, false);
#line 671 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                           Write(ViewData["OnlyShowTodayData"]);

#line default
#line hidden
            EndContext();
            BeginContext(34495, 1061, true);
            WriteLiteral(@"},
            type: ""get"",
            async: false,
            dataType: ""json"",
            success: function (result) {
                totalCheckPointSigned = result.TotalCheckPointSigned
                totalBoxNo = result.TotalBoxNo
                totalRepaired = result.TotalRepaired
                totalSize = result.TotalSize,
                defectiveGarmentPercent = result.DefectiveGarmentPercent,
                totalRejectQty = result.TotalRejectQty;

            }
        });
        return totalCheckPointSigned;
    }
    function CalTotalBoxNo(data) { return totalBoxNo; }
    function CalTotalRepaired(data) { return totalRepaired; }
    function CalTotalSize(data) { return totalSize; }
    function CalDefectiveGarmentPercent(data) { return defectiveGarmentPercent; }
    //function CalTotalCheckPointSigned(data) { return totalCheckPointSigned;}
    function CalTotalRejectQty(data) { return totalRejectQty; }

    function onRemarkClick(e) {
        window.location.href ");
            WriteLiteral("= \'/Home/Remark?FullInspectionHeader=");
            EndContext();
            BeginContext(35557, 32, false);
#line 695 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                             Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(35589, 19, true);
            WriteLiteral("&OnlyShowTodayData=");
            EndContext();
            BeginContext(35609, 29, false);
#line 695 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                                                 Write(ViewData["OnlyShowTodayData"]);

#line default
#line hidden
            EndContext();
            BeginContext(35638, 21, true);
            WriteLiteral("\' +\r\n          \"&Fty=");
            EndContext();
            BeginContext(35660, 28, false);
#line 696 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
           Write(Context.Request.Query["Fty"]);

#line default
#line hidden
            EndContext();
            BeginContext(35688, 4, true);
            WriteLiteral("&Ws=");
            EndContext();
            BeginContext(35693, 27, false);
#line 696 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                            Write(Context.Request.Query["Ws"]);

#line default
#line hidden
            EndContext();
            BeginContext(35720, 6, true);
            WriteLiteral("&Line=");
            EndContext();
            BeginContext(35727, 29, false);
#line 696 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                              Write(Context.Request.Query["Line"]);

#line default
#line hidden
            EndContext();
            BeginContext(35756, 11, true);
            WriteLiteral("&ProjectNo=");
            EndContext();
            BeginContext(35768, 34, false);
#line 696 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                                                       Write(Context.Request.Query["ProjectNo"]);

#line default
#line hidden
            EndContext();
            BeginContext(35802, 6, true);
            WriteLiteral("&QNNo=");
            EndContext();
            BeginContext(35809, 29, false);
#line 696 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                                                                                                                                Write(Context.Request.Query["QNNo"]);

#line default
#line hidden
            EndContext();
            BeginContext(35838, 1035, true);
            WriteLiteral(@""";
    }

    function OnCellPrepared(e) {
        if (e.rowType == ""header"") {
            if (e.column.name == ""InspectionDate"" || e.column.name == ""Inspector"" ||
                e.column.name == ""RecordNoShow"" || e.column.name == ""CheckPointSigned"" || e.column.name == ""DefectQty"" ||
                e.column.name == ""DefectCode1"" || e.column.name == ""DefectNameEN1"" || e.column.name == ""DefectNameCN1"" || e.column.name == ""DefectNameBD1"" ||
                e.column.name == ""DefectCode2"" || e.column.name == ""DefectNameEN2"" || e.column.name == ""DefectNameCN2"" || e.column.name == ""DefectNameBD2"" ||
                e.column.name == ""DefectCode3"" || e.column.name == ""DefectNameEN3"" || e.column.name == ""DefectNameCN3"" || e.column.name == ""DefectNameBD3""){
                e.cellElement.css(""backgroundColor"", ""rgb(197, 217, 241)"");  //蓝色
            }
            else if (e.column.name != ""CommandButton"") {
                e.cellElement.css(""backgroundColor"", ""rgb(235, 241, 222)"");  //黄色
            }
");
            WriteLiteral("        }\r\n");
            EndContext();
            BeginContext(37136, 449, true);
            WriteLiteral(@"
    }

    function RejectStageList() {
        var rejlist = [ ""1st"", ""2nd""];
        return new DevExpress.data.ArrayStore(rejlist);
    }

    function CheckPointConfirm(e) {
        var grid = e.component;
        var index = e.row.rowIndex;
        var confirmValue = grid.cellValue(index, ""CheckPointSigned"");
        if (confirmValue == null || confirmValue.length == 0) {
            grid.cellValue(index, ""CheckPointSigned"", '");
            EndContext();
            BeginContext(37586, 20, false);
#line 731 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                                  Write(ViewData["UserName"]);

#line default
#line hidden
            EndContext();
            BeginContext(37606, 73, true);
            WriteLiteral("\');\r\n            grid.saveEditData();\r\n            DevExpress.ui.notify(\'");
            EndContext();
            BeginContext(37680, 47, false);
#line 733 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                             Write(Localizer["The check point confirm is success"]);

#line default
#line hidden
            EndContext();
            BeginContext(37727, 98, true);
            WriteLiteral("\', \'success\');\r\n            return;\r\n        }\r\n        else {\r\n            DevExpress.ui.notify(\'");
            EndContext();
            BeginContext(37826, 41, false);
#line 737 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                             Write(Localizer["The check point is confirmed"]);

#line default
#line hidden
            EndContext();
            BeginContext(37867, 135, true);
            WriteLiteral("\', \'error\');\r\n        }\r\n\r\n    }\r\n\r\n    function OnInitNewRow(e) {\r\n        editingIndex = 0;\r\n\r\n        e.data.FullInspectionHeader = ");
            EndContext();
            BeginContext(38003, 32, false);
#line 745 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                 Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(38035, 113, true);
            WriteLiteral(";\r\n        e.data.RejectStage = \"1st\";\r\n        e.data.InspectionDate = new Date();\r\n        e.data.Inspector = \'");
            EndContext();
            BeginContext(38149, 20, false);
#line 748 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                       Write(ViewData["UserName"]);

#line default
#line hidden
            EndContext();
            BeginContext(38169, 1108, true);
            WriteLiteral(@"';

        //if (isClone) {
        //    e.data.BoxNo = clonedItem.BoxNo;
        //    e.data.Size = clonedItem.Size;
        //    e.data.ProductQty = clonedItem.ProductQty;
        //    e.data.Repaired = clonedItem.Repaired;
        //    isClone = false;
        //}
    }

    var editingIndex = 0;
    function OnEditingStart(e) {
        editingIndex = e.component.getRowIndexByKey(e.key);
    }

    function ClearDefect(e) {
        //var grid = $(""#gridFullInspectionDetail"").dxDataGrid(""instance"");
        var setValue = e.component.option('setValue');
        setValue('');
    }
    function ClearPOD(e) {
        //e.component.option('setValue', '');
        var setValue = e.component.option('setValue');
        setValue('');
    }
    function ValidationProductQtyCallback(e) {
        var BanalceQty;
        var grid = $(""#gridFullInspectionDetail"").dxDataGrid(""instance"");
        var Oid = grid.cellValue(editingIndex, ""Oid"");

        $.ajax({
            url: ""/api");
            WriteLiteral("/FullInspectionHeaders/GetQNBalanceQty\",\r\n            data: { FullInspectionHeader: ");
            EndContext();
            BeginContext(39278, 32, false);
#line 781 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                                     Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(39310, 304, true);
            WriteLiteral(@", FullInspectionDetailOID: Oid },
            type: ""get"",
            async: false,
            dataType: ""json"",
            success: function (result) {
                BanalceQty = result.BanalceQty
            }
        });
        if (e.value > BanalceQty) {
            e.rule.message = '");
            EndContext();
            BeginContext(39615, 44, false);
#line 790 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\FullInspectionDetail.cshtml"
                         Write(Localizer["The pcs can not be greater than"]);

#line default
#line hidden
            EndContext();
            BeginContext(39659, 1481, true);
            WriteLiteral(@"' + ' ' + BanalceQty;
            return false;
        }
        return true;
    }
    function ValidationDefectiveGarmentQty() {
        var grid = $(""#gridFullInspectionDetail"").dxDataGrid(""instance"");
        return grid.cellValue(editingIndex, ""ProductQty"");
    }

    function exporting(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sheet1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'End-line inspection Detail List.xlsx');
            });
        });
        e.cancel = true;
    }


    //var isClone = false;
    //var clonedItem;
    //function AddDefect(e) {
    //    var grid = e.component;
    //    clonedItem = e.row.data;
    /");
            WriteLiteral(@"/    isClone = true;
    //    grid.addRow();
    //}

    //function AddDefectPopup(e) {
    //    var grid = $(""#gridFullInspectionDetail"").dxDataGrid(""instance"");
    //    var pc = $(""#PopupEditForm"").dxPopup(""instance"");

    //    grid.saveEditData();

    ////    var grid = e.component;
    ////    grid.saveEditData();
    ////    clonedItem = e.row.data;
    ////    isClone = true;
    ////    grid.addRow();
    //}


</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IViewLocalizer Localizer { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591

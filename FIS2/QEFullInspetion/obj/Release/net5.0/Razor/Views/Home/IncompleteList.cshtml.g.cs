#pragma checksum "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7feeb23fed0bc28683c1e07bd92b0021983b6898"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(QEFullInspetion.Models.Home.Views_Home_IncompleteList), @"mvc.1.0.view", @"/Views/Home/IncompleteList.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/IncompleteList.cshtml", typeof(QEFullInspetion.Models.Home.Views_Home_IncompleteList))]
namespace QEFullInspetion.Models.Home
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using QEFullInspetion;

#line default
#line hidden
#line 4 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#line 5 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using QEFullInspetion.Controllers;

#line default
#line hidden
#line 6 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#line 7 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
#line 9 "D:\Project\QEFullInspetion\QEFullInspetion\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc.Localization;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7feeb23fed0bc28683c1e07bd92b0021983b6898", @"/Views/Home/IncompleteList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"251332470f42861d90f80ee159614452477d5f26", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_IncompleteList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/polyfill.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/exceljs.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/FileSaver.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 44, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7feeb23fed0bc28683c1e07bd92b0021983b68984882", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(44, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(46, 43, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7feeb23fed0bc28683c1e07bd92b0021983b68986057", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(89, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(91, 45, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7feeb23fed0bc28683c1e07bd92b0021983b68987232", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(136, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(142, 527, false);
#line 5 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
Write(Html.DevExtreme().TabPanel()
    .ID("tabPanelContainer")
    .Items(items=> {
        items.Add().Title(Localizer["End-line inspection (WIP)"].Value).Template(new TemplateName("IncompleteTemplate"));
        items.Add().Title(Localizer["End-line inspection - Checking frequency at chk pt. (Non-shpd gmts)"].Value).Template(new TemplateName("NonShipmentTemplate"));
        items.Add().Title(Localizer["End-line inspection - Checking frequency at chk pt. (WIP)"].Value).Template(new TemplateName("WIPTemplate"));
    })
);

#line default
#line hidden
            EndContext();
            BeginContext(670, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
#line 14 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
 using (Html.DevExtreme().NamedTemplate("IncompleteTemplate"))
{
    

#line default
#line hidden
            BeginContext(747, 6855, false);
#line 16 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
Write(Html.DevExtreme().DataGrid<QEFullInspetion.Controllers.IncompleteResult>()
        .ID("GridIncomplete")
        .FocusedRowEnabled(true)
        .ColumnAutoWidth(true)
        .DataSource(d => d.Mvc().Controller("DataHelper").LoadAction("GetIncompleteList").Key("Oid"))
        .ShowBorders(true)
        .RemoteOperations(true)
        .Export(e => e.Enabled(true).Texts(t => t.ExportAll(Localizer["Export all data"].Value)))
        .OnExporting("exporting1")
        .FilterPanel(f => f.Visible(true))
        .HeaderFilter(h => h.Visible(true).AllowSearch(true).Height(360))
        .Paging(p => p.PageSize(12))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
            pager.InfoText("Page {0} of {1} ({2} rows)");
     })

        .Columns(columns =>
        {
            columns.Add().DataField("Customer").Caption(Localizer["Cust"].Value);
            columns.Add().DataField("CustomerPO").Caption(Localizer["Customer PO"].Value);
            columns.Add().DataField("CustStyleNo").Caption(Localizer["Cust Style"].Value);
            columns.Add().DataField("ProjectNo").Caption(Localizer["Project#"].Value);
            //columns.Add().DataField("WONO").Caption(Localizer["WO#"].Value);
            columns.Add().DataField("QNNO").Caption(Localizer["QN#"].Value);
            columns.Add().DataField("ColorCode")
              .Caption(Localizer["<text>Color<br>Code</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Color<br>Code</text>"].Value);

            columns.Add().DataField("Factory").Caption(Localizer["Fty"].Value);
            columns.Add().DataField("WorkShop").Caption(Localizer["Ws"].Value);
            columns.Add().DataField("Line").Caption(Localizer["AL#"].Value);
            columns.Add().DataField("QNQty")
                .AllowHeaderFiltering(false)
                .Caption(Localizer["<text>QN<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>QN<br>Qty</text>"].Value)
                .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("InspectedQty")
                .AllowHeaderFiltering(false)
                .Caption(Localizer["<text>Inspected<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Inspected<br>Qty</text>"].Value)
                .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("BalanceQty")
                .AllowHeaderFiltering(false)
                .Alignment(HorizontalAlignment.Left)
                .Caption(Localizer["<text>O/S<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>O/S<br>Qty</text>"].Value);

            columns.Add().DataField("FirstInspectedDate")
              .AllowHeaderFiltering(false)
              .Caption(Localizer["<text>1st Insp.<br>dd(a)</text>"].Value.Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>1st Insp.<br>dd(a)</text>"].Value);

            columns.Add().DataField("ExftyDate")
                .SortOrder(SortOrder.Asc)
                .Caption(Localizer["<text>Ex-fty dd<br>(SL/CL)(b)</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Ex-fty dd<br>(SL/CL)(b)</text>"].Value)
                .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("InspectionDateVsExftyDiff")
                .AllowHeaderFiltering(true)
                .Width(130)
                .Alignment(HorizontalAlignment.Left)
                .Caption(Localizer["<text>1st Insp.vs<br>Ex-fty dd<br>(c = b - a)</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>1st Insp.vs<br>Ex-fty dd<br>(c = b - a)</text>"].Value);

            columns.Add().DataField("InspectionDateVsTodayDiff")
                .AllowHeaderFiltering(true)
                .Width(120)
                .Alignment(HorizontalAlignment.Left)
                .Caption(Localizer["<text>Todays vs<br>Ex-fty dd<br>(d = b - Tdy)</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Todays vs<br>Ex-fty dd<br>(d = b - Tdy)</text>"].Value);
        })
        .OnCellPrepared("OnCellPrepared1")

    .Summary(s =>
        s.TotalItems(items =>
        {
            items.AddFor(m => m.Customer).SummaryType(SummaryType.Count).DisplayFormat("Grand total");
            items.AddFor(m => m.CustomerPO).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustomerPO1");
            //items.AddFor(m => m.CustStyleNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustStyleNo1");
            //items.AddFor(m => m.ProjectNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalProjectNo1");
            //items.AddFor(m => m.WONO).SummaryType(SummaryType.Count).CustomizeText("CalTotalWONO1");
            items.AddFor(m => m.QNNO).SummaryType(SummaryType.Count).CustomizeText("CalTotalQNNO1");
            items.AddFor(m => m.Factory).SummaryType(SummaryType.Count).CustomizeText("CalTotalFactory1");
            items.AddFor(m => m.WorkShop).SummaryType(SummaryType.Count).CustomizeText("CalTotalWorkShop1");
            items.AddFor(m => m.Line).SummaryType(SummaryType.Count).CustomizeText("CalTotalLine1");

            items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalInspectedQty1");
            items.AddFor(m => m.BalanceQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalBalanceQty1");

            //items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
            //items.AddFor(m => m.BalanceQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
        })
      )
    );

#line default
#line hidden
            EndContext();
#line 117 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
     
}

#line default
#line hidden
            BeginContext(7608, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 120 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
 using (Html.DevExtreme().NamedTemplate("NonShipmentTemplate"))
{
    

#line default
#line hidden
            BeginContext(7684, 8468, false);
#line 122 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
Write(Html.DevExtreme().DataGrid<QEFullInspetion.Controllers.WIPResult>()
        .ID("GridCompletedAndNonShipment")
        .FocusedRowEnabled(true)
        .ColumnAutoWidth(true)
        .DataSource(d => d.Mvc().Controller("DataHelper").LoadAction("GetNonShipmentList").Key("Oid"))
        .ShowBorders(true)
        .RemoteOperations(true)
        .Export(e => e.Enabled(true).Texts(t => t.ExportAll(Localizer["Export all data"].Value)))
        .OnExporting("exporting3")
        .FilterPanel(f => f.Visible(true))
        .HeaderFilter(h => h.Visible(true).AllowSearch(true).Height(360))
        .Paging(p => p.PageSize(12))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
            pager.InfoText("Page {0} of {1} ({2} rows)");
        })

        .Columns(columns =>
        {
            columns.Add().DataField("Customer").Caption(Localizer["Cust"].Value);
            columns.Add().DataField("CustomerPO").Caption(Localizer["Customer PO"].Value);
            columns.Add().DataField("CustStyleNo").Caption(Localizer["Cust Style"].Value);
            columns.Add().DataField("ProjectNo").Caption(Localizer["Project#"].Value);
            //columns.Add().DataField("WONO").Caption(Localizer["WO#"].Value);
            columns.Add().DataField("QNNO").Caption(Localizer["QN#"].Value).SortOrder(SortOrder.Asc).SortIndex(4);

            columns.Add().DataField("ColorCode")
              .Caption(Localizer["<text>Color<br>Code</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Color<br>Code</text>"].Value);

            columns.Add().DataField("Factory").Caption(Localizer["Fty"].Value).SortOrder(SortOrder.Asc).SortIndex(1);
            columns.Add().DataField("WorkShop").Caption(Localizer["Ws"].Value).SortOrder(SortOrder.Asc).SortIndex(2);
            columns.Add().DataField("Line").Caption(Localizer["AL#"].Value).SortOrder(SortOrder.Asc).SortIndex(3);

            columns.Add().DataField("InspectionDate")
                .Caption(Localizer["<text>Ins-<br>pection<br>as at dd</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Ins-<br>pection<br>as at dd</text>"].Value)
                .AllowHeaderFiltering(true)
                .SortOrder(SortOrder.Asc).SortIndex(5);

            columns.Add().DataField("Inspector").Caption(Localizer["Inspector"].Value);
            columns.Add().DataField("QNQty")
                .AllowHeaderFiltering(false)
                .Caption(Localizer["<text>QN<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>QN<br>Qty</text>"].Value)
                .Alignment(HorizontalAlignment.Left);


            columns.Add().DataField("InspectedQty")
                .AllowHeaderFiltering(false)
                .Caption(Localizer["<text>Inspected<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Inspected<br>Qty</text>"].Value)
                .Alignment(HorizontalAlignment.Left);

            //columns.Add().DataField("OutstandingQty")
            //    .AllowHeaderFiltering(false)
            //    .HeaderCellTemplate(Localizer["<text>O/S<br>Non-Insp<br>Qty</text>"].Value)
            //    .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("OutstandingPercent")
               .AllowHeaderFiltering(false)
               .Format("##0.00%")
               .Alignment(HorizontalAlignment.Left)
               .Caption(Localizer["<text>Non-Insp<br>%</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
               .HeaderCellTemplate(Localizer["<text>Non-Insp<br>%</text>"].Value);


            columns.Add().DataField("ReInspectedQty")
               .AllowHeaderFiltering(false)
               .Alignment(HorizontalAlignment.Left)
               .Caption(Localizer["<strong><text>Re-<br>worked<br>Qty</text></strong>"].Value.Replace("-<br>", "").Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
               .HeaderCellTemplate(Localizer["<strong><text>Re-<br>worked<br>Qty</text></strong>"].Value);

            columns.Add().DataField("ReInspectedPercent")
                .AllowHeaderFiltering(false)
                .Format("##0.00%")
                .Alignment(HorizontalAlignment.Left)
                .Caption(Localizer["<text>Re-<br>worked<br>%</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<text>Re-<br>worked<br>%</text>"].Value);


            columns.Add().DataField("TotalCheckPoint")
                .AllowHeaderFiltering(false)
                .Alignment(HorizontalAlignment.Left)
                .Caption(Localizer["<strong><text>Freq-<br>uency at<br>Chk Pt.</text></strong>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
                .HeaderCellTemplate(Localizer["<strong><text>Freq-<br>uency at<br>Chk Pt.</text></strong>"].Value);

            columns.Add().DataField("LineLeader")
               .Caption(Localizer["<text>End Phase<br>Team Leader<text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
               .HeaderCellTemplate(Localizer["<text>End Phase<br>Team Leader<text>"].Value);
        })
        .OnCellPrepared("OnCellPrepared2")
    .Summary(s =>
        s.TotalItems(items =>
        {
            items.AddFor(m => m.Customer).SummaryType(SummaryType.Count).DisplayFormat("Grand total");
            items.AddFor(m => m.CustomerPO).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustomerPO3");
            //items.AddFor(m => m.CustStyleNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustStyleNo3");
            //items.AddFor(m => m.ProjectNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalProjectNo3");
            //items.AddFor(m => m.WONO).SummaryType(SummaryType.Count).CustomizeText("CalTotalWONO3");
            items.AddFor(m => m.QNNO).SummaryType(SummaryType.Count).CustomizeText("CalTotalQNNO3");
            items.AddFor(m => m.Inspector).SummaryType(SummaryType.Count).CustomizeText("CalTotalInspector3");
            items.AddFor(m => m.Factory).SummaryType(SummaryType.Count).CustomizeText("CalTotalFactory3");
            items.AddFor(m => m.WorkShop).SummaryType(SummaryType.Count).CustomizeText("CalTotalWorkShop3");
            items.AddFor(m => m.Line).SummaryType(SummaryType.Count).CustomizeText("CalTotalLine3");

            items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalInspectedQty3");
            items.AddFor(m => m.ReInspectedQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalReInspectedQty3");
            items.AddFor(m => m.TotalCheckPoint).SummaryType(SummaryType.Sum).CustomizeText("CalTotalTotalCheckPoint3");
            items.AddFor(m => m.ReInspectedPercent).SummaryType(SummaryType.Sum).CustomizeText("CalTotalReInspectedPercent3");
            items.AddFor(m => m.InspectionDate).SummaryType(SummaryType.Sum).CustomizeText("CalTotalInspectionDate3");


            //items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
            //items.AddFor(m => m.ReInspectedQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
            //items.AddFor(m => m.TotalCheckPoint).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
        })
      )


    );

#line default
#line hidden
            EndContext();
#line 246 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
     
}

#line default
#line hidden
            BeginContext(16158, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 249 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
 using (Html.DevExtreme().NamedTemplate("WIPTemplate"))
{
    

#line default
#line hidden
            BeginContext(16226, 8479, false);
#line 251 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
Write(Html.DevExtreme().DataGrid<QEFullInspetion.Controllers.WIPResult>()
        .ID("GridWIP")
        .FocusedRowEnabled(true)
        .ColumnAutoWidth(true)
        .DataSource(d => d.Mvc().Controller("DataHelper").LoadAction("GetWIPList").Key("Oid"))
        .ShowBorders(true)
        .RemoteOperations(true)
        .Export(e => e.Enabled(true).Texts(t => t.ExportAll(Localizer["Export all data"].Value)))
        .OnExporting("exporting2")
        .FilterPanel(f => f.Visible(true))
        .HeaderFilter(h => h.Visible(true).AllowSearch(true).Height(360))
        .Paging(p => p.PageSize(12))
        .Pager(pager =>
        {
            pager.Visible(true);
            pager.DisplayMode(GridPagerDisplayMode.Full);
            pager.ShowInfo(true);
            pager.ShowNavigationButtons(true);
            pager.InfoText("Page {0} of {1} ({2} rows)");
        })

        .Columns(columns =>
        {
            columns.Add().DataField("Customer").Caption(Localizer["Cust"].Value);
            columns.Add().DataField("CustomerPO").Caption(Localizer["Customer PO"].Value);
            columns.Add().DataField("CustStyleNo").Caption(Localizer["Cust Style"].Value);
            columns.Add().DataField("ProjectNo").Caption(Localizer["Project#"].Value);
            //columns.Add().DataField("WONO").Caption(Localizer["WO#"].Value);
            columns.Add().DataField("QNNO")
               .Caption(Localizer["QN#"].Value)
               .SortOrder(SortOrder.Asc)
               .SortIndex(4);

            columns.Add().DataField("ColorCode")
              .Caption(Localizer["<text>Color<br>Code</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Color<br>Code</text>"].Value);

            columns.Add().DataField("Factory").Caption(Localizer["Fty"].Value).SortOrder(SortOrder.Asc).SortIndex(1);
            columns.Add().DataField("WorkShop").Caption(Localizer["Ws"].Value).SortOrder(SortOrder.Asc).SortIndex(2);
            columns.Add().DataField("Line").Caption(Localizer["AL#"].Value).SortOrder(SortOrder.Asc).SortIndex(3);
            columns.Add().DataField("InspectionDate")
              .Caption(Localizer["<text>Ins-<br>pection<br>as at dd</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Ins-<br>pection<br>as at dd</text>"].Value)
              .SortOrder(SortOrder.Asc).SortIndex(5);

            columns.Add().DataField("Inspector").Caption(Localizer["Inspector"].Value);
            columns.Add().DataField("QNQty")
              .AllowHeaderFiltering(false)
              .Caption(Localizer["<text>QN<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>QN<br>Qty</text>"].Value)
              .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("InspectedQty")
              .AllowHeaderFiltering(false)
              .Caption(Localizer["<text>Inspected<br>Qty</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Inspected<br>Qty</text>"].Value)
              .Alignment(HorizontalAlignment.Left);

            //columns.Add().DataField("OutstandingQty")
            //    .AllowHeaderFiltering(false)
            //    .HeaderCellTemplate(Localizer["<text>O/S<br>Non-Insp<br>Qty</text>"].Value)
            //    .Alignment(HorizontalAlignment.Left);

            columns.Add().DataField("OutstandingPercent")
               .AllowHeaderFiltering(false)
               .Format("##0.00%")
               .Alignment(HorizontalAlignment.Left)
               .Caption(Localizer["<text>Non-Insp<br>%</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
               .HeaderCellTemplate(Localizer["<text>Non-Insp<br>%</text>"].Value);


            columns.Add().DataField("ReInspectedQty")
              .AllowHeaderFiltering(false)
              .Alignment(HorizontalAlignment.Left)
              .Caption(Localizer["<strong><text>Re-<br>worked<br>Qty</text></strong>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<strong><text>Re-<br>worked<br>Qty</text></strong>"].Value);


            columns.Add().DataField("ReInspectedPercent")
              .AllowHeaderFiltering(false)
              .Format("##0.00%")
              .Alignment(HorizontalAlignment.Left)
              .Caption(Localizer["<text>Re-<br>worked<br>%</text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<text>Re-<br>worked<br>%</text>"].Value);


            columns.Add().DataField("TotalCheckPoint")
              .AllowHeaderFiltering(false)
              .Alignment(HorizontalAlignment.Left)
              .Caption(Localizer["<strong><text>Freq-<br>uency at<br>Chk Pt.</text></strong>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
              .HeaderCellTemplate(Localizer["<strong><text>Freq-<br>uency at<br>Chk Pt.</text></strong>"].Value);

            columns.Add().DataField("LineLeader")
               .Caption(Localizer["<text>End Phase<br>Team Leader<text>"].Value.Replace("-<br>", "").Replace("<br>", " ").Replace("</text>", "").Replace("<text>", "").Replace("</strong>", "").Replace("<strong>", ""))
               .HeaderCellTemplate(Localizer["<text>End Phase<br>Team Leader<text>"].Value);
        })
        .OnCellPrepared("OnCellPrepared2")
    .Summary(s =>
        s.TotalItems(items =>
        {
            //items.AddFor(m => m.QNNO).SummaryType("totalWIPSummary").DisplayFormat("{0}");


            items.AddFor(m => m.Customer).SummaryType(SummaryType.Count).DisplayFormat("Grand total");
            items.AddFor(m => m.CustomerPO).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustomerPO2");

            //items.AddFor(m => m.CustStyleNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalCustStyleNo2");
            //items.AddFor(m => m.ProjectNo).SummaryType(SummaryType.Count).CustomizeText("CalTotalProjectNo2");
            //items.AddFor(m => m.WONO).SummaryType(SummaryType.Count).CustomizeText("CalTotalWONO2");

            items.AddFor(m => m.QNNO).SummaryType(SummaryType.Count).CustomizeText("CalTotalQNNO2");

            items.AddFor(m => m.Inspector).SummaryType(SummaryType.Count).CustomizeText("CalTotalInspector2");
            items.AddFor(m => m.Factory).SummaryType(SummaryType.Count).CustomizeText("CalTotalFactory2");
            items.AddFor(m => m.WorkShop).SummaryType(SummaryType.Count).CustomizeText("CalTotalWorkShop2");
            items.AddFor(m => m.Line).SummaryType(SummaryType.Count).CustomizeText("CalTotalLine2");

            items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalInspectedQty2");
            items.AddFor(m => m.ReInspectedQty).SummaryType(SummaryType.Sum).CustomizeText("CalTotalReInspectedQty2");
            items.AddFor(m => m.TotalCheckPoint).SummaryType(SummaryType.Sum).CustomizeText("CalTotalTotalCheckPoint2");
            items.AddFor(m => m.ReInspectedPercent).SummaryType(SummaryType.Sum).CustomizeText("CalTotalReInspectedPercent2");
            items.AddFor(m => m.InspectionDate).SummaryType(SummaryType.Sum).CustomizeText("CalTotalInspectionDate2");


            //items.AddFor(m => m.InspectedQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
            //items.AddFor(m => m.ReInspectedQty).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
            //items.AddFor(m => m.TotalCheckPoint).SummaryType(SummaryType.Sum).DisplayFormat("{0}");
        })
      )
    );

#line default
#line hidden
            EndContext();
#line 380 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
     
}

#line default
#line hidden
            BeginContext(24711, 1606, true);
            WriteLiteral(@"
<script>
    function OnCellPrepared1(e) {
        if (e.rowType == ""header"") {
            e.cellElement.css(""backgroundColor"", ""rgb(197, 217, 241)"");
        }
        else if (e.rowType == ""data"" && e.column.dataField == ""ExftyDate"") {
            var fieldData = e.data;
            var exftyDate = fieldData.ExftyDate;
            if (exftyDate) {
                var now = new Date().format(""yyyy-MM-dd"");
                var dateTime = new Date();
                if (fieldData.Factory == ""SL"" || fieldData.Factory == ""CL"") { dateTime.setDate(dateTime.getDate() + 3); }
                else { dateTime.setDate(dateTime.getDate() + 5); }
                dateTime = dateTime.format(""yyyy-MM-dd"");
                if (fieldData.ExftyDate >= now && fieldData.ExftyDate <= dateTime) {
                    e.cellElement.css(""color"", ""red"");
                }
            }
            e.cellElement.html(fieldData.Value);
       }
    }

    function OnCellPrepared2(e) {
        if (e.rowType == """);
            WriteLiteral(@"header"") {
            e.cellElement.css(""backgroundColor"", ""rgb(197, 217, 241)"");
        }
    }

    function exporting1(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sheet1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), '");
            EndContext();
            BeginContext(26318, 38, false);
#line 421 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
                                                                             Write(Localizer["End-line inspection (WIP)"]);

#line default
#line hidden
            EndContext();
            BeginContext(26356, 557, true);
            WriteLiteral(@"' + '.xlsx');
            });
        });
        e.cancel = true;
    }

    function exporting2(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sheet1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), '");
            EndContext();
            BeginContext(26914, 70, false);
#line 437 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
                                                                             Write(Localizer["End-line inspection - Checking frequency at chk pt. (WIP)"]);

#line default
#line hidden
            EndContext();
            BeginContext(26984, 557, true);
            WriteLiteral(@"' + '.xlsx');
            });
        });
        e.cancel = true;
    }

    function exporting3(e) {
        var workbook = new ExcelJS.Workbook();
        var worksheet = workbook.addWorksheet('Sheet1');

        DevExpress.excelExporter.exportDataGrid({
            component: e.component,
            worksheet: worksheet,
            autoFilterEnabled: true
        }).then(function () {
            workbook.xlsx.writeBuffer().then(function (buffer) {
                saveAs(new Blob([buffer], { type: 'application/octet-stream' }), '");
            EndContext();
            BeginContext(27542, 80, false);
#line 453 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
                                                                             Write(Localizer["End-line inspection - Checking frequency at chk pt. (Non-shpd gmts)"]);

#line default
#line hidden
            EndContext();
            BeginContext(27622, 506, true);
            WriteLiteral(@"' + '.xlsx');
            });
        });
        e.cancel = true;
    }


    var totalCustomerPO1;
    var totalCustStyleNo1;
    var totalProjectNo1;
    var totalWONO1;
    var totalQNNO1;
    var totalFactory1;
    var totalWorkShop1;
    var totalLine1;
    var totalInspectedQty1;
    var totalBalanceQty1;
    function CalTotalCustomerPO1(data) {
        $.ajax({
            url: ""/api/DataHelper/GetIncompleteListTotalInformation"",
            //data: { FullInspectionHeader: ");
            EndContext();
            BeginContext(28129, 32, false);
#line 473 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
                                       Write(ViewData["FullInspectionHeader"]);

#line default
#line hidden
            EndContext();
            BeginContext(28161, 21, true);
            WriteLiteral(", OnlyShowTodayData: ");
            EndContext();
            BeginContext(28183, 29, false);
#line 473 "D:\Project\QEFullInspetion\QEFullInspetion\Views\Home\IncompleteList.cshtml"
                                                                                             Write(ViewData["OnlyShowTodayData"]);

#line default
#line hidden
            EndContext();
            BeginContext(28212, 7293, true);
            WriteLiteral(@"},
            type: ""get"",
            async: false,
            dataType: ""json"",
            success: function (result) {
                totalCustomerPO1 = result.TotalCustomerPO,
                totalCustStyleNo1 = result.TotalCustStyleNo,
                totalProjectNo1 = result.TotalProjectNo,
                totalWONO1 = result.TotalWONO,
                totalQNNO1 = result.TotalQNNO,
                totalFactory1 = result.TotalFactory,
                totalWorkShop1 = result.TotalWorkShop,
                totalLine1 = result.TotalLine,
                totalInspectedQty1 = result.TotalInspectedQty,
                totalBalanceQty1 = result.TotalBalanceQty
            }
        });
        return """";
        //return totalCustomerPO1;
    }
    function CalTotalCustStyleNo1(data) { return totalCustStyleNo1; }
    function CalTotalProjectNo1(data) { return totalProjectNo1; }
    function CalTotalWONO1(data) { return totalWONO1; }
    function CalTotalQNNO1(data) { return totalQNNO");
            WriteLiteral(@"1; }
    function CalTotalFactory1(data) { return totalFactory1; }
    function CalTotalWorkShop1(data) { return totalWorkShop1; }
    function CalTotalLine1(data) { return totalLine1; }
    function CalTotalInspectedQty1(data) { return totalInspectedQty1; }
    function CalTotalBalanceQty1(data) { return totalBalanceQty1; }

    var totalCustomerPO2;
    var totalCustStyleNo2;
    var totalProjectNo12
    var totalWONO2;
    var totalQNNO2;
    var totalInspector2;
    var totalFactory2;
    var totalWorkShop2;
    var totalLine12;
    var totalInspectedQty2;
    var totalReInspectedQty2;
    var totalTotalCheckPoint2;
    var totalReInspectedPercent2;
    var totalInspectionDate2;
    function CalTotalCustomerPO2(data) {
        $.ajax({
            url: ""/api/DataHelper/GetWIPListTotalInformation"",
            type: ""get"",
            async: false,
            dataType: ""json"",
            success: function (result) {
                totalCustomerPO2 = result.TotalCustomerPO,
 ");
            WriteLiteral(@"                   totalCustStyleNo2 = result.TotalCustStyleNo,
                    totalProjectNo2 = result.TotalProjectNo,
                    totalWONO2 = result.TotalWONO,
                    totalQNNO2 = result.TotalQNNO,
                    totalInspector2 = result.TotalInspector,
                    totalFactory2 = result.TotalFactory,
                    totalWorkShop2 = result.TotalWorkShop,
                    totalLine2 = result.TotalLine,
                    totalInspectedQty2 = result.TotalInspectedQty,
                    totalReInspectedQty2 = result.TotalReInspectedQty,
                    totalTotalCheckPoint2 = result.TotalTotalCheckPoint,
                    totalReInspectedPercent2 = result.TotalReInspectedPercent,
                    totalInspectionDate2 = result.TotalInspectionDate
            }
        });
        return """";
        //return totalCustomerPO2;
    }
    function CalTotalCustStyleNo2(data) { return totalCustStyleNo2; }
    function CalTotalProjectNo2(da");
            WriteLiteral(@"ta) { return totalProjectNo2; }
    function CalTotalWONO2(data) { return totalWONO2; }
    function CalTotalQNNO2(data) { return totalQNNO2; }
    function CalTotalInspector2(data) { return totalInspector2; }
    function CalTotalFactory2(data) { return totalFactory2; }
    function CalTotalWorkShop2(data) { return totalWorkShop2; }
    function CalTotalLine2(data) { return totalLine2; }
    function CalTotalInspectedQty2(data) { return totalInspectedQty2; }
    function CalTotalReInspectedQty2(data) { return totalReInspectedQty2; }
    function CalTotalTotalCheckPoint2(data) { return totalTotalCheckPoint2; }
    function CalTotalReInspectedPercent2(data) { return totalReInspectedPercent2; }
    function CalTotalInspectionDate2(data) { return totalInspectionDate2; }

    var totalCustomerPO3;
    var totalCustStyleNo3;
    var totalProjectNo13
    var totalWONO3;
    var totalQNNO3;
    var totalInspector3;
    var totalFactory3;
    var totalWorkShop3;
    var totalLine13;
    var tota");
            WriteLiteral(@"lInspectedQty3;
    var totalReInspectedQty3;
    var totalTotalCheckPoint3;
    var totalReInspectedPercent3;
    var totalInspectionDate3;
    function CalTotalCustomerPO3(data) {
        $.ajax({
            url: ""/api/DataHelper/GetNonShipmentListTotalInformation"",
            type: ""get"",
            async: false,
            dataType: ""json"",
            success: function (result) {
                totalCustomerPO3 = result.TotalCustomerPO,
                    totalCustStyleNo3 = result.TotalCustStyleNo,
                    totalProjectNo3 = result.TotalProjectNo,
                    totalWONO3 = result.TotalWONO,
                    totalQNNO3 = result.TotalQNNO,
                    totalInspector3 = result.TotalInspector,
                    totalFactory3 = result.TotalFactory,
                    totalWorkShop3 = result.TotalWorkShop,
                    totalLine3 = result.TotalLine,
                    totalInspectedQty3 = result.TotalInspectedQty,
                    totalReI");
            WriteLiteral(@"nspectedQty3 = result.TotalReInspectedQty,
                    totalTotalCheckPoint3 = result.TotalTotalCheckPoint,
                    totalReInspectedPercent3 = result.TotalReInspectedPercent,
                    totalInspectionDate3 = result.TotalInspectionDate
            }
        });
        return """";
        //return totalCustomerPO3;
    }
    function CalTotalCustStyleNo3(data) { return totalCustStyleNo3; }
    function CalTotalProjectNo3(data) { return totalProjectNo3; }
    function CalTotalWONO3(data) { return totalWONO3; }
    function CalTotalQNNO3(data) { return totalQNNO3; }
    function CalTotalInspector3(data) { return totalInspector3; }
    function CalTotalFactory3(data) { return totalFactory3; }
    function CalTotalWorkShop3(data) { return totalWorkShop3; }
    function CalTotalLine3(data) { return totalLine3; }
    function CalTotalInspectedQty3(data) { return totalInspectedQty3; }
    function CalTotalReInspectedQty3(data) { return totalReInspectedQty3; }
    functi");
            WriteLiteral(@"on CalTotalTotalCheckPoint3(data) { return totalTotalCheckPoint3; }
    function CalTotalReInspectedPercent3(data) { return totalReInspectedPercent3; }
    function CalTotalInspectionDate3(data) { return totalInspectionDate3; }

    Date.prototype.format = function (fmt) {
        var o = {
            ""M+"": this.getMonth() + 1,               //月份
            ""d+"": this.getDate(),                    //日
            ""h+"": this.getHours(),                   //小时
            ""m+"": this.getMinutes(),                 //分
            ""s+"": this.getSeconds(),                 //秒
            ""q+"": Math.floor((this.getMonth() + 3) / 3), //季度
            ""S"": this.getMilliseconds()             //毫秒
        };
        if (/(y+)/.test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (this.getFullYear() + """").substr(4 - RegExp.$1.length));
        }
        for (var k in o) {
            if (new RegExp(""("" + k + "")"").test(fmt)) {
                fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[");
            WriteLiteral("k]) : ((\"00\" + o[k]).substr((\"\" + o[k]).length)));\r\n            }\r\n        }\r\n        return fmt;\r\n    }\r\n\r\n</script>\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public IViewLocalizer Localizer { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using PH.Platform.Email.BO;
using PH.Platform.BO;


namespace PH.RWO.BO
{
    /// <summary>
    /// Confirm 通知
    /// </summary>
    public class Notify
    {
        public NotifyAction Action { get; set; }
        public string SubjectAdditionStr
        {
            get
            {
                string env = PH.Platform.AuthMgr.BO.Environment.Instance.SysteParameter.Environment;
                return (string.IsNullOrEmpty(env) || env.ToLower() != "live") ? "--- TESTING ONLY ---" : "";
            }
        }
        public string EmailHeaderString
        {
            get
            {
                string env = PH.Platform.AuthMgr.BO.Environment.Instance.SysteParameter.Environment;
                return (string.IsNullOrEmpty(env) || env.ToLower() != "live") ? "--------- TESTING ONLY ---------\n\n" : "";
            }
        }
        //public readonly static Notify Instance = new Notify();
        public bool SendMail(string WorkOrderNo)
        {
            return false;
        }

        /// <summary>
        /// 是否需要發送通知
        /// </summary>
        /// <param name="WorkOrderNO"></param>
        /// <param name="IsWorkOrder"></param>
        /// <param name="Step"></param>
        /// <returns></returns>
        public bool IsNeedNotfity(string WorkOrderNO, bool IsWorkOrder, int Step)
        {
            return true;
        }

        private string TranStringList(IList<string> list)
        {
            string _str = string.Empty;
            foreach (string str in list)
            {
                _str = string.IsNullOrEmpty(_str) ? str : _str + "," + str;
            }
            return _str;
        }

        /// <summary>
        /// 讀取Email模板
        /// </summary>
        /// <returns></returns>
        //private  string WOEmailBody(string company,string salesorderno)
        private string WOEmailBody(WorkOrder wo)
        {
            //PH.RWO.BO.RWOSOPCDataContext context = ContextBuilder.CreateContext<RWOSOPCDataContext>();
            //var workorders = from w in context.WorkOrders
            //                 where w.Company == company && w.SalesOrderNo == salesorderno
            //                 select w;
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {3}\n    WO No: {2} ";
            StringBuilder sb1 = new StringBuilder("");
            //foreach (WorkOrder w in workorders)
            //{
            sb1.Append(string.Format(info, wo.Company, wo.SalesOrderNo, wo.WorkOrderNo, wo.Project.ProjectNo));
            //}
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            sb.Append(string.Format("  The project's workorders had been {1} by {0},Now need you to confirm this project's workorders! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }

        //Xsj20170228:Make up email body by project, collect all workorders in the project.
        private string WOEmailBody(Project p, List<View_WOConfirm> woList)
        {
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {2}\n";
            StringBuilder sb1 = new StringBuilder("");
            sb1.Append(string.Format(info, p.Company, p.SalesOrderNo, p.ProjectNo));
            info = "\n      WO No: {0} ";
            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_WOConfirm c = woList.Find(delegate(View_WOConfirm c1) { return c1.WorkOrderNo == wo.WorkOrderNo; });
                if (c != null)
                {
                    sb1.Append(string.Format(info, wo.WorkOrderNo));
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            sb.Append(string.Format("  The project's workorders had been {1} by {0},Now need you to confirm this project's workorders! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }


        private string WOFWEmailBody(WorkOrder wo)
        {
            string info = "\nSales Order No: [{1}]  Project No: [{3}]\n    WO No: [{2}] ";
            StringBuilder sb1 = new StringBuilder("");
            //foreach (WorkOrder w in workorders)
            //{
            sb1.Append(string.Format(info, wo.Company, wo.SalesOrderNo, wo.WorkOrderNo, wo.Project.ProjectNo));
            //}
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            sb.Append(string.Format("  This WO had been chosen option [{1}] by {0}, Now need you to confirm this WO! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, wo.FWOption));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }

        /// <summary>
        /// 讀取Email模板
        /// </summary>
        /// <returns></returns>
        //private string RWOEmailBody(string company, string salesorderno)
        private string RWOEmailBody(RoundWorkOrder rwo)
        {
            //PH.RWO.BO.RWOSOPCDataContext context = ContextBuilder.CreateContext<RWOSOPCDataContext>();
            //var rwo = from w in context.RoundWorkOrders
            //                 where w.Company == company && w.SalesOrderNo == salesorderno
            //                 orderby w.ColorCode,w.RoundNo
            //                 select w;
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {3}\n    WO: {2}  Color: {4}  RoundNo: {5}";
            StringBuilder sb1 = new StringBuilder("");
            //foreach(RoundWorkOrder r in rwo)
            //{
            sb1.Append(string.Format(info, rwo.Company, rwo.SalesOrderNo, rwo.WorkOrderNo, rwo.WorkOrderColor.WorkOrder.Project.ProjectNo, rwo.ColorCode, rwo.RoundNos));
            //}
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            string s = string.Format("  The project's round work orders had been {1} by {0},Now need you to confirm this project's Round workorders! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action);
            sb.Append(s);
            //sb.Append(string.Format("  The project's round work orders had been confirmed by <b{0}/a>,Now need you to confirm this project's Round workorders! Informations follow here!\n\n", PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }
        private string RWOEmailBody(Project p, List<View_RWOConfirm> rwoList)
        {
            //PH.RWO.BO.RWOSOPCDataContext context = ContextBuilder.CreateContext<RWOSOPCDataContext>();
            //var rwo = from w in context.RoundWorkOrders
            //                 where w.Company == company && w.SalesOrderNo == salesorderno
            //                 orderby w.ColorCode,w.RoundNo
            //                 select w;
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {2}\n";
            StringBuilder sb1 = new StringBuilder("");
            sb1.Append(string.Format(info, p.Company, p.SalesOrderNo, p.ProjectNo));
            info = "\n      WO No: {0}  Color: {1}  RoundNo: {2}";
            foreach (WorkOrder wo in p.WorkOrders)
            {
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        View_RWOConfirm c = rwoList.Find(delegate(View_RWOConfirm c1)
                        {
                            return c1.WorkOrderNo == r.WorkOrderNo && c1.ColorCode == r.ColorCode && c1.RoundNo == r.RoundNo;
                        });
                        if (c != null)
                        {
                            sb1.Append(string.Format(info, r.WorkOrderNo, r.ColorCode, r.RoundNos));
                        }
                    }
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            string s = string.Format("  The project's round work orders had been {1} by {0},Now need you to confirm this project's Round workorders! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action);
            sb.Append(s);
            //sb.Append(string.Format("  The project's round work orders had been confirmed by <b{0}/a>,Now need you to confirm this project's Round workorders! Informations follow here!\n\n", PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }
        private string RWOFWEmailBody(WorkOrderColor woc)
        {
            string info = "\nSales Order No: [{1}]  Project No: [{3}]   WO: [{2}]   WOc: [{4}]";
            StringBuilder sb1 = new StringBuilder("");

            sb1.Append(string.Format(info, woc.Company, woc.SalesOrderNo, woc.WorkOrderNo, woc.WorkOrder.Project.ProjectNo, woc.ColorCode));

            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            sb.Append(string.Format("  These Cop WO had been chosen option by {0}, Now need you to confirm these Cop WO! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            foreach (RoundWorkOrder rwo in woc.RoundWorkOrders)
            {
                sb.Append(string.Format("\n      Cop WO#: {0}, Chosen Option: {1}", rwo.RoundNos, rwo.FWOption));
            }
            sb.Append("\n\nThanks!");
            sb.Append("\nThis mail is generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }

        private string RWOIIEmailBody(RoundWorkOrderII rwo2)
        {
            //PH.RWO.BO.RWOSOPCDataContext context = ContextBuilder.CreateContext<RWOSOPCDataContext>();
            //var rwo = from w in context.RoundWorkOrders
            //                 where w.Company == company && w.SalesOrderNo == salesorderno
            //                 orderby w.ColorCode,w.RoundNo
            //                 select w;
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {3}\n    WO No: {2}  Color: {4}  RoundNo: {5}";
            StringBuilder sb1 = new StringBuilder("");
            //foreach(RoundWorkOrder r in rwo)
            //{
            sb1.Append(string.Format(info, rwo2.Company, rwo2.SalesOrderNo, rwo2.WorkOrderNo, rwo2.RoundWorkOrder.WorkOrderColor.WorkOrder.Project.ProjectNo, rwo2.ColorCode, rwo2.RoundNos));
            //}
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            string s = string.Format("  The project's Cop WO Phase II had been {1} by {0},Now need you to confirm this project's Cop WO Phase II! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action);
            sb.Append(s);
            //sb.Append(string.Format("  The project's round work orders had been confirmed by <b{0}/a>,Now need you to confirm this project's Round workorders! Informations follow here!\n\n", PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }
        private string RWOIIEmailBody(Project p, List<View_RWOIIConfirm> rwoList)
        {
            //PH.RWO.BO.RWOSOPCDataContext context = ContextBuilder.CreateContext<RWOSOPCDataContext>();
            //var rwo = from w in context.RoundWorkOrders
            //                 where w.Company == company && w.SalesOrderNo == salesorderno
            //                 orderby w.ColorCode,w.RoundNo
            //                 select w;
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {2}\n";
            StringBuilder sb1 = new StringBuilder("");
            sb1.Append(string.Format(info, p.Company, p.SalesOrderNo, p.ProjectNo));
            info = "\n      WO No: {0}  Color: {1}  RoundNo: {2}";
            foreach (WorkOrder wo in p.WorkOrders)
            {
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        foreach (RoundWorkOrderII r2 in r.RoundWorkOrderIIs)
                        {
                            View_RWOIIConfirm c = rwoList.Find(delegate(View_RWOIIConfirm c1)
                            {
                                return c1.WorkOrderNo == r2.WorkOrderNo && c1.ColorCode == r2.ColorCode && c1.RoundNo == r2.RoundNo;
                            });
                            if (c != null)
                            {
                                sb1.Append(string.Format(info, r2.WorkOrderNo, r2.ColorCode, r2.RoundNos));
                            }
                        }

                    }
                }
            }
            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            string s = string.Format("  The project's round work orders had been {1} by {0},Now need you to confirm this project's Round workorder Phase II! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action);
            sb.Append(s);
            //sb.Append(string.Format("  The project's round work orders had been confirmed by <b{0}/a>,Now need you to confirm this project's Round workorders! Informations follow here!\n\n", PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }
        private string RWOIIEmailBody(View_RWOIIConfirm v)
        {
            string info = "\nCompany: {0}   Sales Order No: {1}  ProjectNo: {2}\n";
            StringBuilder sb1 = new StringBuilder("");
            sb1.Append(string.Format(info, v.Company, v.SalesOrderNo, v.ProjectNo));
            info = "\n      WO No: {0}  Color: {1}  RoundNo: {2}";

            sb1.Append(string.Format(info, v.WorkOrderNo, v.ColorCode, v.RWO));

            StringBuilder sb = new StringBuilder();
            sb.Append(this.EmailHeaderString);
            sb.Append("Dear ALL:\n\n");
            string s = string.Format("  The project's round work orders had been {1} by {0},Now need you to confirm this project's Round workorder Phase II! Informations follow here!\n\n",
                PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName, Action);
            sb.Append(s);
            //sb.Append(string.Format("  The project's round work orders had been confirmed by <b{0}/a>,Now need you to confirm this project's Round workorders! Informations follow here!\n\n", PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName));
            sb.Append(sb1.ToString());
            sb.Append("\n\nTks!");
            sb.Append("\nThis is mail generated by system,please don't reply to this mail directly!\n系統自動發送,請勿回復!");
            return sb.ToString();
        }


        /// <summary>
        /// 發送郵件
        /// </summary>
        /// <param name="emailbody">郵件體</param>
        /// <param name="to">TO</param>
        /// <param name="cc">CC</param>
        /// <returns></returns>
        private bool SendMail(string emailbody, string to, string cc)
        {
            //string from = "rayjiang@phgmt.com.hk";
            //string stmp = "svphhk01.phgmt.com.hk";
            //int port = 25;
            string subject = string.Format("Round work orders need you to  {0},pls check", Action);
            //PH.Platform.Email.BO.NoteMailHelper notehelper = new NoteMailHelper("", to, cc, "", subject, emailbody, "", "", "", false);
            //PH.Platform.Email.BO.NoteMailHelper notehelper = new NoteMailHelper("jiang", to, cc, "", subject, emailbody, "", "", @"mail\rayjiang.nsf", false);
            //return notehelper.SendMail();

            string MailTo = string.IsNullOrEmpty(to) ? "" : to.Replace(" ", "");  //多個郵件中間有空格時，發郵件不成功
            string Mailcc = string.IsNullOrEmpty(cc) ? "" : cc.Replace(" ", "");
            MailHelper mail = new MailHelper("WOAdministrator@phgmt.com.hk", "woadmin", MailTo, Mailcc, "", subject, emailbody, "", "svphhk01.phgmt.com.hk", 25, false);
            return mail.SendMail();

            //string MailTo = string.IsNullOrEmpty(to) ? "" : to.Replace(" ", "");  //多個郵件中間有空格時，發郵件不成功
            //string Mailcc = string.IsNullOrEmpty(cc) ? "" : cc.Replace(" ", "");

            //MailHelper mail = new MailHelper("PH_PDN@phgmt.com.hk", "phpdn", MailTo, Mailcc, "", "", emailbody, "", "svphhk01.phgmt.com.hk", 25);
            ////mail.IsBodyHtml = true;
            //return mail.SendMail("RAA");

        }

        public bool SendMail(string emailbody, string to, string cc, string subject)
        {
            ////string from = "rayjiang@phgmt.com.hk";
            ////string stmp = "svphhk01.phgmt.com.hk";
            ////int port = 25;
            ////string subject = "Round work orders need you to  confirm,pls check";
            //PH.Platform.Email.BO.NoteMailHelper notehelper = new NoteMailHelper("", to, cc, "", subject, emailbody, "", "", "", false);
            ////PH.Platform.Email.BO.NoteMailHelper notehelper = new NoteMailHelper("jiang", to, cc, "", subject, emailbody, "", "", @"mail\rayjiang.nsf", false);
            //bool bOK = notehelper.SendMail();
            //return bOK;



            string MailTo = string.IsNullOrEmpty(to) ? "" : to.Replace(" ", "");  //多個郵件中間有空格時，發郵件不成功
            string Mailcc = string.IsNullOrEmpty(cc) ? "" : cc.Replace(" ", "");

            MailHelper mail = new MailHelper("WOAdministrator@phgmt.com.hk", "woadmin", MailTo, Mailcc, "", subject, emailbody, "", "svphhk01.phgmt.com.hk", 25, false);
            //mail.IsBodyHtml = true;
            return mail.SendMail("WO Administrator");

            //string MailTo = string.IsNullOrEmpty(to) ? "" : to.Replace(" ", "");  //多個郵件中間有空格時，發郵件不成功
            //string Mailcc = string.IsNullOrEmpty(cc) ? "" : cc.Replace(" ", "");

            //MailHelper mail = new MailHelper("PH_PDN@phgmt.com.hk",  "phpdn", MailTo, Mailcc, "", subject, emailbody, "", "svphhk01.phgmt.com.hk", 25);
            ////mail.IsBodyHtml = true;
            //return mail.SendMail("RAA");
        }
        /// <summary>
        /// 發送郵件
        /// </summary>
        /// <param name="wo">輪制單</param>
        /// <returns></returns>
        public bool WOSendMail(WorkOrder wo, int current)
        {
            string emailBody = WOEmailBody(wo);
            string customer = wo.Project.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, current, 1, false);
            string env = PH.Platform.AuthMgr.BO.Environment.Instance.SysteParameter.Environment;
            // string subject = env == "UAT" ? "Test confirm WO" : "Work orders need you to confirm,pls check";
            string subject = string.Format("WO need you to {3} for Fty {2}, Project {0}, WO No. {1}", wo.ProjectNo, wo.WorkOrderNo, wo.Factory, Action);
            //if (!string.IsNullOrEmpty(flow.SendTo))
            {
                return SendMail(emailBody, flow.SendTo, flow.CC, subject);
            }
            //return false;
        }

        //Xsj20170228:(Addition) Send confirm email.
        public bool WOSendMail(Project p, int current, List<View_WOConfirm> woList)
        {
            string emailBody = WOEmailBody(p, woList);
            //Xsj:get confirm email address.
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(p.CustomerCode, p.Factory, current, 1, false);
            string subject = string.Format("WO(s) need you to {2} for Fty {1}, Project {0}, WO NO. ", p.ProjectNo, p.Factory, Action);

            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_WOConfirm c = woList.Find(delegate(View_WOConfirm c1) { return c1.WorkOrderNo == wo.WorkOrderNo; });
                if (c != null)
                {
                    subject = string.Format("{0}{1}/", subject, wo.WorkOrderNo);
                }

            }
            //Work orders need you to  confirm for Project SARA1543, Work Order No. W050001/W05002/W05003

            if (subject.EndsWith("/"))
                subject = subject.Substring(0, subject.Length - 1);
            return SendMail(emailBody, flow.SendTo, flow.CC, subject);
        }


        //Xsj20170228:(Addition) Send reject email.
        public bool WORejectSendMail(Project p, int current, List<View_WOConfirm> woList)
        {
            string emailBody = WOEmailBody(p, woList);
            View_RejectWorkFlow flow = (new DataHelper()).GetRejectWorkFlow(p.CustomerCode, p.Factory, current, 1, false);
            string subject = string.Format("WO(s) need you to revise for Fty {1}, Project {0}, WO No. ", p.ProjectNo, p.Factory);
            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_WOConfirm c = woList.Find(delegate(View_WOConfirm c1) { return c1.WorkOrderNo == wo.WorkOrderNo; });
                if (c != null)
                {
                    subject = string.Format("{0}{1}/", subject, wo.WorkOrderNo);
                }
            }
            //Work orders need you to  confirm for Project SARA1543, Work Order No. W050001/W05002/W05003

            if (subject.EndsWith("/"))
                subject = subject.Substring(0, subject.Length - 1);
            return SendMail(emailBody, flow.SendTo, flow.CC, subject);
        }

        public bool WOFWSendMail(WorkOrder wo)
        {
            string emailBody = WOFWEmailBody(wo);
            string customer = wo.Project.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, 0, 1, false);
            string env = PH.Platform.AuthMgr.BO.Environment.Instance.SysteParameter.Environment;
            // string subject = env == "UAT" ? "Test confirm WO" : "Work orders need you to confirm,pls check";
            string subject = string.Format("WO has been chosen option [{3}], need you to confirm for Fty {2}, Project {0}, WO No. {1}", wo.ProjectNo, wo.WorkOrderNo, wo.Factory, wo.FWOption);
            //if (!string.IsNullOrEmpty(flow.SendTo))
            string sender = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            string sendto = flow.CC;
            string cc = "";
            if (!flow.Users.Contains(sender))
            {
                cc = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.Email;
            }
            return SendMail(emailBody, sendto, cc, subject);
            //return false;
        }

        /// <summary>
        /// 發送郵件
        /// </summary>
        /// <param name="rwo">輪制單</param>
        /// <returns></returns>
        public bool RWOSendMail(RoundWorkOrder rwo, int current)
        {
            WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOEmailBody(rwo);
            string customer = wo.Project.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, rwo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, current, 1, true);
            string subject = string.Format("Cop WO need you to confirm for Fty {3}, Project {0}, Cop WO No. {1}-{2}", rwo.ProjectNo, rwo.WorkOrderNo, rwo.RoundNos, rwo.Factory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWOSendMail(Project p, int current, List<View_RWOConfirm> rwoList)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOEmailBody(p, rwoList);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(p.CustomerCode, p.Factory, current, 1, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            //string subject = string.Format("RWO(s) need you to confirm for Fty {1}, Project {0}, RWO No. ", p.ProjectNo, p.Factory);
            string subject = string.Format("Cop WO(s) need you to confirm for Fty {1}, Project {0}, Cop Wo No. ", p.ProjectNo, p.Factory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_RWOConfirm cc = rwoList.Find(delegate(View_RWOConfirm c1)
                {
                    return c1.WorkOrderNo == wo.WorkOrderNo;
                });
                if (cc == null) continue;

                subject = string.Format("{0}{1}-", subject, wo.WorkOrderNo);
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        View_RWOConfirm c = rwoList.Find(delegate(View_RWOConfirm c1)
                        {
                            return c1.WorkOrderNo == r.WorkOrderNo && c1.ColorCode == r.ColorCode && c1.RoundNo == r.RoundNo;
                        });
                        if (c != null)
                        {
                            subject = string.Format("{0}{1},", subject, r.RoundNos);
                        }
                    }
                }
                if (subject.EndsWith(","))
                    subject = subject.Substring(0, subject.Length - 1);
                subject += "; ";
            }
            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWORejectSendMail(Project p, int current, List<View_RWOConfirm> rwoList)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOEmailBody(p, rwoList);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_RejectWorkFlow flow = (new DataHelper()).GetRejectWorkFlow(p.CustomerCode, p.Factory, current, 1, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            string subject = string.Format("Cop WO(s) need you to revise for Fty {1}, Project {0}, Cop WO No. ", p.ProjectNo, p.Factory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_RWOConfirm cc = rwoList.Find(delegate(View_RWOConfirm c1)
                {
                    return c1.WorkOrderNo == wo.WorkOrderNo;
                });
                if (cc == null) continue;

                subject = string.Format("{0}{1}-", subject, wo.WorkOrderNo);
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        View_RWOConfirm c = rwoList.Find(delegate(View_RWOConfirm c1)
                        {
                            return c1.WorkOrderNo == r.WorkOrderNo && c1.ColorCode == r.ColorCode && c1.RoundNo == r.RoundNo;
                        });
                        if (c != null)
                        {
                            subject = string.Format("{0}{1},", subject, r.RoundNos);
                        }
                    }
                }
                if (subject.EndsWith(","))
                    subject = subject.Substring(0, subject.Length - 1);
                subject += "; ";
            }
            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }

        public bool RWOFWSendMail(WorkOrderColor woc)
        {
            string emailBody = RWOFWEmailBody(woc);
            string customer = woc.WorkOrder.Project.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(customer, woc.Factory, 0, 1, true);
            string env = PH.Platform.AuthMgr.BO.Environment.Instance.SysteParameter.Environment;
            //string subject = env == "UAT" ? "Test confirm WO" : "Work orders need you to confirm,pls check";
            string subject = string.Format("{4} Cop WO(s) has been chosen option, need you to confirm for Fty {2}, Project {0}, WO {1}, WOc {3}", woc.ProjectNo, woc.WorkOrderNo, woc.Factory, woc.ColorCode, this.SubjectAdditionStr);
            //if (!string.IsNullOrEmpty(flow.SendTo))
            string sender = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            string sendto = flow.CC;
            string cc = "";
            if (!flow.Users.Contains(sender))
            {
                cc = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.Email;
            }
            return SendMail(emailBody, sendto, cc, subject);
            //return false;
        }
        public bool RWOIISendMail(RoundWorkOrderII rwo2, int current)
        {
            WorkOrder wo = rwo2.RoundWorkOrder.WorkOrderColor.WorkOrder;
            string emailBody = RWOIIEmailBody(rwo2);
            string customer = wo.Project.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, rwo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, current, 2, true);
            string subject = string.Format("Cop WO Phase II need you to confirm for Fty {3}, Project {0}, Cop WO No. {1}-{2}", rwo2.ProjectNo, rwo2.WorkOrderNo, rwo2.RoundNos, rwo2.SubFactory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWOIISendMail(Project p, int current, List<View_RWOIIConfirm> rwoList)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOIIEmailBody(p, rwoList);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(p.CustomerCode, p.Factory, current, 2, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            string subject = string.Format("Cop WO Phase II(s) need you to confirm for Fty {1}, Project {0}, Cop WO No. ", p.ProjectNo, p.Factory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_RWOIIConfirm cc = rwoList.Find(delegate(View_RWOIIConfirm c1)
                {
                    return c1.WorkOrderNo == wo.WorkOrderNo;
                });
                if (cc == null) continue;

                subject = string.Format("{0}{1}-", subject, wo.WorkOrderNo);
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        foreach (RoundWorkOrderII r2 in r.RoundWorkOrderIIs)
                        {
                            View_RWOIIConfirm c = rwoList.Find(delegate(View_RWOIIConfirm c1)
                            {
                                return c1.WorkOrderNo == r2.WorkOrderNo && c1.ColorCode == r2.ColorCode && c1.RoundNo == r2.RoundNo;
                            });
                            if (c != null)
                            {
                                subject = string.Format("{0}{1},", subject, r2.RoundNos);
                            }
                        }
                    }
                }
                if (subject.EndsWith(","))
                    subject = subject.Substring(0, subject.Length - 1);
                subject += "; ";
            }
            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWOIISendMail(View_RWOIIConfirm v, int current)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOIIEmailBody(v);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(v.CustomerCode, v.SubFactory, current, 2, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            string subject = string.Format("Cop WO Phase II need you to confirm for Fty {1}, Project {0}, Cop WO No. ", v.ProjectNo, v.SubFactory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......


            subject = string.Format("{0}{1}-", subject, v.WorkOrderNo);

            subject = string.Format("{0}{1},", subject, v.RWO);

            if (subject.EndsWith(","))
                subject = subject.Substring(0, subject.Length - 1);
            subject += "; ";

            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWOIIRejectSendMail(Project p, int current, List<View_RWOIIConfirm> rwoList)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOIIEmailBody(p, rwoList);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_RejectWorkFlow flow = (new DataHelper()).GetRejectWorkFlow(p.CustomerCode, p.Factory, current, 2, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            string subject = string.Format("Cop WO Phase II(s) need you to revise for Fty {1}, Project {0}, Cop WO No. ", p.ProjectNo, p.Factory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......

            foreach (WorkOrder wo in p.WorkOrders)
            {
                View_RWOIIConfirm cc = rwoList.Find(delegate(View_RWOIIConfirm c1)
                {
                    return c1.WorkOrderNo == wo.WorkOrderNo;
                });
                if (cc == null) continue;

                subject = string.Format("{0}{1}-", subject, wo.WorkOrderNo);
                foreach (WorkOrderColor woc in wo.WorkOrderColors)
                {
                    foreach (RoundWorkOrder r in woc.RoundWorkOrders)
                    {
                        foreach (RoundWorkOrderII r2 in r.RoundWorkOrderIIs)
                        {
                            View_RWOIIConfirm c = rwoList.Find(delegate(View_RWOIIConfirm c1)
                            {
                                return c1.WorkOrderNo == r2.WorkOrderNo && c1.ColorCode == r2.ColorCode && c1.RoundNo == r2.RoundNo;
                            });
                            if (c != null)
                            {
                                subject = string.Format("{0}{1},", subject, r2.RoundNos);
                            }
                        }
                    }
                }
                if (subject.EndsWith(","))
                    subject = subject.Substring(0, subject.Length - 1);
                subject += "; ";
            }
            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }
        public bool RWOIIRejectSendMail(View_RWOIIConfirm v, int current)
        {
            //WorkOrder wo = rwo.WorkOrderColor.WorkOrder;
            string emailBody = RWOIIEmailBody(v);
            //string customer = p.CustomerCode;
            //View_ConfirmWorkFlow flow = (new DataHelper()).GetConfirmWorkFlow(wo.Project.CustomerCode, wo.Project.Factory, wo.CurrentIndex);
            View_RejectWorkFlow flow = (new DataHelper()).GetRejectWorkFlow(v.CustomerCode, v.SubFactory, current, 2, true);
            //string subject = "Round work orders need you to  confirm,pls check";
            string subject = string.Format("Cop WO Phase II(s) need you to revise for Fty {1}, Project {0}, Cop WO No. ", v.ProjectNo, v.SubFactory);
            //Round Work orders need you to  confirm for Project SARA1543, RWO No. W050001-1/3, 2/3, 3/3 /W05002-1/2, 2/2 /W05003-1/4, 2/4, 3/4, 4/4 ,.......


            subject = string.Format("{0}{1}-", subject, v.WorkOrderNo);

            subject = string.Format("{0}{1},", subject, v.RWO);

            if (subject.EndsWith(","))
                subject = subject.Substring(0, subject.Length - 1);
            subject += "; ";

            bool bOK = SendMail(emailBody, flow.SendTo, flow.CC, subject);
            return bOK;

        }


        //Xsj2017228:(Addition) 
        public bool Confirm(WorkOrder wo)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            //Xsj20170228:In the confirm following, It just get the project's factory to fetch the confirm users.
            //Noting: It cann't contain the same people in different step.
            RWOSOPCDataContext context = (wo.CurrentDataContext as RWOSOPCDataContext);
            Right r = context.Rights.Where(r1 => wo.Project.CustomerCode == r1.CustomerCode
                                              && wo.Project.Factory == r1.Factory
                                              && r1.Phase == 1
                                              && (r1.IsRWO) == false
                                              && r1.Users.ToLower().IndexOf(UserId.ToLower()) > -1).FirstOrDefault();
            //Xsj:Remeber current confirm step.The confirm follow just has 3 Step.
            int current = (r.Current ?? -1);
            if (current < 0 || current > 3)
                return false;

            string sSet = "";
            switch (current)
            {
                case 0:
                    if (string.IsNullOrEmpty(wo.OAConfirm))
                    {
                        wo.OAConfirm = UserId;
                        wo.OAConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.OAConfirm='{0}',a.OAConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 1:
                    if (string.IsNullOrEmpty(wo.PPCConfirm))
                    {
                        wo.PPCConfirm = UserId;
                        wo.PPCConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.PPCConfirm='{0}',a.PPCConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 2:
                    if (string.IsNullOrEmpty(wo.TopConfirm))
                    {
                        wo.TopConfirm = UserId;
                        wo.TopConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.TopConfirm='{0}',a.TopConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 3:
                    if (string.IsNullOrEmpty(wo.HeaderConfirm))
                    {
                        wo.HeaderConfirm = UserId;
                        wo.HeaderConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.HeaderConfirm='{0}',a.HeaderConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                default:
                    break;
            }
            wo.ActionStatus = (int)WOActionStatus.Confirm; //-1: Reject 0: Hold  1:Confirm
            wo.ActionStatusDate = DateTime.Now;
            wo.UpdateDate = DateTime.Now;

            sSet += string.Format("{3}a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}',a.UpdateDate='{2:yyyy/MM/dd HH:mm:ss}'",
                (int)WOActionStatus.Confirm, System.DateTime.Now, System.DateTime.Now, string.IsNullOrEmpty(sSet) ? "" : ",");
            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.WorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}'", sSet, wo.SalesOrderNo, wo.WorkOrderNo);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", wo.ProjectNo, wo.WorkOrderNo);
            ActionLog(context, this.Action, infor, "WO");

            return true;
        }
        public bool Confirm(RoundWorkOrder rwo)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            RWOSOPCDataContext context = (rwo.CurrentDataContext as RWOSOPCDataContext);
            //if (context == null)
            //    context = ContextBuilder.CreateContext<RWOSOPCDataContext>();

            Right r = context.Rights.Where(r1 => rwo.WorkOrderColor.WorkOrder.Project.CustomerCode == r1.CustomerCode && r1.Phase == 1 && rwo.WorkOrderColor.WorkOrder.Project.Factory == r1.Factory && r1.Users.ToLower().IndexOf(UserId.ToLower()) > -1).FirstOrDefault();
            int current = (r.Current ?? -1);
            if (current < 0 || current > 3)
                return false;

            string sSet = "";
            switch (current)
            {
                case 0:
                    if (string.IsNullOrEmpty(rwo.OAConfirm))
                    {
                        rwo.OAConfirm = UserId;
                        rwo.OAConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.OAConfirm='{0}',a.OAConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 1:
                    if (string.IsNullOrEmpty(rwo.PPCConfirm))
                    {
                        rwo.PPCConfirm = UserId;
                        rwo.PPCConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.PPCConfirm='{0}',a.PPCConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 2:
                    if (string.IsNullOrEmpty(rwo.TopConfirm))
                    {
                        rwo.TopConfirm = UserId;
                        rwo.TopConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.TopConfirm='{0}',a.TopConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 3:
                    if (string.IsNullOrEmpty(rwo.HeaderConfirm))
                    {
                        rwo.HeaderConfirm = UserId;
                        rwo.HeaderConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.HeaderConfirm='{0}',a.HeaderConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                default:
                    break;
            }
            rwo.ActionStatus = (int)WOActionStatus.Confirm; //-1: Reject 0: Hold  1:Confirm
            rwo.ActionStatusDate = DateTime.Now;
            rwo.WOReviseDate = DateTime.Now;
            rwo.AmendDate = DateTime.Now;
            //rwo.WorkOrderColor.WorkOrder.UpdateDate = DateTime.Now;
            sSet += string.Format("{4}a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}',a.WOReviseDate='{2:yyyy/MM/dd HH:mm:ss}',a.AmendDate='{3:yyyy/MM/dd HH:mm:ss}'",
                (int)WOActionStatus.Confirm, System.DateTime.Now, System.DateTime.Now, System.DateTime.Now, string.IsNullOrEmpty(sSet) ? "" : ",");

            //if (rwo.CurrentDataContext != null)
            //    rwo.CurrentDataContext.SubmitChanges();
            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4}",
                sSet, rwo.SalesOrderNo, rwo.WorkOrderNo, rwo.ColorCode, rwo.RoundNo);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo.ProjectNo, rwo.RoNo);
            ActionLog(context, this.Action, infor, "RWO");

            return true;
            //rwo.WorkOrderColor.WorkOrder.CurrentDataContext = rwo.CurrentDataContext;
            //if (IfNeedSendMail(rwo))
            //{
            //    RWOSendMail(rwo);
            //}
        }
        public bool Confirm(RoundWorkOrderII rwo2)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            RWOSOPCDataContext context = (rwo2.CurrentDataContext as RWOSOPCDataContext);
            //if (context == null)
            //    context = ContextBuilder.CreateContext<RWOSOPCDataContext>();

            Right r = context.Rights.Where(r1 => rwo2.RoundWorkOrder.WorkOrderColor.WorkOrder.Project.CustomerCode == r1.CustomerCode
                && rwo2.SubFactory == r1.Factory && r1.Phase == 2
                && r1.Users.ToLower().IndexOf(UserId.ToLower()) > -1).FirstOrDefault();
            int current = (r.Current ?? -1);
            if (current < 0 || current > 3)
                return false;

            string sSet = "";
            switch (current)
            {
                case 0:
                    if (string.IsNullOrEmpty(rwo2.OAConfirm))
                    {
                        rwo2.OAConfirm = UserId;
                        rwo2.OAConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.OAConfirm='{0}',a.OAConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 1:
                    if (string.IsNullOrEmpty(rwo2.PPCConfirm))
                    {
                        rwo2.PPCConfirm = UserId;
                        rwo2.PPCConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.PPCConfirm='{0}',a.PPCConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 2:
                    if (string.IsNullOrEmpty(rwo2.TopConfirm))
                    {
                        rwo2.TopConfirm = UserId;
                        rwo2.TopConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.TopConfirm='{0}',a.TopConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                case 3:
                    if (string.IsNullOrEmpty(rwo2.HeaderConfirm))
                    {
                        rwo2.HeaderConfirm = UserId;
                        rwo2.HeaderConfirmDate = System.DateTime.Now;
                        sSet += string.Format("a.HeaderConfirm='{0}',a.HeaderConfirmDate='{1:yyyy/MM/dd HH:mm:ss}'", UserId, System.DateTime.Now);
                    }
                    break;
                default:
                    break;
            }
            rwo2.ActionStatus = (int)WOActionStatus.Confirm; //-1: Reject 0: Hold  1:Confirm
            rwo2.ActionStatusDate = DateTime.Now;
            rwo2.WOReviseDate = DateTime.Now;
            rwo2.AmendDate = DateTime.Now;
            //rwo.WorkOrderColor.WorkOrder.UpdateDate = DateTime.Now;
            sSet += string.Format("{4}a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}',a.WOReviseDate='{2:yyyy/MM/dd HH:mm:ss}',a.AmendDate='{3:yyyy/MM/dd HH:mm:ss}'",
                (int)WOActionStatus.Confirm, System.DateTime.Now, System.DateTime.Now, System.DateTime.Now, string.IsNullOrEmpty(sSet) ? "" : ",");
            //if (rwo.CurrentDataContext != null)
            //    rwo.CurrentDataContext.SubmitChanges();
            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrderII a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4} and a.SubFactory='{5}'",
                sSet, rwo2.SalesOrderNo, rwo2.WorkOrderNo, rwo2.ColorCode, rwo2.RoundNo, rwo2.SubFactory);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo2.ProjectNo, rwo2.RoNo);
            ActionLog(context, this.Action, infor, "RWO2");

            return true;
        }


        //Xsj20170228:Record reject information.
        public bool Reject(WorkOrder wo)
        {
            wo.ActionStatus = (int)WOActionStatus.Reject; //-1: Reject 0: Hold  1:Confirm
            wo.ActionStatusDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Reject, System.DateTime.Now);

            if (wo.CurrentDataContext != null)
                wo.CurrentDataContext.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.WorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}'",
                sSet, wo.SalesOrderNo, wo.WorkOrderNo);
            wo.CurrentDataContext.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", wo.ProjectNo, wo.WorkOrderNo);
            ActionLog(wo.CurrentDataContext, this.Action, infor, "WO");

            return true;
        }

        /// <summary>
        /// Reject Round Work Order
        /// </summary>
        /// <param name="rwo"></param>
        public bool Reject(RoundWorkOrder rwo)
        {
            //string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            //if (!string.IsNullOrEmpty(rwo.HeaderConfirm))
            //{
            //    rwo.HeaderConfirm = null;
            //    rwo.HeaderConfirmDate = null;
            //    //return;
            //}
            //else if (!string.IsNullOrEmpty(rwo.TopConfirm))
            //{
            //    rwo.TopConfirm = null;
            //    rwo.TopConfirmDate = null;
            //    //return;
            //}
            //else if (!string.IsNullOrEmpty(rwo.PPCConfirm))
            //{
            //    rwo.PPCConfirm = null;
            //    rwo.PPCConfirmDate = null;
            //    //return;

            //}
            //if (!string.IsNullOrEmpty(rwo.OAConfirm))
            //{
            //    rwo.OAConfirm = null;
            //    rwo.OAConfirmDate = null;
            //    //return;
            //}
            rwo.ActionStatus = (int)WOActionStatus.Reject; //-1: Reject 0: Hold  1:Confirm
            rwo.ActionStatusDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Reject, System.DateTime.Now);
            //rwo.WOReviseDate = DateTime.Now;
            //rwo.AmendDate = DateTime.Now;
            if (rwo.CurrentDataContext != null)
                rwo.CurrentDataContext.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4}",
                sSet, rwo.SalesOrderNo, rwo.WorkOrderNo, rwo.ColorCode, rwo.RoundNo);
            rwo.CurrentDataContext.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo.ProjectNo, rwo.RoNo);
            ActionLog(rwo.CurrentDataContext, this.Action, infor, "RWO");

            return true;
        }
        /// <summary>
        /// Reject Work Order
        /// </summary>
        /// <param name="wo"></param>
        public bool Reject(RoundWorkOrderII rwo2)
        {
            rwo2.ActionStatus = (int)WOActionStatus.Reject; //-1: Reject 0: Hold  1:Confirm
            rwo2.ActionStatusDate = DateTime.Now;
            //wo.UpdateDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Reject, System.DateTime.Now);

            if (rwo2.CurrentDataContext != null)
                rwo2.CurrentDataContext.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrderII a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4} and a.SubFactory='{5}'",
                sSet, rwo2.SalesOrderNo, rwo2.WorkOrderNo, rwo2.ColorCode, rwo2.RoundNo, rwo2.SubFactory);
            rwo2.CurrentDataContext.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo2.ProjectNo, rwo2.RoNo);
            ActionLog(rwo2.CurrentDataContext, this.Action, infor, "RWO2");

            return true;
        }


        //Xsj20170228:Record hold message.
        public bool Hold(WorkOrder wo)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            RWOSOPCDataContext context = (wo.CurrentDataContext as RWOSOPCDataContext);

            wo.ActionStatus = (int)WOActionStatus.Hold; //-1: Reject 0: Hold  1:Confirm
            wo.ActionStatusDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Hold, System.DateTime.Now);

            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.WorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}'",
                sSet, wo.SalesOrderNo, wo.WorkOrderNo);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", wo.ProjectNo, wo.WorkOrderNo);
            ActionLog(context, this.Action, infor, "WO");

            return true;
        }
        public bool Hold(RoundWorkOrder rwo)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            RWOSOPCDataContext context = (rwo.CurrentDataContext as RWOSOPCDataContext);
            //if (context == null)
            //    context = ContextBuilder.CreateContext<RWOSOPCDataContext>();

            rwo.ActionStatus = (int)WOActionStatus.Hold; //-1: Reject 0: Hold  1:Confirm
            rwo.ActionStatusDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Hold, System.DateTime.Now);

            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrder a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4}",
                sSet, rwo.SalesOrderNo, rwo.WorkOrderNo, rwo.ColorCode, rwo.RoundNo);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo.ProjectNo, rwo.RoNo);
            ActionLog(context, this.Action, infor, "RWO");

            return true;
        }
        public bool Hold(RoundWorkOrderII rwo2)
        {
            string UserId = PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserID;
            RWOSOPCDataContext context = (rwo2.CurrentDataContext as RWOSOPCDataContext);
            //if (context == null)
            //    context = ContextBuilder.CreateContext<RWOSOPCDataContext>();

            rwo2.ActionStatus = (int)WOActionStatus.Hold; //-1: Reject 0: Hold  1:Confirm
            rwo2.ActionStatusDate = DateTime.Now;
            string sSet = string.Format("a.ActionStatus={0},a.ActionStatusDate='{1:yyyy/MM/dd HH:mm:ss}'",
                 (int)WOActionStatus.Hold, System.DateTime.Now);

            if (context != null)
                context.SubmitChanges();

            string sql = string.Format("update a set {0} from [PH.RWO1].dbo.RoundWorkOrderII a where a.SalesOrderNo='{1}' and a.WorkOrderNo='{2}' and a.ColorCode='{3}' and a.RoundNo={4} and a.SubFactory='{5}'",
                sSet, rwo2.SalesOrderNo, rwo2.WorkOrderNo, rwo2.ColorCode, rwo2.RoundNo, rwo2.SubFactory);
            context.ExecuteNonQuery(sql);

            string infor = string.Format("{0}, {1}", rwo2.ProjectNo, rwo2.RoNo);
            ActionLog(context, this.Action, infor, "RWO2");

            return true;
        }

        public bool IfNeedSendMail(WorkOrder wo)
        {
            return (wo.CurrentDataContext as RWOSOPCDataContext).fn_IsWONeedSendNotify(wo.WorkOrderNo, wo.CurrentIndex) == 1;
        }
        public bool IfNeedSendMail(RoundWorkOrder rwo)
        {
            return (rwo.CurrentDataContext as RWOSOPCDataContext).fn_IsRWONeedSendNotify(rwo.WorkOrderNo, rwo.CurrentIndex) == 1;
        }


        //log
        private void ActionLog(System.Data.Linq.DataContext context, NotifyAction action, string infor, string type)
        {
            try
            {
                string sql = string.Format("insert into [PH.RWO1].dbo.ActionLog (ActionDate,ActionType,ActionInfor,ActionUser) values ('{0:yyyy/MM/dd HH:mm:ss}','{1}-{2}','{3}','{4}')",
                      DateTime.Now, action, type, infor, PH.Platform.AuthMgr.BO.Environment.Instance.CurrentUser.UserName);
                context.ExecuteNonQuery(sql);
            }
            catch
            { }
        }
    }

    public enum NotifyAction
    {
        None,
        Confirm,
        Hold,
        Reject
    }
}

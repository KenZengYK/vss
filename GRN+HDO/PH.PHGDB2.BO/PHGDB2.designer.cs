#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8806
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PH.PHGDB2.BO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PHGDB2")]
	public partial class PHGDB2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertByPiece_IssueItem(ByPiece_IssueItem instance);
    partial void UpdateByPiece_IssueItem(ByPiece_IssueItem instance);
    partial void DeleteByPiece_IssueItem(ByPiece_IssueItem instance);
    partial void InsertTypeMaster(TypeMaster instance);
    partial void UpdateTypeMaster(TypeMaster instance);
    partial void DeleteTypeMaster(TypeMaster instance);
    partial void InsertTypeDetail(TypeDetail instance);
    partial void UpdateTypeDetail(TypeDetail instance);
    partial void DeleteTypeDetail(TypeDetail instance);
    partial void InsertTypeSAHRange(TypeSAHRange instance);
    partial void UpdateTypeSAHRange(TypeSAHRange instance);
    partial void DeleteTypeSAHRange(TypeSAHRange instance);
    partial void InsertByPiece_ReciveItem(ByPiece_ReciveItem instance);
    partial void UpdateByPiece_ReciveItem(ByPiece_ReciveItem instance);
    partial void DeleteByPiece_ReciveItem(ByPiece_ReciveItem instance);
    partial void InsertByPiece_RCItem(ByPiece_RCItem instance);
    partial void UpdateByPiece_RCItem(ByPiece_RCItem instance);
    partial void DeleteByPiece_RCItem(ByPiece_RCItem instance);
    partial void InsertByPiece_WorkTimeBasePrice(ByPiece_WorkTimeBasePrice instance);
    partial void UpdateByPiece_WorkTimeBasePrice(ByPiece_WorkTimeBasePrice instance);
    partial void DeleteByPiece_WorkTimeBasePrice(ByPiece_WorkTimeBasePrice instance);
    partial void InsertByPiece_PriceCount(ByPiece_PriceCount instance);
    partial void UpdateByPiece_PriceCount(ByPiece_PriceCount instance);
    partial void DeleteByPiece_PriceCount(ByPiece_PriceCount instance);
    partial void InsertByPiece_IssueItem_Text(ByPiece_IssueItem_Text instance);
    partial void UpdateByPiece_IssueItem_Text(ByPiece_IssueItem_Text instance);
    partial void DeleteByPiece_IssueItem_Text(ByPiece_IssueItem_Text instance);
    partial void InsertByPrice_Order_IDO(ByPrice_Order_IDO instance);
    partial void UpdateByPrice_Order_IDO(ByPrice_Order_IDO instance);
    partial void DeleteByPrice_Order_IDO(ByPrice_Order_IDO instance);
    partial void InsertByPrice_WorkTimeApplication_Master(ByPrice_WorkTimeApplication_Master instance);
    partial void UpdateByPrice_WorkTimeApplication_Master(ByPrice_WorkTimeApplication_Master instance);
    partial void DeleteByPrice_WorkTimeApplication_Master(ByPrice_WorkTimeApplication_Master instance);
    partial void InsertByPrice_WorkTimeApplication(ByPrice_WorkTimeApplication instance);
    partial void UpdateByPrice_WorkTimeApplication(ByPrice_WorkTimeApplication instance);
    partial void DeleteByPrice_WorkTimeApplication(ByPrice_WorkTimeApplication instance);
    partial void InsertByPiece_Employee(ByPiece_Employee instance);
    partial void UpdateByPiece_Employee(ByPiece_Employee instance);
    partial void DeleteByPiece_Employee(ByPiece_Employee instance);
    partial void InsertByPiece_ReturnItem(ByPiece_ReturnItem instance);
    partial void UpdateByPiece_ReturnItem(ByPiece_ReturnItem instance);
    partial void DeleteByPiece_ReturnItem(ByPiece_ReturnItem instance);
    partial void InsertByPiece_Price(ByPiece_Price instance);
    partial void UpdateByPiece_Price(ByPiece_Price instance);
    partial void DeleteByPiece_Price(ByPiece_Price instance);
    partial void InsertGetFather_FL_Out(GetFather_FL_Out instance);
    partial void UpdateGetFather_FL_Out(GetFather_FL_Out instance);
    partial void DeleteGetFather_FL_Out(GetFather_FL_Out instance);
    partial void InsertGetFather_TL_In(GetFather_TL_In instance);
    partial void UpdateGetFather_TL_In(GetFather_TL_In instance);
    partial void DeleteGetFather_TL_In(GetFather_TL_In instance);
    partial void InsertGetMaterialData(GetMaterialData instance);
    partial void UpdateGetMaterialData(GetMaterialData instance);
    partial void DeleteGetMaterialData(GetMaterialData instance);
    partial void InsertByPiece_ELWFilteringMachineHeader(ByPiece_ELWFilteringMachineHeader instance);
    partial void UpdateByPiece_ELWFilteringMachineHeader(ByPiece_ELWFilteringMachineHeader instance);
    partial void DeleteByPiece_ELWFilteringMachineHeader(ByPiece_ELWFilteringMachineHeader instance);
    partial void InsertByPiece_ELWFilteringMachineDetail(ByPiece_ELWFilteringMachineDetail instance);
    partial void UpdateByPiece_ELWFilteringMachineDetail(ByPiece_ELWFilteringMachineDetail instance);
    partial void DeleteByPiece_ELWFilteringMachineDetail(ByPiece_ELWFilteringMachineDetail instance);
    partial void InsertByPrice_Order(ByPrice_Order instance);
    partial void UpdateByPrice_Order(ByPrice_Order instance);
    partial void DeleteByPrice_Order(ByPrice_Order instance);
    #endregion
		
		public PHGDB2DataContext() : 
				base(global::PH.PHGDB2.BO.Properties.Settings.Default.PHGDB2ConnectionString3, mappingSource)
		{
			OnCreated();
		}
		
		public PHGDB2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PHGDB2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PHGDB2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PHGDB2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ByPiece_IssueItem> ByPiece_IssueItems
		{
			get
			{
				return this.GetTable<ByPiece_IssueItem>();
			}
		}
		
		public System.Data.Linq.Table<TypeMaster> TypeMasters
		{
			get
			{
				return this.GetTable<TypeMaster>();
			}
		}
		
		public System.Data.Linq.Table<TypeDetail> TypeDetails
		{
			get
			{
				return this.GetTable<TypeDetail>();
			}
		}
		
		public System.Data.Linq.Table<TypeSAHRange> TypeSAHRanges
		{
			get
			{
				return this.GetTable<TypeSAHRange>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_ReciveItem> ByPiece_ReciveItems
		{
			get
			{
				return this.GetTable<ByPiece_ReciveItem>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_RCItem> ByPiece_RCItems
		{
			get
			{
				return this.GetTable<ByPiece_RCItem>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_WorkTimeBasePrice> ByPiece_WorkTimeBasePrices
		{
			get
			{
				return this.GetTable<ByPiece_WorkTimeBasePrice>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_PriceCount> ByPiece_PriceCounts
		{
			get
			{
				return this.GetTable<ByPiece_PriceCount>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_IssueItem_Text> ByPiece_IssueItem_Texts
		{
			get
			{
				return this.GetTable<ByPiece_IssueItem_Text>();
			}
		}
		
		public System.Data.Linq.Table<ByPrice_Order_IDO> ByPrice_Order_IDOs
		{
			get
			{
				return this.GetTable<ByPrice_Order_IDO>();
			}
		}
		
		public System.Data.Linq.Table<ByPrice_WorkTimeApplication_Master> ByPrice_WorkTimeApplication_Masters
		{
			get
			{
				return this.GetTable<ByPrice_WorkTimeApplication_Master>();
			}
		}
		
		public System.Data.Linq.Table<ByPrice_WorkTimeApplication> ByPrice_WorkTimeApplications
		{
			get
			{
				return this.GetTable<ByPrice_WorkTimeApplication>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_Employee> ByPiece_Employees
		{
			get
			{
				return this.GetTable<ByPiece_Employee>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_ReturnItem> ByPiece_ReturnItems
		{
			get
			{
				return this.GetTable<ByPiece_ReturnItem>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_Price> ByPiece_Prices
		{
			get
			{
				return this.GetTable<ByPiece_Price>();
			}
		}
		
		public System.Data.Linq.Table<GetFather_FL_Out> GetFather_FL_Outs
		{
			get
			{
				return this.GetTable<GetFather_FL_Out>();
			}
		}
		
		public System.Data.Linq.Table<GetFather_TL_In> GetFather_TL_Ins
		{
			get
			{
				return this.GetTable<GetFather_TL_In>();
			}
		}
		
		public System.Data.Linq.Table<GetMaterialData> GetMaterialDatas
		{
			get
			{
				return this.GetTable<GetMaterialData>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_ELWFilteringMachineHeader> ByPiece_ELWFilteringMachineHeaders
		{
			get
			{
				return this.GetTable<ByPiece_ELWFilteringMachineHeader>();
			}
		}
		
		public System.Data.Linq.Table<ByPiece_ELWFilteringMachineDetail> ByPiece_ELWFilteringMachineDetails
		{
			get
			{
				return this.GetTable<ByPiece_ELWFilteringMachineDetail>();
			}
		}
		
		public System.Data.Linq.Table<ByPrice_Order> ByPrice_Orders
		{
			get
			{
				return this.GetTable<ByPrice_Order>();
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_IssueItem")]
	public partial class ByPiece_IssueItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IssueItemId;
		
		private System.Nullable<System.DateTime> _DT_Issue;
		
		private string _MaterialType;
		
		private string _ProjCode;
		
		private System.Nullable<int> _IDNUM_M;
		
		private System.Nullable<int> _IDNUM_C;
		
		private string _Remark;
		
		private System.Nullable<bool> _IsManualInput;
		
		private string _OpMan;
		
		private System.Nullable<System.DateTime> _OpDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueItemIdChanging(int value);
    partial void OnIssueItemIdChanged();
    partial void OnDT_IssueChanging(System.Nullable<System.DateTime> value);
    partial void OnDT_IssueChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnProjCodeChanging(string value);
    partial void OnProjCodeChanged();
    partial void OnIDNUM_MChanging(System.Nullable<int> value);
    partial void OnIDNUM_MChanged();
    partial void OnIDNUM_CChanging(System.Nullable<int> value);
    partial void OnIDNUM_CChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsManualInputChanging(System.Nullable<bool> value);
    partial void OnIsManualInputChanged();
    partial void OnOpManChanging(string value);
    partial void OnOpManChanged();
    partial void OnOpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpDateChanged();
    #endregion
		
		public ByPiece_IssueItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_IssueItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IssueItemId
		{
			get
			{
				return this._IssueItemId;
			}
			set
			{
				if ((this._IssueItemId != value))
				{
					this.OnIssueItemIdChanging(value);
					this.SendPropertyChanging();
					this._IssueItemId = value;
					this.SendPropertyChanged("IssueItemId");
					this.OnIssueItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_DT_Issue", DbType="DateTime")]
		public System.Nullable<System.DateTime> DT_Issue
		{
			get
			{
				return this._DT_Issue;
			}
			set
			{
				if ((this._DT_Issue != value))
				{
					this.OnDT_IssueChanging(value);
					this.SendPropertyChanging();
					this._DT_Issue = value;
					this.SendPropertyChanged("DT_Issue");
					this.OnDT_IssueChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjCode", DbType="VarChar(10)")]
		public string ProjCode
		{
			get
			{
				return this._ProjCode;
			}
			set
			{
				if ((this._ProjCode != value))
				{
					this.OnProjCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjCode = value;
					this.SendPropertyChanged("ProjCode");
					this.OnProjCodeChanged();
				}
			}
		}
		
		[Column(Storage="_IDNUM_M", DbType="Int")]
		public System.Nullable<int> IDNUM_M
		{
			get
			{
				return this._IDNUM_M;
			}
			set
			{
				if ((this._IDNUM_M != value))
				{
					this.OnIDNUM_MChanging(value);
					this.SendPropertyChanging();
					this._IDNUM_M = value;
					this.SendPropertyChanged("IDNUM_M");
					this.OnIDNUM_MChanged();
				}
			}
		}
		
		[Column(Storage="_IDNUM_C", DbType="Int")]
		public System.Nullable<int> IDNUM_C
		{
			get
			{
				return this._IDNUM_C;
			}
			set
			{
				if ((this._IDNUM_C != value))
				{
					this.OnIDNUM_CChanging(value);
					this.SendPropertyChanging();
					this._IDNUM_C = value;
					this.SendPropertyChanged("IDNUM_C");
					this.OnIDNUM_CChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsManualInput", DbType="Bit")]
		public System.Nullable<bool> IsManualInput
		{
			get
			{
				return this._IsManualInput;
			}
			set
			{
				if ((this._IsManualInput != value))
				{
					this.OnIsManualInputChanging(value);
					this.SendPropertyChanging();
					this._IsManualInput = value;
					this.SendPropertyChanged("IsManualInput");
					this.OnIsManualInputChanged();
				}
			}
		}
		
		[Column(Storage="_OpMan", DbType="NVarChar(50)")]
		public string OpMan
		{
			get
			{
				return this._OpMan;
			}
			set
			{
				if ((this._OpMan != value))
				{
					this.OnOpManChanging(value);
					this.SendPropertyChanging();
					this._OpMan = value;
					this.SendPropertyChanged("OpMan");
					this.OnOpManChanged();
				}
			}
		}
		
		[Column(Storage="_OpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpDate
		{
			get
			{
				return this._OpDate;
			}
			set
			{
				if ((this._OpDate != value))
				{
					this.OnOpDateChanging(value);
					this.SendPropertyChanging();
					this._OpDate = value;
					this.SendPropertyChanged("OpDate");
					this.OnOpDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TypeMaster")]
	public partial class TypeMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeMaster_Id;
		
		private string _TypeId;
		
		private string _TypeName;
		
		private System.Nullable<bool> _ISKS;
		
		private System.Nullable<decimal> _SAH_Rev;
		
		private string _Reciver;
		
		private System.Nullable<decimal> _SAHM_Iss;
		
		private System.Nullable<decimal> _SAHC_Iss;
		
		private string _Issuer;
		
		private System.Nullable<decimal> _Price_Ret;
		
		private System.Nullable<decimal> _SAH_Ret;
		
		private string _Returner;
		
		private string _Remark;
		
		private System.Nullable<decimal> _RCSAH_M;
		
		private System.Nullable<decimal> _RCSAH_C;
		
		private string _RCMan;
		
		private System.Nullable<int> _Flag;
		
		private EntitySet<TypeDetail> _TypeDetails;
		
		private EntitySet<TypeSAHRange> _TypeSAHRanges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeMaster_IdChanging(int value);
    partial void OnTypeMaster_IdChanged();
    partial void OnTypeIdChanging(string value);
    partial void OnTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    partial void OnISKSChanging(System.Nullable<bool> value);
    partial void OnISKSChanged();
    partial void OnSAH_RevChanging(System.Nullable<decimal> value);
    partial void OnSAH_RevChanged();
    partial void OnReciverChanging(string value);
    partial void OnReciverChanged();
    partial void OnSAHM_IssChanging(System.Nullable<decimal> value);
    partial void OnSAHM_IssChanged();
    partial void OnSAHC_IssChanging(System.Nullable<decimal> value);
    partial void OnSAHC_IssChanged();
    partial void OnIssuerChanging(string value);
    partial void OnIssuerChanged();
    partial void OnPrice_RetChanging(System.Nullable<decimal> value);
    partial void OnPrice_RetChanged();
    partial void OnSAH_RetChanging(System.Nullable<decimal> value);
    partial void OnSAH_RetChanged();
    partial void OnReturnerChanging(string value);
    partial void OnReturnerChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnRCSAH_MChanging(System.Nullable<decimal> value);
    partial void OnRCSAH_MChanged();
    partial void OnRCSAH_CChanging(System.Nullable<decimal> value);
    partial void OnRCSAH_CChanged();
    partial void OnRCManChanging(string value);
    partial void OnRCManChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public TypeMaster()
		{
			this._TypeDetails = new EntitySet<TypeDetail>(new Action<TypeDetail>(this.attach_TypeDetails), new Action<TypeDetail>(this.detach_TypeDetails));
			this._TypeSAHRanges = new EntitySet<TypeSAHRange>(new Action<TypeSAHRange>(this.attach_TypeSAHRanges), new Action<TypeSAHRange>(this.detach_TypeSAHRanges));
			OnCreated();
		}
		
		[Column(Storage="_TypeMaster_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeMaster_Id
		{
			get
			{
				return this._TypeMaster_Id;
			}
			set
			{
				if ((this._TypeMaster_Id != value))
				{
					this.OnTypeMaster_IdChanging(value);
					this.SendPropertyChanging();
					this._TypeMaster_Id = value;
					this.SendPropertyChanged("TypeMaster_Id");
					this.OnTypeMaster_IdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeId", DbType="VarChar(15)")]
		public string TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(255)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_ISKS", DbType="Bit")]
		public System.Nullable<bool> ISKS
		{
			get
			{
				return this._ISKS;
			}
			set
			{
				if ((this._ISKS != value))
				{
					this.OnISKSChanging(value);
					this.SendPropertyChanging();
					this._ISKS = value;
					this.SendPropertyChanged("ISKS");
					this.OnISKSChanged();
				}
			}
		}
		
		[Column(Storage="_SAH_Rev", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> SAH_Rev
		{
			get
			{
				return this._SAH_Rev;
			}
			set
			{
				if ((this._SAH_Rev != value))
				{
					this.OnSAH_RevChanging(value);
					this.SendPropertyChanging();
					this._SAH_Rev = value;
					this.SendPropertyChanged("SAH_Rev");
					this.OnSAH_RevChanged();
				}
			}
		}
		
		[Column(Storage="_Reciver", DbType="VarChar(100)")]
		public string Reciver
		{
			get
			{
				return this._Reciver;
			}
			set
			{
				if ((this._Reciver != value))
				{
					this.OnReciverChanging(value);
					this.SendPropertyChanging();
					this._Reciver = value;
					this.SendPropertyChanged("Reciver");
					this.OnReciverChanged();
				}
			}
		}
		
		[Column(Storage="_SAHM_Iss", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> SAHM_Iss
		{
			get
			{
				return this._SAHM_Iss;
			}
			set
			{
				if ((this._SAHM_Iss != value))
				{
					this.OnSAHM_IssChanging(value);
					this.SendPropertyChanging();
					this._SAHM_Iss = value;
					this.SendPropertyChanged("SAHM_Iss");
					this.OnSAHM_IssChanged();
				}
			}
		}
		
		[Column(Storage="_SAHC_Iss", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> SAHC_Iss
		{
			get
			{
				return this._SAHC_Iss;
			}
			set
			{
				if ((this._SAHC_Iss != value))
				{
					this.OnSAHC_IssChanging(value);
					this.SendPropertyChanging();
					this._SAHC_Iss = value;
					this.SendPropertyChanged("SAHC_Iss");
					this.OnSAHC_IssChanged();
				}
			}
		}
		
		[Column(Storage="_Issuer", DbType="VarChar(50)")]
		public string Issuer
		{
			get
			{
				return this._Issuer;
			}
			set
			{
				if ((this._Issuer != value))
				{
					this.OnIssuerChanging(value);
					this.SendPropertyChanging();
					this._Issuer = value;
					this.SendPropertyChanged("Issuer");
					this.OnIssuerChanged();
				}
			}
		}
		
		[Column(Storage="_Price_Ret", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> Price_Ret
		{
			get
			{
				return this._Price_Ret;
			}
			set
			{
				if ((this._Price_Ret != value))
				{
					this.OnPrice_RetChanging(value);
					this.SendPropertyChanging();
					this._Price_Ret = value;
					this.SendPropertyChanged("Price_Ret");
					this.OnPrice_RetChanged();
				}
			}
		}
		
		[Column(Storage="_SAH_Ret", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> SAH_Ret
		{
			get
			{
				return this._SAH_Ret;
			}
			set
			{
				if ((this._SAH_Ret != value))
				{
					this.OnSAH_RetChanging(value);
					this.SendPropertyChanging();
					this._SAH_Ret = value;
					this.SendPropertyChanged("SAH_Ret");
					this.OnSAH_RetChanged();
				}
			}
		}
		
		[Column(Storage="_Returner", DbType="VarChar(50)")]
		public string Returner
		{
			get
			{
				return this._Returner;
			}
			set
			{
				if ((this._Returner != value))
				{
					this.OnReturnerChanging(value);
					this.SendPropertyChanging();
					this._Returner = value;
					this.SendPropertyChanged("Returner");
					this.OnReturnerChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(255)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_RCSAH_M", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> RCSAH_M
		{
			get
			{
				return this._RCSAH_M;
			}
			set
			{
				if ((this._RCSAH_M != value))
				{
					this.OnRCSAH_MChanging(value);
					this.SendPropertyChanging();
					this._RCSAH_M = value;
					this.SendPropertyChanged("RCSAH_M");
					this.OnRCSAH_MChanged();
				}
			}
		}
		
		[Column(Storage="_RCSAH_C", DbType="Decimal(8,4)")]
		public System.Nullable<decimal> RCSAH_C
		{
			get
			{
				return this._RCSAH_C;
			}
			set
			{
				if ((this._RCSAH_C != value))
				{
					this.OnRCSAH_CChanging(value);
					this.SendPropertyChanging();
					this._RCSAH_C = value;
					this.SendPropertyChanged("RCSAH_C");
					this.OnRCSAH_CChanged();
				}
			}
		}
		
		[Column(Storage="_RCMan", DbType="VarChar(50)")]
		public string RCMan
		{
			get
			{
				return this._RCMan;
			}
			set
			{
				if ((this._RCMan != value))
				{
					this.OnRCManChanging(value);
					this.SendPropertyChanging();
					this._RCMan = value;
					this.SendPropertyChanged("RCMan");
					this.OnRCManChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="TypeMaster_TypeDetail", Storage="_TypeDetails", ThisKey="TypeMaster_Id", OtherKey="TypeMaster_Id")]
		public EntitySet<TypeDetail> TypeDetails
		{
			get
			{
				return this._TypeDetails;
			}
			set
			{
				this._TypeDetails.Assign(value);
			}
		}
		
		[Association(Name="TypeMaster_TypeSAHRange", Storage="_TypeSAHRanges", ThisKey="TypeMaster_Id", OtherKey="TypeMaster_Id")]
		public EntitySet<TypeSAHRange> TypeSAHRanges
		{
			get
			{
				return this._TypeSAHRanges;
			}
			set
			{
				this._TypeSAHRanges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypeDetails(TypeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_TypeDetails(TypeDetail entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
		
		private void attach_TypeSAHRanges(TypeSAHRange entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = this;
		}
		
		private void detach_TypeSAHRanges(TypeSAHRange entity)
		{
			this.SendPropertyChanging();
			entity.TypeMaster = null;
		}
	}
	
	[Table(Name="dbo.TypeDetail")]
	public partial class TypeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeDetail_Id;
		
		private int _TypeMaster_Id;
		
		private string _ProjCode;
		
		private string _Responsibler;
		
		private string _ResponsiblerName;
		
		private string _Remark;
		
		private System.Nullable<int> _Flag;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeDetail_IdChanging(int value);
    partial void OnTypeDetail_IdChanged();
    partial void OnTypeMaster_IdChanging(int value);
    partial void OnTypeMaster_IdChanged();
    partial void OnProjCodeChanging(string value);
    partial void OnProjCodeChanged();
    partial void OnResponsiblerChanging(string value);
    partial void OnResponsiblerChanged();
    partial void OnResponsiblerNameChanging(string value);
    partial void OnResponsiblerNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public TypeDetail()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[Column(Storage="_TypeDetail_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeDetail_Id
		{
			get
			{
				return this._TypeDetail_Id;
			}
			set
			{
				if ((this._TypeDetail_Id != value))
				{
					this.OnTypeDetail_IdChanging(value);
					this.SendPropertyChanging();
					this._TypeDetail_Id = value;
					this.SendPropertyChanged("TypeDetail_Id");
					this.OnTypeDetail_IdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeMaster_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeMaster_Id
		{
			get
			{
				return this._TypeMaster_Id;
			}
			set
			{
				if ((this._TypeMaster_Id != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeMaster_IdChanging(value);
					this.SendPropertyChanging();
					this._TypeMaster_Id = value;
					this.SendPropertyChanged("TypeMaster_Id");
					this.OnTypeMaster_IdChanged();
				}
			}
		}
		
		[Column(Storage="_ProjCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ProjCode
		{
			get
			{
				return this._ProjCode;
			}
			set
			{
				if ((this._ProjCode != value))
				{
					this.OnProjCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjCode = value;
					this.SendPropertyChanged("ProjCode");
					this.OnProjCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Responsibler", DbType="VarChar(50)")]
		public string Responsibler
		{
			get
			{
				return this._Responsibler;
			}
			set
			{
				if ((this._Responsibler != value))
				{
					this.OnResponsiblerChanging(value);
					this.SendPropertyChanging();
					this._Responsibler = value;
					this.SendPropertyChanged("Responsibler");
					this.OnResponsiblerChanged();
				}
			}
		}
		
		[Column(Storage="_ResponsiblerName", DbType="VarChar(50)")]
		public string ResponsiblerName
		{
			get
			{
				return this._ResponsiblerName;
			}
			set
			{
				if ((this._ResponsiblerName != value))
				{
					this.OnResponsiblerNameChanging(value);
					this.SendPropertyChanging();
					this._ResponsiblerName = value;
					this.SendPropertyChanged("ResponsiblerName");
					this.OnResponsiblerNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(100)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="TypeMaster_TypeDetail", Storage="_TypeMaster", ThisKey="TypeMaster_Id", OtherKey="TypeMaster_Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.TypeDetails.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.TypeDetails.Add(this);
						this._TypeMaster_Id = value.TypeMaster_Id;
					}
					else
					{
						this._TypeMaster_Id = default(int);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.TypeSAHRange")]
	public partial class TypeSAHRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TypeSAH_ID;
		
		private int _TypeMaster_Id;
		
		private System.Nullable<int> _Type;
		
		private System.Nullable<int> _QtyFrom;
		
		private System.Nullable<int> _QtyTo;
		
		private System.Nullable<double> _SAH;
		
		private System.Nullable<int> _Flag;
		
		private EntityRef<TypeMaster> _TypeMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeSAH_IDChanging(int value);
    partial void OnTypeSAH_IDChanged();
    partial void OnTypeMaster_IdChanging(int value);
    partial void OnTypeMaster_IdChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnQtyFromChanging(System.Nullable<int> value);
    partial void OnQtyFromChanged();
    partial void OnQtyToChanging(System.Nullable<int> value);
    partial void OnQtyToChanged();
    partial void OnSAHChanging(System.Nullable<double> value);
    partial void OnSAHChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public TypeSAHRange()
		{
			this._TypeMaster = default(EntityRef<TypeMaster>);
			OnCreated();
		}
		
		[Column(Storage="_TypeSAH_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TypeSAH_ID
		{
			get
			{
				return this._TypeSAH_ID;
			}
			set
			{
				if ((this._TypeSAH_ID != value))
				{
					this.OnTypeSAH_IDChanging(value);
					this.SendPropertyChanging();
					this._TypeSAH_ID = value;
					this.SendPropertyChanged("TypeSAH_ID");
					this.OnTypeSAH_IDChanged();
				}
			}
		}
		
		[Column(Storage="_TypeMaster_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TypeMaster_Id
		{
			get
			{
				return this._TypeMaster_Id;
			}
			set
			{
				if ((this._TypeMaster_Id != value))
				{
					if (this._TypeMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeMaster_IdChanging(value);
					this.SendPropertyChanging();
					this._TypeMaster_Id = value;
					this.SendPropertyChanged("TypeMaster_Id");
					this.OnTypeMaster_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_QtyFrom", DbType="Int")]
		public System.Nullable<int> QtyFrom
		{
			get
			{
				return this._QtyFrom;
			}
			set
			{
				if ((this._QtyFrom != value))
				{
					this.OnQtyFromChanging(value);
					this.SendPropertyChanging();
					this._QtyFrom = value;
					this.SendPropertyChanged("QtyFrom");
					this.OnQtyFromChanged();
				}
			}
		}
		
		[Column(Storage="_QtyTo", DbType="Int")]
		public System.Nullable<int> QtyTo
		{
			get
			{
				return this._QtyTo;
			}
			set
			{
				if ((this._QtyTo != value))
				{
					this.OnQtyToChanging(value);
					this.SendPropertyChanging();
					this._QtyTo = value;
					this.SendPropertyChanged("QtyTo");
					this.OnQtyToChanged();
				}
			}
		}
		
		[Column(Storage="_SAH", DbType="Float")]
		public System.Nullable<double> SAH
		{
			get
			{
				return this._SAH;
			}
			set
			{
				if ((this._SAH != value))
				{
					this.OnSAHChanging(value);
					this.SendPropertyChanging();
					this._SAH = value;
					this.SendPropertyChanged("SAH");
					this.OnSAHChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="TypeMaster_TypeSAHRange", Storage="_TypeMaster", ThisKey="TypeMaster_Id", OtherKey="TypeMaster_Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TypeMaster TypeMaster
		{
			get
			{
				return this._TypeMaster.Entity;
			}
			set
			{
				TypeMaster previousValue = this._TypeMaster.Entity;
				if (((previousValue != value) 
							|| (this._TypeMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeMaster.Entity = null;
						previousValue.TypeSAHRanges.Remove(this);
					}
					this._TypeMaster.Entity = value;
					if ((value != null))
					{
						value.TypeSAHRanges.Add(this);
						this._TypeMaster_Id = value.TypeMaster_Id;
					}
					else
					{
						this._TypeMaster_Id = default(int);
					}
					this.SendPropertyChanged("TypeMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_ReciveItem")]
	public partial class ByPiece_ReciveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReciveItemId;
		
		private System.Nullable<System.DateTime> _DT_Recive;
		
		private string _MaterialType;
		
		private string _HDONO;
		
		private System.Nullable<int> _IDNUM;
		
		private string _Remark;
		
		private System.Nullable<bool> _IsManualInput;
		
		private string _OpMan;
		
		private System.Nullable<System.DateTime> _OpDate;
		
		private string _ReciveMan;
		
		private string _Lot_id;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReciveItemIdChanging(int value);
    partial void OnReciveItemIdChanged();
    partial void OnDT_ReciveChanging(System.Nullable<System.DateTime> value);
    partial void OnDT_ReciveChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnHDONOChanging(string value);
    partial void OnHDONOChanged();
    partial void OnIDNUMChanging(System.Nullable<int> value);
    partial void OnIDNUMChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsManualInputChanging(System.Nullable<bool> value);
    partial void OnIsManualInputChanged();
    partial void OnOpManChanging(string value);
    partial void OnOpManChanged();
    partial void OnOpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpDateChanged();
    partial void OnReciveManChanging(string value);
    partial void OnReciveManChanged();
    partial void OnLot_idChanging(string value);
    partial void OnLot_idChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_ReciveItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReciveItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReciveItemId
		{
			get
			{
				return this._ReciveItemId;
			}
			set
			{
				if ((this._ReciveItemId != value))
				{
					this.OnReciveItemIdChanging(value);
					this.SendPropertyChanging();
					this._ReciveItemId = value;
					this.SendPropertyChanged("ReciveItemId");
					this.OnReciveItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_DT_Recive", DbType="DateTime")]
		public System.Nullable<System.DateTime> DT_Recive
		{
			get
			{
				return this._DT_Recive;
			}
			set
			{
				if ((this._DT_Recive != value))
				{
					this.OnDT_ReciveChanging(value);
					this.SendPropertyChanging();
					this._DT_Recive = value;
					this.SendPropertyChanged("DT_Recive");
					this.OnDT_ReciveChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HDONO", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string HDONO
		{
			get
			{
				return this._HDONO;
			}
			set
			{
				if ((this._HDONO != value))
				{
					this.OnHDONOChanging(value);
					this.SendPropertyChanging();
					this._HDONO = value;
					this.SendPropertyChanged("HDONO");
					this.OnHDONOChanged();
				}
			}
		}
		
		[Column(Storage="_IDNUM", DbType="Int")]
		public System.Nullable<int> IDNUM
		{
			get
			{
				return this._IDNUM;
			}
			set
			{
				if ((this._IDNUM != value))
				{
					this.OnIDNUMChanging(value);
					this.SendPropertyChanging();
					this._IDNUM = value;
					this.SendPropertyChanged("IDNUM");
					this.OnIDNUMChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsManualInput", DbType="Bit")]
		public System.Nullable<bool> IsManualInput
		{
			get
			{
				return this._IsManualInput;
			}
			set
			{
				if ((this._IsManualInput != value))
				{
					this.OnIsManualInputChanging(value);
					this.SendPropertyChanging();
					this._IsManualInput = value;
					this.SendPropertyChanged("IsManualInput");
					this.OnIsManualInputChanged();
				}
			}
		}
		
		[Column(Storage="_OpMan", DbType="NVarChar(50)")]
		public string OpMan
		{
			get
			{
				return this._OpMan;
			}
			set
			{
				if ((this._OpMan != value))
				{
					this.OnOpManChanging(value);
					this.SendPropertyChanging();
					this._OpMan = value;
					this.SendPropertyChanged("OpMan");
					this.OnOpManChanged();
				}
			}
		}
		
		[Column(Storage="_OpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpDate
		{
			get
			{
				return this._OpDate;
			}
			set
			{
				if ((this._OpDate != value))
				{
					this.OnOpDateChanging(value);
					this.SendPropertyChanging();
					this._OpDate = value;
					this.SendPropertyChanged("OpDate");
					this.OnOpDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReciveMan", DbType="NVarChar(15)")]
		public string ReciveMan
		{
			get
			{
				return this._ReciveMan;
			}
			set
			{
				if ((this._ReciveMan != value))
				{
					this.OnReciveManChanging(value);
					this.SendPropertyChanging();
					this._ReciveMan = value;
					this.SendPropertyChanged("ReciveMan");
					this.OnReciveManChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_id", DbType="NVarChar(50)")]
		public string Lot_id
		{
			get
			{
				return this._Lot_id;
			}
			set
			{
				if ((this._Lot_id != value))
				{
					this.OnLot_idChanging(value);
					this.SendPropertyChanging();
					this._Lot_id = value;
					this.SendPropertyChanged("Lot_id");
					this.OnLot_idChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_RCItem")]
	public partial class ByPiece_RCItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _MaterialType;
		
		private string _RCNO;
		
		private System.Nullable<System.DateTime> _RCDate;
		
		private System.Nullable<int> _RCQty;
		
		private string _Remark;
		
		private System.Nullable<bool> _IsManualInput;
		
		private string _OpMan;
		
		private System.Nullable<System.DateTime> _OpDate;
		
		private string _RCMan;
		
		private string _Lot_ID;
		
		private string _Lot_ID1;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnRCNOChanging(string value);
    partial void OnRCNOChanged();
    partial void OnRCDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRCDateChanged();
    partial void OnRCQtyChanging(System.Nullable<int> value);
    partial void OnRCQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsManualInputChanging(System.Nullable<bool> value);
    partial void OnIsManualInputChanged();
    partial void OnOpManChanging(string value);
    partial void OnOpManChanged();
    partial void OnOpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpDateChanged();
    partial void OnRCManChanging(string value);
    partial void OnRCManChanged();
    partial void OnLot_IDChanging(string value);
    partial void OnLot_IDChanged();
    partial void OnLot_ID1Changing(string value);
    partial void OnLot_ID1Changed();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_RCItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_RCNO", DbType="VarChar(20)")]
		public string RCNO
		{
			get
			{
				return this._RCNO;
			}
			set
			{
				if ((this._RCNO != value))
				{
					this.OnRCNOChanging(value);
					this.SendPropertyChanging();
					this._RCNO = value;
					this.SendPropertyChanged("RCNO");
					this.OnRCNOChanged();
				}
			}
		}
		
		[Column(Storage="_RCDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RCDate
		{
			get
			{
				return this._RCDate;
			}
			set
			{
				if ((this._RCDate != value))
				{
					this.OnRCDateChanging(value);
					this.SendPropertyChanging();
					this._RCDate = value;
					this.SendPropertyChanged("RCDate");
					this.OnRCDateChanged();
				}
			}
		}
		
		[Column(Storage="_RCQty", DbType="Int")]
		public System.Nullable<int> RCQty
		{
			get
			{
				return this._RCQty;
			}
			set
			{
				if ((this._RCQty != value))
				{
					this.OnRCQtyChanging(value);
					this.SendPropertyChanging();
					this._RCQty = value;
					this.SendPropertyChanged("RCQty");
					this.OnRCQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsManualInput", DbType="Bit")]
		public System.Nullable<bool> IsManualInput
		{
			get
			{
				return this._IsManualInput;
			}
			set
			{
				if ((this._IsManualInput != value))
				{
					this.OnIsManualInputChanging(value);
					this.SendPropertyChanging();
					this._IsManualInput = value;
					this.SendPropertyChanged("IsManualInput");
					this.OnIsManualInputChanged();
				}
			}
		}
		
		[Column(Storage="_OpMan", DbType="NVarChar(50)")]
		public string OpMan
		{
			get
			{
				return this._OpMan;
			}
			set
			{
				if ((this._OpMan != value))
				{
					this.OnOpManChanging(value);
					this.SendPropertyChanging();
					this._OpMan = value;
					this.SendPropertyChanged("OpMan");
					this.OnOpManChanged();
				}
			}
		}
		
		[Column(Storage="_OpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpDate
		{
			get
			{
				return this._OpDate;
			}
			set
			{
				if ((this._OpDate != value))
				{
					this.OnOpDateChanging(value);
					this.SendPropertyChanging();
					this._OpDate = value;
					this.SendPropertyChanged("OpDate");
					this.OnOpDateChanged();
				}
			}
		}
		
		[Column(Storage="_RCMan", DbType="NVarChar(15)")]
		public string RCMan
		{
			get
			{
				return this._RCMan;
			}
			set
			{
				if ((this._RCMan != value))
				{
					this.OnRCManChanging(value);
					this.SendPropertyChanging();
					this._RCMan = value;
					this.SendPropertyChanged("RCMan");
					this.OnRCManChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_ID", DbType="NVarChar(200)")]
		public string Lot_ID
		{
			get
			{
				return this._Lot_ID;
			}
			set
			{
				if ((this._Lot_ID != value))
				{
					this.OnLot_IDChanging(value);
					this.SendPropertyChanging();
					this._Lot_ID = value;
					this.SendPropertyChanged("Lot_ID");
					this.OnLot_IDChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_ID1", DbType="NVarChar(50)")]
		public string Lot_ID1
		{
			get
			{
				return this._Lot_ID1;
			}
			set
			{
				if ((this._Lot_ID1 != value))
				{
					this.OnLot_ID1Changing(value);
					this.SendPropertyChanging();
					this._Lot_ID1 = value;
					this.SendPropertyChanged("Lot_ID1");
					this.OnLot_ID1Changed();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_WorkTimeBasePrice")]
	public partial class ByPiece_WorkTimeBasePrice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_WorkTimeBasePrice()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_PriceCount")]
	public partial class ByPiece_PriceCount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _EmpID;
		
		private string _EmpName;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<decimal> _MMQty;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnEmpIDChanging(string value);
    partial void OnEmpIDChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnMMQtyChanging(System.Nullable<decimal> value);
    partial void OnMMQtyChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_PriceCount()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MMQty", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> MMQty
		{
			get
			{
				return this._MMQty;
			}
			set
			{
				if ((this._MMQty != value))
				{
					this.OnMMQtyChanging(value);
					this.SendPropertyChanging();
					this._MMQty = value;
					this.SendPropertyChanged("MMQty");
					this.OnMMQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_IssueItem_Text")]
	public partial class ByPiece_IssueItem_Text : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IssueItemId;
		
		private string _IDO;
		
		private System.Nullable<System.DateTime> _DT_Issue;
		
		private string _MaterialType;
		
		private string _ProjCode;
		
		private System.Nullable<int> _ISSUE_QTY;
		
		private System.Nullable<int> _SAHType;
		
		private string _Remark;
		
		private System.Nullable<bool> _IsManualInput;
		
		private string _OpMan;
		
		private System.Nullable<System.DateTime> _OpDate;
		
		private string _lot_id;
		
		private string _IssueMan;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIssueItemIdChanging(int value);
    partial void OnIssueItemIdChanged();
    partial void OnIDOChanging(string value);
    partial void OnIDOChanged();
    partial void OnDT_IssueChanging(System.Nullable<System.DateTime> value);
    partial void OnDT_IssueChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnProjCodeChanging(string value);
    partial void OnProjCodeChanged();
    partial void OnISSUE_QTYChanging(System.Nullable<int> value);
    partial void OnISSUE_QTYChanged();
    partial void OnSAHTypeChanging(System.Nullable<int> value);
    partial void OnSAHTypeChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsManualInputChanging(System.Nullable<bool> value);
    partial void OnIsManualInputChanged();
    partial void OnOpManChanging(string value);
    partial void OnOpManChanged();
    partial void OnOpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpDateChanged();
    partial void Onlot_idChanging(string value);
    partial void Onlot_idChanged();
    partial void OnIssueManChanging(string value);
    partial void OnIssueManChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_IssueItem_Text()
		{
			OnCreated();
		}
		
		[Column(Storage="_IssueItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IssueItemId
		{
			get
			{
				return this._IssueItemId;
			}
			set
			{
				if ((this._IssueItemId != value))
				{
					this.OnIssueItemIdChanging(value);
					this.SendPropertyChanging();
					this._IssueItemId = value;
					this.SendPropertyChanged("IssueItemId");
					this.OnIssueItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_IDO", DbType="NVarChar(25)")]
		public string IDO
		{
			get
			{
				return this._IDO;
			}
			set
			{
				if ((this._IDO != value))
				{
					this.OnIDOChanging(value);
					this.SendPropertyChanging();
					this._IDO = value;
					this.SendPropertyChanged("IDO");
					this.OnIDOChanged();
				}
			}
		}
		
		[Column(Storage="_DT_Issue", DbType="DateTime")]
		public System.Nullable<System.DateTime> DT_Issue
		{
			get
			{
				return this._DT_Issue;
			}
			set
			{
				if ((this._DT_Issue != value))
				{
					this.OnDT_IssueChanging(value);
					this.SendPropertyChanging();
					this._DT_Issue = value;
					this.SendPropertyChanged("DT_Issue");
					this.OnDT_IssueChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjCode", DbType="VarChar(10)")]
		public string ProjCode
		{
			get
			{
				return this._ProjCode;
			}
			set
			{
				if ((this._ProjCode != value))
				{
					this.OnProjCodeChanging(value);
					this.SendPropertyChanging();
					this._ProjCode = value;
					this.SendPropertyChanged("ProjCode");
					this.OnProjCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ISSUE_QTY", DbType="Int")]
		public System.Nullable<int> ISSUE_QTY
		{
			get
			{
				return this._ISSUE_QTY;
			}
			set
			{
				if ((this._ISSUE_QTY != value))
				{
					this.OnISSUE_QTYChanging(value);
					this.SendPropertyChanging();
					this._ISSUE_QTY = value;
					this.SendPropertyChanged("ISSUE_QTY");
					this.OnISSUE_QTYChanged();
				}
			}
		}
		
		[Column(Storage="_SAHType", DbType="Int")]
		public System.Nullable<int> SAHType
		{
			get
			{
				return this._SAHType;
			}
			set
			{
				if ((this._SAHType != value))
				{
					this.OnSAHTypeChanging(value);
					this.SendPropertyChanging();
					this._SAHType = value;
					this.SendPropertyChanged("SAHType");
					this.OnSAHTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsManualInput", DbType="Bit")]
		public System.Nullable<bool> IsManualInput
		{
			get
			{
				return this._IsManualInput;
			}
			set
			{
				if ((this._IsManualInput != value))
				{
					this.OnIsManualInputChanging(value);
					this.SendPropertyChanging();
					this._IsManualInput = value;
					this.SendPropertyChanged("IsManualInput");
					this.OnIsManualInputChanged();
				}
			}
		}
		
		[Column(Storage="_OpMan", DbType="NVarChar(50)")]
		public string OpMan
		{
			get
			{
				return this._OpMan;
			}
			set
			{
				if ((this._OpMan != value))
				{
					this.OnOpManChanging(value);
					this.SendPropertyChanging();
					this._OpMan = value;
					this.SendPropertyChanged("OpMan");
					this.OnOpManChanged();
				}
			}
		}
		
		[Column(Storage="_OpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpDate
		{
			get
			{
				return this._OpDate;
			}
			set
			{
				if ((this._OpDate != value))
				{
					this.OnOpDateChanging(value);
					this.SendPropertyChanging();
					this._OpDate = value;
					this.SendPropertyChanged("OpDate");
					this.OnOpDateChanged();
				}
			}
		}
		
		[Column(Storage="_lot_id", DbType="NVarChar(50)")]
		public string lot_id
		{
			get
			{
				return this._lot_id;
			}
			set
			{
				if ((this._lot_id != value))
				{
					this.Onlot_idChanging(value);
					this.SendPropertyChanging();
					this._lot_id = value;
					this.SendPropertyChanged("lot_id");
					this.Onlot_idChanged();
				}
			}
		}
		
		[Column(Storage="_IssueMan", DbType="NVarChar(15)")]
		public string IssueMan
		{
			get
			{
				return this._IssueMan;
			}
			set
			{
				if ((this._IssueMan != value))
				{
					this.OnIssueManChanging(value);
					this.SendPropertyChanging();
					this._IssueMan = value;
					this.SendPropertyChanged("IssueMan");
					this.OnIssueManChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPrice_Order_IDO")]
	public partial class ByPrice_Order_IDO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDO;
		
		private string _PROJECT_NO;
		
		private string _pgmn;
		
		private System.DateTime _ISSUED_DATE;
		
		private string _OrderID;
		
		private string _OrderName;
		
		private string _Remark;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDOChanging(string value);
    partial void OnIDOChanged();
    partial void OnPROJECT_NOChanging(string value);
    partial void OnPROJECT_NOChanged();
    partial void OnpgmnChanging(string value);
    partial void OnpgmnChanged();
    partial void OnISSUED_DATEChanging(System.DateTime value);
    partial void OnISSUED_DATEChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnOrderNameChanging(string value);
    partial void OnOrderNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPrice_Order_IDO()
		{
			OnCreated();
		}
		
		[Column(Storage="_IDO", DbType="VarChar(12) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDO
		{
			get
			{
				return this._IDO;
			}
			set
			{
				if ((this._IDO != value))
				{
					this.OnIDOChanging(value);
					this.SendPropertyChanging();
					this._IDO = value;
					this.SendPropertyChanged("IDO");
					this.OnIDOChanged();
				}
			}
		}
		
		[Column(Storage="_PROJECT_NO", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PROJECT_NO
		{
			get
			{
				return this._PROJECT_NO;
			}
			set
			{
				if ((this._PROJECT_NO != value))
				{
					this.OnPROJECT_NOChanging(value);
					this.SendPropertyChanging();
					this._PROJECT_NO = value;
					this.SendPropertyChanged("PROJECT_NO");
					this.OnPROJECT_NOChanged();
				}
			}
		}
		
		[Column(Storage="_pgmn", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string pgmn
		{
			get
			{
				return this._pgmn;
			}
			set
			{
				if ((this._pgmn != value))
				{
					this.OnpgmnChanging(value);
					this.SendPropertyChanging();
					this._pgmn = value;
					this.SendPropertyChanged("pgmn");
					this.OnpgmnChanged();
				}
			}
		}
		
		[Column(Storage="_ISSUED_DATE", DbType="DateTime NOT NULL")]
		public System.DateTime ISSUED_DATE
		{
			get
			{
				return this._ISSUED_DATE;
			}
			set
			{
				if ((this._ISSUED_DATE != value))
				{
					this.OnISSUED_DATEChanging(value);
					this.SendPropertyChanging();
					this._ISSUED_DATE = value;
					this.SendPropertyChanged("ISSUED_DATE");
					this.OnISSUED_DATEChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string OrderName
		{
			get
			{
				return this._OrderName;
			}
			set
			{
				if ((this._OrderName != value))
				{
					this.OnOrderNameChanging(value);
					this.SendPropertyChanging();
					this._OrderName = value;
					this.SendPropertyChanged("OrderName");
					this.OnOrderNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(50)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPrice_WorkTimeApplication_Master")]
	public partial class ByPrice_WorkTimeApplication_Master : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Code;
		
		private string _Group_Code;
		
		private System.DateTime _Application_Date;
		
		private string _Application_Man;
		
		private string _Factory;
		
		private string _Director;
		
		private System.Nullable<System.DateTime> _Director_Time;
		
		private string _Manager;
		
		private System.Nullable<System.DateTime> _Manager_Time;
		
		private System.Nullable<bool> _IsAgree_ApplicationMan;
		
		private System.Nullable<bool> _IsAgree_Director;
		
		private System.Nullable<bool> _IsAgree_Manager;
		
		private System.Nullable<int> _Flag;
		
		private EntitySet<ByPrice_WorkTimeApplication> _ByPrice_WorkTimeApplications;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CodeChanging(int value);
    partial void OnID_CodeChanged();
    partial void OnGroup_CodeChanging(string value);
    partial void OnGroup_CodeChanged();
    partial void OnApplication_DateChanging(System.DateTime value);
    partial void OnApplication_DateChanged();
    partial void OnApplication_ManChanging(string value);
    partial void OnApplication_ManChanged();
    partial void OnFactoryChanging(string value);
    partial void OnFactoryChanged();
    partial void OnDirectorChanging(string value);
    partial void OnDirectorChanged();
    partial void OnDirector_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDirector_TimeChanged();
    partial void OnManagerChanging(string value);
    partial void OnManagerChanged();
    partial void OnManager_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnManager_TimeChanged();
    partial void OnIsAgree_ApplicationManChanging(System.Nullable<bool> value);
    partial void OnIsAgree_ApplicationManChanged();
    partial void OnIsAgree_DirectorChanging(System.Nullable<bool> value);
    partial void OnIsAgree_DirectorChanged();
    partial void OnIsAgree_ManagerChanging(System.Nullable<bool> value);
    partial void OnIsAgree_ManagerChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPrice_WorkTimeApplication_Master()
		{
			this._ByPrice_WorkTimeApplications = new EntitySet<ByPrice_WorkTimeApplication>(new Action<ByPrice_WorkTimeApplication>(this.attach_ByPrice_WorkTimeApplications), new Action<ByPrice_WorkTimeApplication>(this.detach_ByPrice_WorkTimeApplications));
			OnCreated();
		}
		
		[Column(Storage="_ID_Code", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Code
		{
			get
			{
				return this._ID_Code;
			}
			set
			{
				if ((this._ID_Code != value))
				{
					this.OnID_CodeChanging(value);
					this.SendPropertyChanging();
					this._ID_Code = value;
					this.SendPropertyChanged("ID_Code");
					this.OnID_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Group_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Group_Code
		{
			get
			{
				return this._Group_Code;
			}
			set
			{
				if ((this._Group_Code != value))
				{
					this.OnGroup_CodeChanging(value);
					this.SendPropertyChanging();
					this._Group_Code = value;
					this.SendPropertyChanged("Group_Code");
					this.OnGroup_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Application_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Application_Date
		{
			get
			{
				return this._Application_Date;
			}
			set
			{
				if ((this._Application_Date != value))
				{
					this.OnApplication_DateChanging(value);
					this.SendPropertyChanging();
					this._Application_Date = value;
					this.SendPropertyChanged("Application_Date");
					this.OnApplication_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Application_Man", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Application_Man
		{
			get
			{
				return this._Application_Man;
			}
			set
			{
				if ((this._Application_Man != value))
				{
					this.OnApplication_ManChanging(value);
					this.SendPropertyChanging();
					this._Application_Man = value;
					this.SendPropertyChanged("Application_Man");
					this.OnApplication_ManChanged();
				}
			}
		}
		
		[Column(Storage="_Factory", DbType="NVarChar(10)")]
		public string Factory
		{
			get
			{
				return this._Factory;
			}
			set
			{
				if ((this._Factory != value))
				{
					this.OnFactoryChanging(value);
					this.SendPropertyChanging();
					this._Factory = value;
					this.SendPropertyChanged("Factory");
					this.OnFactoryChanged();
				}
			}
		}
		
		[Column(Storage="_Director", DbType="NVarChar(50)")]
		public string Director
		{
			get
			{
				return this._Director;
			}
			set
			{
				if ((this._Director != value))
				{
					this.OnDirectorChanging(value);
					this.SendPropertyChanging();
					this._Director = value;
					this.SendPropertyChanged("Director");
					this.OnDirectorChanged();
				}
			}
		}
		
		[Column(Storage="_Director_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Director_Time
		{
			get
			{
				return this._Director_Time;
			}
			set
			{
				if ((this._Director_Time != value))
				{
					this.OnDirector_TimeChanging(value);
					this.SendPropertyChanging();
					this._Director_Time = value;
					this.SendPropertyChanged("Director_Time");
					this.OnDirector_TimeChanged();
				}
			}
		}
		
		[Column(Storage="_Manager", DbType="NVarChar(50)")]
		public string Manager
		{
			get
			{
				return this._Manager;
			}
			set
			{
				if ((this._Manager != value))
				{
					this.OnManagerChanging(value);
					this.SendPropertyChanging();
					this._Manager = value;
					this.SendPropertyChanged("Manager");
					this.OnManagerChanged();
				}
			}
		}
		
		[Column(Storage="_Manager_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Manager_Time
		{
			get
			{
				return this._Manager_Time;
			}
			set
			{
				if ((this._Manager_Time != value))
				{
					this.OnManager_TimeChanging(value);
					this.SendPropertyChanging();
					this._Manager_Time = value;
					this.SendPropertyChanged("Manager_Time");
					this.OnManager_TimeChanged();
				}
			}
		}
		
		[Column(Storage="_IsAgree_ApplicationMan", DbType="Bit")]
		public System.Nullable<bool> IsAgree_ApplicationMan
		{
			get
			{
				return this._IsAgree_ApplicationMan;
			}
			set
			{
				if ((this._IsAgree_ApplicationMan != value))
				{
					this.OnIsAgree_ApplicationManChanging(value);
					this.SendPropertyChanging();
					this._IsAgree_ApplicationMan = value;
					this.SendPropertyChanged("IsAgree_ApplicationMan");
					this.OnIsAgree_ApplicationManChanged();
				}
			}
		}
		
		[Column(Storage="_IsAgree_Director", DbType="Bit")]
		public System.Nullable<bool> IsAgree_Director
		{
			get
			{
				return this._IsAgree_Director;
			}
			set
			{
				if ((this._IsAgree_Director != value))
				{
					this.OnIsAgree_DirectorChanging(value);
					this.SendPropertyChanging();
					this._IsAgree_Director = value;
					this.SendPropertyChanged("IsAgree_Director");
					this.OnIsAgree_DirectorChanged();
				}
			}
		}
		
		[Column(Storage="_IsAgree_Manager", DbType="Bit")]
		public System.Nullable<bool> IsAgree_Manager
		{
			get
			{
				return this._IsAgree_Manager;
			}
			set
			{
				if ((this._IsAgree_Manager != value))
				{
					this.OnIsAgree_ManagerChanging(value);
					this.SendPropertyChanging();
					this._IsAgree_Manager = value;
					this.SendPropertyChanged("IsAgree_Manager");
					this.OnIsAgree_ManagerChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="ByPrice_WorkTimeApplication_Master_ByPrice_WorkTimeApplication", Storage="_ByPrice_WorkTimeApplications", ThisKey="ID_Code", OtherKey="ID_Code")]
		public EntitySet<ByPrice_WorkTimeApplication> ByPrice_WorkTimeApplications
		{
			get
			{
				return this._ByPrice_WorkTimeApplications;
			}
			set
			{
				this._ByPrice_WorkTimeApplications.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ByPrice_WorkTimeApplications(ByPrice_WorkTimeApplication entity)
		{
			this.SendPropertyChanging();
			entity.ByPrice_WorkTimeApplication_Master = this;
		}
		
		private void detach_ByPrice_WorkTimeApplications(ByPrice_WorkTimeApplication entity)
		{
			this.SendPropertyChanging();
			entity.ByPrice_WorkTimeApplication_Master = null;
		}
	}
	
	[Table(Name="dbo.ByPrice_WorkTimeApplication")]
	public partial class ByPrice_WorkTimeApplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DetailID;
		
		private int _ID_Code;
		
		private string _Group_Code;
		
		private string _Name;
		
		private string _NumB;
		
		private string _Reason;
		
		private System.Nullable<System.DateTime> _Time_Quantum_Start;
		
		private System.Nullable<System.DateTime> _Time_Quantum_Due;
		
		private System.Nullable<System.DateTime> _Date_Time;
		
		private System.Nullable<decimal> _Time_Quantum;
		
		private string _Work_desc;
		
		private string _BaseNumber;
		
		private System.Nullable<double> _Amount;
		
		private string _department;
		
		private string _Reamrk;
		
		private System.Nullable<bool> _IsAgree_Manager;
		
		private System.Nullable<bool> _IsAgree_Director;
		
		private System.Nullable<int> _Flag;
		
		private EntityRef<ByPrice_WorkTimeApplication_Master> _ByPrice_WorkTimeApplication_Master;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDetailIDChanging(int value);
    partial void OnDetailIDChanged();
    partial void OnID_CodeChanging(int value);
    partial void OnID_CodeChanged();
    partial void OnGroup_CodeChanging(string value);
    partial void OnGroup_CodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnNumBChanging(string value);
    partial void OnNumBChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnTime_Quantum_StartChanging(System.Nullable<System.DateTime> value);
    partial void OnTime_Quantum_StartChanged();
    partial void OnTime_Quantum_DueChanging(System.Nullable<System.DateTime> value);
    partial void OnTime_Quantum_DueChanged();
    partial void OnDate_TimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_TimeChanged();
    partial void OnTime_QuantumChanging(System.Nullable<decimal> value);
    partial void OnTime_QuantumChanged();
    partial void OnWork_descChanging(string value);
    partial void OnWork_descChanged();
    partial void OnBaseNumberChanging(string value);
    partial void OnBaseNumberChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OndepartmentChanging(string value);
    partial void OndepartmentChanged();
    partial void OnReamrkChanging(string value);
    partial void OnReamrkChanged();
    partial void OnIsAgree_ManagerChanging(System.Nullable<bool> value);
    partial void OnIsAgree_ManagerChanged();
    partial void OnIsAgree_DirectorChanging(System.Nullable<bool> value);
    partial void OnIsAgree_DirectorChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPrice_WorkTimeApplication()
		{
			this._ByPrice_WorkTimeApplication_Master = default(EntityRef<ByPrice_WorkTimeApplication_Master>);
			OnCreated();
		}
		
		[Column(Storage="_DetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this.OnDetailIDChanging(value);
					this.SendPropertyChanging();
					this._DetailID = value;
					this.SendPropertyChanged("DetailID");
					this.OnDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_ID_Code", DbType="Int NOT NULL")]
		public int ID_Code
		{
			get
			{
				return this._ID_Code;
			}
			set
			{
				if ((this._ID_Code != value))
				{
					if (this._ByPrice_WorkTimeApplication_Master.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_CodeChanging(value);
					this.SendPropertyChanging();
					this._ID_Code = value;
					this.SendPropertyChanged("ID_Code");
					this.OnID_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Group_Code", DbType="NVarChar(50)")]
		public string Group_Code
		{
			get
			{
				return this._Group_Code;
			}
			set
			{
				if ((this._Group_Code != value))
				{
					this.OnGroup_CodeChanging(value);
					this.SendPropertyChanging();
					this._Group_Code = value;
					this.SendPropertyChanged("Group_Code");
					this.OnGroup_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_NumB", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NumB
		{
			get
			{
				return this._NumB;
			}
			set
			{
				if ((this._NumB != value))
				{
					this.OnNumBChanging(value);
					this.SendPropertyChanging();
					this._NumB = value;
					this.SendPropertyChanged("NumB");
					this.OnNumBChanged();
				}
			}
		}
		
		[Column(Storage="_Reason", DbType="NVarChar(150)")]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Time_Quantum_Start", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time_Quantum_Start
		{
			get
			{
				return this._Time_Quantum_Start;
			}
			set
			{
				if ((this._Time_Quantum_Start != value))
				{
					this.OnTime_Quantum_StartChanging(value);
					this.SendPropertyChanging();
					this._Time_Quantum_Start = value;
					this.SendPropertyChanged("Time_Quantum_Start");
					this.OnTime_Quantum_StartChanged();
				}
			}
		}
		
		[Column(Storage="_Time_Quantum_Due", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time_Quantum_Due
		{
			get
			{
				return this._Time_Quantum_Due;
			}
			set
			{
				if ((this._Time_Quantum_Due != value))
				{
					this.OnTime_Quantum_DueChanging(value);
					this.SendPropertyChanging();
					this._Time_Quantum_Due = value;
					this.SendPropertyChanged("Time_Quantum_Due");
					this.OnTime_Quantum_DueChanged();
				}
			}
		}
		
		[Column(Storage="_Date_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_Time
		{
			get
			{
				return this._Date_Time;
			}
			set
			{
				if ((this._Date_Time != value))
				{
					this.OnDate_TimeChanging(value);
					this.SendPropertyChanging();
					this._Date_Time = value;
					this.SendPropertyChanged("Date_Time");
					this.OnDate_TimeChanged();
				}
			}
		}
		
		[Column(Storage="_Time_Quantum", DbType="Decimal(6,2)")]
		public System.Nullable<decimal> Time_Quantum
		{
			get
			{
				return this._Time_Quantum;
			}
			set
			{
				if ((this._Time_Quantum != value))
				{
					this.OnTime_QuantumChanging(value);
					this.SendPropertyChanging();
					this._Time_Quantum = value;
					this.SendPropertyChanged("Time_Quantum");
					this.OnTime_QuantumChanged();
				}
			}
		}
		
		[Column(Storage="_Work_desc", DbType="NVarChar(150)")]
		public string Work_desc
		{
			get
			{
				return this._Work_desc;
			}
			set
			{
				if ((this._Work_desc != value))
				{
					this.OnWork_descChanging(value);
					this.SendPropertyChanging();
					this._Work_desc = value;
					this.SendPropertyChanged("Work_desc");
					this.OnWork_descChanged();
				}
			}
		}
		
		[Column(Storage="_BaseNumber", DbType="NChar(10)")]
		public string BaseNumber
		{
			get
			{
				return this._BaseNumber;
			}
			set
			{
				if ((this._BaseNumber != value))
				{
					this.OnBaseNumberChanging(value);
					this.SendPropertyChanging();
					this._BaseNumber = value;
					this.SendPropertyChanged("BaseNumber");
					this.OnBaseNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_department", DbType="NVarChar(50)")]
		public string department
		{
			get
			{
				return this._department;
			}
			set
			{
				if ((this._department != value))
				{
					this.OndepartmentChanging(value);
					this.SendPropertyChanging();
					this._department = value;
					this.SendPropertyChanged("department");
					this.OndepartmentChanged();
				}
			}
		}
		
		[Column(Storage="_Reamrk", DbType="NVarChar(150)")]
		public string Reamrk
		{
			get
			{
				return this._Reamrk;
			}
			set
			{
				if ((this._Reamrk != value))
				{
					this.OnReamrkChanging(value);
					this.SendPropertyChanging();
					this._Reamrk = value;
					this.SendPropertyChanged("Reamrk");
					this.OnReamrkChanged();
				}
			}
		}
		
		[Column(Storage="_IsAgree_Manager", DbType="Bit")]
		public System.Nullable<bool> IsAgree_Manager
		{
			get
			{
				return this._IsAgree_Manager;
			}
			set
			{
				if ((this._IsAgree_Manager != value))
				{
					this.OnIsAgree_ManagerChanging(value);
					this.SendPropertyChanging();
					this._IsAgree_Manager = value;
					this.SendPropertyChanged("IsAgree_Manager");
					this.OnIsAgree_ManagerChanged();
				}
			}
		}
		
		[Column(Storage="_IsAgree_Director", DbType="Bit")]
		public System.Nullable<bool> IsAgree_Director
		{
			get
			{
				return this._IsAgree_Director;
			}
			set
			{
				if ((this._IsAgree_Director != value))
				{
					this.OnIsAgree_DirectorChanging(value);
					this.SendPropertyChanging();
					this._IsAgree_Director = value;
					this.SendPropertyChanged("IsAgree_Director");
					this.OnIsAgree_DirectorChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="ByPrice_WorkTimeApplication_Master_ByPrice_WorkTimeApplication", Storage="_ByPrice_WorkTimeApplication_Master", ThisKey="ID_Code", OtherKey="ID_Code", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ByPrice_WorkTimeApplication_Master ByPrice_WorkTimeApplication_Master
		{
			get
			{
				return this._ByPrice_WorkTimeApplication_Master.Entity;
			}
			set
			{
				ByPrice_WorkTimeApplication_Master previousValue = this._ByPrice_WorkTimeApplication_Master.Entity;
				if (((previousValue != value) 
							|| (this._ByPrice_WorkTimeApplication_Master.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ByPrice_WorkTimeApplication_Master.Entity = null;
						previousValue.ByPrice_WorkTimeApplications.Remove(this);
					}
					this._ByPrice_WorkTimeApplication_Master.Entity = value;
					if ((value != null))
					{
						value.ByPrice_WorkTimeApplications.Add(this);
						this._ID_Code = value.ID_Code;
					}
					else
					{
						this._ID_Code = default(int);
					}
					this.SendPropertyChanged("ByPrice_WorkTimeApplication_Master");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_Employee")]
	public partial class ByPiece_Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EmpId;
		
		private int _Flag;
		
		private string _EmpName;
		
		private string _Remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmpIdChanging(string value);
    partial void OnEmpIdChanged();
    partial void OnFlagChanging(int value);
    partial void OnFlagChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
		
		public ByPiece_Employee()
		{
			OnCreated();
		}
		
		[Column(Storage="_EmpId", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="NVarChar(15)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_ReturnItem")]
	public partial class ByPiece_ReturnItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReturnItemId;
		
		private string _MaterialType;
		
		private string _ReturnNo;
		
		private System.Nullable<System.DateTime> _DT_Return;
		
		private System.Nullable<int> _IDNUM;
		
		private string _Remark;
		
		private System.Nullable<bool> _IsManualInput;
		
		private string _OpMan;
		
		private System.Nullable<System.DateTime> _OpDate;
		
		private string _ReturnMan;
		
		private string _lot_id;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReturnItemIdChanging(int value);
    partial void OnReturnItemIdChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnReturnNoChanging(string value);
    partial void OnReturnNoChanged();
    partial void OnDT_ReturnChanging(System.Nullable<System.DateTime> value);
    partial void OnDT_ReturnChanged();
    partial void OnIDNUMChanging(System.Nullable<int> value);
    partial void OnIDNUMChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnIsManualInputChanging(System.Nullable<bool> value);
    partial void OnIsManualInputChanged();
    partial void OnOpManChanging(string value);
    partial void OnOpManChanged();
    partial void OnOpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOpDateChanged();
    partial void OnReturnManChanging(string value);
    partial void OnReturnManChanged();
    partial void Onlot_idChanging(string value);
    partial void Onlot_idChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_ReturnItem()
		{
			OnCreated();
		}
		
		[Column(Storage="_ReturnItemId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ReturnItemId
		{
			get
			{
				return this._ReturnItemId;
			}
			set
			{
				if ((this._ReturnItemId != value))
				{
					this.OnReturnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ReturnItemId = value;
					this.SendPropertyChanged("ReturnItemId");
					this.OnReturnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnNo", DbType="VarChar(20)")]
		public string ReturnNo
		{
			get
			{
				return this._ReturnNo;
			}
			set
			{
				if ((this._ReturnNo != value))
				{
					this.OnReturnNoChanging(value);
					this.SendPropertyChanging();
					this._ReturnNo = value;
					this.SendPropertyChanged("ReturnNo");
					this.OnReturnNoChanged();
				}
			}
		}
		
		[Column(Storage="_DT_Return", DbType="DateTime")]
		public System.Nullable<System.DateTime> DT_Return
		{
			get
			{
				return this._DT_Return;
			}
			set
			{
				if ((this._DT_Return != value))
				{
					this.OnDT_ReturnChanging(value);
					this.SendPropertyChanging();
					this._DT_Return = value;
					this.SendPropertyChanged("DT_Return");
					this.OnDT_ReturnChanged();
				}
			}
		}
		
		[Column(Storage="_IDNUM", DbType="Int")]
		public System.Nullable<int> IDNUM
		{
			get
			{
				return this._IDNUM;
			}
			set
			{
				if ((this._IDNUM != value))
				{
					this.OnIDNUMChanging(value);
					this.SendPropertyChanging();
					this._IDNUM = value;
					this.SendPropertyChanged("IDNUM");
					this.OnIDNUMChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_IsManualInput", DbType="Bit")]
		public System.Nullable<bool> IsManualInput
		{
			get
			{
				return this._IsManualInput;
			}
			set
			{
				if ((this._IsManualInput != value))
				{
					this.OnIsManualInputChanging(value);
					this.SendPropertyChanging();
					this._IsManualInput = value;
					this.SendPropertyChanged("IsManualInput");
					this.OnIsManualInputChanged();
				}
			}
		}
		
		[Column(Storage="_OpMan", DbType="NVarChar(50)")]
		public string OpMan
		{
			get
			{
				return this._OpMan;
			}
			set
			{
				if ((this._OpMan != value))
				{
					this.OnOpManChanging(value);
					this.SendPropertyChanging();
					this._OpMan = value;
					this.SendPropertyChanged("OpMan");
					this.OnOpManChanged();
				}
			}
		}
		
		[Column(Storage="_OpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> OpDate
		{
			get
			{
				return this._OpDate;
			}
			set
			{
				if ((this._OpDate != value))
				{
					this.OnOpDateChanging(value);
					this.SendPropertyChanging();
					this._OpDate = value;
					this.SendPropertyChanged("OpDate");
					this.OnOpDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnMan", DbType="NVarChar(15)")]
		public string ReturnMan
		{
			get
			{
				return this._ReturnMan;
			}
			set
			{
				if ((this._ReturnMan != value))
				{
					this.OnReturnManChanging(value);
					this.SendPropertyChanging();
					this._ReturnMan = value;
					this.SendPropertyChanged("ReturnMan");
					this.OnReturnManChanged();
				}
			}
		}
		
		[Column(Storage="_lot_id", DbType="NVarChar(50)")]
		public string lot_id
		{
			get
			{
				return this._lot_id;
			}
			set
			{
				if ((this._lot_id != value))
				{
					this.Onlot_idChanging(value);
					this.SendPropertyChanging();
					this._lot_id = value;
					this.SendPropertyChanged("lot_id");
					this.Onlot_idChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_Price")]
	public partial class ByPiece_Price : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Flag;
		
		private System.Nullable<double> _ELWFilteringMachineSAH;
		
		private System.Nullable<double> _ELWFilteringMachinePrice;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    partial void OnELWFilteringMachineSAHChanging(System.Nullable<double> value);
    partial void OnELWFilteringMachineSAHChanged();
    partial void OnELWFilteringMachinePriceChanging(System.Nullable<double> value);
    partial void OnELWFilteringMachinePriceChanged();
    #endregion
		
		public ByPiece_Price()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_ELWFilteringMachineSAH", DbType="Float")]
		public System.Nullable<double> ELWFilteringMachineSAH
		{
			get
			{
				return this._ELWFilteringMachineSAH;
			}
			set
			{
				if ((this._ELWFilteringMachineSAH != value))
				{
					this.OnELWFilteringMachineSAHChanging(value);
					this.SendPropertyChanging();
					this._ELWFilteringMachineSAH = value;
					this.SendPropertyChanged("ELWFilteringMachineSAH");
					this.OnELWFilteringMachineSAHChanged();
				}
			}
		}
		
		[Column(Storage="_ELWFilteringMachinePrice", DbType="Float")]
		public System.Nullable<double> ELWFilteringMachinePrice
		{
			get
			{
				return this._ELWFilteringMachinePrice;
			}
			set
			{
				if ((this._ELWFilteringMachinePrice != value))
				{
					this.OnELWFilteringMachinePriceChanging(value);
					this.SendPropertyChanging();
					this._ELWFilteringMachinePrice = value;
					this.SendPropertyChanged("ELWFilteringMachinePrice");
					this.OnELWFilteringMachinePriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GetFather_FL_Out")]
	public partial class GetFather_FL_Out : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexKey;
		
		private string _WO;
		
		private string _InsertFlag;
		
		private System.Nullable<int> _FlagTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexKeyChanging(int value);
    partial void OnIndexKeyChanged();
    partial void OnWOChanging(string value);
    partial void OnWOChanged();
    partial void OnInsertFlagChanging(string value);
    partial void OnInsertFlagChanged();
    partial void OnFlagTimeChanging(System.Nullable<int> value);
    partial void OnFlagTimeChanged();
    #endregion
		
		public GetFather_FL_Out()
		{
			OnCreated();
		}
		
		[Column(Storage="_IndexKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexKey
		{
			get
			{
				return this._IndexKey;
			}
			set
			{
				if ((this._IndexKey != value))
				{
					this.OnIndexKeyChanging(value);
					this.SendPropertyChanging();
					this._IndexKey = value;
					this.SendPropertyChanged("IndexKey");
					this.OnIndexKeyChanged();
				}
			}
		}
		
		[Column(Storage="_WO", DbType="VarChar(50)")]
		public string WO
		{
			get
			{
				return this._WO;
			}
			set
			{
				if ((this._WO != value))
				{
					this.OnWOChanging(value);
					this.SendPropertyChanging();
					this._WO = value;
					this.SendPropertyChanged("WO");
					this.OnWOChanged();
				}
			}
		}
		
		[Column(Storage="_InsertFlag", DbType="VarChar(50)")]
		public string InsertFlag
		{
			get
			{
				return this._InsertFlag;
			}
			set
			{
				if ((this._InsertFlag != value))
				{
					this.OnInsertFlagChanging(value);
					this.SendPropertyChanging();
					this._InsertFlag = value;
					this.SendPropertyChanged("InsertFlag");
					this.OnInsertFlagChanged();
				}
			}
		}
		
		[Column(Storage="_FlagTime", DbType="Int")]
		public System.Nullable<int> FlagTime
		{
			get
			{
				return this._FlagTime;
			}
			set
			{
				if ((this._FlagTime != value))
				{
					this.OnFlagTimeChanging(value);
					this.SendPropertyChanging();
					this._FlagTime = value;
					this.SendPropertyChanged("FlagTime");
					this.OnFlagTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GetFather_TL_In")]
	public partial class GetFather_TL_In : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexKey;
		
		private string _WO;
		
		private string _InsertFlag;
		
		private System.Nullable<int> _FlagTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexKeyChanging(int value);
    partial void OnIndexKeyChanged();
    partial void OnWOChanging(string value);
    partial void OnWOChanged();
    partial void OnInsertFlagChanging(string value);
    partial void OnInsertFlagChanged();
    partial void OnFlagTimeChanging(System.Nullable<int> value);
    partial void OnFlagTimeChanged();
    #endregion
		
		public GetFather_TL_In()
		{
			OnCreated();
		}
		
		[Column(Storage="_IndexKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexKey
		{
			get
			{
				return this._IndexKey;
			}
			set
			{
				if ((this._IndexKey != value))
				{
					this.OnIndexKeyChanging(value);
					this.SendPropertyChanging();
					this._IndexKey = value;
					this.SendPropertyChanged("IndexKey");
					this.OnIndexKeyChanged();
				}
			}
		}
		
		[Column(Storage="_WO", DbType="VarChar(50)")]
		public string WO
		{
			get
			{
				return this._WO;
			}
			set
			{
				if ((this._WO != value))
				{
					this.OnWOChanging(value);
					this.SendPropertyChanging();
					this._WO = value;
					this.SendPropertyChanged("WO");
					this.OnWOChanged();
				}
			}
		}
		
		[Column(Storage="_InsertFlag", DbType="VarChar(50)")]
		public string InsertFlag
		{
			get
			{
				return this._InsertFlag;
			}
			set
			{
				if ((this._InsertFlag != value))
				{
					this.OnInsertFlagChanging(value);
					this.SendPropertyChanging();
					this._InsertFlag = value;
					this.SendPropertyChanged("InsertFlag");
					this.OnInsertFlagChanged();
				}
			}
		}
		
		[Column(Storage="_FlagTime", DbType="Int")]
		public System.Nullable<int> FlagTime
		{
			get
			{
				return this._FlagTime;
			}
			set
			{
				if ((this._FlagTime != value))
				{
					this.OnFlagTimeChanging(value);
					this.SendPropertyChanging();
					this._FlagTime = value;
					this.SendPropertyChanged("FlagTime");
					this.OnFlagTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GetMaterialData")]
	public partial class GetMaterialData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IndexKey;
		
		private string _WO;
		
		private string _InsertFlag;
		
		private System.Nullable<int> _FlagTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIndexKeyChanging(int value);
    partial void OnIndexKeyChanged();
    partial void OnWOChanging(string value);
    partial void OnWOChanged();
    partial void OnInsertFlagChanging(string value);
    partial void OnInsertFlagChanged();
    partial void OnFlagTimeChanging(System.Nullable<int> value);
    partial void OnFlagTimeChanged();
    #endregion
		
		public GetMaterialData()
		{
			OnCreated();
		}
		
		[Column(Storage="_IndexKey", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IndexKey
		{
			get
			{
				return this._IndexKey;
			}
			set
			{
				if ((this._IndexKey != value))
				{
					this.OnIndexKeyChanging(value);
					this.SendPropertyChanging();
					this._IndexKey = value;
					this.SendPropertyChanged("IndexKey");
					this.OnIndexKeyChanged();
				}
			}
		}
		
		[Column(Storage="_WO", DbType="VarChar(50)")]
		public string WO
		{
			get
			{
				return this._WO;
			}
			set
			{
				if ((this._WO != value))
				{
					this.OnWOChanging(value);
					this.SendPropertyChanging();
					this._WO = value;
					this.SendPropertyChanged("WO");
					this.OnWOChanged();
				}
			}
		}
		
		[Column(Storage="_InsertFlag", DbType="VarChar(50)")]
		public string InsertFlag
		{
			get
			{
				return this._InsertFlag;
			}
			set
			{
				if ((this._InsertFlag != value))
				{
					this.OnInsertFlagChanging(value);
					this.SendPropertyChanging();
					this._InsertFlag = value;
					this.SendPropertyChanged("InsertFlag");
					this.OnInsertFlagChanged();
				}
			}
		}
		
		[Column(Storage="_FlagTime", DbType="Int")]
		public System.Nullable<int> FlagTime
		{
			get
			{
				return this._FlagTime;
			}
			set
			{
				if ((this._FlagTime != value))
				{
					this.OnFlagTimeChanging(value);
					this.SendPropertyChanging();
					this._FlagTime = value;
					this.SendPropertyChanged("FlagTime");
					this.OnFlagTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPiece_ELWFilteringMachineHeader")]
	public partial class ByPiece_ELWFilteringMachineHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _IDONo;
		
		private string _ProjectNo;
		
		private System.Nullable<int> _IssueQty;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _Remark;
		
		private System.Nullable<int> _NumOfTime;
		
		private System.Nullable<int> _Flag;
		
		private EntitySet<ByPiece_ELWFilteringMachineDetail> _ByPiece_ELWFilteringMachineDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnIDONoChanging(string value);
    partial void OnIDONoChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnIssueQtyChanging(System.Nullable<int> value);
    partial void OnIssueQtyChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnNumOfTimeChanging(System.Nullable<int> value);
    partial void OnNumOfTimeChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_ELWFilteringMachineHeader()
		{
			this._ByPiece_ELWFilteringMachineDetails = new EntitySet<ByPiece_ELWFilteringMachineDetail>(new Action<ByPiece_ELWFilteringMachineDetail>(this.attach_ByPiece_ELWFilteringMachineDetails), new Action<ByPiece_ELWFilteringMachineDetail>(this.detach_ByPiece_ELWFilteringMachineDetails));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_IDONo", DbType="NVarChar(20)")]
		public string IDONo
		{
			get
			{
				return this._IDONo;
			}
			set
			{
				if ((this._IDONo != value))
				{
					this.OnIDONoChanging(value);
					this.SendPropertyChanging();
					this._IDONo = value;
					this.SendPropertyChanged("IDONo");
					this.OnIDONoChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="NVarChar(20)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_IssueQty", DbType="Int")]
		public System.Nullable<int> IssueQty
		{
			get
			{
				return this._IssueQty;
			}
			set
			{
				if ((this._IssueQty != value))
				{
					this.OnIssueQtyChanging(value);
					this.SendPropertyChanging();
					this._IssueQty = value;
					this.SendPropertyChanged("IssueQty");
					this.OnIssueQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_NumOfTime", DbType="Int")]
		public System.Nullable<int> NumOfTime
		{
			get
			{
				return this._NumOfTime;
			}
			set
			{
				if ((this._NumOfTime != value))
				{
					this.OnNumOfTimeChanging(value);
					this.SendPropertyChanging();
					this._NumOfTime = value;
					this.SendPropertyChanged("NumOfTime");
					this.OnNumOfTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="ByPiece_ELWFilteringMachineHeader_ByPiece_ELWFilteringMachineDetail", Storage="_ByPiece_ELWFilteringMachineDetails", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<ByPiece_ELWFilteringMachineDetail> ByPiece_ELWFilteringMachineDetails
		{
			get
			{
				return this._ByPiece_ELWFilteringMachineDetails;
			}
			set
			{
				this._ByPiece_ELWFilteringMachineDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ByPiece_ELWFilteringMachineDetails(ByPiece_ELWFilteringMachineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ByPiece_ELWFilteringMachineHeader = this;
		}
		
		private void detach_ByPiece_ELWFilteringMachineDetails(ByPiece_ELWFilteringMachineDetail entity)
		{
			this.SendPropertyChanging();
			entity.ByPiece_ELWFilteringMachineHeader = null;
		}
	}
	
	[Table(Name="dbo.ByPiece_ELWFilteringMachineDetail")]
	public partial class ByPiece_ELWFilteringMachineDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<int> _HeaderOID;
		
		private string _EmpID;
		
		private string _EmpName;
		
		private int _Qty;
		
		private string _Remark;
		
		private System.Nullable<int> _Flag;
		
		private EntityRef<ByPiece_ELWFilteringMachineHeader> _ByPiece_ELWFilteringMachineHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<int> value);
    partial void OnHeaderOIDChanged();
    partial void OnEmpIDChanging(string value);
    partial void OnEmpIDChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnQtyChanging(int value);
    partial void OnQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPiece_ELWFilteringMachineDetail()
		{
			this._ByPiece_ELWFilteringMachineHeader = default(EntityRef<ByPiece_ELWFilteringMachineHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="Int")]
		public System.Nullable<int> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._ByPiece_ELWFilteringMachineHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpID", DbType="NVarChar(10)")]
		public string EmpID
		{
			get
			{
				return this._EmpID;
			}
			set
			{
				if ((this._EmpID != value))
				{
					this.OnEmpIDChanging(value);
					this.SendPropertyChanging();
					this._EmpID = value;
					this.SendPropertyChanged("EmpID");
					this.OnEmpIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmpName", DbType="NVarChar(20)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Int NOT NULL")]
		public int Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(200)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="ByPiece_ELWFilteringMachineHeader_ByPiece_ELWFilteringMachineDetail", Storage="_ByPiece_ELWFilteringMachineHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ByPiece_ELWFilteringMachineHeader ByPiece_ELWFilteringMachineHeader
		{
			get
			{
				return this._ByPiece_ELWFilteringMachineHeader.Entity;
			}
			set
			{
				ByPiece_ELWFilteringMachineHeader previousValue = this._ByPiece_ELWFilteringMachineHeader.Entity;
				if (((previousValue != value) 
							|| (this._ByPiece_ELWFilteringMachineHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ByPiece_ELWFilteringMachineHeader.Entity = null;
						previousValue.ByPiece_ELWFilteringMachineDetails.Remove(this);
					}
					this._ByPiece_ELWFilteringMachineHeader.Entity = value;
					if ((value != null))
					{
						value.ByPiece_ELWFilteringMachineDetails.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ByPiece_ELWFilteringMachineHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ByPrice_Order")]
	public partial class ByPrice_Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _OrderID;
		
		private string _Calculate_Type;
		
		private string _MaterialType;
		
		private string _SAH_Type;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _DueDate;
		
		private string _OrderMan;
		
		private string _Remark;
		
		private System.Nullable<int> _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderIDChanging(string value);
    partial void OnOrderIDChanged();
    partial void OnCalculate_TypeChanging(string value);
    partial void OnCalculate_TypeChanged();
    partial void OnMaterialTypeChanging(string value);
    partial void OnMaterialTypeChanged();
    partial void OnSAH_TypeChanging(string value);
    partial void OnSAH_TypeChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnOrderManChanging(string value);
    partial void OnOrderManChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnFlagChanging(System.Nullable<int> value);
    partial void OnFlagChanged();
    #endregion
		
		public ByPrice_Order()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrderID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_Calculate_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Calculate_Type
		{
			get
			{
				return this._Calculate_Type;
			}
			set
			{
				if ((this._Calculate_Type != value))
				{
					this.OnCalculate_TypeChanging(value);
					this.SendPropertyChanging();
					this._Calculate_Type = value;
					this.SendPropertyChanged("Calculate_Type");
					this.OnCalculate_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(800) NOT NULL", CanBeNull=false)]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this.OnMaterialTypeChanging(value);
					this.SendPropertyChanging();
					this._MaterialType = value;
					this.SendPropertyChanged("MaterialType");
					this.OnMaterialTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SAH_Type", DbType="VarChar(10)")]
		public string SAH_Type
		{
			get
			{
				return this._SAH_Type;
			}
			set
			{
				if ((this._SAH_Type != value))
				{
					this.OnSAH_TypeChanging(value);
					this.SendPropertyChanging();
					this._SAH_Type = value;
					this.SendPropertyChanged("SAH_Type");
					this.OnSAH_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_OrderMan", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderMan
		{
			get
			{
				return this._OrderMan;
			}
			set
			{
				if ((this._OrderMan != value))
				{
					this.OnOrderManChanging(value);
					this.SendPropertyChanging();
					this._OrderMan = value;
					this.SendPropertyChanged("OrderMan");
					this.OnOrderManChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(100)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="Int")]
		public System.Nullable<int> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PH.FabricInspection.BO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    using System.Drawing;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PH.FabricInspection")]
	public partial class FabricInspectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void UpdateFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void DeleteFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void InsertFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void UpdateFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void DeleteFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void InsertFabric_Defect_File(Fabric_Defect_File instance);
    partial void UpdateFabric_Defect_File(Fabric_Defect_File instance);
    partial void DeleteFabric_Defect_File(Fabric_Defect_File instance);
    partial void InsertFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void UpdateFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void DeleteFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void InsertFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void UpdateFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void DeleteFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void InsertRN_Header(RN_Header instance);
    partial void UpdateRN_Header(RN_Header instance);
    partial void DeleteRN_Header(RN_Header instance);
    partial void InsertRN_Detail(RN_Detail instance);
    partial void UpdateRN_Detail(RN_Detail instance);
    partial void DeleteRN_Detail(RN_Detail instance);
    partial void InsertFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void UpdateFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void DeleteFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void InsertFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    partial void UpdateFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    partial void DeleteFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    #endregion
		
		public FabricInspectionDataContext() : 
				base(global::PH.FabricInspection.BO.Properties.Settings.Default.PH_FabricInspectionConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Header> Fabric_Insp_Headers
		{
			get
			{
				return this.GetTable<Fabric_Insp_Header>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Width> Fabric_Insp_Widths
		{
			get
			{
				return this.GetTable<Fabric_Insp_Width>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Defect_File> Fabric_Defect_Files
		{
			get
			{
				return this.GetTable<Fabric_Defect_File>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Picture> Fabric_Insp_Pictures
		{
			get
			{
				return this.GetTable<Fabric_Insp_Picture>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Sys_Parameter> Fabric_Sys_Parameters
		{
			get
			{
				return this.GetTable<Fabric_Sys_Parameter>();
			}
		}
		
		public System.Data.Linq.Table<RN_Header> RN_Headers
		{
			get
			{
				return this.GetTable<RN_Header>();
			}
		}
		
		public System.Data.Linq.Table<RN_Detail> RN_Details
		{
			get
			{
				return this.GetTable<RN_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_SpreadDefect> Fabric_Insp_SpreadDefects
		{
			get
			{
				return this.GetTable<Fabric_Insp_SpreadDefect>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_PartDefect> Fabric_Insp_PartDefects
		{
			get
			{
				return this.GetTable<Fabric_Insp_PartDefect>();
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Header")]
	public partial class Fabric_Insp_Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
        private const string MOULD_TRIAL_OK_DESCRIPTION = "Ok";
        private const string MOULD_TRIAL_REJECT_DESCRIPTION = "Reject";
        private const string MOULD_TRIAL_NOMOULDTRIAL_DESCRIPTION = "No Mould Trial";


		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Item_No;
		
		private string _Item_Desc;
		
		private string _PO;
		
		private string _HdoNo;
		
		private string _ProjectNo;
		
		private string _IQC_Reference;
		
		private string _Lot_Id;
		
		private System.Nullable<decimal> _Actual_Length;
		
		private System.Nullable<decimal> _Actual_Weight;
		
		private System.Nullable<decimal> _Supplier_Width;
		
		private System.Nullable<decimal> _Insp_Length;
		
		private System.Nullable<decimal> _GM_SQM;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Supplier_Code;
		
		private string _Supplich_Batch;
		
		private string _Roll_No;
		
		private System.Nullable<int> _Total_Points;
		
		private System.Nullable<decimal> _Points_Hundred_SQM;
		
		private System.Nullable<decimal> _Deductive_Qty;
		
		private System.Nullable<decimal> _Wastage;
		
		private string _Insp_Result;
		
		private string _Party_Insp_Result;
		
		private string _Spread_Insp_Result;
		
		private string _Mould_Trial_Result;
		
		private string _Color_Group_Status;
		
		private string _Spread_Defect_Exist;
		
		private string _Insp_Confirm;
		
		private System.Nullable<decimal> _PH_Sample;
		
		private System.Nullable<decimal> _Panel_Size1;
		
		private System.Nullable<decimal> _Panel_Size2;
		
		private System.Nullable<decimal> _Special_Marker;
		
		private string _Spread_Remark;
		
		private string _Mould_Trial_Remark;
		
		private string _Stock_In_Date;
		
		private System.Nullable<System.DateTime> _Stock_In_Date_DateTime;
		
		private System.Nullable<int> _Turn_Size;
		
		private string _Supplier_Length_Unit;
		
		private string _Supplier_Width_Unit;
		
		private System.Nullable<int> _SideToSideH_Width;
		
		private string _Inspector;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private EntitySet<Fabric_Insp_Width> _Fabric_Insp_Widths;
		
		private EntitySet<Fabric_Insp_Picture> _Fabric_Insp_Pictures;
		
		private EntitySet<Fabric_Insp_SpreadDefect> _Fabric_Insp_SpreadDefects;
		
		private EntitySet<Fabric_Insp_PartDefect> _Fabric_Insp_PartDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnItem_DescChanging(string value);
    partial void OnItem_DescChanged();
    partial void OnPOChanging(string value);
    partial void OnPOChanged();
    partial void OnHdoNoChanging(string value);
    partial void OnHdoNoChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnIQC_ReferenceChanging(string value);
    partial void OnIQC_ReferenceChanged();
    partial void OnLot_IdChanging(string value);
    partial void OnLot_IdChanged();
    partial void OnActual_LengthChanging(System.Nullable<decimal> value);
    partial void OnActual_LengthChanged();
    partial void OnActual_WeightChanging(System.Nullable<decimal> value);
    partial void OnActual_WeightChanged();
    partial void OnSupplier_WidthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_WidthChanged();
    partial void OnInsp_LengthChanging(System.Nullable<decimal> value);
    partial void OnInsp_LengthChanged();
    partial void OnGM_SQMChanging(System.Nullable<decimal> value);
    partial void OnGM_SQMChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnSupplier_CodeChanging(string value);
    partial void OnSupplier_CodeChanged();
    partial void OnSupplich_BatchChanging(string value);
    partial void OnSupplich_BatchChanged();
    partial void OnRoll_NoChanging(string value);
    partial void OnRoll_NoChanged();
    partial void OnTotal_PointsChanging(System.Nullable<int> value);
    partial void OnTotal_PointsChanged();
    partial void OnPoints_Hundred_SQMChanging(System.Nullable<decimal> value);
    partial void OnPoints_Hundred_SQMChanged();
    partial void OnDeductive_QtyChanging(System.Nullable<decimal> value);
    partial void OnDeductive_QtyChanged();
    partial void OnWastageChanging(System.Nullable<decimal> value);
    partial void OnWastageChanged();
    partial void OnInsp_ResultChanging(string value);
    partial void OnInsp_ResultChanged();
    partial void OnParty_Insp_ResultChanging(string value);
    partial void OnParty_Insp_ResultChanged();
    partial void OnSpread_Insp_ResultChanging(string value);
    partial void OnSpread_Insp_ResultChanged();
    partial void OnMould_Trial_ResultChanging(string value);
    partial void OnMould_Trial_ResultChanged();
    partial void OnColor_Group_StatusChanging(string value);
    partial void OnColor_Group_StatusChanged();
    partial void OnSpread_Defect_ExistChanging(string value);
    partial void OnSpread_Defect_ExistChanged();
    partial void OnInsp_ConfirmChanging(string value);
    partial void OnInsp_ConfirmChanged();
    partial void OnPH_SampleChanging(System.Nullable<decimal> value);
    partial void OnPH_SampleChanged();
    partial void OnPanel_Size1Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size1Changed();
    partial void OnPanel_Size2Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size2Changed();
    partial void OnSpecial_MarkerChanging(System.Nullable<decimal> value);
    partial void OnSpecial_MarkerChanged();
    partial void OnSpread_RemarkChanging(string value);
    partial void OnSpread_RemarkChanged();
    partial void OnMould_Trial_RemarkChanging(string value);
    partial void OnMould_Trial_RemarkChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnStock_In_Date_DateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStock_In_Date_DateTimeChanged();
    partial void OnTurn_SizeChanging(System.Nullable<int> value);
    partial void OnTurn_SizeChanged();
    partial void OnSupplier_Length_UnitChanging(string value);
    partial void OnSupplier_Length_UnitChanged();
    partial void OnSupplier_Width_UnitChanging(string value);
    partial void OnSupplier_Width_UnitChanged();
    partial void OnSideToSideH_WidthChanging(System.Nullable<int> value);
    partial void OnSideToSideH_WidthChanged();
    partial void OnInspectorChanging(string value);
    partial void OnInspectorChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    #endregion
		
		public Fabric_Insp_Header()
		{
			this._Fabric_Insp_Widths = new EntitySet<Fabric_Insp_Width>(new Action<Fabric_Insp_Width>(this.attach_Fabric_Insp_Widths), new Action<Fabric_Insp_Width>(this.detach_Fabric_Insp_Widths));
			this._Fabric_Insp_Pictures = new EntitySet<Fabric_Insp_Picture>(new Action<Fabric_Insp_Picture>(this.attach_Fabric_Insp_Pictures), new Action<Fabric_Insp_Picture>(this.detach_Fabric_Insp_Pictures));
			this._Fabric_Insp_SpreadDefects = new EntitySet<Fabric_Insp_SpreadDefect>(new Action<Fabric_Insp_SpreadDefect>(this.attach_Fabric_Insp_SpreadDefects), new Action<Fabric_Insp_SpreadDefect>(this.detach_Fabric_Insp_SpreadDefects));
			this._Fabric_Insp_PartDefects = new EntitySet<Fabric_Insp_PartDefect>(new Action<Fabric_Insp_PartDefect>(this.attach_Fabric_Insp_PartDefects), new Action<Fabric_Insp_PartDefect>(this.detach_Fabric_Insp_PartDefects));
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50)")]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this.OnItem_DescChanging(value);
					this.SendPropertyChanging();
					this._Item_Desc = value;
					this.SendPropertyChanged("Item_Desc");
					this.OnItem_DescChanged();
				}
			}
		}
		
		[Column(Storage="_PO", DbType="VarChar(8)")]
		public string PO
		{
			get
			{
				return this._PO;
			}
			set
			{
				if ((this._PO != value))
				{
					this.OnPOChanging(value);
					this.SendPropertyChanging();
					this._PO = value;
					this.SendPropertyChanged("PO");
					this.OnPOChanged();
				}
			}
		}
		
		[Column(Storage="_HdoNo", DbType="VarChar(50)")]
		public string HdoNo
		{
			get
			{
				return this._HdoNo;
			}
			set
			{
				if ((this._HdoNo != value))
				{
					this.OnHdoNoChanging(value);
					this.SendPropertyChanging();
					this._HdoNo = value;
					this.SendPropertyChanged("HdoNo");
					this.OnHdoNoChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(50)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_IQC_Reference", DbType="VarChar(50)")]
		public string IQC_Reference
		{
			get
			{
				return this._IQC_Reference;
			}
			set
			{
				if ((this._IQC_Reference != value))
				{
					this.OnIQC_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._IQC_Reference = value;
					this.SendPropertyChanged("IQC_Reference");
					this.OnIQC_ReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(15)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this.OnLot_IdChanging(value);
					this.SendPropertyChanging();
					this._Lot_Id = value;
					this.SendPropertyChanged("Lot_Id");
					this.OnLot_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Length
		{
			get
			{
                if (this._Actual_Length == null)
                {
                    return 0;
                }

				return this._Actual_Length;
			}
			set
			{
				if ((this._Actual_Length != value))
				{
					this.OnActual_LengthChanging(value);
					this.SendPropertyChanging();
					this._Actual_Length = value;
					this.SendPropertyChanged("Actual_Length");
					this.OnActual_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Weight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Weight
		{
			get
			{
                if (this._Actual_Weight == null)
                {
                    return 0;
                }
                return this._Actual_Weight;
			}
			set
			{
				if ((this._Actual_Weight != value))
				{
					this.OnActual_WeightChanging(value);
					this.SendPropertyChanging();
					this._Actual_Weight = value;
					this.SendPropertyChanged("Actual_Weight");
					this.OnActual_WeightChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Supplier_Width
		{
			get
			{
                if (this._Supplier_Width == null)
                {
                    return 0;
                }

				return this._Supplier_Width;
			}
			set
			{
				if ((this._Supplier_Width != value))
				{
					this.OnSupplier_WidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width = value;
					this.SendPropertyChanged("Supplier_Width");
					this.OnSupplier_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Length
		{
			get
			{
                if (this._Insp_Length == null)
                {
                    return 0;
                }

				return this._Insp_Length;
			}
			set
			{
				if ((this._Insp_Length != value))
				{
					this.OnInsp_LengthChanging(value);
					this.SendPropertyChanging();
					this._Insp_Length = value;
					this.SendPropertyChanged("Insp_Length");
					this.OnInsp_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_GM_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GM_SQM
		{
			get
			{
                if (this._GM_SQM == null)
                {
                    return 0;
                }

				return this._GM_SQM;
			}
			set
			{
				if ((this._GM_SQM != value))
				{
					this.OnGM_SQMChanging(value);
					this.SendPropertyChanging();
					this._GM_SQM = value;
					this.SendPropertyChanged("GM_SQM");
					this.OnGM_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
                if (this._Usable_Width == null)
                {
                    return 0;
                }

				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Code", DbType="VarChar(7)")]
		public string Supplier_Code
		{
			get
			{
				return this._Supplier_Code;
			}
			set
			{
				if ((this._Supplier_Code != value))
				{
					this.OnSupplier_CodeChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Code = value;
					this.SendPropertyChanged("Supplier_Code");
					this.OnSupplier_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50)")]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this.OnSupplich_BatchChanging(value);
					this.SendPropertyChanging();
					this._Supplich_Batch = value;
					this.SendPropertyChanged("Supplich_Batch");
					this.OnSupplich_BatchChanged();
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this.OnRoll_NoChanging(value);
					this.SendPropertyChanging();
					this._Roll_No = value;
					this.SendPropertyChanged("Roll_No");
					this.OnRoll_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Total_Points", DbType="Int")]
		public System.Nullable<int> Total_Points
		{
			get
			{
                if (this._Total_Points == null)
                {
                    return 0;
                }

				return this._Total_Points;
			}
			set
			{
				if ((this._Total_Points != value))
				{
					this.OnTotal_PointsChanging(value);
					this.SendPropertyChanging();
					this._Total_Points = value;
					this.SendPropertyChanged("Total_Points");
					this.OnTotal_PointsChanged();
				}
			}
		}
		
		[Column(Storage="_Points_Hundred_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Points_Hundred_SQM
		{
			get
			{
                if (this._Points_Hundred_SQM == null)
                {
                    return 0;
                }

				return this._Points_Hundred_SQM;
			}
			set
			{
				if ((this._Points_Hundred_SQM != value))
				{
					this.OnPoints_Hundred_SQMChanging(value);
					this.SendPropertyChanging();
					this._Points_Hundred_SQM = value;
					this.SendPropertyChanged("Points_Hundred_SQM");
					this.OnPoints_Hundred_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Deductive_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Deductive_Qty
		{
			get
			{
                if (this._Deductive_Qty == null)
                {
                    return 0;
                }

				return this._Deductive_Qty;
			}
			set
			{
				if ((this._Deductive_Qty != value))
				{
					this.OnDeductive_QtyChanging(value);
					this.SendPropertyChanging();
					this._Deductive_Qty = value;
					this.SendPropertyChanged("Deductive_Qty");
					this.OnDeductive_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Wastage", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Wastage
		{
			get
			{
                if (this._Wastage == null)
                {
                    return 0;
                }

				return this._Wastage;
			}
			set
			{
				if ((this._Wastage != value))
				{
					this.OnWastageChanging(value);
					this.SendPropertyChanging();
					this._Wastage = value;
					this.SendPropertyChanged("Wastage");
					this.OnWastageChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Result", DbType="VarChar(50)")]
		public string Insp_Result
		{
			get
			{
				return this._Insp_Result;
			}
			set
			{
				if ((this._Insp_Result != value))
				{
					this.OnInsp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Insp_Result = value;
					this.SendPropertyChanged("Insp_Result");
					this.OnInsp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Party_Insp_Result", DbType="VarChar(50)")]
		public string Party_Insp_Result
		{
			get
			{
				return this._Party_Insp_Result;
			}
			set
			{
				if ((this._Party_Insp_Result != value))
				{
					this.OnParty_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Party_Insp_Result = value;
					this.SendPropertyChanged("Party_Insp_Result");
					this.OnParty_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Insp_Result", DbType="VarChar(50)")]
		public string Spread_Insp_Result
		{
			get
			{
				return this._Spread_Insp_Result;
			}
			set
			{
				if ((this._Spread_Insp_Result != value))
				{
					this.OnSpread_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Spread_Insp_Result = value;
					this.SendPropertyChanged("Spread_Insp_Result");
					this.OnSpread_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Result", DbType="VarChar(50)")]
		public string Mould_Trial_Result
		{
			get
			{
				return this._Mould_Trial_Result;
			}
			set
			{
				if ((this._Mould_Trial_Result != value))
				{
					this.OnMould_Trial_ResultChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Result = value;
					this.SendPropertyChanged("Mould_Trial_Result");
					this.OnMould_Trial_ResultChanged();
				}
			}
		}

        public string Mould_Trial_Result_Desc
        {
            get
            {
                if (this.Mould_Trial_Result == "1")
                {
                    return MOULD_TRIAL_OK_DESCRIPTION;
                }
                else if (this.Mould_Trial_Result == "2")
                {
                    return MOULD_TRIAL_REJECT_DESCRIPTION;
                }
                else if (this.Mould_Trial_Result == "3")
                {
                    return MOULD_TRIAL_NOMOULDTRIAL_DESCRIPTION;
                }
                else
                {
                    return "";
                }

            }
        }

        [Column(Storage = "_Color_Group_Status", DbType = "VarChar(50)")]
		public string Color_Group_Status
		{
			get
			{
				return this._Color_Group_Status;
			}
			set
			{
				if ((this._Color_Group_Status != value))
				{
					this.OnColor_Group_StatusChanging(value);
					this.SendPropertyChanging();
					this._Color_Group_Status = value;
					this.SendPropertyChanged("Color_Group_Status");
					this.OnColor_Group_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Exist", DbType="VarChar(50)")]
		public string Spread_Defect_Exist
		{
			get
			{
				return this._Spread_Defect_Exist;
			}
			set
			{
				if ((this._Spread_Defect_Exist != value))
				{
					this.OnSpread_Defect_ExistChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Exist = value;
					this.SendPropertyChanged("Spread_Defect_Exist");
					this.OnSpread_Defect_ExistChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Confirm", DbType="VarChar(50)")]
		public string Insp_Confirm
		{
			get
			{
				return this._Insp_Confirm;
			}
			set
			{
				if ((this._Insp_Confirm != value))
				{
					this.OnInsp_ConfirmChanging(value);
					this.SendPropertyChanging();
					this._Insp_Confirm = value;
					this.SendPropertyChanged("Insp_Confirm");
					this.OnInsp_ConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Sample", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PH_Sample
		{
			get
			{
                if (this._PH_Sample == null)
                {
                    return 0;
                }

				return this._PH_Sample;
			}
			set
			{
				if ((this._PH_Sample != value))
				{
					this.OnPH_SampleChanging(value);
					this.SendPropertyChanging();
					this._PH_Sample = value;
					this.SendPropertyChanged("PH_Sample");
					this.OnPH_SampleChanged();
				}
			}
		}
		
		[Column(Storage="_Panel_Size1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size1
		{
			get
			{
                if (this._Panel_Size1 == null)
                {
                    return 0;
                }

				return this._Panel_Size1;
			}
			set
			{
				if ((this._Panel_Size1 != value))
				{
					this.OnPanel_Size1Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size1 = value;
					this.SendPropertyChanged("Panel_Size1");
					this.OnPanel_Size1Changed();
				}
			}
		}
		
		[Column(Storage="_Panel_Size2", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size2
		{
			get
			{
                if (this._Panel_Size2 == null)
                {
                    return 0;
                }

				return this._Panel_Size2;
			}
			set
			{
				if ((this._Panel_Size2 != value))
				{
					this.OnPanel_Size2Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size2 = value;
					this.SendPropertyChanged("Panel_Size2");
					this.OnPanel_Size2Changed();
				}
			}
		}
		
		[Column(Storage="_Special_Marker", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Special_Marker
		{
			get
			{
                if (this._Special_Marker == null)
                {
                    return 0;
                }


				return this._Special_Marker;
			}
			set
			{
				if ((this._Special_Marker != value))
				{
					this.OnSpecial_MarkerChanging(value);
					this.SendPropertyChanging();
					this._Special_Marker = value;
					this.SendPropertyChanged("Special_Marker");
					this.OnSpecial_MarkerChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Remark", DbType="VarChar(500)")]
		public string Spread_Remark
		{
			get
			{
				return this._Spread_Remark;
			}
			set
			{
				if ((this._Spread_Remark != value))
				{
					this.OnSpread_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Spread_Remark = value;
					this.SendPropertyChanged("Spread_Remark");
					this.OnSpread_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Remark", DbType="VarChar(500)")]
		public string Mould_Trial_Remark
		{
			get
			{
				return this._Mould_Trial_Remark;
			}
			set
			{
				if ((this._Mould_Trial_Remark != value))
				{
					this.OnMould_Trial_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Remark = value;
					this.SendPropertyChanged("Mould_Trial_Remark");
					this.OnMould_Trial_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10)")]
		public string Stock_In_Date
		{
			get
			{
                if (Lot_Id != null)
                {
                    if (Lot_Id.Length >= 6)
                    {
                        return Lot_Id.Substring(0, 6);
                    }
                }
                return "";
                //return this._Stock_In_Date;
            }
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					//this._Stock_In_Date = value;
                    if (Lot_Id != null)
                    {
                        if (Lot_Id.Length >= 6)
                        {
                            this._Stock_In_Date = Lot_Id.Substring(0, 6);
                        }
                    }
                    this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Stock_In_Date_DateTime
		{
			get
			{
				return this._Stock_In_Date_DateTime;
			}
			set
			{
				if ((this._Stock_In_Date_DateTime != value))
				{
					this.OnStock_In_Date_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date_DateTime = value;
					this.SendPropertyChanged("Stock_In_Date_DateTime");
					this.OnStock_In_Date_DateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Turn_Size", DbType="Int")]
		public System.Nullable<int> Turn_Size
		{
			get
			{
                if (this._Turn_Size == null)
                {
                    return 0;
                }

				return this._Turn_Size;
			}
			set
			{
				if ((this._Turn_Size != value))
				{
					this.OnTurn_SizeChanging(value);
					this.SendPropertyChanging();
					this._Turn_Size = value;
					this.SendPropertyChanged("Turn_Size");
					this.OnTurn_SizeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Length_Unit", DbType="VarChar(50)")]
		public string Supplier_Length_Unit
		{
			get
			{
				return this._Supplier_Length_Unit;
			}
			set
			{
				if ((this._Supplier_Length_Unit != value))
				{
					this.OnSupplier_Length_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Length_Unit = value;
					this.SendPropertyChanged("Supplier_Length_Unit");
					this.OnSupplier_Length_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width_Unit", DbType="VarChar(50)")]
		public string Supplier_Width_Unit
		{
			get
			{
				return this._Supplier_Width_Unit;
			}
			set
			{
				if ((this._Supplier_Width_Unit != value))
				{
					this.OnSupplier_Width_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width_Unit = value;
					this.SendPropertyChanged("Supplier_Width_Unit");
					this.OnSupplier_Width_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSideH_Width", DbType="Int")]
		public System.Nullable<int> SideToSideH_Width
		{
			get
			{
                if (this._SideToSideH_Width == null)
                {
                    return 0;
                }

				return this._SideToSideH_Width;
			}
			set
			{
				if ((this._SideToSideH_Width != value))
				{
					this.OnSideToSideH_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSideH_Width = value;
					this.SendPropertyChanged("SideToSideH_Width");
					this.OnSideToSideH_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Inspector", DbType="VarChar(50)")]
		public string Inspector
		{
			get
			{
				return this._Inspector;
			}
			set
			{
				if ((this._Inspector != value))
				{
					this.OnInspectorChanging(value);
					this.SendPropertyChanging();
					this._Inspector = value;
					this.SendPropertyChanged("Inspector");
					this.OnInspectorChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Width", Storage="_Fabric_Insp_Widths", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_Width> Fabric_Insp_Widths
		{
			get
			{
				return this._Fabric_Insp_Widths;
			}
			set
			{
				this._Fabric_Insp_Widths.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Picture", Storage="_Fabric_Insp_Pictures", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_Picture> Fabric_Insp_Pictures
		{
			get
			{
				return this._Fabric_Insp_Pictures;
			}
			set
			{
				this._Fabric_Insp_Pictures.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_SpreadDefect", Storage="_Fabric_Insp_SpreadDefects", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_SpreadDefect> Fabric_Insp_SpreadDefects
		{
			get
			{
				return this._Fabric_Insp_SpreadDefects;
			}
			set
			{
				this._Fabric_Insp_SpreadDefects.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_PartDefect", Storage="_Fabric_Insp_PartDefects", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_PartDefect> Fabric_Insp_PartDefects
		{
			get
			{
				return this._Fabric_Insp_PartDefects;
			}
			set
			{
				this._Fabric_Insp_PartDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fabric_Insp_Widths(Fabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_Widths(Fabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_Pictures(Fabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_Pictures(Fabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_SpreadDefects(Fabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_SpreadDefects(Fabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_PartDefects(Fabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_PartDefects(Fabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Width")]
	public partial class Fabric_Insp_Width : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private System.Nullable<int> _Usable_Width;
		
		private System.Nullable<int> _SideToSide_Width;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnUsable_WidthChanging(System.Nullable<int> value);
    partial void OnUsable_WidthChanged();
    partial void OnSideToSide_WidthChanging(System.Nullable<int> value);
    partial void OnSideToSide_WidthChanged();
    #endregion
		
		public Fabric_Insp_Width()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.Company != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }

//						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.System_Install_No != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }

						//throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Int")]
		public System.Nullable<int> Usable_Width
		{
			get
			{
                if (this._Usable_Width == null)
                {
                    return 0;
                }

				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSide_Width", DbType="Int")]
		public System.Nullable<int> SideToSide_Width
		{
			get
			{
                if (this._SideToSide_Width == null)
                {
                    return 0;
                }


				return this._SideToSide_Width;
			}
			set
			{
				if ((this._SideToSide_Width != value))
				{
					this.OnSideToSide_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSide_Width = value;
					this.SendPropertyChanged("SideToSide_Width");
					this.OnSideToSide_WidthChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Width", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", IsForeignKey=true)]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_Widths.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_Widths.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Defect_File")]
	public partial class Fabric_Defect_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private string _Style_Code;
		
		private string _Defect_Type;
		
		private string _Defect_Nname;
		
		private System.Nullable<int> _Defect_Code;
		
		private System.Nullable<int> _Seq_No;
		
		private string _User_Id;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnStyle_CodeChanging(string value);
    partial void OnStyle_CodeChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NnameChanging(string value);
    partial void OnDefect_NnameChanged();
    partial void OnDefect_CodeChanging(System.Nullable<int> value);
    partial void OnDefect_CodeChanged();
    partial void OnSeq_NoChanging(System.Nullable<int> value);
    partial void OnSeq_NoChanged();
    partial void OnUser_IdChanging(string value);
    partial void OnUser_IdChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public Fabric_Defect_File()
		{
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Style_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Style_Code
		{
			get
			{
				return this._Style_Code;
			}
			set
			{
				if ((this._Style_Code != value))
				{
					this.OnStyle_CodeChanging(value);
					this.SendPropertyChanging();
					this._Style_Code = value;
					this.SendPropertyChanged("Style_Code");
					this.OnStyle_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Nname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Nname
		{
			get
			{
				return this._Defect_Nname;
			}
			set
			{
				if ((this._Defect_Nname != value))
				{
					this.OnDefect_NnameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Nname = value;
					this.SendPropertyChanged("Defect_Nname");
					this.OnDefect_NnameChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Code", DbType="Int")]
		public System.Nullable<int> Defect_Code
		{
			get
			{
                if (this._Defect_Code == null)
                {
                    return 0;
                }

				return this._Defect_Code;
			}
			set
			{
				if ((this._Defect_Code != value))
				{
					this.OnDefect_CodeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Code = value;
					this.SendPropertyChanged("Defect_Code");
					this.OnDefect_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq_No", DbType="Int")]
		public System.Nullable<int> Seq_No
		{
			get
			{
                if (this._Seq_No == null)
                {
                    return 0;
                }

				return this._Seq_No;
			}
			set
			{
				if ((this._Seq_No != value))
				{
					this.OnSeq_NoChanging(value);
					this.SendPropertyChanging();
					this._Seq_No = value;
					this.SendPropertyChanged("Seq_No");
					this.OnSeq_NoChanged();
				}
			}
		}
		
		[Column(Storage="_User_Id", DbType="VarChar(50)")]
		public string User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Picture")]
	public partial class Fabric_Insp_Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _BroadNo;
		
		private System.Data.Linq.Binary _Photo_Image;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnBroadNoChanging(int value);
    partial void OnBroadNoChanged();
    partial void OnPhoto_ImageChanging(System.Data.Linq.Binary value);
    partial void OnPhoto_ImageChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    #endregion
		
		public Fabric_Insp_Picture()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.Company != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }

//						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.System_Install_No != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_BroadNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BroadNo
		{
			get
			{
				return this._BroadNo;
			}
			set
			{
				if ((this._BroadNo != value))
				{
					this.OnBroadNoChanging(value);
					this.SendPropertyChanging();
					this._BroadNo = value;
					this.SendPropertyChanged("BroadNo");
					this.OnBroadNoChanged();
				}
			}
		}
		
		[Column(Storage="_Photo_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo_Image
		{
			get
			{
				return this._Photo_Image;
			}
			set
			{
				if ((this._Photo_Image != value))
				{
					this.OnPhoto_ImageChanging(value);
					this.SendPropertyChanging();
					this._Photo_Image = value;
					this.SendPropertyChanged("Photo_Image");
					this.OnPhoto_ImageChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Picture", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", IsForeignKey=true)]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_Pictures.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_Pictures.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Sys_Parameter")]
	public partial class Fabric_Sys_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private string _Parameter_Type;
		
		private string _Parameter_Key;
		
		private string _Parameter_Desc;
		
		private string _User_Id;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnParameter_TypeChanging(string value);
    partial void OnParameter_TypeChanged();
    partial void OnParameter_KeyChanging(string value);
    partial void OnParameter_KeyChanged();
    partial void OnParameter_DescChanging(string value);
    partial void OnParameter_DescChanged();
    partial void OnUser_IdChanging(string value);
    partial void OnUser_IdChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public Fabric_Sys_Parameter()
		{
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Parameter_Type
		{
			get
			{
				return this._Parameter_Type;
			}
			set
			{
				if ((this._Parameter_Type != value))
				{
					this.OnParameter_TypeChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Type = value;
					this.SendPropertyChanged("Parameter_Type");
					this.OnParameter_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Key", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Parameter_Key
		{
			get
			{
				return this._Parameter_Key;
			}
			set
			{
				if ((this._Parameter_Key != value))
				{
					this.OnParameter_KeyChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Key = value;
					this.SendPropertyChanged("Parameter_Key");
					this.OnParameter_KeyChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Desc", DbType="VarChar(50)")]
		public string Parameter_Desc
		{
			get
			{
				return this._Parameter_Desc;
			}
			set
			{
				if ((this._Parameter_Desc != value))
				{
					this.OnParameter_DescChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Desc = value;
					this.SendPropertyChanged("Parameter_Desc");
					this.OnParameter_DescChanged();
				}
			}
		}
		
		[Column(Storage="_User_Id", DbType="VarChar(50)")]
		public string User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RN_Header")]
	public partial class RN_Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _RN_number;
		
		private string _Item_No;
		
		private string _IQC_Reference;
		
		private System.Nullable<decimal> _Receive_Qty;
		
		private System.Nullable<decimal> _Insp_Qty;
		
		private string _Supplier_Code;
		
		private string _QC_Summary;
		
		private string _Major_Problem1;
		
		private string _Major_Problem2;
		
		private string _Major_Problem3;
		
		private string _Major_Problem4;
		
		private string _Major_Problem5;
		
		private string _Major_Problem6;
		
		private string _Major_Problem7;
		
		private string _RN_confirm;
		
		private string _Stock_In_Date;
		
		private string _Confirmed_User;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private EntitySet<RN_Detail> _RN_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnRN_numberChanging(int value);
    partial void OnRN_numberChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnIQC_ReferenceChanging(string value);
    partial void OnIQC_ReferenceChanged();
    partial void OnReceive_QtyChanging(System.Nullable<decimal> value);
    partial void OnReceive_QtyChanged();
    partial void OnInsp_QtyChanging(System.Nullable<decimal> value);
    partial void OnInsp_QtyChanged();
    partial void OnSupplier_CodeChanging(string value);
    partial void OnSupplier_CodeChanged();
    partial void OnQC_SummaryChanging(string value);
    partial void OnQC_SummaryChanged();
    partial void OnMajor_Problem1Changing(string value);
    partial void OnMajor_Problem1Changed();
    partial void OnMajor_Problem2Changing(string value);
    partial void OnMajor_Problem2Changed();
    partial void OnMajor_Problem3Changing(string value);
    partial void OnMajor_Problem3Changed();
    partial void OnMajor_Problem4Changing(string value);
    partial void OnMajor_Problem4Changed();
    partial void OnMajor_Problem5Changing(string value);
    partial void OnMajor_Problem5Changed();
    partial void OnMajor_Problem6Changing(string value);
    partial void OnMajor_Problem6Changed();
    partial void OnMajor_Problem7Changing(string value);
    partial void OnMajor_Problem7Changed();
    partial void OnRN_confirmChanging(string value);
    partial void OnRN_confirmChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnConfirmed_UserChanging(string value);
    partial void OnConfirmed_UserChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    #endregion
		
		public RN_Header()
		{
			this._RN_Details = new EntitySet<RN_Detail>(new Action<RN_Detail>(this.attach_RN_Details), new Action<RN_Detail>(this.detach_RN_Details));
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_RN_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RN_number
		{
			get
			{
				return this._RN_number;
			}
			set
			{
				if ((this._RN_number != value))
				{
					this.OnRN_numberChanging(value);
					this.SendPropertyChanging();
					this._RN_number = value;
					this.SendPropertyChanged("RN_number");
					this.OnRN_numberChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(50)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_IQC_Reference", DbType="VarChar(50)")]
		public string IQC_Reference
		{
			get
			{
				return this._IQC_Reference;
			}
			set
			{
				if ((this._IQC_Reference != value))
				{
					this.OnIQC_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._IQC_Reference = value;
					this.SendPropertyChanged("IQC_Reference");
					this.OnIQC_ReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Receive_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Receive_Qty
		{
			get
			{
				return this._Receive_Qty;
			}
			set
			{
				if ((this._Receive_Qty != value))
				{
					this.OnReceive_QtyChanging(value);
					this.SendPropertyChanging();
					this._Receive_Qty = value;
					this.SendPropertyChanged("Receive_Qty");
					this.OnReceive_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Qty
		{
			get
			{
				return this._Insp_Qty;
			}
			set
			{
				if ((this._Insp_Qty != value))
				{
					this.OnInsp_QtyChanging(value);
					this.SendPropertyChanging();
					this._Insp_Qty = value;
					this.SendPropertyChanged("Insp_Qty");
					this.OnInsp_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Code", DbType="VarChar(7)")]
		public string Supplier_Code
		{
			get
			{
				return this._Supplier_Code;
			}
			set
			{
				if ((this._Supplier_Code != value))
				{
					this.OnSupplier_CodeChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Code = value;
					this.SendPropertyChanged("Supplier_Code");
					this.OnSupplier_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_QC_Summary", DbType="VarChar(50)")]
		public string QC_Summary
		{
			get
			{
				return this._QC_Summary;
			}
			set
			{
				if ((this._QC_Summary != value))
				{
					this.OnQC_SummaryChanging(value);
					this.SendPropertyChanging();
					this._QC_Summary = value;
					this.SendPropertyChanged("QC_Summary");
					this.OnQC_SummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Major_Problem1", DbType="VarChar(50)")]
		public string Major_Problem1
		{
			get
			{
				return this._Major_Problem1;
			}
			set
			{
				if ((this._Major_Problem1 != value))
				{
					this.OnMajor_Problem1Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem1 = value;
					this.SendPropertyChanged("Major_Problem1");
					this.OnMajor_Problem1Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem2", DbType="VarChar(50)")]
		public string Major_Problem2
		{
			get
			{
				return this._Major_Problem2;
			}
			set
			{
				if ((this._Major_Problem2 != value))
				{
					this.OnMajor_Problem2Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem2 = value;
					this.SendPropertyChanged("Major_Problem2");
					this.OnMajor_Problem2Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem3", DbType="VarChar(50)")]
		public string Major_Problem3
		{
			get
			{
				return this._Major_Problem3;
			}
			set
			{
				if ((this._Major_Problem3 != value))
				{
					this.OnMajor_Problem3Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem3 = value;
					this.SendPropertyChanged("Major_Problem3");
					this.OnMajor_Problem3Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem4", DbType="VarChar(50)")]
		public string Major_Problem4
		{
			get
			{
				return this._Major_Problem4;
			}
			set
			{
				if ((this._Major_Problem4 != value))
				{
					this.OnMajor_Problem4Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem4 = value;
					this.SendPropertyChanged("Major_Problem4");
					this.OnMajor_Problem4Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem5", DbType="VarChar(50)")]
		public string Major_Problem5
		{
			get
			{
				return this._Major_Problem5;
			}
			set
			{
				if ((this._Major_Problem5 != value))
				{
					this.OnMajor_Problem5Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem5 = value;
					this.SendPropertyChanged("Major_Problem5");
					this.OnMajor_Problem5Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem6", DbType="VarChar(50)")]
		public string Major_Problem6
		{
			get
			{
				return this._Major_Problem6;
			}
			set
			{
				if ((this._Major_Problem6 != value))
				{
					this.OnMajor_Problem6Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem6 = value;
					this.SendPropertyChanged("Major_Problem6");
					this.OnMajor_Problem6Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem7", DbType="VarChar(50)")]
		public string Major_Problem7
		{
			get
			{
				return this._Major_Problem7;
			}
			set
			{
				if ((this._Major_Problem7 != value))
				{
					this.OnMajor_Problem7Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem7 = value;
					this.SendPropertyChanged("Major_Problem7");
					this.OnMajor_Problem7Changed();
				}
			}
		}
		
		[Column(Storage="_RN_confirm", DbType="VarChar(50)")]
		public string RN_confirm
		{
			get
			{
				return this._RN_confirm;
			}
			set
			{
				if ((this._RN_confirm != value))
				{
					this.OnRN_confirmChanging(value);
					this.SendPropertyChanging();
					this._RN_confirm = value;
					this.SendPropertyChanged("RN_confirm");
					this.OnRN_confirmChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(50)")]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Confirmed_User", DbType="VarChar(50)")]
		public string Confirmed_User
		{
			get
			{
				return this._Confirmed_User;
			}
			set
			{
				if ((this._Confirmed_User != value))
				{
					this.OnConfirmed_UserChanging(value);
					this.SendPropertyChanging();
					this._Confirmed_User = value;
					this.SendPropertyChanged("Confirmed_User");
					this.OnConfirmed_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Association(Name="RN_Header_RN_Detail", Storage="_RN_Details", OtherKey="Company,RN_number")]
		public EntitySet<RN_Detail> RN_Details
		{
			get
			{
				return this._RN_Details;
			}
			set
			{
				this._RN_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RN_Details(RN_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RN_Header = this;
		}
		
		private void detach_RN_Details(RN_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RN_Header = null;
		}
	}
	
	[Table(Name="dbo.RN_Detail")]
	public partial class RN_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _RN_number;
		
		private int _System_Install_No;
		
		private System.Nullable<decimal> _Insp_Qty;
		
		private string _Reject_Reason;
		
		private string _Supplier_Name;
		
		private string _HDO_no;
		
		private string _Project_No;
		
		private string _Supplier_Inv_No;
		
		private string _Po_No;
		
		private string _Batch_No;
		
		private string _Roll_No;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private EntityRef<RN_Header> _RN_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnRN_numberChanging(int value);
    partial void OnRN_numberChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnInsp_QtyChanging(System.Nullable<decimal> value);
    partial void OnInsp_QtyChanged();
    partial void OnReject_ReasonChanging(string value);
    partial void OnReject_ReasonChanged();
    partial void OnSupplier_NameChanging(string value);
    partial void OnSupplier_NameChanged();
    partial void OnHDO_noChanging(string value);
    partial void OnHDO_noChanged();
    partial void OnProject_NoChanging(string value);
    partial void OnProject_NoChanged();
    partial void OnSupplier_Inv_NoChanging(string value);
    partial void OnSupplier_Inv_NoChanged();
    partial void OnPo_NoChanging(string value);
    partial void OnPo_NoChanged();
    partial void OnBatch_NoChanging(string value);
    partial void OnBatch_NoChanged();
    partial void OnRoll_NoChanging(string value);
    partial void OnRoll_NoChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    #endregion
		
		public RN_Detail()
		{
			this._RN_Header = default(EntityRef<RN_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._RN_Header.HasLoadedOrAssignedValue)
					{
                        if (this.RN_Header != null)
                        {
                            if (this.RN_Header.Company != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_RN_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RN_number
		{
			get
			{
				return this._RN_number;
			}
			set
			{
				if ((this._RN_number != value))
				{
					if (this._RN_Header.HasLoadedOrAssignedValue)
					{
                        if (this.RN_Header != null)
                        {
                            if (this.RN_Header.RN_number != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRN_numberChanging(value);
					this.SendPropertyChanging();
					this._RN_number = value;
					this.SendPropertyChanged("RN_number");
					this.OnRN_numberChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Qty
		{
			get
			{
				return this._Insp_Qty;
			}
			set
			{
				if ((this._Insp_Qty != value))
				{
					this.OnInsp_QtyChanging(value);
					this.SendPropertyChanging();
					this._Insp_Qty = value;
					this.SendPropertyChanged("Insp_Qty");
					this.OnInsp_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Reject_Reason", DbType="VarChar(50)")]
		public string Reject_Reason
		{
			get
			{
				return this._Reject_Reason;
			}
			set
			{
				if ((this._Reject_Reason != value))
				{
					this.OnReject_ReasonChanging(value);
					this.SendPropertyChanging();
					this._Reject_Reason = value;
					this.SendPropertyChanged("Reject_Reason");
					this.OnReject_ReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Name", DbType="VarChar(50)")]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this.OnSupplier_NameChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Name = value;
					this.SendPropertyChanged("Supplier_Name");
					this.OnSupplier_NameChanged();
				}
			}
		}
		
		[Column(Storage="_HDO_no", DbType="VarChar(50)")]
		public string HDO_no
		{
			get
			{
				return this._HDO_no;
			}
			set
			{
				if ((this._HDO_no != value))
				{
					this.OnHDO_noChanging(value);
					this.SendPropertyChanging();
					this._HDO_no = value;
					this.SendPropertyChanged("HDO_no");
					this.OnHDO_noChanged();
				}
			}
		}
		
		[Column(Storage="_Project_No", DbType="VarChar(50)")]
		public string Project_No
		{
			get
			{
				return this._Project_No;
			}
			set
			{
				if ((this._Project_No != value))
				{
					this.OnProject_NoChanging(value);
					this.SendPropertyChanging();
					this._Project_No = value;
					this.SendPropertyChanged("Project_No");
					this.OnProject_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Inv_No", DbType="VarChar(50)")]
		public string Supplier_Inv_No
		{
			get
			{
				return this._Supplier_Inv_No;
			}
			set
			{
				if ((this._Supplier_Inv_No != value))
				{
					this.OnSupplier_Inv_NoChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Inv_No = value;
					this.SendPropertyChanged("Supplier_Inv_No");
					this.OnSupplier_Inv_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Po_No", DbType="VarChar(50)")]
		public string Po_No
		{
			get
			{
				return this._Po_No;
			}
			set
			{
				if ((this._Po_No != value))
				{
					this.OnPo_NoChanging(value);
					this.SendPropertyChanging();
					this._Po_No = value;
					this.SendPropertyChanged("Po_No");
					this.OnPo_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Batch_No", DbType="VarChar(50)")]
		public string Batch_No
		{
			get
			{
				return this._Batch_No;
			}
			set
			{
				if ((this._Batch_No != value))
				{
					this.OnBatch_NoChanging(value);
					this.SendPropertyChanging();
					this._Batch_No = value;
					this.SendPropertyChanged("Batch_No");
					this.OnBatch_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this.OnRoll_NoChanging(value);
					this.SendPropertyChanging();
					this._Roll_No = value;
					this.SendPropertyChanged("Roll_No");
					this.OnRoll_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Association(Name="RN_Header_RN_Detail", Storage="_RN_Header", ThisKey="Company,RN_number", IsForeignKey=true)]
		public RN_Header RN_Header
		{
			get
			{
				return this._RN_Header.Entity;
			}
			set
			{
				RN_Header previousValue = this._RN_Header.Entity;
				if (((previousValue != value) 
							|| (this._RN_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RN_Header.Entity = null;
						previousValue.RN_Details.Remove(this);
					}
					this._RN_Header.Entity = value;
					if ((value != null))
					{
						value.RN_Details.Add(this);
						this._Company = value.Company;
						this._RN_number = value.RN_number;
					}
					else
					{
						this._Company = default(string);
						this._RN_number = default(int);
					}
					this.SendPropertyChanged("RN_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_SpreadDefect")]
	public partial class Fabric_Insp_SpreadDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private string _Spread_Defect_Degree;
		
		private int _From_Place;
		
		private int _To_Place;
		
		private string _Proc_Code1;
		
		private string _Proc_Code2;
		
		private string _Proc_Code3;
		
		private string _Proc_Code4;
		
		private string _Proc_Code5;
		
		private string _Proc_Status;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnSpread_Defect_DegreeChanging(string value);
    partial void OnSpread_Defect_DegreeChanged();
    partial void OnFrom_PlaceChanging(int value);
    partial void OnFrom_PlaceChanged();
    partial void OnTo_PlaceChanging(int value);
    partial void OnTo_PlaceChanged();
    partial void OnProc_Code1Changing(string value);
    partial void OnProc_Code1Changed();
    partial void OnProc_Code2Changing(string value);
    partial void OnProc_Code2Changed();
    partial void OnProc_Code3Changing(string value);
    partial void OnProc_Code3Changed();
    partial void OnProc_Code4Changing(string value);
    partial void OnProc_Code4Changed();
    partial void OnProc_Code5Changing(string value);
    partial void OnProc_Code5Changed();
    partial void OnProc_StatusChanging(string value);
    partial void OnProc_StatusChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    #endregion
		
		public Fabric_Insp_SpreadDefect()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.Company != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.System_Install_No != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Degree", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Spread_Defect_Degree
		{
			get
			{
				return this._Spread_Defect_Degree;
			}
			set
			{
				if ((this._Spread_Defect_Degree != value))
				{
					this.OnSpread_Defect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Degree = value;
					this.SendPropertyChanged("Spread_Defect_Degree");
					this.OnSpread_Defect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_From_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int From_Place
		{
			get
			{
				return this._From_Place;
			}
			set
			{
				if ((this._From_Place != value))
				{
					this.OnFrom_PlaceChanging(value);
					this.SendPropertyChanging();
					this._From_Place = value;
					this.SendPropertyChanged("From_Place");
					this.OnFrom_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_To_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int To_Place
		{
			get
			{
				return this._To_Place;
			}
			set
			{
				if ((this._To_Place != value))
				{
					this.OnTo_PlaceChanging(value);
					this.SendPropertyChanging();
					this._To_Place = value;
					this.SendPropertyChanged("To_Place");
					this.OnTo_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Proc_Code1", DbType="VarChar(50)")]
		public string Proc_Code1
		{
			get
			{
				return this._Proc_Code1;
			}
			set
			{
				if ((this._Proc_Code1 != value))
				{
					this.OnProc_Code1Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code1 = value;
					this.SendPropertyChanged("Proc_Code1");
					this.OnProc_Code1Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code2", DbType="VarChar(50)")]
		public string Proc_Code2
		{
			get
			{
				return this._Proc_Code2;
			}
			set
			{
				if ((this._Proc_Code2 != value))
				{
					this.OnProc_Code2Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code2 = value;
					this.SendPropertyChanged("Proc_Code2");
					this.OnProc_Code2Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code3", DbType="VarChar(50)")]
		public string Proc_Code3
		{
			get
			{
				return this._Proc_Code3;
			}
			set
			{
				if ((this._Proc_Code3 != value))
				{
					this.OnProc_Code3Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code3 = value;
					this.SendPropertyChanged("Proc_Code3");
					this.OnProc_Code3Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code4", DbType="VarChar(50)")]
		public string Proc_Code4
		{
			get
			{
				return this._Proc_Code4;
			}
			set
			{
				if ((this._Proc_Code4 != value))
				{
					this.OnProc_Code4Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code4 = value;
					this.SendPropertyChanged("Proc_Code4");
					this.OnProc_Code4Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code5", DbType="VarChar(50)")]
		public string Proc_Code5
		{
			get
			{
				return this._Proc_Code5;
			}
			set
			{
				if ((this._Proc_Code5 != value))
				{
					this.OnProc_Code5Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code5 = value;
					this.SendPropertyChanged("Proc_Code5");
					this.OnProc_Code5Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Status", DbType="VarChar(50)")]
		public string Proc_Status
		{
			get
			{
				return this._Proc_Status;
			}
			set
			{
				if ((this._Proc_Status != value))
				{
					this.OnProc_StatusChanging(value);
					this.SendPropertyChanging();
					this._Proc_Status = value;
					this.SendPropertyChanged("Proc_Status");
					this.OnProc_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_SpreadDefect", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", IsForeignKey=true)]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_SpreadDefects.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_SpreadDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_PartDefect")]
	public partial class Fabric_Insp_PartDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private int _Defect_Degree;
		
		private System.Nullable<int> _Defect_Degree_Count;
		
		private System.Nullable<int> _Defect_Deduce_Points;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnDefect_DegreeChanging(int value);
    partial void OnDefect_DegreeChanged();
    partial void OnDefect_Degree_CountChanging(System.Nullable<int> value);
    partial void OnDefect_Degree_CountChanged();
    partial void OnDefect_Deduce_PointsChanging(System.Nullable<int> value);
    partial void OnDefect_Deduce_PointsChanged();
    #endregion
		
		public Fabric_Insp_PartDefect()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.Company != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
                        if (this.Fabric_Insp_Header != null)
                        {
                            if (this.Fabric_Insp_Header.System_Install_No != value)
                            {
                                throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                            }
                        }
                        //throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Defect_Degree
		{
			get
			{
				return this._Defect_Degree;
			}
			set
			{
				if ((this._Defect_Degree != value))
				{
					this.OnDefect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree = value;
					this.SendPropertyChanged("Defect_Degree");
					this.OnDefect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree_Count", DbType="Int")]
		public System.Nullable<int> Defect_Degree_Count
		{
			get
			{
				return this._Defect_Degree_Count;
			}
			set
			{
				if ((this._Defect_Degree_Count != value))
				{
					this.OnDefect_Degree_CountChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree_Count = value;
					this.SendPropertyChanged("Defect_Degree_Count");
					this.OnDefect_Degree_CountChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Deduce_Points", DbType="Int")]
		public System.Nullable<int> Defect_Deduce_Points
		{
			get
			{
                return Defect_Degree_Count * Defect_Degree;
				//return this._Defect_Deduce_Points;
			}
			set
			{
				if ((this._Defect_Deduce_Points != value))
				{
					this.OnDefect_Deduce_PointsChanging(value);
					this.SendPropertyChanging();
					this._Defect_Deduce_Points = value;
					this.SendPropertyChanged("Defect_Deduce_Points");
					this.OnDefect_Deduce_PointsChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_PartDefect", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", IsForeignKey=true)]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_PartDefects.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_PartDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591

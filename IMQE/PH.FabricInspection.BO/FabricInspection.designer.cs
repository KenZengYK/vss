#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8806
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PH.FabricInspection.BO
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="PH.FabricInspection")]
	public partial class FabricInspectionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    partial void UpdateFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    partial void DeleteFabric_Insp_PartDefect(Fabric_Insp_PartDefect instance);
    partial void InsertFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void UpdateFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void DeleteFabric_Insp_Picture(Fabric_Insp_Picture instance);
    partial void InsertFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void UpdateFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void DeleteFabric_Sys_Parameter(Fabric_Sys_Parameter instance);
    partial void InsertFabric_Defect_File(Fabric_Defect_File instance);
    partial void UpdateFabric_Defect_File(Fabric_Defect_File instance);
    partial void DeleteFabric_Defect_File(Fabric_Defect_File instance);
    partial void InsertPHQCDefectPHDefectClass(PHQCDefectPHDefectClass instance);
    partial void UpdatePHQCDefectPHDefectClass(PHQCDefectPHDefectClass instance);
    partial void DeletePHQCDefectPHDefectClass(PHQCDefectPHDefectClass instance);
    partial void InsertDepartmentalTree(DepartmentalTree instance);
    partial void UpdateDepartmentalTree(DepartmentalTree instance);
    partial void DeleteDepartmentalTree(DepartmentalTree instance);
    partial void InsertRN_Header(RN_Header instance);
    partial void UpdateRN_Header(RN_Header instance);
    partial void DeleteRN_Header(RN_Header instance);
    partial void InsertSupplierBatchInfo(SupplierBatchInfo instance);
    partial void UpdateSupplierBatchInfo(SupplierBatchInfo instance);
    partial void DeleteSupplierBatchInfo(SupplierBatchInfo instance);
    partial void InsertFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void UpdateFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void DeleteFabric_Insp_Width(Fabric_Insp_Width instance);
    partial void InsertBulkSubmission(BulkSubmission instance);
    partial void UpdateBulkSubmission(BulkSubmission instance);
    partial void DeleteBulkSubmission(BulkSubmission instance);
    partial void InsertOverallFailReason(OverallFailReason instance);
    partial void UpdateOverallFailReason(OverallFailReason instance);
    partial void DeleteOverallFailReason(OverallFailReason instance);
    partial void InsertPHQCDefect(PHQCDefect instance);
    partial void UpdatePHQCDefect(PHQCDefect instance);
    partial void DeletePHQCDefect(PHQCDefect instance);
    partial void InsertRN_Detail(RN_Detail instance);
    partial void UpdateRN_Detail(RN_Detail instance);
    partial void DeleteRN_Detail(RN_Detail instance);
    partial void InsertCrossCupGroup(CrossCupGroup instance);
    partial void UpdateCrossCupGroup(CrossCupGroup instance);
    partial void DeleteCrossCupGroup(CrossCupGroup instance);
    partial void InsertDataDict(DataDict instance);
    partial void UpdateDataDict(DataDict instance);
    partial void DeleteDataDict(DataDict instance);
    partial void InsertBandLaceSpotDefect(BandLaceSpotDefect instance);
    partial void UpdateBandLaceSpotDefect(BandLaceSpotDefect instance);
    partial void DeleteBandLaceSpotDefect(BandLaceSpotDefect instance);
    partial void InsertElasticSpotDefect(ElasticSpotDefect instance);
    partial void UpdateElasticSpotDefect(ElasticSpotDefect instance);
    partial void DeleteElasticSpotDefect(ElasticSpotDefect instance);
    partial void InsertElasticChainDefect(ElasticChainDefect instance);
    partial void UpdateElasticChainDefect(ElasticChainDefect instance);
    partial void DeleteElasticChainDefect(ElasticChainDefect instance);
    partial void InsertActionLogSubjectCategory(ActionLogSubjectCategory instance);
    partial void UpdateActionLogSubjectCategory(ActionLogSubjectCategory instance);
    partial void DeleteActionLogSubjectCategory(ActionLogSubjectCategory instance);
    partial void InsertAccessoryDefect(AccessoryDefect instance);
    partial void UpdateAccessoryDefect(AccessoryDefect instance);
    partial void DeleteAccessoryDefect(AccessoryDefect instance);
    partial void InsertAccessoryCasingDefect(AccessoryCasingDefect instance);
    partial void UpdateAccessoryCasingDefect(AccessoryCasingDefect instance);
    partial void DeleteAccessoryCasingDefect(AccessoryCasingDefect instance);
    partial void InsertConvertSupp(ConvertSupp instance);
    partial void UpdateConvertSupp(ConvertSupp instance);
    partial void DeleteConvertSupp(ConvertSupp instance);
    partial void InsertRejectNotice(RejectNotice instance);
    partial void UpdateRejectNotice(RejectNotice instance);
    partial void DeleteRejectNotice(RejectNotice instance);
    partial void InsertBandLandWidth(BandLandWidth instance);
    partial void UpdateBandLandWidth(BandLandWidth instance);
    partial void DeleteBandLandWidth(BandLandWidth instance);
    partial void InsertGridViewHeaderBackColor(GridViewHeaderBackColor instance);
    partial void UpdateGridViewHeaderBackColor(GridViewHeaderBackColor instance);
    partial void DeleteGridViewHeaderBackColor(GridViewHeaderBackColor instance);
    partial void InsertBraCupDefect(BraCupDefect instance);
    partial void UpdateBraCupDefect(BraCupDefect instance);
    partial void DeleteBraCupDefect(BraCupDefect instance);
    partial void InsertBraCupCasingDefect(BraCupCasingDefect instance);
    partial void UpdateBraCupCasingDefect(BraCupCasingDefect instance);
    partial void DeleteBraCupCasingDefect(BraCupCasingDefect instance);
    partial void InsertBandLandPatternShapeRepeat(BandLandPatternShapeRepeat instance);
    partial void UpdateBandLandPatternShapeRepeat(BandLandPatternShapeRepeat instance);
    partial void DeleteBandLandPatternShapeRepeat(BandLandPatternShapeRepeat instance);
    partial void InsertBandLandSkewnessBow(BandLandSkewnessBow instance);
    partial void UpdateBandLandSkewnessBow(BandLandSkewnessBow instance);
    partial void DeleteBandLandSkewnessBow(BandLandSkewnessBow instance);
    partial void InsertActionLogCompleteReason(ActionLogCompleteReason instance);
    partial void UpdateActionLogCompleteReason(ActionLogCompleteReason instance);
    partial void DeleteActionLogCompleteReason(ActionLogCompleteReason instance);
    partial void InsertExclueMaterial(ExclueMaterial instance);
    partial void UpdateExclueMaterial(ExclueMaterial instance);
    partial void DeleteExclueMaterial(ExclueMaterial instance);
    partial void InsertSupplierBatchInfoBandLace(SupplierBatchInfoBandLace instance);
    partial void UpdateSupplierBatchInfoBandLace(SupplierBatchInfoBandLace instance);
    partial void DeleteSupplierBatchInfoBandLace(SupplierBatchInfoBandLace instance);
    partial void InsertFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void UpdateFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void DeleteFabric_Insp_SpreadDefect(Fabric_Insp_SpreadDefect instance);
    partial void InsertBandLaceChainDefect(BandLaceChainDefect instance);
    partial void UpdateBandLaceChainDefect(BandLaceChainDefect instance);
    partial void DeleteBandLaceChainDefect(BandLaceChainDefect instance);
    partial void InsertErrorCode(ErrorCode instance);
    partial void UpdateErrorCode(ErrorCode instance);
    partial void DeleteErrorCode(ErrorCode instance);
    partial void InsertsFabric_Insp_Header(sFabric_Insp_Header instance);
    partial void UpdatesFabric_Insp_Header(sFabric_Insp_Header instance);
    partial void DeletesFabric_Insp_Header(sFabric_Insp_Header instance);
    partial void InsertsFabric_Insp_PartDefect(sFabric_Insp_PartDefect instance);
    partial void UpdatesFabric_Insp_PartDefect(sFabric_Insp_PartDefect instance);
    partial void DeletesFabric_Insp_PartDefect(sFabric_Insp_PartDefect instance);
    partial void InsertsFabric_Insp_Picture(sFabric_Insp_Picture instance);
    partial void UpdatesFabric_Insp_Picture(sFabric_Insp_Picture instance);
    partial void DeletesFabric_Insp_Picture(sFabric_Insp_Picture instance);
    partial void InsertsFabric_Insp_SpreadDefect(sFabric_Insp_SpreadDefect instance);
    partial void UpdatesFabric_Insp_SpreadDefect(sFabric_Insp_SpreadDefect instance);
    partial void DeletesFabric_Insp_SpreadDefect(sFabric_Insp_SpreadDefect instance);
    partial void InsertsFabric_Insp_Width(sFabric_Insp_Width instance);
    partial void UpdatesFabric_Insp_Width(sFabric_Insp_Width instance);
    partial void DeletesFabric_Insp_Width(sFabric_Insp_Width instance);
    partial void InsertsBandLaceHeader(sBandLaceHeader instance);
    partial void UpdatesBandLaceHeader(sBandLaceHeader instance);
    partial void DeletesBandLaceHeader(sBandLaceHeader instance);
    partial void InsertsBandLaceSpotDefect(sBandLaceSpotDefect instance);
    partial void UpdatesBandLaceSpotDefect(sBandLaceSpotDefect instance);
    partial void DeletesBandLaceSpotDefect(sBandLaceSpotDefect instance);
    partial void InsertsBandLaceChainDefect(sBandLaceChainDefect instance);
    partial void UpdatesBandLaceChainDefect(sBandLaceChainDefect instance);
    partial void DeletesBandLaceChainDefect(sBandLaceChainDefect instance);
    partial void InsertsBandLandWidth(sBandLandWidth instance);
    partial void UpdatesBandLandWidth(sBandLandWidth instance);
    partial void DeletesBandLandWidth(sBandLandWidth instance);
    partial void InsertsBandLandPatternShapeRepeat(sBandLandPatternShapeRepeat instance);
    partial void UpdatesBandLandPatternShapeRepeat(sBandLandPatternShapeRepeat instance);
    partial void DeletesBandLandPatternShapeRepeat(sBandLandPatternShapeRepeat instance);
    partial void InsertsBandLandSkewnessBow(sBandLandSkewnessBow instance);
    partial void UpdatesBandLandSkewnessBow(sBandLandSkewnessBow instance);
    partial void DeletesBandLandSkewnessBow(sBandLandSkewnessBow instance);
    partial void InsertsElasticHeader(sElasticHeader instance);
    partial void UpdatesElasticHeader(sElasticHeader instance);
    partial void DeletesElasticHeader(sElasticHeader instance);
    partial void InsertsElasticSpotDefect(sElasticSpotDefect instance);
    partial void UpdatesElasticSpotDefect(sElasticSpotDefect instance);
    partial void DeletesElasticSpotDefect(sElasticSpotDefect instance);
    partial void InsertsElasticChainDefect(sElasticChainDefect instance);
    partial void UpdatesElasticChainDefect(sElasticChainDefect instance);
    partial void DeletesElasticChainDefect(sElasticChainDefect instance);
    partial void InsertsFabric_Defect_File(sFabric_Defect_File instance);
    partial void UpdatesFabric_Defect_File(sFabric_Defect_File instance);
    partial void DeletesFabric_Defect_File(sFabric_Defect_File instance);
    partial void InsertsAccessoryHeader(sAccessoryHeader instance);
    partial void UpdatesAccessoryHeader(sAccessoryHeader instance);
    partial void DeletesAccessoryHeader(sAccessoryHeader instance);
    partial void InsertsAccessoryDefect(sAccessoryDefect instance);
    partial void UpdatesAccessoryDefect(sAccessoryDefect instance);
    partial void DeletesAccessoryDefect(sAccessoryDefect instance);
    partial void InsertsAccessoryCasingDefect(sAccessoryCasingDefect instance);
    partial void UpdatesAccessoryCasingDefect(sAccessoryCasingDefect instance);
    partial void DeletesAccessoryCasingDefect(sAccessoryCasingDefect instance);
    partial void InsertsBraCupHeader(sBraCupHeader instance);
    partial void UpdatesBraCupHeader(sBraCupHeader instance);
    partial void DeletesBraCupHeader(sBraCupHeader instance);
    partial void InsertsBraCupDefect(sBraCupDefect instance);
    partial void UpdatesBraCupDefect(sBraCupDefect instance);
    partial void DeletesBraCupDefect(sBraCupDefect instance);
    partial void InsertsBraCupCasingDefect(sBraCupCasingDefect instance);
    partial void UpdatesBraCupCasingDefect(sBraCupCasingDefect instance);
    partial void DeletesBraCupCasingDefect(sBraCupCasingDefect instance);
    partial void InsertDebitNote(DebitNote instance);
    partial void UpdateDebitNote(DebitNote instance);
    partial void DeleteDebitNote(DebitNote instance);
    partial void InsertS21QCResultAction(S21QCResultAction instance);
    partial void UpdateS21QCResultAction(S21QCResultAction instance);
    partial void DeleteS21QCResultAction(S21QCResultAction instance);
    partial void InsertActionLogDetail(ActionLogDetail instance);
    partial void UpdateActionLogDetail(ActionLogDetail instance);
    partial void DeleteActionLogDetail(ActionLogDetail instance);
    partial void InsertFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void UpdateFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void DeleteFabric_Insp_Header(Fabric_Insp_Header instance);
    partial void InsertBandLaceHeader(BandLaceHeader instance);
    partial void UpdateBandLaceHeader(BandLaceHeader instance);
    partial void DeleteBandLaceHeader(BandLaceHeader instance);
    partial void InsertElasticHeader(ElasticHeader instance);
    partial void UpdateElasticHeader(ElasticHeader instance);
    partial void DeleteElasticHeader(ElasticHeader instance);
    partial void InsertBraCupHeader(BraCupHeader instance);
    partial void UpdateBraCupHeader(BraCupHeader instance);
    partial void DeleteBraCupHeader(BraCupHeader instance);
    partial void InsertAccessoryHeader(AccessoryHeader instance);
    partial void UpdateAccessoryHeader(AccessoryHeader instance);
    partial void DeleteAccessoryHeader(AccessoryHeader instance);
    partial void InsertActionLogIMQE(ActionLogIMQE instance);
    partial void UpdateActionLogIMQE(ActionLogIMQE instance);
    partial void DeleteActionLogIMQE(ActionLogIMQE instance);
    partial void InsertActionLogHeader(ActionLogHeader instance);
    partial void UpdateActionLogHeader(ActionLogHeader instance);
    partial void DeleteActionLogHeader(ActionLogHeader instance);
    partial void InsertActionLogCategory(ActionLogCategory instance);
    partial void UpdateActionLogCategory(ActionLogCategory instance);
    partial void DeleteActionLogCategory(ActionLogCategory instance);
    #endregion
		
		public FabricInspectionDataContext() : 
				base(global::PH.FabricInspection.BO.Properties.Settings.Default.PH_FabricInspectionConnectionString7, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FabricInspectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Fabric_Insp_PartDefect> Fabric_Insp_PartDefects
		{
			get
			{
				return this.GetTable<Fabric_Insp_PartDefect>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Picture> Fabric_Insp_Pictures
		{
			get
			{
				return this.GetTable<Fabric_Insp_Picture>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Sys_Parameter> Fabric_Sys_Parameters
		{
			get
			{
				return this.GetTable<Fabric_Sys_Parameter>();
			}
		}
		
		public System.Data.Linq.Table<View_InspectionDate> View_InspectionDates
		{
			get
			{
				return this.GetTable<View_InspectionDate>();
			}
		}
		
		public System.Data.Linq.Table<view_RNSelectItemNo> view_RNSelectItemNos
		{
			get
			{
				return this.GetTable<view_RNSelectItemNo>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Defect_File> Fabric_Defect_Files
		{
			get
			{
				return this.GetTable<Fabric_Defect_File>();
			}
		}
		
		public System.Data.Linq.Table<PHQCDefectPHDefectClass> PHQCDefectPHDefectClasses
		{
			get
			{
				return this.GetTable<PHQCDefectPHDefectClass>();
			}
		}
		
		public System.Data.Linq.Table<DepartmentalTree> DepartmentalTrees
		{
			get
			{
				return this.GetTable<DepartmentalTree>();
			}
		}
		
		public System.Data.Linq.Table<RN_Header> RN_Headers
		{
			get
			{
				return this.GetTable<RN_Header>();
			}
		}
		
		public System.Data.Linq.Table<SupplierBatchInfo> SupplierBatchInfos
		{
			get
			{
				return this.GetTable<SupplierBatchInfo>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Width> Fabric_Insp_Widths
		{
			get
			{
				return this.GetTable<Fabric_Insp_Width>();
			}
		}
		
		public System.Data.Linq.Table<BulkSubmission> BulkSubmissions
		{
			get
			{
				return this.GetTable<BulkSubmission>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogEmail> ActionLogEmails
		{
			get
			{
				return this.GetTable<ActionLogEmail>();
			}
		}
		
		public System.Data.Linq.Table<Email> Emails
		{
			get
			{
				return this.GetTable<Email>();
			}
		}
		
		public System.Data.Linq.Table<OverallFailReason> OverallFailReasons
		{
			get
			{
				return this.GetTable<OverallFailReason>();
			}
		}
		
		public System.Data.Linq.Table<PHQCDefect> PHQCDefects
		{
			get
			{
				return this.GetTable<PHQCDefect>();
			}
		}
		
		public System.Data.Linq.Table<RN_Detail> RN_Details
		{
			get
			{
				return this.GetTable<RN_Detail>();
			}
		}
		
		public System.Data.Linq.Table<CrossCupGroup> CrossCupGroups
		{
			get
			{
				return this.GetTable<CrossCupGroup>();
			}
		}
		
		public System.Data.Linq.Table<DataDict> DataDicts
		{
			get
			{
				return this.GetTable<DataDict>();
			}
		}
		
		public System.Data.Linq.Table<BandLaceSpotDefect> BandLaceSpotDefects
		{
			get
			{
				return this.GetTable<BandLaceSpotDefect>();
			}
		}
		
		public System.Data.Linq.Table<ElasticSpotDefect> ElasticSpotDefects
		{
			get
			{
				return this.GetTable<ElasticSpotDefect>();
			}
		}
		
		public System.Data.Linq.Table<ElasticChainDefect> ElasticChainDefects
		{
			get
			{
				return this.GetTable<ElasticChainDefect>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogSubjectCategory> ActionLogSubjectCategories
		{
			get
			{
				return this.GetTable<ActionLogSubjectCategory>();
			}
		}
		
		public System.Data.Linq.Table<AccessoryDefect> AccessoryDefects
		{
			get
			{
				return this.GetTable<AccessoryDefect>();
			}
		}
		
		public System.Data.Linq.Table<AccessoryCasingDefect> AccessoryCasingDefects
		{
			get
			{
				return this.GetTable<AccessoryCasingDefect>();
			}
		}
		
		public System.Data.Linq.Table<ConvertSupp> ConvertSupps
		{
			get
			{
				return this.GetTable<ConvertSupp>();
			}
		}
		
		public System.Data.Linq.Table<RejectNotice> RejectNotices
		{
			get
			{
				return this.GetTable<RejectNotice>();
			}
		}
		
		public System.Data.Linq.Table<BandLandWidth> BandLandWidths
		{
			get
			{
				return this.GetTable<BandLandWidth>();
			}
		}
		
		public System.Data.Linq.Table<GridViewHeaderBackColor> GridViewHeaderBackColors
		{
			get
			{
				return this.GetTable<GridViewHeaderBackColor>();
			}
		}
		
		public System.Data.Linq.Table<BraCupDefect> BraCupDefects
		{
			get
			{
				return this.GetTable<BraCupDefect>();
			}
		}
		
		public System.Data.Linq.Table<BraCupCasingDefect> BraCupCasingDefects
		{
			get
			{
				return this.GetTable<BraCupCasingDefect>();
			}
		}
		
		public System.Data.Linq.Table<BandLandPatternShapeRepeat> BandLandPatternShapeRepeats
		{
			get
			{
				return this.GetTable<BandLandPatternShapeRepeat>();
			}
		}
		
		public System.Data.Linq.Table<BandLandSkewnessBow> BandLandSkewnessBows
		{
			get
			{
				return this.GetTable<BandLandSkewnessBow>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogCompleteReason> ActionLogCompleteReasons
		{
			get
			{
				return this.GetTable<ActionLogCompleteReason>();
			}
		}
		
		public System.Data.Linq.Table<WaitQAItem> WaitQAItems
		{
			get
			{
				return this.GetTable<WaitQAItem>();
			}
		}
		
		public System.Data.Linq.Table<ExclueMaterial> ExclueMaterials
		{
			get
			{
				return this.GetTable<ExclueMaterial>();
			}
		}
		
		public System.Data.Linq.Table<SupplierBatchInfoBandLace> SupplierBatchInfoBandLaces
		{
			get
			{
				return this.GetTable<SupplierBatchInfoBandLace>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_SpreadDefect> Fabric_Insp_SpreadDefects
		{
			get
			{
				return this.GetTable<Fabric_Insp_SpreadDefect>();
			}
		}
		
		public System.Data.Linq.Table<BandLaceChainDefect> BandLaceChainDefects
		{
			get
			{
				return this.GetTable<BandLaceChainDefect>();
			}
		}
		
		public System.Data.Linq.Table<ErrorCode> ErrorCodes
		{
			get
			{
				return this.GetTable<ErrorCode>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Insp_Header> sFabric_Insp_Headers
		{
			get
			{
				return this.GetTable<sFabric_Insp_Header>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Insp_PartDefect> sFabric_Insp_PartDefects
		{
			get
			{
				return this.GetTable<sFabric_Insp_PartDefect>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Insp_Picture> sFabric_Insp_Pictures
		{
			get
			{
				return this.GetTable<sFabric_Insp_Picture>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Insp_SpreadDefect> sFabric_Insp_SpreadDefects
		{
			get
			{
				return this.GetTable<sFabric_Insp_SpreadDefect>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Insp_Width> sFabric_Insp_Widths
		{
			get
			{
				return this.GetTable<sFabric_Insp_Width>();
			}
		}
		
		public System.Data.Linq.Table<sBandLaceHeader> sBandLaceHeaders
		{
			get
			{
				return this.GetTable<sBandLaceHeader>();
			}
		}
		
		public System.Data.Linq.Table<sBandLaceSpotDefect> sBandLaceSpotDefects
		{
			get
			{
				return this.GetTable<sBandLaceSpotDefect>();
			}
		}
		
		public System.Data.Linq.Table<sBandLaceChainDefect> sBandLaceChainDefects
		{
			get
			{
				return this.GetTable<sBandLaceChainDefect>();
			}
		}
		
		public System.Data.Linq.Table<sBandLandWidth> sBandLandWidths
		{
			get
			{
				return this.GetTable<sBandLandWidth>();
			}
		}
		
		public System.Data.Linq.Table<sBandLandPatternShapeRepeat> sBandLandPatternShapeRepeats
		{
			get
			{
				return this.GetTable<sBandLandPatternShapeRepeat>();
			}
		}
		
		public System.Data.Linq.Table<sBandLandSkewnessBow> sBandLandSkewnessBows
		{
			get
			{
				return this.GetTable<sBandLandSkewnessBow>();
			}
		}
		
		public System.Data.Linq.Table<sElasticHeader> sElasticHeaders
		{
			get
			{
				return this.GetTable<sElasticHeader>();
			}
		}
		
		public System.Data.Linq.Table<sElasticSpotDefect> sElasticSpotDefects
		{
			get
			{
				return this.GetTable<sElasticSpotDefect>();
			}
		}
		
		public System.Data.Linq.Table<sElasticChainDefect> sElasticChainDefects
		{
			get
			{
				return this.GetTable<sElasticChainDefect>();
			}
		}
		
		public System.Data.Linq.Table<sFabric_Defect_File> sFabric_Defect_Files
		{
			get
			{
				return this.GetTable<sFabric_Defect_File>();
			}
		}
		
		public System.Data.Linq.Table<sAccessoryHeader> sAccessoryHeaders
		{
			get
			{
				return this.GetTable<sAccessoryHeader>();
			}
		}
		
		public System.Data.Linq.Table<sAccessoryDefect> sAccessoryDefects
		{
			get
			{
				return this.GetTable<sAccessoryDefect>();
			}
		}
		
		public System.Data.Linq.Table<sAccessoryCasingDefect> sAccessoryCasingDefects
		{
			get
			{
				return this.GetTable<sAccessoryCasingDefect>();
			}
		}
		
		public System.Data.Linq.Table<sBraCupHeader> sBraCupHeaders
		{
			get
			{
				return this.GetTable<sBraCupHeader>();
			}
		}
		
		public System.Data.Linq.Table<sBraCupDefect> sBraCupDefects
		{
			get
			{
				return this.GetTable<sBraCupDefect>();
			}
		}
		
		public System.Data.Linq.Table<sBraCupCasingDefect> sBraCupCasingDefects
		{
			get
			{
				return this.GetTable<sBraCupCasingDefect>();
			}
		}
		
		public System.Data.Linq.Table<DebitNote> DebitNotes
		{
			get
			{
				return this.GetTable<DebitNote>();
			}
		}
		
		public System.Data.Linq.Table<S21QCResultAction> S21QCResultActions
		{
			get
			{
				return this.GetTable<S21QCResultAction>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogDetail> ActionLogDetails
		{
			get
			{
				return this.GetTable<ActionLogDetail>();
			}
		}
		
		public System.Data.Linq.Table<Fabric_Insp_Header> Fabric_Insp_Headers
		{
			get
			{
				return this.GetTable<Fabric_Insp_Header>();
			}
		}
		
		public System.Data.Linq.Table<BandLaceHeader> BandLaceHeaders
		{
			get
			{
				return this.GetTable<BandLaceHeader>();
			}
		}
		
		public System.Data.Linq.Table<ElasticHeader> ElasticHeaders
		{
			get
			{
				return this.GetTable<ElasticHeader>();
			}
		}
		
		public System.Data.Linq.Table<BraCupHeader> BraCupHeaders
		{
			get
			{
				return this.GetTable<BraCupHeader>();
			}
		}
		
		public System.Data.Linq.Table<AccessoryHeader> AccessoryHeaders
		{
			get
			{
				return this.GetTable<AccessoryHeader>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogIMQE> ActionLogIMQEs
		{
			get
			{
				return this.GetTable<ActionLogIMQE>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogHeader> ActionLogHeaders
		{
			get
			{
				return this.GetTable<ActionLogHeader>();
			}
		}
		
		public System.Data.Linq.Table<ActionLogCategory> ActionLogCategories
		{
			get
			{
				return this.GetTable<ActionLogCategory>();
			}
		}
		
		[Function(Name="dbo.rpt_DefectReject")]
		public ISingleResult<rpt_DefectRejectResult> rpt_DefectReject([Parameter(Name="Company", DbType="VarChar(2)")] string company, [Parameter(Name="RN_Number", DbType="Int")] System.Nullable<int> rN_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, rN_Number);
			return ((ISingleResult<rpt_DefectRejectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rpt_ColorReject")]
		public ISingleResult<rpt_ColorRejectResult> rpt_ColorReject([Parameter(Name="Company", DbType="VarChar(2)")] string company, [Parameter(Name="RN_Number", DbType="Int")] System.Nullable<int> rN_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, rN_Number);
			return ((ISingleResult<rpt_ColorRejectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Rpt_PhysicalPropertiesReject")]
		public ISingleResult<Rpt_PhysicalPropertiesRejectResult> Rpt_PhysicalPropertiesReject([Parameter(Name="Company", DbType="VarChar(2)")] string company, [Parameter(Name="RN_Number", DbType="Int")] System.Nullable<int> rN_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, rN_Number);
			return ((ISingleResult<Rpt_PhysicalPropertiesRejectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.rpt_MainMaterialsInspectionDetailReport")]
		public ISingleResult<rpt_MainMaterialsInspectionDetailReportResult> rpt_MainMaterialsInspectionDetailReport([Parameter(Name="Company", DbType="VarChar(2)")] string company, [Parameter(Name="RN_Number", DbType="Int")] System.Nullable<int> rN_Number)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), company, rN_Number);
			return ((ISingleResult<rpt_MainMaterialsInspectionDetailReportResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.P_GetMaterialTypeDefectOrder")]
		public ISingleResult<P_GetMaterialTypeDefectOrderResult> P_GetMaterialTypeDefectOrder([Parameter(Name="StartDate", DbType="DateTime")] System.Nullable<System.DateTime> startDate, [Parameter(Name="EndDate", DbType="DateTime")] System.Nullable<System.DateTime> endDate, [Parameter(Name="MaterialType", DbType="VarChar(3)")] string materialType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), startDate, endDate, materialType);
			return ((ISingleResult<P_GetMaterialTypeDefectOrderResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.fn_GetBandLaceMaxAuditID", IsComposable=true)]
		public System.Nullable<int> fn_GetBandLaceMaxAuditID([Parameter(Name="IDCreateDate", DbType="VarChar(100)")] string iDCreateDate, [Parameter(Name="ItemCode", DbType="VarChar(100)")] string itemCode, [Parameter(Name="ColorCode", DbType="VarChar(100)")] string colorCode)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDCreateDate, itemCode, colorCode).ReturnValue));
		}
		
		[Function(Name="dbo.fn_GetElasticMaxAuditID", IsComposable=true)]
		public System.Nullable<int> fn_GetElasticMaxAuditID([Parameter(Name="IDCreateDate", DbType="VarChar(100)")] string iDCreateDate, [Parameter(Name="ItemCode", DbType="VarChar(100)")] string itemCode, [Parameter(Name="ColorCode", DbType="VarChar(100)")] string colorCode)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDCreateDate, itemCode, colorCode).ReturnValue));
		}
		
		[Function(Name="dbo.fn_GetBraCupMaxAuditNO", IsComposable=true)]
		public System.Nullable<int> fn_GetBraCupMaxAuditNO([Parameter(Name="IDCreateDate", DbType="VarChar(100)")] string iDCreateDate, [Parameter(Name="ItemCode", DbType="VarChar(100)")] string itemCode, [Parameter(Name="ColorCode", DbType="VarChar(100)")] string colorCode)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDCreateDate, itemCode, colorCode).ReturnValue));
		}
		
		[Function(Name="dbo.fn_GetAccessoryMaxAuditNO", IsComposable=true)]
		public System.Nullable<int> fn_GetAccessoryMaxAuditNO([Parameter(Name="IDCreateDate", DbType="VarChar(100)")] string iDCreateDate, [Parameter(Name="ItemCode", DbType="VarChar(100)")] string itemCode, [Parameter(Name="ColorCode", DbType="VarChar(100)")] string colorCode)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDCreateDate, itemCode, colorCode).ReturnValue));
		}
		
		[Function(Name="dbo.fn_CalculateFWStartDate", IsComposable=true)]
		public System.Nullable<System.DateTime> fn_CalculateFWStartDate([Parameter(Name="ProjectNos", DbType="VarChar(2000)")] string projectNos)
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), projectNos).ReturnValue));
		}
		
		[Function(Name="dbo.fn_CalculateDueDay", IsComposable=true)]
		public System.Nullable<int> fn_CalculateDueDay([Parameter(Name="IDCreateDate", DbType="DateTime")] System.Nullable<System.DateTime> iDCreateDate, [Parameter(Name="AuditDate", DbType="DateTime")] System.Nullable<System.DateTime> auditDate, [Parameter(Name="Whse", DbType="VarChar(10)")] string whse)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iDCreateDate, auditDate, whse).ReturnValue));
		}
		
		[Function(Name="dbo.P_GetSupplierBatchInf")]
		public ISingleResult<P_GetSupplierBatchInfResult> P_GetSupplierBatchInf([Parameter(Name="StockInDate_From", DbType="VarChar(10)")] string stockInDate_From, [Parameter(Name="StockInDate_To", DbType="VarChar(10)")] string stockInDate_To, [Parameter(Name="CreateByUser", DbType="VarChar(40)")] string createByUser)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), stockInDate_From, stockInDate_To, createByUser);
			return ((ISingleResult<P_GetSupplierBatchInfResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_PartDefect")]
	public partial class Fabric_Insp_PartDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private string _Defect_Place;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private int _Defect_Degree;
		
		private System.Nullable<int> _Defect_Degree_Count;
		
		private System.Nullable<int> _Defect_Deduce_Points;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnDefect_PlaceChanging(string value);
    partial void OnDefect_PlaceChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnDefect_DegreeChanging(int value);
    partial void OnDefect_DegreeChanged();
    partial void OnDefect_Degree_CountChanging(System.Nullable<int> value);
    partial void OnDefect_Degree_CountChanged();
    partial void OnDefect_Deduce_PointsChanging(System.Nullable<int> value);
    partial void OnDefect_Deduce_PointsChanged();
    #endregion
		
		public Fabric_Insp_PartDefect()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Place", DbType="Varchar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Place
		{
			get
			{
				return this._Defect_Place;
			}
			set
			{
				if ((this._Defect_Place != value))
				{
					this.OnDefect_PlaceChanging(value);
					this.SendPropertyChanging();
					this._Defect_Place = value;
					this.SendPropertyChanged("Defect_Place");
					this.OnDefect_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Defect_Degree
		{
			get
			{
				return this._Defect_Degree;
			}
			set
			{
				if ((this._Defect_Degree != value))
				{
					this.OnDefect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree = value;
					this.SendPropertyChanged("Defect_Degree");
					this.OnDefect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree_Count", DbType="Int")]
		public System.Nullable<int> Defect_Degree_Count
		{
			get
			{
				return this._Defect_Degree_Count;
			}
			set
			{
				if ((this._Defect_Degree_Count != value))
				{
					this.OnDefect_Degree_CountChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree_Count = value;
					this.SendPropertyChanged("Defect_Degree_Count");
					this.OnDefect_Degree_CountChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Deduce_Points", DbType="Int")]
		public System.Nullable<int> Defect_Deduce_Points
		{
			get
			{
				return this._Defect_Deduce_Points;
			}
			set
			{
				if ((this._Defect_Deduce_Points != value))
				{
					this.OnDefect_Deduce_PointsChanging(value);
					this.SendPropertyChanging();
					this._Defect_Deduce_Points = value;
					this.SendPropertyChanged("Defect_Deduce_Points");
					this.OnDefect_Deduce_PointsChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_PartDefect", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_PartDefects.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_PartDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Picture")]
	public partial class Fabric_Insp_Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _BroadNo;
		
		private System.Data.Linq.Binary _Photo_Image;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnBroadNoChanging(int value);
    partial void OnBroadNoChanged();
    partial void OnPhoto_ImageChanging(System.Data.Linq.Binary value);
    partial void OnPhoto_ImageChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    #endregion
		
		public Fabric_Insp_Picture()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_BroadNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BroadNo
		{
			get
			{
				return this._BroadNo;
			}
			set
			{
				if ((this._BroadNo != value))
				{
					this.OnBroadNoChanging(value);
					this.SendPropertyChanging();
					this._BroadNo = value;
					this.SendPropertyChanged("BroadNo");
					this.OnBroadNoChanged();
				}
			}
		}
		
		[Column(Storage="_Photo_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo_Image
		{
			get
			{
				return this._Photo_Image;
			}
			set
			{
				if ((this._Photo_Image != value))
				{
					this.OnPhoto_ImageChanging(value);
					this.SendPropertyChanging();
					this._Photo_Image = value;
					this.SendPropertyChanged("Photo_Image");
					this.OnPhoto_ImageChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Picture", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_Pictures.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_Pictures.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Sys_Parameter")]
	public partial class Fabric_Sys_Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private string _Parameter_Type;
		
		private string _Parameter_Key;
		
		private string _Parameter_Desc;
		
		private string _User_Id;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _ParameterEnglishDesc;
		
		private string _ParameterThaiDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnParameter_TypeChanging(string value);
    partial void OnParameter_TypeChanged();
    partial void OnParameter_KeyChanging(string value);
    partial void OnParameter_KeyChanged();
    partial void OnParameter_DescChanging(string value);
    partial void OnParameter_DescChanged();
    partial void OnUser_IdChanging(string value);
    partial void OnUser_IdChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnParameterEnglishDescChanging(string value);
    partial void OnParameterEnglishDescChanged();
    partial void OnParameterThaiDescChanging(string value);
    partial void OnParameterThaiDescChanged();
    #endregion
		
		public Fabric_Sys_Parameter()
		{
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Parameter_Type
		{
			get
			{
				return this._Parameter_Type;
			}
			set
			{
				if ((this._Parameter_Type != value))
				{
					this.OnParameter_TypeChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Type = value;
					this.SendPropertyChanged("Parameter_Type");
					this.OnParameter_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Key", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Parameter_Key
		{
			get
			{
				return this._Parameter_Key;
			}
			set
			{
				if ((this._Parameter_Key != value))
				{
					this.OnParameter_KeyChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Key = value;
					this.SendPropertyChanged("Parameter_Key");
					this.OnParameter_KeyChanged();
				}
			}
		}
		
		[Column(Storage="_Parameter_Desc", DbType="nVarChar(1000)")]
		public string Parameter_Desc
		{
			get
			{
				return this._Parameter_Desc;
			}
			set
			{
				if ((this._Parameter_Desc != value))
				{
					this.OnParameter_DescChanging(value);
					this.SendPropertyChanging();
					this._Parameter_Desc = value;
					this.SendPropertyChanged("Parameter_Desc");
					this.OnParameter_DescChanged();
				}
			}
		}
		
		[Column(Storage="_User_Id", DbType="VarChar(50)")]
		public string User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_ParameterEnglishDesc", DbType="nVarChar(1000)")]
		public string ParameterEnglishDesc
		{
			get
			{
				return this._ParameterEnglishDesc;
			}
			set
			{
				if ((this._ParameterEnglishDesc != value))
				{
					this.OnParameterEnglishDescChanging(value);
					this.SendPropertyChanging();
					this._ParameterEnglishDesc = value;
					this.SendPropertyChanged("ParameterEnglishDesc");
					this.OnParameterEnglishDescChanged();
				}
			}
		}
		
		[Column(Storage="_ParameterThaiDesc", DbType="nVarChar(1000)")]
		public string ParameterThaiDesc
		{
			get
			{
				return this._ParameterThaiDesc;
			}
			set
			{
				if ((this._ParameterThaiDesc != value))
				{
					this.OnParameterThaiDescChanging(value);
					this.SendPropertyChanging();
					this._ParameterThaiDesc = value;
					this.SendPropertyChanged("ParameterThaiDesc");
					this.OnParameterThaiDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.View_InspectionDate")]
	public partial class View_InspectionDate
	{
		
		private string _Company;
		
		private int _RN_number;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		public View_InspectionDate()
		{
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this._Company = value;
				}
			}
		}
		
		[Column(Storage="_RN_number", DbType="Int NOT NULL")]
		public int RN_number
		{
			get
			{
				return this._RN_number;
			}
			set
			{
				if ((this._RN_number != value))
				{
					this._RN_number = value;
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this._Create_Date = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.view_RNSelectItemNo")]
	public partial class view_RNSelectItemNo
	{
		
		private string _Item_No;
		
		private string _Stock_In_Date;
		
		public view_RNSelectItemNo()
		{
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this._Item_No = value;
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10)")]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this._Stock_In_Date = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Defect_File")]
	public partial class Fabric_Defect_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private string _Style_Code;
		
		private string _Defect_Code;
		
		private System.Nullable<int> _Seq_No;
		
		private string _User_Id;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnStyle_CodeChanging(string value);
    partial void OnStyle_CodeChanged();
    partial void OnDefect_CodeChanging(string value);
    partial void OnDefect_CodeChanged();
    partial void OnSeq_NoChanging(System.Nullable<int> value);
    partial void OnSeq_NoChanged();
    partial void OnUser_IdChanging(string value);
    partial void OnUser_IdChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public Fabric_Defect_File()
		{
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Style_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Style_Code
		{
			get
			{
				return this._Style_Code;
			}
			set
			{
				if ((this._Style_Code != value))
				{
					this.OnStyle_CodeChanging(value);
					this.SendPropertyChanging();
					this._Style_Code = value;
					this.SendPropertyChanged("Style_Code");
					this.OnStyle_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Code", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Code
		{
			get
			{
				return this._Defect_Code;
			}
			set
			{
				if ((this._Defect_Code != value))
				{
					this.OnDefect_CodeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Code = value;
					this.SendPropertyChanged("Defect_Code");
					this.OnDefect_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq_No", DbType="Int")]
		public System.Nullable<int> Seq_No
		{
			get
			{
				return this._Seq_No;
			}
			set
			{
				if ((this._Seq_No != value))
				{
					this.OnSeq_NoChanging(value);
					this.SendPropertyChanging();
					this._Seq_No = value;
					this.SendPropertyChanged("Seq_No");
					this.OnSeq_NoChanged();
				}
			}
		}
		
		[Column(Storage="_User_Id", DbType="VarChar(50)")]
		public string User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PHQCDefectPHDefectClass")]
	public partial class PHQCDefectPHDefectClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PHDefectCode;
		
		private int _ID;
		
		private EntityRef<DepartmentalTree> _DepartmentalTree;
		
		private EntityRef<PHQCDefect> _PHQCDefect;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPHDefectCodeChanging(string value);
    partial void OnPHDefectCodeChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    #endregion
		
		public PHQCDefectPHDefectClass()
		{
			this._DepartmentalTree = default(EntityRef<DepartmentalTree>);
			this._PHQCDefect = default(EntityRef<PHQCDefect>);
			OnCreated();
		}
		
		[Column(Storage="_PHDefectCode", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PHDefectCode
		{
			get
			{
				return this._PHDefectCode;
			}
			set
			{
				if ((this._PHDefectCode != value))
				{
					if (this._PHQCDefect.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPHDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._PHDefectCode = value;
					this.SendPropertyChanged("PHDefectCode");
					this.OnPHDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._DepartmentalTree.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Association(Name="DepartmentalTree_PHQCDefectPHDefectClass", Storage="_DepartmentalTree", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public DepartmentalTree DepartmentalTree
		{
			get
			{
				return this._DepartmentalTree.Entity;
			}
			set
			{
				DepartmentalTree previousValue = this._DepartmentalTree.Entity;
				if (((previousValue != value) 
							|| (this._DepartmentalTree.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DepartmentalTree.Entity = null;
						previousValue.PHQCDefectPHDefectClasses.Remove(this);
					}
					this._DepartmentalTree.Entity = value;
					if ((value != null))
					{
						value.PHQCDefectPHDefectClasses.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("DepartmentalTree");
				}
			}
		}
		
		[Association(Name="PHQCDefect_PHQCDefectPHDefectClass", Storage="_PHQCDefect", ThisKey="PHDefectCode", OtherKey="PHDefectCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PHQCDefect PHQCDefect
		{
			get
			{
				return this._PHQCDefect.Entity;
			}
			set
			{
				PHQCDefect previousValue = this._PHQCDefect.Entity;
				if (((previousValue != value) 
							|| (this._PHQCDefect.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHQCDefect.Entity = null;
						previousValue.PHQCDefectPHDefectClasses.Remove(this);
					}
					this._PHQCDefect.Entity = value;
					if ((value != null))
					{
						value.PHQCDefectPHDefectClasses.Add(this);
						this._PHDefectCode = value.PHDefectCode;
					}
					else
					{
						this._PHDefectCode = default(string);
					}
					this.SendPropertyChanged("PHQCDefect");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DepartmentalTree")]
	public partial class DepartmentalTree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PHDefectClass;
		
		private System.Nullable<int> _PID;
		
		private EntitySet<PHQCDefectPHDefectClass> _PHQCDefectPHDefectClasses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPHDefectClassChanging(string value);
    partial void OnPHDefectClassChanged();
    partial void OnPIDChanging(System.Nullable<int> value);
    partial void OnPIDChanged();
    #endregion
		
		public DepartmentalTree()
		{
			this._PHQCDefectPHDefectClasses = new EntitySet<PHQCDefectPHDefectClass>(new Action<PHQCDefectPHDefectClass>(this.attach_PHQCDefectPHDefectClasses), new Action<PHQCDefectPHDefectClass>(this.detach_PHQCDefectPHDefectClasses));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PHDefectClass", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PHDefectClass
		{
			get
			{
				return this._PHDefectClass;
			}
			set
			{
				if ((this._PHDefectClass != value))
				{
					this.OnPHDefectClassChanging(value);
					this.SendPropertyChanging();
					this._PHDefectClass = value;
					this.SendPropertyChanged("PHDefectClass");
					this.OnPHDefectClassChanged();
				}
			}
		}
		
		[Column(Storage="_PID", DbType="Int")]
		public System.Nullable<int> PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[Association(Name="DepartmentalTree_PHQCDefectPHDefectClass", Storage="_PHQCDefectPHDefectClasses", ThisKey="ID", OtherKey="ID")]
		public EntitySet<PHQCDefectPHDefectClass> PHQCDefectPHDefectClasses
		{
			get
			{
				return this._PHQCDefectPHDefectClasses;
			}
			set
			{
				this._PHQCDefectPHDefectClasses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PHQCDefectPHDefectClasses(PHQCDefectPHDefectClass entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentalTree = this;
		}
		
		private void detach_PHQCDefectPHDefectClasses(PHQCDefectPHDefectClass entity)
		{
			this.SendPropertyChanging();
			entity.DepartmentalTree = null;
		}
	}
	
	[Table(Name="dbo.RN_Header")]
	public partial class RN_Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _RN_number;
		
		private string _Item_No;
		
		private string _IQC_Reference;
		
		private System.Nullable<decimal> _Receive_Qty;
		
		private System.Nullable<decimal> _Insp_Qty;
		
		private string _Supplier_Code;
		
		private string _QC_Summary;
		
		private string _Major_Problem1;
		
		private string _Major_Problem2;
		
		private string _Major_Problem3;
		
		private string _Major_Problem4;
		
		private string _Major_Problem5;
		
		private string _Major_Problem6;
		
		private string _Major_Problem7;
		
		private string _RN_confirm;
		
		private string _Stock_In_Date;
		
		private string _Confirmed_User;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private System.Nullable<decimal> _Reject_Qty;
		
		private System.Nullable<bool> _Decision1;
		
		private System.Nullable<bool> _Decision2;
		
		private System.Nullable<bool> _Decision3;
		
		private System.Nullable<bool> _Decision4;
		
		private System.Nullable<bool> _Decision5;
		
		private string _Major_Problem8;
		
		private string _OtherRejectRemark;
		
		private EntitySet<RN_Detail> _RN_Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnRN_numberChanging(int value);
    partial void OnRN_numberChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnIQC_ReferenceChanging(string value);
    partial void OnIQC_ReferenceChanged();
    partial void OnReceive_QtyChanging(System.Nullable<decimal> value);
    partial void OnReceive_QtyChanged();
    partial void OnInsp_QtyChanging(System.Nullable<decimal> value);
    partial void OnInsp_QtyChanged();
    partial void OnSupplier_CodeChanging(string value);
    partial void OnSupplier_CodeChanged();
    partial void OnQC_SummaryChanging(string value);
    partial void OnQC_SummaryChanged();
    partial void OnMajor_Problem1Changing(string value);
    partial void OnMajor_Problem1Changed();
    partial void OnMajor_Problem2Changing(string value);
    partial void OnMajor_Problem2Changed();
    partial void OnMajor_Problem3Changing(string value);
    partial void OnMajor_Problem3Changed();
    partial void OnMajor_Problem4Changing(string value);
    partial void OnMajor_Problem4Changed();
    partial void OnMajor_Problem5Changing(string value);
    partial void OnMajor_Problem5Changed();
    partial void OnMajor_Problem6Changing(string value);
    partial void OnMajor_Problem6Changed();
    partial void OnMajor_Problem7Changing(string value);
    partial void OnMajor_Problem7Changed();
    partial void OnRN_confirmChanging(string value);
    partial void OnRN_confirmChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnConfirmed_UserChanging(string value);
    partial void OnConfirmed_UserChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    partial void OnReject_QtyChanging(System.Nullable<decimal> value);
    partial void OnReject_QtyChanged();
    partial void OnDecision1Changing(System.Nullable<bool> value);
    partial void OnDecision1Changed();
    partial void OnDecision2Changing(System.Nullable<bool> value);
    partial void OnDecision2Changed();
    partial void OnDecision3Changing(System.Nullable<bool> value);
    partial void OnDecision3Changed();
    partial void OnDecision4Changing(System.Nullable<bool> value);
    partial void OnDecision4Changed();
    partial void OnDecision5Changing(System.Nullable<bool> value);
    partial void OnDecision5Changed();
    partial void OnMajor_Problem8Changing(string value);
    partial void OnMajor_Problem8Changed();
    partial void OnOtherRejectRemarkChanging(string value);
    partial void OnOtherRejectRemarkChanged();
    #endregion
		
		public RN_Header()
		{
			this._RN_Details = new EntitySet<RN_Detail>(new Action<RN_Detail>(this.attach_RN_Details), new Action<RN_Detail>(this.detach_RN_Details));
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_RN_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RN_number
		{
			get
			{
				return this._RN_number;
			}
			set
			{
				if ((this._RN_number != value))
				{
					this.OnRN_numberChanging(value);
					this.SendPropertyChanging();
					this._RN_number = value;
					this.SendPropertyChanged("RN_number");
					this.OnRN_numberChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(50)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_IQC_Reference", DbType="VarChar(50)")]
		public string IQC_Reference
		{
			get
			{
				return this._IQC_Reference;
			}
			set
			{
				if ((this._IQC_Reference != value))
				{
					this.OnIQC_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._IQC_Reference = value;
					this.SendPropertyChanged("IQC_Reference");
					this.OnIQC_ReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Receive_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Receive_Qty
		{
			get
			{
				return this._Receive_Qty;
			}
			set
			{
				if ((this._Receive_Qty != value))
				{
					this.OnReceive_QtyChanging(value);
					this.SendPropertyChanging();
					this._Receive_Qty = value;
					this.SendPropertyChanged("Receive_Qty");
					this.OnReceive_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Qty
		{
			get
			{
				return this._Insp_Qty;
			}
			set
			{
				if ((this._Insp_Qty != value))
				{
					this.OnInsp_QtyChanging(value);
					this.SendPropertyChanging();
					this._Insp_Qty = value;
					this.SendPropertyChanged("Insp_Qty");
					this.OnInsp_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Code", DbType="VarChar(7)")]
		public string Supplier_Code
		{
			get
			{
				return this._Supplier_Code;
			}
			set
			{
				if ((this._Supplier_Code != value))
				{
					this.OnSupplier_CodeChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Code = value;
					this.SendPropertyChanged("Supplier_Code");
					this.OnSupplier_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_QC_Summary", DbType="VarChar(1000)")]
		public string QC_Summary
		{
			get
			{
				return this._QC_Summary;
			}
			set
			{
				if ((this._QC_Summary != value))
				{
					this.OnQC_SummaryChanging(value);
					this.SendPropertyChanging();
					this._QC_Summary = value;
					this.SendPropertyChanged("QC_Summary");
					this.OnQC_SummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Major_Problem1", DbType="VarChar(50)")]
		public string Major_Problem1
		{
			get
			{
				return this._Major_Problem1;
			}
			set
			{
				if ((this._Major_Problem1 != value))
				{
					this.OnMajor_Problem1Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem1 = value;
					this.SendPropertyChanged("Major_Problem1");
					this.OnMajor_Problem1Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem2", DbType="VarChar(50)")]
		public string Major_Problem2
		{
			get
			{
				return this._Major_Problem2;
			}
			set
			{
				if ((this._Major_Problem2 != value))
				{
					this.OnMajor_Problem2Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem2 = value;
					this.SendPropertyChanged("Major_Problem2");
					this.OnMajor_Problem2Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem3", DbType="VarChar(50)")]
		public string Major_Problem3
		{
			get
			{
				return this._Major_Problem3;
			}
			set
			{
				if ((this._Major_Problem3 != value))
				{
					this.OnMajor_Problem3Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem3 = value;
					this.SendPropertyChanged("Major_Problem3");
					this.OnMajor_Problem3Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem4", DbType="VarChar(50)")]
		public string Major_Problem4
		{
			get
			{
				return this._Major_Problem4;
			}
			set
			{
				if ((this._Major_Problem4 != value))
				{
					this.OnMajor_Problem4Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem4 = value;
					this.SendPropertyChanged("Major_Problem4");
					this.OnMajor_Problem4Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem5", DbType="VarChar(50)")]
		public string Major_Problem5
		{
			get
			{
				return this._Major_Problem5;
			}
			set
			{
				if ((this._Major_Problem5 != value))
				{
					this.OnMajor_Problem5Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem5 = value;
					this.SendPropertyChanged("Major_Problem5");
					this.OnMajor_Problem5Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem6", DbType="VarChar(50)")]
		public string Major_Problem6
		{
			get
			{
				return this._Major_Problem6;
			}
			set
			{
				if ((this._Major_Problem6 != value))
				{
					this.OnMajor_Problem6Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem6 = value;
					this.SendPropertyChanged("Major_Problem6");
					this.OnMajor_Problem6Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem7", DbType="VarChar(50)")]
		public string Major_Problem7
		{
			get
			{
				return this._Major_Problem7;
			}
			set
			{
				if ((this._Major_Problem7 != value))
				{
					this.OnMajor_Problem7Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem7 = value;
					this.SendPropertyChanged("Major_Problem7");
					this.OnMajor_Problem7Changed();
				}
			}
		}
		
		[Column(Storage="_RN_confirm", DbType="VarChar(50)")]
		public string RN_confirm
		{
			get
			{
				return this._RN_confirm;
			}
			set
			{
				if ((this._RN_confirm != value))
				{
					this.OnRN_confirmChanging(value);
					this.SendPropertyChanging();
					this._RN_confirm = value;
					this.SendPropertyChanged("RN_confirm");
					this.OnRN_confirmChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(50)")]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Confirmed_User", DbType="VarChar(50)")]
		public string Confirmed_User
		{
			get
			{
				return this._Confirmed_User;
			}
			set
			{
				if ((this._Confirmed_User != value))
				{
					this.OnConfirmed_UserChanging(value);
					this.SendPropertyChanging();
					this._Confirmed_User = value;
					this.SendPropertyChanged("Confirmed_User");
					this.OnConfirmed_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Reject_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Reject_Qty
		{
			get
			{
				return this._Reject_Qty;
			}
			set
			{
				if ((this._Reject_Qty != value))
				{
					this.OnReject_QtyChanging(value);
					this.SendPropertyChanging();
					this._Reject_Qty = value;
					this.SendPropertyChanged("Reject_Qty");
					this.OnReject_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Decision1", DbType="Bit")]
		public System.Nullable<bool> Decision1
		{
			get
			{
				return this._Decision1;
			}
			set
			{
				if ((this._Decision1 != value))
				{
					this.OnDecision1Changing(value);
					this.SendPropertyChanging();
					this._Decision1 = value;
					this.SendPropertyChanged("Decision1");
					this.OnDecision1Changed();
				}
			}
		}
		
		[Column(Storage="_Decision2", DbType="Bit")]
		public System.Nullable<bool> Decision2
		{
			get
			{
				return this._Decision2;
			}
			set
			{
				if ((this._Decision2 != value))
				{
					this.OnDecision2Changing(value);
					this.SendPropertyChanging();
					this._Decision2 = value;
					this.SendPropertyChanged("Decision2");
					this.OnDecision2Changed();
				}
			}
		}
		
		[Column(Storage="_Decision3", DbType="Bit")]
		public System.Nullable<bool> Decision3
		{
			get
			{
				return this._Decision3;
			}
			set
			{
				if ((this._Decision3 != value))
				{
					this.OnDecision3Changing(value);
					this.SendPropertyChanging();
					this._Decision3 = value;
					this.SendPropertyChanged("Decision3");
					this.OnDecision3Changed();
				}
			}
		}
		
		[Column(Storage="_Decision4", DbType="Bit")]
		public System.Nullable<bool> Decision4
		{
			get
			{
				return this._Decision4;
			}
			set
			{
				if ((this._Decision4 != value))
				{
					this.OnDecision4Changing(value);
					this.SendPropertyChanging();
					this._Decision4 = value;
					this.SendPropertyChanged("Decision4");
					this.OnDecision4Changed();
				}
			}
		}
		
		[Column(Storage="_Decision5", DbType="Bit")]
		public System.Nullable<bool> Decision5
		{
			get
			{
				return this._Decision5;
			}
			set
			{
				if ((this._Decision5 != value))
				{
					this.OnDecision5Changing(value);
					this.SendPropertyChanging();
					this._Decision5 = value;
					this.SendPropertyChanged("Decision5");
					this.OnDecision5Changed();
				}
			}
		}
		
		[Column(Storage="_Major_Problem8", DbType="NVarChar(50)")]
		public string Major_Problem8
		{
			get
			{
				return this._Major_Problem8;
			}
			set
			{
				if ((this._Major_Problem8 != value))
				{
					this.OnMajor_Problem8Changing(value);
					this.SendPropertyChanging();
					this._Major_Problem8 = value;
					this.SendPropertyChanged("Major_Problem8");
					this.OnMajor_Problem8Changed();
				}
			}
		}
		
		[Column(Storage="_OtherRejectRemark", DbType="NVarChar(500)")]
		public string OtherRejectRemark
		{
			get
			{
				return this._OtherRejectRemark;
			}
			set
			{
				if ((this._OtherRejectRemark != value))
				{
					this.OnOtherRejectRemarkChanging(value);
					this.SendPropertyChanging();
					this._OtherRejectRemark = value;
					this.SendPropertyChanged("OtherRejectRemark");
					this.OnOtherRejectRemarkChanged();
				}
			}
		}
		
		[Association(Name="RN_Header_RN_Detail", Storage="_RN_Details", ThisKey="Company,RN_number", OtherKey="Company,RN_number")]
		public EntitySet<RN_Detail> RN_Details
		{
			get
			{
				return this._RN_Details;
			}
			set
			{
				this._RN_Details.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RN_Details(RN_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RN_Header = this;
		}
		
		private void detach_RN_Details(RN_Detail entity)
		{
			this.SendPropertyChanging();
			entity.RN_Header = null;
		}
	}
	
	[Table(Name="dbo.SupplierBatchInfo")]
	public partial class SupplierBatchInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Supplich_Batch;
		
		private string _Item_No;
		
		private string _Item_Desc;
		
		private string _Stock_In_Date;
		
		private System.Nullable<int> _RollQty;
		
		private System.Nullable<decimal> _TotalLength;
		
		private string _Remark;
		
		private string _CreateByUser;
		
		private System.Nullable<System.DateTime> _CreateOnDate;
		
		private string _AlterByUser;
		
		private System.Nullable<System.DateTime> _AlterOnDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplich_BatchChanging(string value);
    partial void OnSupplich_BatchChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnItem_DescChanging(string value);
    partial void OnItem_DescChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnRollQtyChanging(System.Nullable<int> value);
    partial void OnRollQtyChanged();
    partial void OnTotalLengthChanging(System.Nullable<decimal> value);
    partial void OnTotalLengthChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateByUserChanging(string value);
    partial void OnCreateByUserChanged();
    partial void OnCreateOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateOnDateChanged();
    partial void OnAlterByUserChanging(string value);
    partial void OnAlterByUserChanged();
    partial void OnAlterOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAlterOnDateChanged();
    #endregion
		
		public SupplierBatchInfo()
		{
			OnCreated();
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this.OnSupplich_BatchChanging(value);
					this.SendPropertyChanging();
					this._Supplich_Batch = value;
					this.SendPropertyChanged("Supplich_Batch");
					this.OnSupplich_BatchChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this.OnItem_DescChanging(value);
					this.SendPropertyChanging();
					this._Item_Desc = value;
					this.SendPropertyChanged("Item_Desc");
					this.OnItem_DescChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_RollQty", DbType="Int")]
		public System.Nullable<int> RollQty
		{
			get
			{
				return this._RollQty;
			}
			set
			{
				if ((this._RollQty != value))
				{
					this.OnRollQtyChanging(value);
					this.SendPropertyChanging();
					this._RollQty = value;
					this.SendPropertyChanged("RollQty");
					this.OnRollQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLength
		{
			get
			{
				return this._TotalLength;
			}
			set
			{
				if ((this._TotalLength != value))
				{
					this.OnTotalLengthChanging(value);
					this.SendPropertyChanging();
					this._TotalLength = value;
					this.SendPropertyChanged("TotalLength");
					this.OnTotalLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateByUser", DbType="NVarChar(50)")]
		public string CreateByUser
		{
			get
			{
				return this._CreateByUser;
			}
			set
			{
				if ((this._CreateByUser != value))
				{
					this.OnCreateByUserChanging(value);
					this.SendPropertyChanging();
					this._CreateByUser = value;
					this.SendPropertyChanged("CreateByUser");
					this.OnCreateByUserChanged();
				}
			}
		}
		
		[Column(Storage="_CreateOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateOnDate
		{
			get
			{
				return this._CreateOnDate;
			}
			set
			{
				if ((this._CreateOnDate != value))
				{
					this.OnCreateOnDateChanging(value);
					this.SendPropertyChanging();
					this._CreateOnDate = value;
					this.SendPropertyChanged("CreateOnDate");
					this.OnCreateOnDateChanged();
				}
			}
		}
		
		[Column(Storage="_AlterByUser", DbType="NVarChar(50)")]
		public string AlterByUser
		{
			get
			{
				return this._AlterByUser;
			}
			set
			{
				if ((this._AlterByUser != value))
				{
					this.OnAlterByUserChanging(value);
					this.SendPropertyChanging();
					this._AlterByUser = value;
					this.SendPropertyChanged("AlterByUser");
					this.OnAlterByUserChanged();
				}
			}
		}
		
		[Column(Storage="_AlterOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlterOnDate
		{
			get
			{
				return this._AlterOnDate;
			}
			set
			{
				if ((this._AlterOnDate != value))
				{
					this.OnAlterOnDateChanging(value);
					this.SendPropertyChanging();
					this._AlterOnDate = value;
					this.SendPropertyChanged("AlterOnDate");
					this.OnAlterOnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Width")]
	public partial class Fabric_Insp_Width : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private System.Nullable<decimal> _SideToSide_Width;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnSideToSide_WidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSide_WidthChanged();
    #endregion
		
		public Fabric_Insp_Width()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSide_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSide_Width
		{
			get
			{
				return this._SideToSide_Width;
			}
			set
			{
				if ((this._SideToSide_Width != value))
				{
					this.OnSideToSide_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSide_Width = value;
					this.SendPropertyChanged("SideToSide_Width");
					this.OnSideToSide_WidthChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Width", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_Widths.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_Widths.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BulkSubmission")]
	public partial class BulkSubmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PONO;
		
		private string _ItemNo;
		
		private string _Company;
		
		private string _Warehouse;
		
		private string _ItemDesc;
		
		private string _SupplierCode;
		
		private string _ProjectNo;
		
		private string _SeqNo;
		
		private System.Nullable<System.DateTime> _ReceivedDate;
		
		private string _BatchNo;
		
		private string _ColorResult;
		
		private string _Elongation;
		
		private string _ElongationResult;
		
		private string _MouldTrial;
		
		private string _MouldTrialResult;
		
		private string _OverallResult;
		
		private string _OverallFailReason;
		
		private string _ReleaseFlag;
		
		private System.Nullable<System.DateTime> _ShipmentDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnItemNoChanging(string value);
    partial void OnItemNoChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWarehouseChanging(string value);
    partial void OnWarehouseChanged();
    partial void OnItemDescChanging(string value);
    partial void OnItemDescChanged();
    partial void OnSupplierCodeChanging(string value);
    partial void OnSupplierCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnSeqNoChanging(string value);
    partial void OnSeqNoChanged();
    partial void OnReceivedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReceivedDateChanged();
    partial void OnBatchNoChanging(string value);
    partial void OnBatchNoChanged();
    partial void OnColorResultChanging(string value);
    partial void OnColorResultChanged();
    partial void OnElongationChanging(string value);
    partial void OnElongationChanged();
    partial void OnElongationResultChanging(string value);
    partial void OnElongationResultChanged();
    partial void OnMouldTrialChanging(string value);
    partial void OnMouldTrialChanged();
    partial void OnMouldTrialResultChanging(string value);
    partial void OnMouldTrialResultChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallFailReasonChanging(string value);
    partial void OnOverallFailReasonChanged();
    partial void OnReleaseFlagChanging(string value);
    partial void OnReleaseFlagChanged();
    partial void OnShipmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShipmentDateChanged();
    #endregion
		
		public BulkSubmission()
		{
			OnCreated();
		}
		
		[Column(Storage="_PONO", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Warehouse", DbType="VarChar(10)")]
		public string Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				if ((this._Warehouse != value))
				{
					this.OnWarehouseChanging(value);
					this.SendPropertyChanging();
					this._Warehouse = value;
					this.SendPropertyChanged("Warehouse");
					this.OnWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_ItemDesc", DbType="VarChar(50)")]
		public string ItemDesc
		{
			get
			{
				return this._ItemDesc;
			}
			set
			{
				if ((this._ItemDesc != value))
				{
					this.OnItemDescChanging(value);
					this.SendPropertyChanging();
					this._ItemDesc = value;
					this.SendPropertyChanged("ItemDesc");
					this.OnItemDescChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierCode", DbType="VarChar(7)")]
		public string SupplierCode
		{
			get
			{
				return this._SupplierCode;
			}
			set
			{
				if ((this._SupplierCode != value))
				{
					this.OnSupplierCodeChanging(value);
					this.SendPropertyChanging();
					this._SupplierCode = value;
					this.SendPropertyChanged("SupplierCode");
					this.OnSupplierCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(50)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="VarChar(20)")]
		public string SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ReceivedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReceivedDate
		{
			get
			{
				return this._ReceivedDate;
			}
			set
			{
				if ((this._ReceivedDate != value))
				{
					this.OnReceivedDateChanging(value);
					this.SendPropertyChanging();
					this._ReceivedDate = value;
					this.SendPropertyChanged("ReceivedDate");
					this.OnReceivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BatchNo", DbType="VarChar(20)")]
		public string BatchNo
		{
			get
			{
				return this._BatchNo;
			}
			set
			{
				if ((this._BatchNo != value))
				{
					this.OnBatchNoChanging(value);
					this.SendPropertyChanging();
					this._BatchNo = value;
					this.SendPropertyChanged("BatchNo");
					this.OnBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_ColorResult", DbType="VarChar(20)")]
		public string ColorResult
		{
			get
			{
				return this._ColorResult;
			}
			set
			{
				if ((this._ColorResult != value))
				{
					this.OnColorResultChanging(value);
					this.SendPropertyChanging();
					this._ColorResult = value;
					this.SendPropertyChanged("ColorResult");
					this.OnColorResultChanged();
				}
			}
		}
		
		[Column(Storage="_Elongation", DbType="VarChar(10)")]
		public string Elongation
		{
			get
			{
				return this._Elongation;
			}
			set
			{
				if ((this._Elongation != value))
				{
					this.OnElongationChanging(value);
					this.SendPropertyChanging();
					this._Elongation = value;
					this.SendPropertyChanged("Elongation");
					this.OnElongationChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationResult", DbType="VarChar(20)")]
		public string ElongationResult
		{
			get
			{
				return this._ElongationResult;
			}
			set
			{
				if ((this._ElongationResult != value))
				{
					this.OnElongationResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationResult = value;
					this.SendPropertyChanged("ElongationResult");
					this.OnElongationResultChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrial", DbType="VarChar(10)")]
		public string MouldTrial
		{
			get
			{
				return this._MouldTrial;
			}
			set
			{
				if ((this._MouldTrial != value))
				{
					this.OnMouldTrialChanging(value);
					this.SendPropertyChanging();
					this._MouldTrial = value;
					this.SendPropertyChanged("MouldTrial");
					this.OnMouldTrialChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialResult", DbType="VarChar(20)")]
		public string MouldTrialResult
		{
			get
			{
				return this._MouldTrialResult;
			}
			set
			{
				if ((this._MouldTrialResult != value))
				{
					this.OnMouldTrialResultChanging(value);
					this.SendPropertyChanging();
					this._MouldTrialResult = value;
					this.SendPropertyChanged("MouldTrialResult");
					this.OnMouldTrialResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(20)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallFailReason", DbType="NVarChar(300)")]
		public string OverallFailReason
		{
			get
			{
				return this._OverallFailReason;
			}
			set
			{
				if ((this._OverallFailReason != value))
				{
					this.OnOverallFailReasonChanging(value);
					this.SendPropertyChanging();
					this._OverallFailReason = value;
					this.SendPropertyChanged("OverallFailReason");
					this.OnOverallFailReasonChanged();
				}
			}
		}
		
		[Column(Storage="_ReleaseFlag", DbType="VarChar(10)")]
		public string ReleaseFlag
		{
			get
			{
				return this._ReleaseFlag;
			}
			set
			{
				if ((this._ReleaseFlag != value))
				{
					this.OnReleaseFlagChanging(value);
					this.SendPropertyChanging();
					this._ReleaseFlag = value;
					this.SendPropertyChanged("ReleaseFlag");
					this.OnReleaseFlagChanged();
				}
			}
		}
		
		[Column(Storage="_ShipmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShipmentDate
		{
			get
			{
				return this._ShipmentDate;
			}
			set
			{
				if ((this._ShipmentDate != value))
				{
					this.OnShipmentDateChanging(value);
					this.SendPropertyChanging();
					this._ShipmentDate = value;
					this.SendPropertyChanged("ShipmentDate");
					this.OnShipmentDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogEmail")]
	public partial class ActionLogEmail
	{
		
		private long _ID;
		
		private string _From;
		
		private string _To;
		
		private string _cc;
		
		private string _Subject;
		
		private string _Message;
		
		private long _DetailID;
		
		public ActionLogEmail()
		{
		}
		
		[Column(Storage="_ID", DbType="BigInt NOT NULL")]
		public long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Name="[From]", Storage="_From", DbType="NVarChar(100)")]
		public string From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this._From = value;
				}
			}
		}
		
		[Column(Name="[To]", Storage="_To", DbType="NVarChar(MAX)")]
		public string To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this._To = value;
				}
			}
		}
		
		[Column(Storage="_cc", DbType="NVarChar(MAX)")]
		public string cc
		{
			get
			{
				return this._cc;
			}
			set
			{
				if ((this._cc != value))
				{
					this._cc = value;
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(MAX)")]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this._Subject = value;
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this._Message = value;
				}
			}
		}
		
		[Column(Storage="_DetailID", DbType="BigInt NOT NULL")]
		public long DetailID
		{
			get
			{
				return this._DetailID;
			}
			set
			{
				if ((this._DetailID != value))
				{
					this._DetailID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Email")]
	public partial class Email
	{
		
		private string _UserID;
		
		private string _EmailAddress;
		
		private System.Nullable<int> _SortID;
		
		public Email()
		{
		}
		
		[Column(Storage="_UserID", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="NVarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this._EmailAddress = value;
				}
			}
		}
		
		[Column(Storage="_SortID", DbType="Int")]
		public System.Nullable<int> SortID
		{
			get
			{
				return this._SortID;
			}
			set
			{
				if ((this._SortID != value))
				{
					this._SortID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.OverallFailReason")]
	public partial class OverallFailReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _SeqNo;
		
		private string _ReasonGroup;
		
		private string _ReasonCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSeqNoChanging(string value);
    partial void OnSeqNoChanged();
    partial void OnReasonGroupChanging(string value);
    partial void OnReasonGroupChanged();
    partial void OnReasonCodeChanging(string value);
    partial void OnReasonCodeChanged();
    #endregion
		
		public OverallFailReason()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="VarChar(20)")]
		public string SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ReasonGroup", DbType="VarChar(20)")]
		public string ReasonGroup
		{
			get
			{
				return this._ReasonGroup;
			}
			set
			{
				if ((this._ReasonGroup != value))
				{
					this.OnReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._ReasonGroup = value;
					this.SendPropertyChanged("ReasonGroup");
					this.OnReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ReasonCode", DbType="VarChar(10)")]
		public string ReasonCode
		{
			get
			{
				return this._ReasonCode;
			}
			set
			{
				if ((this._ReasonCode != value))
				{
					this.OnReasonCodeChanging(value);
					this.SendPropertyChanging();
					this._ReasonCode = value;
					this.SendPropertyChanged("ReasonCode");
					this.OnReasonCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PHQCDefect")]
	public partial class PHQCDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PHDefectCode;
		
		private string _DefectEnglishName;
		
		private string _DefectChineseName;
		
		private string _DefectThaiName;
		
		private string _DefectEnglishRemark;
		
		private string _DefectChineseRemark;
		
		private string _DefectThaiRemark;
		
		private System.Nullable<bool> _CriticalDefect;
		
		private System.Nullable<bool> _MajorDefect;
		
		private System.Nullable<bool> _MinorDefect;
		
		private System.Nullable<char> _EnglishNameConfirm;
		
		private System.Nullable<char> _ChineseNameConfirm;
		
		private System.Nullable<char> _ThaiNameConfirm;
		
		private System.Nullable<bool> _Frequency;
		
		private string _POD;
		
		private string _ShareGroup;
		
		private string _SeqNo;
		
		private string _DefectPicture1URL;
		
		private string _DefectPicture2URL;
		
		private System.Nullable<bool> _IsGarment;
		
		private System.Nullable<bool> _IsFabric;
		
		private System.Nullable<bool> _IsBandLace;
		
		private System.Nullable<bool> _IsElasticTape;
		
		private System.Nullable<bool> _IsBraCup;
		
		private System.Nullable<bool> _IsAccessory;
		
		private EntitySet<PHQCDefectPHDefectClass> _PHQCDefectPHDefectClasses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPHDefectCodeChanging(string value);
    partial void OnPHDefectCodeChanged();
    partial void OnDefectEnglishNameChanging(string value);
    partial void OnDefectEnglishNameChanged();
    partial void OnDefectChineseNameChanging(string value);
    partial void OnDefectChineseNameChanged();
    partial void OnDefectThaiNameChanging(string value);
    partial void OnDefectThaiNameChanged();
    partial void OnDefectEnglishRemarkChanging(string value);
    partial void OnDefectEnglishRemarkChanged();
    partial void OnDefectChineseRemarkChanging(string value);
    partial void OnDefectChineseRemarkChanged();
    partial void OnDefectThaiRemarkChanging(string value);
    partial void OnDefectThaiRemarkChanged();
    partial void OnCriticalDefectChanging(System.Nullable<bool> value);
    partial void OnCriticalDefectChanged();
    partial void OnMajorDefectChanging(System.Nullable<bool> value);
    partial void OnMajorDefectChanged();
    partial void OnMinorDefectChanging(System.Nullable<bool> value);
    partial void OnMinorDefectChanged();
    partial void OnEnglishNameConfirmChanging(System.Nullable<char> value);
    partial void OnEnglishNameConfirmChanged();
    partial void OnChineseNameConfirmChanging(System.Nullable<char> value);
    partial void OnChineseNameConfirmChanged();
    partial void OnThaiNameConfirmChanging(System.Nullable<char> value);
    partial void OnThaiNameConfirmChanged();
    partial void OnFrequencyChanging(System.Nullable<bool> value);
    partial void OnFrequencyChanged();
    partial void OnPODChanging(string value);
    partial void OnPODChanged();
    partial void OnShareGroupChanging(string value);
    partial void OnShareGroupChanged();
    partial void OnSeqNoChanging(string value);
    partial void OnSeqNoChanged();
    partial void OnDefectPicture1URLChanging(string value);
    partial void OnDefectPicture1URLChanged();
    partial void OnDefectPicture2URLChanging(string value);
    partial void OnDefectPicture2URLChanged();
    partial void OnIsGarmentChanging(System.Nullable<bool> value);
    partial void OnIsGarmentChanged();
    partial void OnIsFabricChanging(System.Nullable<bool> value);
    partial void OnIsFabricChanged();
    partial void OnIsBandLaceChanging(System.Nullable<bool> value);
    partial void OnIsBandLaceChanged();
    partial void OnIsElasticTapeChanging(System.Nullable<bool> value);
    partial void OnIsElasticTapeChanged();
    partial void OnIsBraCupChanging(System.Nullable<bool> value);
    partial void OnIsBraCupChanged();
    partial void OnIsAccessoryChanging(System.Nullable<bool> value);
    partial void OnIsAccessoryChanged();
    #endregion
		
		public PHQCDefect()
		{
			this._PHQCDefectPHDefectClasses = new EntitySet<PHQCDefectPHDefectClass>(new Action<PHQCDefectPHDefectClass>(this.attach_PHQCDefectPHDefectClasses), new Action<PHQCDefectPHDefectClass>(this.detach_PHQCDefectPHDefectClasses));
			OnCreated();
		}
		
		[Column(Storage="_PHDefectCode", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PHDefectCode
		{
			get
			{
				return this._PHDefectCode;
			}
			set
			{
				if ((this._PHDefectCode != value))
				{
					this.OnPHDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._PHDefectCode = value;
					this.SendPropertyChanged("PHDefectCode");
					this.OnPHDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectEnglishName", DbType="VarChar(200)")]
		public string DefectEnglishName
		{
			get
			{
				return this._DefectEnglishName;
			}
			set
			{
				if ((this._DefectEnglishName != value))
				{
					this.OnDefectEnglishNameChanging(value);
					this.SendPropertyChanging();
					this._DefectEnglishName = value;
					this.SendPropertyChanged("DefectEnglishName");
					this.OnDefectEnglishNameChanged();
				}
			}
		}
		
		[Column(Storage="_DefectChineseName", DbType="NVarChar(200)")]
		public string DefectChineseName
		{
			get
			{
				return this._DefectChineseName;
			}
			set
			{
				if ((this._DefectChineseName != value))
				{
					this.OnDefectChineseNameChanging(value);
					this.SendPropertyChanging();
					this._DefectChineseName = value;
					this.SendPropertyChanged("DefectChineseName");
					this.OnDefectChineseNameChanged();
				}
			}
		}
		
		[Column(Storage="_DefectThaiName", DbType="NVarChar(200)")]
		public string DefectThaiName
		{
			get
			{
				return this._DefectThaiName;
			}
			set
			{
				if ((this._DefectThaiName != value))
				{
					this.OnDefectThaiNameChanging(value);
					this.SendPropertyChanging();
					this._DefectThaiName = value;
					this.SendPropertyChanged("DefectThaiName");
					this.OnDefectThaiNameChanged();
				}
			}
		}
		
		[Column(Storage="_DefectEnglishRemark", DbType="VarChar(100)")]
		public string DefectEnglishRemark
		{
			get
			{
				return this._DefectEnglishRemark;
			}
			set
			{
				if ((this._DefectEnglishRemark != value))
				{
					this.OnDefectEnglishRemarkChanging(value);
					this.SendPropertyChanging();
					this._DefectEnglishRemark = value;
					this.SendPropertyChanged("DefectEnglishRemark");
					this.OnDefectEnglishRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_DefectChineseRemark", DbType="NVarChar(100)")]
		public string DefectChineseRemark
		{
			get
			{
				return this._DefectChineseRemark;
			}
			set
			{
				if ((this._DefectChineseRemark != value))
				{
					this.OnDefectChineseRemarkChanging(value);
					this.SendPropertyChanging();
					this._DefectChineseRemark = value;
					this.SendPropertyChanged("DefectChineseRemark");
					this.OnDefectChineseRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_DefectThaiRemark", DbType="NVarChar(100)")]
		public string DefectThaiRemark
		{
			get
			{
				return this._DefectThaiRemark;
			}
			set
			{
				if ((this._DefectThaiRemark != value))
				{
					this.OnDefectThaiRemarkChanging(value);
					this.SendPropertyChanging();
					this._DefectThaiRemark = value;
					this.SendPropertyChanged("DefectThaiRemark");
					this.OnDefectThaiRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CriticalDefect", DbType="Bit")]
		public System.Nullable<bool> CriticalDefect
		{
			get
			{
				return this._CriticalDefect;
			}
			set
			{
				if ((this._CriticalDefect != value))
				{
					this.OnCriticalDefectChanging(value);
					this.SendPropertyChanging();
					this._CriticalDefect = value;
					this.SendPropertyChanged("CriticalDefect");
					this.OnCriticalDefectChanged();
				}
			}
		}
		
		[Column(Storage="_MajorDefect", DbType="Bit")]
		public System.Nullable<bool> MajorDefect
		{
			get
			{
				return this._MajorDefect;
			}
			set
			{
				if ((this._MajorDefect != value))
				{
					this.OnMajorDefectChanging(value);
					this.SendPropertyChanging();
					this._MajorDefect = value;
					this.SendPropertyChanged("MajorDefect");
					this.OnMajorDefectChanged();
				}
			}
		}
		
		[Column(Storage="_MinorDefect", DbType="Bit")]
		public System.Nullable<bool> MinorDefect
		{
			get
			{
				return this._MinorDefect;
			}
			set
			{
				if ((this._MinorDefect != value))
				{
					this.OnMinorDefectChanging(value);
					this.SendPropertyChanging();
					this._MinorDefect = value;
					this.SendPropertyChanged("MinorDefect");
					this.OnMinorDefectChanged();
				}
			}
		}
		
		[Column(Storage="_EnglishNameConfirm", DbType="VarChar(1)")]
		public System.Nullable<char> EnglishNameConfirm
		{
			get
			{
				return this._EnglishNameConfirm;
			}
			set
			{
				if ((this._EnglishNameConfirm != value))
				{
					this.OnEnglishNameConfirmChanging(value);
					this.SendPropertyChanging();
					this._EnglishNameConfirm = value;
					this.SendPropertyChanged("EnglishNameConfirm");
					this.OnEnglishNameConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_ChineseNameConfirm", DbType="VarChar(1)")]
		public System.Nullable<char> ChineseNameConfirm
		{
			get
			{
				return this._ChineseNameConfirm;
			}
			set
			{
				if ((this._ChineseNameConfirm != value))
				{
					this.OnChineseNameConfirmChanging(value);
					this.SendPropertyChanging();
					this._ChineseNameConfirm = value;
					this.SendPropertyChanged("ChineseNameConfirm");
					this.OnChineseNameConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_ThaiNameConfirm", DbType="VarChar(1)")]
		public System.Nullable<char> ThaiNameConfirm
		{
			get
			{
				return this._ThaiNameConfirm;
			}
			set
			{
				if ((this._ThaiNameConfirm != value))
				{
					this.OnThaiNameConfirmChanging(value);
					this.SendPropertyChanging();
					this._ThaiNameConfirm = value;
					this.SendPropertyChanged("ThaiNameConfirm");
					this.OnThaiNameConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_Frequency", DbType="Bit")]
		public System.Nullable<bool> Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[Column(Storage="_POD", DbType="NVarChar(500)")]
		public string POD
		{
			get
			{
				return this._POD;
			}
			set
			{
				if ((this._POD != value))
				{
					this.OnPODChanging(value);
					this.SendPropertyChanging();
					this._POD = value;
					this.SendPropertyChanged("POD");
					this.OnPODChanged();
				}
			}
		}
		
		[Column(Storage="_ShareGroup", DbType="VarChar(300)")]
		public string ShareGroup
		{
			get
			{
				return this._ShareGroup;
			}
			set
			{
				if ((this._ShareGroup != value))
				{
					this.OnShareGroupChanging(value);
					this.SendPropertyChanging();
					this._ShareGroup = value;
					this.SendPropertyChanged("ShareGroup");
					this.OnShareGroupChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="VarChar(10)")]
		public string SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPicture1URL", DbType="NVarChar(300)")]
		public string DefectPicture1URL
		{
			get
			{
				return this._DefectPicture1URL;
			}
			set
			{
				if ((this._DefectPicture1URL != value))
				{
					this.OnDefectPicture1URLChanging(value);
					this.SendPropertyChanging();
					this._DefectPicture1URL = value;
					this.SendPropertyChanged("DefectPicture1URL");
					this.OnDefectPicture1URLChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPicture2URL", DbType="NVarChar(300)")]
		public string DefectPicture2URL
		{
			get
			{
				return this._DefectPicture2URL;
			}
			set
			{
				if ((this._DefectPicture2URL != value))
				{
					this.OnDefectPicture2URLChanging(value);
					this.SendPropertyChanging();
					this._DefectPicture2URL = value;
					this.SendPropertyChanged("DefectPicture2URL");
					this.OnDefectPicture2URLChanged();
				}
			}
		}
		
		[Column(Storage="_IsGarment", DbType="Bit")]
		public System.Nullable<bool> IsGarment
		{
			get
			{
				return this._IsGarment;
			}
			set
			{
				if ((this._IsGarment != value))
				{
					this.OnIsGarmentChanging(value);
					this.SendPropertyChanging();
					this._IsGarment = value;
					this.SendPropertyChanged("IsGarment");
					this.OnIsGarmentChanged();
				}
			}
		}
		
		[Column(Storage="_IsFabric", DbType="Bit")]
		public System.Nullable<bool> IsFabric
		{
			get
			{
				return this._IsFabric;
			}
			set
			{
				if ((this._IsFabric != value))
				{
					this.OnIsFabricChanging(value);
					this.SendPropertyChanging();
					this._IsFabric = value;
					this.SendPropertyChanged("IsFabric");
					this.OnIsFabricChanged();
				}
			}
		}
		
		[Column(Storage="_IsBandLace", DbType="Bit")]
		public System.Nullable<bool> IsBandLace
		{
			get
			{
				return this._IsBandLace;
			}
			set
			{
				if ((this._IsBandLace != value))
				{
					this.OnIsBandLaceChanging(value);
					this.SendPropertyChanging();
					this._IsBandLace = value;
					this.SendPropertyChanged("IsBandLace");
					this.OnIsBandLaceChanged();
				}
			}
		}
		
		[Column(Storage="_IsElasticTape", DbType="Bit")]
		public System.Nullable<bool> IsElasticTape
		{
			get
			{
				return this._IsElasticTape;
			}
			set
			{
				if ((this._IsElasticTape != value))
				{
					this.OnIsElasticTapeChanging(value);
					this.SendPropertyChanging();
					this._IsElasticTape = value;
					this.SendPropertyChanged("IsElasticTape");
					this.OnIsElasticTapeChanged();
				}
			}
		}
		
		[Column(Storage="_IsBraCup", DbType="Bit")]
		public System.Nullable<bool> IsBraCup
		{
			get
			{
				return this._IsBraCup;
			}
			set
			{
				if ((this._IsBraCup != value))
				{
					this.OnIsBraCupChanging(value);
					this.SendPropertyChanging();
					this._IsBraCup = value;
					this.SendPropertyChanged("IsBraCup");
					this.OnIsBraCupChanged();
				}
			}
		}
		
		[Column(Storage="_IsAccessory", DbType="Bit")]
		public System.Nullable<bool> IsAccessory
		{
			get
			{
				return this._IsAccessory;
			}
			set
			{
				if ((this._IsAccessory != value))
				{
					this.OnIsAccessoryChanging(value);
					this.SendPropertyChanging();
					this._IsAccessory = value;
					this.SendPropertyChanged("IsAccessory");
					this.OnIsAccessoryChanged();
				}
			}
		}
		
		[Association(Name="PHQCDefect_PHQCDefectPHDefectClass", Storage="_PHQCDefectPHDefectClasses", ThisKey="PHDefectCode", OtherKey="PHDefectCode")]
		public EntitySet<PHQCDefectPHDefectClass> PHQCDefectPHDefectClasses
		{
			get
			{
				return this._PHQCDefectPHDefectClasses;
			}
			set
			{
				this._PHQCDefectPHDefectClasses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PHQCDefectPHDefectClasses(PHQCDefectPHDefectClass entity)
		{
			this.SendPropertyChanging();
			entity.PHQCDefect = this;
		}
		
		private void detach_PHQCDefectPHDefectClasses(PHQCDefectPHDefectClass entity)
		{
			this.SendPropertyChanging();
			entity.PHQCDefect = null;
		}
	}
	
	[Table(Name="dbo.RN_Detail")]
	public partial class RN_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _RN_number;
		
		private int _System_Install_No;
		
		private string _Lot_Id;
		
		private System.Nullable<decimal> _Insp_Qty;
		
		private string _Reject_Reason;
		
		private string _Supplier_Name;
		
		private string _HDO_no;
		
		private string _Project_No;
		
		private string _Supplier_Inv_No;
		
		private string _Po_No;
		
		private string _Batch_No;
		
		private string _Roll_No;
		
		private System.Nullable<decimal> _Insp_Length;
		
		private System.Nullable<decimal> _Supplier_Length;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private EntityRef<RN_Header> _RN_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnRN_numberChanging(int value);
    partial void OnRN_numberChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnLot_IdChanging(string value);
    partial void OnLot_IdChanged();
    partial void OnInsp_QtyChanging(System.Nullable<decimal> value);
    partial void OnInsp_QtyChanged();
    partial void OnReject_ReasonChanging(string value);
    partial void OnReject_ReasonChanged();
    partial void OnSupplier_NameChanging(string value);
    partial void OnSupplier_NameChanged();
    partial void OnHDO_noChanging(string value);
    partial void OnHDO_noChanged();
    partial void OnProject_NoChanging(string value);
    partial void OnProject_NoChanged();
    partial void OnSupplier_Inv_NoChanging(string value);
    partial void OnSupplier_Inv_NoChanged();
    partial void OnPo_NoChanging(string value);
    partial void OnPo_NoChanged();
    partial void OnBatch_NoChanging(string value);
    partial void OnBatch_NoChanged();
    partial void OnRoll_NoChanging(string value);
    partial void OnRoll_NoChanged();
    partial void OnInsp_LengthChanging(System.Nullable<decimal> value);
    partial void OnInsp_LengthChanged();
    partial void OnSupplier_LengthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_LengthChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    #endregion
		
		public RN_Detail()
		{
			this._RN_Header = default(EntityRef<RN_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._RN_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_RN_number", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RN_number
		{
			get
			{
				return this._RN_number;
			}
			set
			{
				if ((this._RN_number != value))
				{
					if (this._RN_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRN_numberChanging(value);
					this.SendPropertyChanging();
					this._RN_number = value;
					this.SendPropertyChanged("RN_number");
					this.OnRN_numberChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(1000)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this.OnLot_IdChanging(value);
					this.SendPropertyChanging();
					this._Lot_Id = value;
					this.SendPropertyChanged("Lot_Id");
					this.OnLot_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Qty
		{
			get
			{
				return this._Insp_Qty;
			}
			set
			{
				if ((this._Insp_Qty != value))
				{
					this.OnInsp_QtyChanging(value);
					this.SendPropertyChanging();
					this._Insp_Qty = value;
					this.SendPropertyChanged("Insp_Qty");
					this.OnInsp_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Reject_Reason", DbType="VarChar(100)")]
		public string Reject_Reason
		{
			get
			{
				return this._Reject_Reason;
			}
			set
			{
				if ((this._Reject_Reason != value))
				{
					this.OnReject_ReasonChanging(value);
					this.SendPropertyChanging();
					this._Reject_Reason = value;
					this.SendPropertyChanged("Reject_Reason");
					this.OnReject_ReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Name", DbType="VarChar(50)")]
		public string Supplier_Name
		{
			get
			{
				return this._Supplier_Name;
			}
			set
			{
				if ((this._Supplier_Name != value))
				{
					this.OnSupplier_NameChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Name = value;
					this.SendPropertyChanged("Supplier_Name");
					this.OnSupplier_NameChanged();
				}
			}
		}
		
		[Column(Storage="_HDO_no", DbType="VarChar(50)")]
		public string HDO_no
		{
			get
			{
				return this._HDO_no;
			}
			set
			{
				if ((this._HDO_no != value))
				{
					this.OnHDO_noChanging(value);
					this.SendPropertyChanging();
					this._HDO_no = value;
					this.SendPropertyChanged("HDO_no");
					this.OnHDO_noChanged();
				}
			}
		}
		
		[Column(Storage="_Project_No", DbType="VarChar(50)")]
		public string Project_No
		{
			get
			{
				return this._Project_No;
			}
			set
			{
				if ((this._Project_No != value))
				{
					this.OnProject_NoChanging(value);
					this.SendPropertyChanging();
					this._Project_No = value;
					this.SendPropertyChanged("Project_No");
					this.OnProject_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Inv_No", DbType="VarChar(50)")]
		public string Supplier_Inv_No
		{
			get
			{
				return this._Supplier_Inv_No;
			}
			set
			{
				if ((this._Supplier_Inv_No != value))
				{
					this.OnSupplier_Inv_NoChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Inv_No = value;
					this.SendPropertyChanged("Supplier_Inv_No");
					this.OnSupplier_Inv_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Po_No", DbType="VarChar(50)")]
		public string Po_No
		{
			get
			{
				return this._Po_No;
			}
			set
			{
				if ((this._Po_No != value))
				{
					this.OnPo_NoChanging(value);
					this.SendPropertyChanging();
					this._Po_No = value;
					this.SendPropertyChanged("Po_No");
					this.OnPo_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Batch_No", DbType="VarChar(50)")]
		public string Batch_No
		{
			get
			{
				return this._Batch_No;
			}
			set
			{
				if ((this._Batch_No != value))
				{
					this.OnBatch_NoChanging(value);
					this.SendPropertyChanging();
					this._Batch_No = value;
					this.SendPropertyChanged("Batch_No");
					this.OnBatch_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this.OnRoll_NoChanging(value);
					this.SendPropertyChanging();
					this._Roll_No = value;
					this.SendPropertyChanged("Roll_No");
					this.OnRoll_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Length
		{
			get
			{
				return this._Insp_Length;
			}
			set
			{
				if ((this._Insp_Length != value))
				{
					this.OnInsp_LengthChanging(value);
					this.SendPropertyChanging();
					this._Insp_Length = value;
					this.SendPropertyChanged("Insp_Length");
					this.OnInsp_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Supplier_Length
		{
			get
			{
				return this._Supplier_Length;
			}
			set
			{
				if ((this._Supplier_Length != value))
				{
					this.OnSupplier_LengthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Length = value;
					this.SendPropertyChanged("Supplier_Length");
					this.OnSupplier_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Association(Name="RN_Header_RN_Detail", Storage="_RN_Header", ThisKey="Company,RN_number", OtherKey="Company,RN_number", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public RN_Header RN_Header
		{
			get
			{
				return this._RN_Header.Entity;
			}
			set
			{
				RN_Header previousValue = this._RN_Header.Entity;
				if (((previousValue != value) 
							|| (this._RN_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RN_Header.Entity = null;
						previousValue.RN_Details.Remove(this);
					}
					this._RN_Header.Entity = value;
					if ((value != null))
					{
						value.RN_Details.Add(this);
						this._Company = value.Company;
						this._RN_number = value.RN_number;
					}
					else
					{
						this._Company = default(string);
						this._RN_number = default(int);
					}
					this.SendPropertyChanged("RN_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.CrossCupGroup")]
	public partial class CrossCupGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _SuppRef;
		
		private string _CupGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnCupGroupChanging(string value);
    partial void OnCupGroupChanged();
    #endregion
		
		public CrossCupGroup()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_CupGroup", DbType="VarChar(2000)")]
		public string CupGroup
		{
			get
			{
				return this._CupGroup;
			}
			set
			{
				if ((this._CupGroup != value))
				{
					this.OnCupGroupChanging(value);
					this.SendPropertyChanging();
					this._CupGroup = value;
					this.SendPropertyChanged("CupGroup");
					this.OnCupGroupChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DataDict")]
	public partial class DataDict : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Code;
		
		private string _Desc_EN;
		
		private string _Desc_CN;
		
		private string _Desc_BD;
		
		private string _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDesc_ENChanging(string value);
    partial void OnDesc_ENChanged();
    partial void OnDesc_CNChanging(string value);
    partial void OnDesc_CNChanged();
    partial void OnDesc_BDChanging(string value);
    partial void OnDesc_BDChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public DataDict()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Desc_EN", DbType="VarChar(2000)")]
		public string Desc_EN
		{
			get
			{
				return this._Desc_EN;
			}
			set
			{
				if ((this._Desc_EN != value))
				{
					this.OnDesc_ENChanging(value);
					this.SendPropertyChanging();
					this._Desc_EN = value;
					this.SendPropertyChanged("Desc_EN");
					this.OnDesc_ENChanged();
				}
			}
		}
		
		[Column(Storage="_Desc_CN", DbType="VarChar(2000)")]
		public string Desc_CN
		{
			get
			{
				return this._Desc_CN;
			}
			set
			{
				if ((this._Desc_CN != value))
				{
					this.OnDesc_CNChanging(value);
					this.SendPropertyChanging();
					this._Desc_CN = value;
					this.SendPropertyChanged("Desc_CN");
					this.OnDesc_CNChanged();
				}
			}
		}
		
		[Column(Storage="_Desc_BD", DbType="VarChar(2000)")]
		public string Desc_BD
		{
			get
			{
				return this._Desc_BD;
			}
			set
			{
				if ((this._Desc_BD != value))
				{
					this.OnDesc_BDChanging(value);
					this.SendPropertyChanging();
					this._Desc_BD = value;
					this.SendPropertyChanged("Desc_BD");
					this.OnDesc_BDChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BandLaceSpotDefect")]
	public partial class BandLaceSpotDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectPointQty;
		
		private EntityRef<BandLaceHeader> _BandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnDefectPointQtyChanged();
    #endregion
		
		public BandLaceSpotDefect()
		{
			this._BandLaceHeader = default(EntityRef<BandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPointQty", DbType="Int")]
		public System.Nullable<int> DefectPointQty
		{
			get
			{
				return this._DefectPointQty;
			}
			set
			{
				if ((this._DefectPointQty != value))
				{
					this.OnDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectPointQty = value;
					this.SendPropertyChanged("DefectPointQty");
					this.OnDefectPointQtyChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLaceSpotDefect", Storage="_BandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BandLaceHeader BandLaceHeader
		{
			get
			{
				return this._BandLaceHeader.Entity;
			}
			set
			{
				BandLaceHeader previousValue = this._BandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._BandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BandLaceHeader.Entity = null;
						previousValue.BandLaceSpotDefects.Remove(this);
					}
					this._BandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.BandLaceSpotDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ElasticSpotDefect")]
	public partial class ElasticSpotDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectPointQty;
		
		private EntityRef<ElasticHeader> _ElasticHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnDefectPointQtyChanged();
    #endregion
		
		public ElasticSpotDefect()
		{
			this._ElasticHeader = default(EntityRef<ElasticHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._ElasticHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPointQty", DbType="Int")]
		public System.Nullable<int> DefectPointQty
		{
			get
			{
				return this._DefectPointQty;
			}
			set
			{
				if ((this._DefectPointQty != value))
				{
					this.OnDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectPointQty = value;
					this.SendPropertyChanged("DefectPointQty");
					this.OnDefectPointQtyChanged();
				}
			}
		}
		
		[Association(Name="ElasticHeader_ElasticSpotDefect", Storage="_ElasticHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ElasticHeader ElasticHeader
		{
			get
			{
				return this._ElasticHeader.Entity;
			}
			set
			{
				ElasticHeader previousValue = this._ElasticHeader.Entity;
				if (((previousValue != value) 
							|| (this._ElasticHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElasticHeader.Entity = null;
						previousValue.ElasticSpotDefects.Remove(this);
					}
					this._ElasticHeader.Entity = value;
					if ((value != null))
					{
						value.ElasticSpotDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ElasticHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ElasticChainDefect")]
	public partial class ElasticChainDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _DefectFrom;
		
		private System.Nullable<decimal> _DefectTo;
		
		private EntityRef<ElasticHeader> _ElasticHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnDefectFromChanging(System.Nullable<decimal> value);
    partial void OnDefectFromChanged();
    partial void OnDefectToChanging(System.Nullable<decimal> value);
    partial void OnDefectToChanged();
    #endregion
		
		public ElasticChainDefect()
		{
			this._ElasticHeader = default(EntityRef<ElasticHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._ElasticHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_DefectFrom", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectFrom
		{
			get
			{
				return this._DefectFrom;
			}
			set
			{
				if ((this._DefectFrom != value))
				{
					this.OnDefectFromChanging(value);
					this.SendPropertyChanging();
					this._DefectFrom = value;
					this.SendPropertyChanged("DefectFrom");
					this.OnDefectFromChanged();
				}
			}
		}
		
		[Column(Storage="_DefectTo", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectTo
		{
			get
			{
				return this._DefectTo;
			}
			set
			{
				if ((this._DefectTo != value))
				{
					this.OnDefectToChanging(value);
					this.SendPropertyChanging();
					this._DefectTo = value;
					this.SendPropertyChanged("DefectTo");
					this.OnDefectToChanged();
				}
			}
		}
		
		[Association(Name="ElasticHeader_ElasticChainDefect", Storage="_ElasticHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ElasticHeader ElasticHeader
		{
			get
			{
				return this._ElasticHeader.Entity;
			}
			set
			{
				ElasticHeader previousValue = this._ElasticHeader.Entity;
				if (((previousValue != value) 
							|| (this._ElasticHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ElasticHeader.Entity = null;
						previousValue.ElasticChainDefects.Remove(this);
					}
					this._ElasticHeader.Entity = value;
					if ((value != null))
					{
						value.ElasticChainDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("ElasticHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogSubjectCategory")]
	public partial class ActionLogSubjectCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _SeqNo;
		
		private string _ShortName;
		
		private string _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSeqNoChanging(string value);
    partial void OnSeqNoChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public ActionLogSubjectCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="VarChar(20)")]
		public string SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(100)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(100)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AccessoryDefect")]
	public partial class AccessoryDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _Qty;
		
		private string _Flag;
		
		private EntityRef<AccessoryHeader> _AccessoryHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public AccessoryDefect()
		{
			this._AccessoryHeader = default(EntityRef<AccessoryHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._AccessoryHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="AccessoryHeader_AccessoryDefect", Storage="_AccessoryHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public AccessoryHeader AccessoryHeader
		{
			get
			{
				return this._AccessoryHeader.Entity;
			}
			set
			{
				AccessoryHeader previousValue = this._AccessoryHeader.Entity;
				if (((previousValue != value) 
							|| (this._AccessoryHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessoryHeader.Entity = null;
						previousValue.AccessoryDefects.Remove(this);
					}
					this._AccessoryHeader.Entity = value;
					if ((value != null))
					{
						value.AccessoryDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccessoryHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AccessoryCasingDefect")]
	public partial class AccessoryCasingDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectQty;
		
		private EntityRef<AccessoryHeader> _AccessoryHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    #endregion
		
		public AccessoryCasingDefect()
		{
			this._AccessoryHeader = default(EntityRef<AccessoryHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._AccessoryHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Association(Name="AccessoryHeader_AccessoryCasingDefect", Storage="_AccessoryHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public AccessoryHeader AccessoryHeader
		{
			get
			{
				return this._AccessoryHeader.Entity;
			}
			set
			{
				AccessoryHeader previousValue = this._AccessoryHeader.Entity;
				if (((previousValue != value) 
							|| (this._AccessoryHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessoryHeader.Entity = null;
						previousValue.AccessoryCasingDefects.Remove(this);
					}
					this._AccessoryHeader.Entity = value;
					if ((value != null))
					{
						value.AccessoryCasingDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("AccessoryHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ConvertSupp")]
	public partial class ConvertSupp : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _SuppCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    #endregion
		
		public ConvertSupp()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(20)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.RejectNotice")]
	public partial class RejectNotice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<int> _RNNo;
		
		private System.Nullable<int> _AuditNo;
		
		private string _IssueDept;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private string _Creater;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnRNNoChanging(System.Nullable<int> value);
    partial void OnRNNoChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnIssueDeptChanging(string value);
    partial void OnIssueDeptChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnCreaterChanging(string value);
    partial void OnCreaterChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public RejectNotice()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_RNNo", DbType="Int")]
		public System.Nullable<int> RNNo
		{
			get
			{
				return this._RNNo;
			}
			set
			{
				if ((this._RNNo != value))
				{
					this.OnRNNoChanging(value);
					this.SendPropertyChanging();
					this._RNNo = value;
					this.SendPropertyChanged("RNNo");
					this.OnRNNoChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDept", DbType="VarChar(100)")]
		public string IssueDept
		{
			get
			{
				return this._IssueDept;
			}
			set
			{
				if ((this._IssueDept != value))
				{
					this.OnIssueDeptChanging(value);
					this.SendPropertyChanging();
					this._IssueDept = value;
					this.SendPropertyChanged("IssueDept");
					this.OnIssueDeptChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Creater", DbType="VarChar(50)")]
		public string Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(30)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BandLandWidth")]
	public partial class BandLandWidth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _UsableWidth;
		
		private System.Nullable<decimal> _SideToSideWidth;
		
		private EntityRef<BandLaceHeader> _BandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnUsableWidthChanging(System.Nullable<decimal> value);
    partial void OnUsableWidthChanged();
    partial void OnSideToSideWidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSideWidthChanged();
    #endregion
		
		public BandLandWidth()
		{
			this._BandLaceHeader = default(EntityRef<BandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> UsableWidth
		{
			get
			{
				return this._UsableWidth;
			}
			set
			{
				if ((this._UsableWidth != value))
				{
					this.OnUsableWidthChanging(value);
					this.SendPropertyChanging();
					this._UsableWidth = value;
					this.SendPropertyChanged("UsableWidth");
					this.OnUsableWidthChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSideWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSideWidth
		{
			get
			{
				return this._SideToSideWidth;
			}
			set
			{
				if ((this._SideToSideWidth != value))
				{
					this.OnSideToSideWidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSideWidth = value;
					this.SendPropertyChanged("SideToSideWidth");
					this.OnSideToSideWidthChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandWidth", Storage="_BandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BandLaceHeader BandLaceHeader
		{
			get
			{
				return this._BandLaceHeader.Entity;
			}
			set
			{
				BandLaceHeader previousValue = this._BandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._BandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BandLaceHeader.Entity = null;
						previousValue.BandLandWidths.Remove(this);
					}
					this._BandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.BandLandWidths.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.GridViewHeaderBackColor")]
	public partial class GridViewHeaderBackColor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Flag;
		
		private string _FieldName;
		
		private System.Nullable<bool> _Color1;
		
		private System.Nullable<bool> _Color2;
		
		private System.Nullable<bool> _Color3;
		
		private System.Nullable<bool> _IsBand;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnColor1Changing(System.Nullable<bool> value);
    partial void OnColor1Changed();
    partial void OnColor2Changing(System.Nullable<bool> value);
    partial void OnColor2Changed();
    partial void OnColor3Changing(System.Nullable<bool> value);
    partial void OnColor3Changed();
    partial void OnIsBandChanging(System.Nullable<bool> value);
    partial void OnIsBandChanged();
    #endregion
		
		public GridViewHeaderBackColor()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_FieldName", DbType="VarChar(100)")]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[Column(Storage="_Color1", DbType="Bit")]
		public System.Nullable<bool> Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if ((this._Color1 != value))
				{
					this.OnColor1Changing(value);
					this.SendPropertyChanging();
					this._Color1 = value;
					this.SendPropertyChanged("Color1");
					this.OnColor1Changed();
				}
			}
		}
		
		[Column(Storage="_Color2", DbType="Bit")]
		public System.Nullable<bool> Color2
		{
			get
			{
				return this._Color2;
			}
			set
			{
				if ((this._Color2 != value))
				{
					this.OnColor2Changing(value);
					this.SendPropertyChanging();
					this._Color2 = value;
					this.SendPropertyChanged("Color2");
					this.OnColor2Changed();
				}
			}
		}
		
		[Column(Storage="_Color3", DbType="Bit")]
		public System.Nullable<bool> Color3
		{
			get
			{
				return this._Color3;
			}
			set
			{
				if ((this._Color3 != value))
				{
					this.OnColor3Changing(value);
					this.SendPropertyChanging();
					this._Color3 = value;
					this.SendPropertyChanged("Color3");
					this.OnColor3Changed();
				}
			}
		}
		
		[Column(Storage="_IsBand", DbType="Bit")]
		public System.Nullable<bool> IsBand
		{
			get
			{
				return this._IsBand;
			}
			set
			{
				if ((this._IsBand != value))
				{
					this.OnIsBandChanging(value);
					this.SendPropertyChanging();
					this._IsBand = value;
					this.SendPropertyChanged("IsBand");
					this.OnIsBandChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BraCupDefect")]
	public partial class BraCupDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _Qty;
		
		private string _Flag;
		
		private EntityRef<BraCupHeader> _BraCupHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public BraCupDefect()
		{
			this._BraCupHeader = default(EntityRef<BraCupHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BraCupHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="BraCupHeader_BraCupDefect", Storage="_BraCupHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BraCupHeader BraCupHeader
		{
			get
			{
				return this._BraCupHeader.Entity;
			}
			set
			{
				BraCupHeader previousValue = this._BraCupHeader.Entity;
				if (((previousValue != value) 
							|| (this._BraCupHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BraCupHeader.Entity = null;
						previousValue.BraCupDefects.Remove(this);
					}
					this._BraCupHeader.Entity = value;
					if ((value != null))
					{
						value.BraCupDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BraCupHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BraCupCasingDefect")]
	public partial class BraCupCasingDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectQty;
		
		private EntityRef<BraCupHeader> _BraCupHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    #endregion
		
		public BraCupCasingDefect()
		{
			this._BraCupHeader = default(EntityRef<BraCupHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BraCupHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Association(Name="BraCupHeader_BraCupCasingDefect", Storage="_BraCupHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BraCupHeader BraCupHeader
		{
			get
			{
				return this._BraCupHeader.Entity;
			}
			set
			{
				BraCupHeader previousValue = this._BraCupHeader.Entity;
				if (((previousValue != value) 
							|| (this._BraCupHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BraCupHeader.Entity = null;
						previousValue.BraCupCasingDefects.Remove(this);
					}
					this._BraCupHeader.Entity = value;
					if ((value != null))
					{
						value.BraCupCasingDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BraCupHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BandLandPatternShapeRepeat")]
	public partial class BandLandPatternShapeRepeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _MeasurePatternShapeRepeat;
		
		private EntityRef<BandLaceHeader> _BandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnMeasurePatternShapeRepeatChanging(System.Nullable<decimal> value);
    partial void OnMeasurePatternShapeRepeatChanged();
    #endregion
		
		public BandLandPatternShapeRepeat()
		{
			this._BandLaceHeader = default(EntityRef<BandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_MeasurePatternShapeRepeat", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasurePatternShapeRepeat
		{
			get
			{
				return this._MeasurePatternShapeRepeat;
			}
			set
			{
				if ((this._MeasurePatternShapeRepeat != value))
				{
					this.OnMeasurePatternShapeRepeatChanging(value);
					this.SendPropertyChanging();
					this._MeasurePatternShapeRepeat = value;
					this.SendPropertyChanged("MeasurePatternShapeRepeat");
					this.OnMeasurePatternShapeRepeatChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandPatternShapeRepeat", Storage="_BandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BandLaceHeader BandLaceHeader
		{
			get
			{
				return this._BandLaceHeader.Entity;
			}
			set
			{
				BandLaceHeader previousValue = this._BandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._BandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BandLaceHeader.Entity = null;
						previousValue.BandLandPatternShapeRepeats.Remove(this);
					}
					this._BandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.BandLandPatternShapeRepeats.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BandLandSkewnessBow")]
	public partial class BandLandSkewnessBow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _MeasureSkewnessDistanceCD;
		
		private EntityRef<BandLaceHeader> _BandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnMeasureSkewnessDistanceCDChanging(System.Nullable<decimal> value);
    partial void OnMeasureSkewnessDistanceCDChanged();
    #endregion
		
		public BandLandSkewnessBow()
		{
			this._BandLaceHeader = default(EntityRef<BandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureSkewnessDistanceCD", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureSkewnessDistanceCD
		{
			get
			{
				return this._MeasureSkewnessDistanceCD;
			}
			set
			{
				if ((this._MeasureSkewnessDistanceCD != value))
				{
					this.OnMeasureSkewnessDistanceCDChanging(value);
					this.SendPropertyChanging();
					this._MeasureSkewnessDistanceCD = value;
					this.SendPropertyChanged("MeasureSkewnessDistanceCD");
					this.OnMeasureSkewnessDistanceCDChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandSkewnessBow", Storage="_BandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BandLaceHeader BandLaceHeader
		{
			get
			{
				return this._BandLaceHeader.Entity;
			}
			set
			{
				BandLaceHeader previousValue = this._BandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._BandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BandLaceHeader.Entity = null;
						previousValue.BandLandSkewnessBows.Remove(this);
					}
					this._BandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.BandLandSkewnessBows.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogCompleteReason")]
	public partial class ActionLogCompleteReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _SeqNo;
		
		private string _Remark;
		
		private string _RemarkCN;
		
		private string _RemarkBD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnSeqNoChanging(string value);
    partial void OnSeqNoChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnRemarkCNChanging(string value);
    partial void OnRemarkCNChanged();
    partial void OnRemarkBDChanging(string value);
    partial void OnRemarkBDChanged();
    #endregion
		
		public ActionLogCompleteReason()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="VarChar(20)")]
		public string SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_RemarkCN", DbType="NVarChar(1000)")]
		public string RemarkCN
		{
			get
			{
				return this._RemarkCN;
			}
			set
			{
				if ((this._RemarkCN != value))
				{
					this.OnRemarkCNChanging(value);
					this.SendPropertyChanging();
					this._RemarkCN = value;
					this.SendPropertyChanged("RemarkCN");
					this.OnRemarkCNChanged();
				}
			}
		}
		
		[Column(Storage="_RemarkBD", DbType="NVarChar(1000)")]
		public string RemarkBD
		{
			get
			{
				return this._RemarkBD;
			}
			set
			{
				if ((this._RemarkBD != value))
				{
					this.OnRemarkBDChanging(value);
					this.SendPropertyChanging();
					this._RemarkBD = value;
					this.SendPropertyChanged("RemarkBD");
					this.OnRemarkBDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.WaitQAItem")]
	public partial class WaitQAItem
	{
		
		private long _OID;
		
		private string _Company;
		
		private string _SuppItemRef;
		
		private string _MaterialType;
		
		private string _ItemNo;
		
		private string _ColorCode;
		
		private string _ProjectNo;
		
		private string _LotNo;
		
		private System.Nullable<decimal> _PackListQty;
		
		private string _Whse;
		
		private string _HDONo;
		
		private string _PONo;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private string _SuppCode;
		
		private string _Unit;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<System.DateTime> _FWStartDateFirstWO;
		
		private System.Nullable<System.DateTime> _FWStartDateLastWO;
		
		private System.Nullable<int> _OverDueDay;
		
		private string _AuditStage;
		
		private string _AuditType;
		
		private System.Nullable<int> _AuditTeam;
		
		private string _FullItemNo;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		public WaitQAItem()
		{
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this._OID = value;
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(5)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this._Company = value;
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(100)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this._SuppItemRef = value;
				}
			}
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(10)")]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this._MaterialType = value;
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="VarChar(20)")]
		public string ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this._ItemNo = value;
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this._ColorCode = value;
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(100)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this._ProjectNo = value;
				}
			}
		}
		
		[Column(Storage="_LotNo", DbType="VarChar(50)")]
		public string LotNo
		{
			get
			{
				return this._LotNo;
			}
			set
			{
				if ((this._LotNo != value))
				{
					this._LotNo = value;
				}
			}
		}
		
		[Column(Storage="_PackListQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackListQty
		{
			get
			{
				return this._PackListQty;
			}
			set
			{
				if ((this._PackListQty != value))
				{
					this._PackListQty = value;
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(10)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this._Whse = value;
				}
			}
		}
		
		[Column(Storage="_HDONo", DbType="VarChar(50)")]
		public string HDONo
		{
			get
			{
				return this._HDONo;
			}
			set
			{
				if ((this._HDONo != value))
				{
					this._HDONo = value;
				}
			}
		}
		
		[Column(Storage="_PONo", DbType="VarChar(50)")]
		public string PONo
		{
			get
			{
				return this._PONo;
			}
			set
			{
				if ((this._PONo != value))
				{
					this._PONo = value;
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this._IDCreateDate = value;
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this._SuppCode = value;
				}
			}
		}
		
		[Column(Storage="_Unit", DbType="VarChar(10)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this._Unit = value;
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this._AuditNo = value;
				}
			}
		}
		
		[Column(Storage="_FWStartDateFirstWO", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDateFirstWO
		{
			get
			{
				return this._FWStartDateFirstWO;
			}
			set
			{
				if ((this._FWStartDateFirstWO != value))
				{
					this._FWStartDateFirstWO = value;
				}
			}
		}
		
		[Column(Storage="_FWStartDateLastWO", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDateLastWO
		{
			get
			{
				return this._FWStartDateLastWO;
			}
			set
			{
				if ((this._FWStartDateLastWO != value))
				{
					this._FWStartDateLastWO = value;
				}
			}
		}
		
		[Column(Storage="_OverDueDay", DbType="Int")]
		public System.Nullable<int> OverDueDay
		{
			get
			{
				return this._OverDueDay;
			}
			set
			{
				if ((this._OverDueDay != value))
				{
					this._OverDueDay = value;
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(10)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this._AuditStage = value;
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(20)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this._AuditType = value;
				}
			}
		}
		
		[Column(Storage="_AuditTeam", DbType="Int")]
		public System.Nullable<int> AuditTeam
		{
			get
			{
				return this._AuditTeam;
			}
			set
			{
				if ((this._AuditTeam != value))
				{
					this._AuditTeam = value;
				}
			}
		}
		
		[Column(Storage="_FullItemNo", DbType="VarChar(50)")]
		public string FullItemNo
		{
			get
			{
				return this._FullItemNo;
			}
			set
			{
				if ((this._FullItemNo != value))
				{
					this._FullItemNo = value;
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this._CreateDate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ExclueMaterial")]
	public partial class ExclueMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _MaterialCategory;
		
		private string _Material;
		
		private string _Flag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnMaterialCategoryChanging(string value);
    partial void OnMaterialCategoryChanged();
    partial void OnMaterialChanging(string value);
    partial void OnMaterialChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public ExclueMaterial()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_MaterialCategory", DbType="VarChar(10)")]
		public string MaterialCategory
		{
			get
			{
				return this._MaterialCategory;
			}
			set
			{
				if ((this._MaterialCategory != value))
				{
					this.OnMaterialCategoryChanging(value);
					this.SendPropertyChanging();
					this._MaterialCategory = value;
					this.SendPropertyChanged("MaterialCategory");
					this.OnMaterialCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Material", DbType="VarChar(10)")]
		public string Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				if ((this._Material != value))
				{
					this.OnMaterialChanging(value);
					this.SendPropertyChanging();
					this._Material = value;
					this.SendPropertyChanged("Material");
					this.OnMaterialChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(50)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SupplierBatchInfoBandLace")]
	public partial class SupplierBatchInfoBandLace : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Supplich_Batch;
		
		private string _Item_No;
		
		private string _ColorCode;
		
		private System.DateTime _Stock_In_Date;
		
		private string _Item_Desc;
		
		private System.Nullable<int> _RollQty;
		
		private System.Nullable<decimal> _TotalLength;
		
		private string _Remark;
		
		private string _CreateByUser;
		
		private System.Nullable<System.DateTime> _CreateOnDate;
		
		private string _AlterByUser;
		
		private System.Nullable<System.DateTime> _AlterOnDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSupplich_BatchChanging(string value);
    partial void OnSupplich_BatchChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnStock_In_DateChanging(System.DateTime value);
    partial void OnStock_In_DateChanged();
    partial void OnItem_DescChanging(string value);
    partial void OnItem_DescChanged();
    partial void OnRollQtyChanging(System.Nullable<int> value);
    partial void OnRollQtyChanged();
    partial void OnTotalLengthChanging(System.Nullable<decimal> value);
    partial void OnTotalLengthChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCreateByUserChanging(string value);
    partial void OnCreateByUserChanged();
    partial void OnCreateOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateOnDateChanged();
    partial void OnAlterByUserChanging(string value);
    partial void OnAlterByUserChanged();
    partial void OnAlterOnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAlterOnDateChanged();
    #endregion
		
		public SupplierBatchInfoBandLace()
		{
			OnCreated();
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this.OnSupplich_BatchChanging(value);
					this.SendPropertyChanging();
					this._Supplich_Batch = value;
					this.SendPropertyChanged("Supplich_Batch");
					this.OnSupplich_BatchChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50)")]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this.OnItem_DescChanging(value);
					this.SendPropertyChanging();
					this._Item_Desc = value;
					this.SendPropertyChanged("Item_Desc");
					this.OnItem_DescChanged();
				}
			}
		}
		
		[Column(Storage="_RollQty", DbType="Int")]
		public System.Nullable<int> RollQty
		{
			get
			{
				return this._RollQty;
			}
			set
			{
				if ((this._RollQty != value))
				{
					this.OnRollQtyChanging(value);
					this.SendPropertyChanging();
					this._RollQty = value;
					this.SendPropertyChanged("RollQty");
					this.OnRollQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLength
		{
			get
			{
				return this._TotalLength;
			}
			set
			{
				if ((this._TotalLength != value))
				{
					this.OnTotalLengthChanging(value);
					this.SendPropertyChanging();
					this._TotalLength = value;
					this.SendPropertyChanged("TotalLength");
					this.OnTotalLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_CreateByUser", DbType="NVarChar(50)")]
		public string CreateByUser
		{
			get
			{
				return this._CreateByUser;
			}
			set
			{
				if ((this._CreateByUser != value))
				{
					this.OnCreateByUserChanging(value);
					this.SendPropertyChanging();
					this._CreateByUser = value;
					this.SendPropertyChanged("CreateByUser");
					this.OnCreateByUserChanged();
				}
			}
		}
		
		[Column(Storage="_CreateOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateOnDate
		{
			get
			{
				return this._CreateOnDate;
			}
			set
			{
				if ((this._CreateOnDate != value))
				{
					this.OnCreateOnDateChanging(value);
					this.SendPropertyChanging();
					this._CreateOnDate = value;
					this.SendPropertyChanged("CreateOnDate");
					this.OnCreateOnDateChanged();
				}
			}
		}
		
		[Column(Storage="_AlterByUser", DbType="NVarChar(50)")]
		public string AlterByUser
		{
			get
			{
				return this._AlterByUser;
			}
			set
			{
				if ((this._AlterByUser != value))
				{
					this.OnAlterByUserChanging(value);
					this.SendPropertyChanging();
					this._AlterByUser = value;
					this.SendPropertyChanged("AlterByUser");
					this.OnAlterByUserChanged();
				}
			}
		}
		
		[Column(Storage="_AlterOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlterOnDate
		{
			get
			{
				return this._AlterOnDate;
			}
			set
			{
				if ((this._AlterOnDate != value))
				{
					this.OnAlterOnDateChanging(value);
					this.SendPropertyChanging();
					this._AlterOnDate = value;
					this.SendPropertyChanged("AlterOnDate");
					this.OnAlterOnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_SpreadDefect")]
	public partial class Fabric_Insp_SpreadDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private string _Spread_Defect_Degree;
		
		private int _From_Place;
		
		private int _To_Place;
		
		private string _Proc_Code1;
		
		private string _Proc_Code2;
		
		private string _Proc_Code3;
		
		private string _Proc_Code4;
		
		private string _Proc_Code5;
		
		private string _Proc_Status;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private System.Nullable<double> _AddtionalPercent;
		
		private System.Nullable<decimal> _From_Place_Length;
		
		private System.Nullable<decimal> _To_Place_Length;
		
		private System.Nullable<bool> _IsCutOut;
		
		private EntityRef<Fabric_Insp_Header> _Fabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnSpread_Defect_DegreeChanging(string value);
    partial void OnSpread_Defect_DegreeChanged();
    partial void OnFrom_PlaceChanging(int value);
    partial void OnFrom_PlaceChanged();
    partial void OnTo_PlaceChanging(int value);
    partial void OnTo_PlaceChanged();
    partial void OnProc_Code1Changing(string value);
    partial void OnProc_Code1Changed();
    partial void OnProc_Code2Changing(string value);
    partial void OnProc_Code2Changed();
    partial void OnProc_Code3Changing(string value);
    partial void OnProc_Code3Changed();
    partial void OnProc_Code4Changing(string value);
    partial void OnProc_Code4Changed();
    partial void OnProc_Code5Changing(string value);
    partial void OnProc_Code5Changed();
    partial void OnProc_StatusChanging(string value);
    partial void OnProc_StatusChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnAddtionalPercentChanging(System.Nullable<double> value);
    partial void OnAddtionalPercentChanged();
    partial void OnFrom_Place_LengthChanging(System.Nullable<decimal> value);
    partial void OnFrom_Place_LengthChanged();
    partial void OnTo_Place_LengthChanging(System.Nullable<decimal> value);
    partial void OnTo_Place_LengthChanged();
    partial void OnIsCutOutChanging(System.Nullable<bool> value);
    partial void OnIsCutOutChanged();
    #endregion
		
		public Fabric_Insp_SpreadDefect()
		{
			this._Fabric_Insp_Header = default(EntityRef<Fabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._Fabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Degree", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Spread_Defect_Degree
		{
			get
			{
				return this._Spread_Defect_Degree;
			}
			set
			{
				if ((this._Spread_Defect_Degree != value))
				{
					this.OnSpread_Defect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Degree = value;
					this.SendPropertyChanged("Spread_Defect_Degree");
					this.OnSpread_Defect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_From_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int From_Place
		{
			get
			{
				return this._From_Place;
			}
			set
			{
				if ((this._From_Place != value))
				{
					this.OnFrom_PlaceChanging(value);
					this.SendPropertyChanging();
					this._From_Place = value;
					this.SendPropertyChanged("From_Place");
					this.OnFrom_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_To_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int To_Place
		{
			get
			{
				return this._To_Place;
			}
			set
			{
				if ((this._To_Place != value))
				{
					this.OnTo_PlaceChanging(value);
					this.SendPropertyChanging();
					this._To_Place = value;
					this.SendPropertyChanged("To_Place");
					this.OnTo_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Proc_Code1", DbType="VarChar(50)")]
		public string Proc_Code1
		{
			get
			{
				return this._Proc_Code1;
			}
			set
			{
				if ((this._Proc_Code1 != value))
				{
					this.OnProc_Code1Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code1 = value;
					this.SendPropertyChanged("Proc_Code1");
					this.OnProc_Code1Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code2", DbType="VarChar(50)")]
		public string Proc_Code2
		{
			get
			{
				return this._Proc_Code2;
			}
			set
			{
				if ((this._Proc_Code2 != value))
				{
					this.OnProc_Code2Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code2 = value;
					this.SendPropertyChanged("Proc_Code2");
					this.OnProc_Code2Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code3", DbType="VarChar(50)")]
		public string Proc_Code3
		{
			get
			{
				return this._Proc_Code3;
			}
			set
			{
				if ((this._Proc_Code3 != value))
				{
					this.OnProc_Code3Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code3 = value;
					this.SendPropertyChanged("Proc_Code3");
					this.OnProc_Code3Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code4", DbType="VarChar(50)")]
		public string Proc_Code4
		{
			get
			{
				return this._Proc_Code4;
			}
			set
			{
				if ((this._Proc_Code4 != value))
				{
					this.OnProc_Code4Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code4 = value;
					this.SendPropertyChanged("Proc_Code4");
					this.OnProc_Code4Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code5", DbType="VarChar(50)")]
		public string Proc_Code5
		{
			get
			{
				return this._Proc_Code5;
			}
			set
			{
				if ((this._Proc_Code5 != value))
				{
					this.OnProc_Code5Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code5 = value;
					this.SendPropertyChanged("Proc_Code5");
					this.OnProc_Code5Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Status", DbType="VarChar(50)")]
		public string Proc_Status
		{
			get
			{
				return this._Proc_Status;
			}
			set
			{
				if ((this._Proc_Status != value))
				{
					this.OnProc_StatusChanging(value);
					this.SendPropertyChanging();
					this._Proc_Status = value;
					this.SendPropertyChanged("Proc_Status");
					this.OnProc_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_AddtionalPercent", DbType="Float")]
		public System.Nullable<double> AddtionalPercent
		{
			get
			{
				return this._AddtionalPercent;
			}
			set
			{
				if ((this._AddtionalPercent != value))
				{
					this.OnAddtionalPercentChanging(value);
					this.SendPropertyChanging();
					this._AddtionalPercent = value;
					this.SendPropertyChanged("AddtionalPercent");
					this.OnAddtionalPercentChanged();
				}
			}
		}
		
		[Column(Storage="_From_Place_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> From_Place_Length
		{
			get
			{
				return this._From_Place_Length;
			}
			set
			{
				if ((this._From_Place_Length != value))
				{
					this.OnFrom_Place_LengthChanging(value);
					this.SendPropertyChanging();
					this._From_Place_Length = value;
					this.SendPropertyChanged("From_Place_Length");
					this.OnFrom_Place_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_To_Place_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> To_Place_Length
		{
			get
			{
				return this._To_Place_Length;
			}
			set
			{
				if ((this._To_Place_Length != value))
				{
					this.OnTo_Place_LengthChanging(value);
					this.SendPropertyChanging();
					this._To_Place_Length = value;
					this.SendPropertyChanged("To_Place_Length");
					this.OnTo_Place_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_IsCutOut", DbType="Bit")]
		public System.Nullable<bool> IsCutOut
		{
			get
			{
				return this._IsCutOut;
			}
			set
			{
				if ((this._IsCutOut != value))
				{
					this.OnIsCutOutChanging(value);
					this.SendPropertyChanging();
					this._IsCutOut = value;
					this.SendPropertyChanged("IsCutOut");
					this.OnIsCutOutChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_SpreadDefect", Storage="_Fabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Fabric_Insp_Header Fabric_Insp_Header
		{
			get
			{
				return this._Fabric_Insp_Header.Entity;
			}
			set
			{
				Fabric_Insp_Header previousValue = this._Fabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._Fabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fabric_Insp_Header.Entity = null;
						previousValue.Fabric_Insp_SpreadDefects.Remove(this);
					}
					this._Fabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.Fabric_Insp_SpreadDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("Fabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BandLaceChainDefect")]
	public partial class BandLaceChainDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _DefectFrom;
		
		private System.Nullable<decimal> _DefectTo;
		
		private System.Nullable<bool> _IsCutOut;
		
		private EntityRef<BandLaceHeader> _BandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnDefectFromChanging(System.Nullable<decimal> value);
    partial void OnDefectFromChanged();
    partial void OnDefectToChanging(System.Nullable<decimal> value);
    partial void OnDefectToChanged();
    partial void OnIsCutOutChanging(System.Nullable<bool> value);
    partial void OnIsCutOutChanged();
    #endregion
		
		public BandLaceChainDefect()
		{
			this._BandLaceHeader = default(EntityRef<BandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._BandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_DefectFrom", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectFrom
		{
			get
			{
				return this._DefectFrom;
			}
			set
			{
				if ((this._DefectFrom != value))
				{
					this.OnDefectFromChanging(value);
					this.SendPropertyChanging();
					this._DefectFrom = value;
					this.SendPropertyChanged("DefectFrom");
					this.OnDefectFromChanged();
				}
			}
		}
		
		[Column(Storage="_DefectTo", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectTo
		{
			get
			{
				return this._DefectTo;
			}
			set
			{
				if ((this._DefectTo != value))
				{
					this.OnDefectToChanging(value);
					this.SendPropertyChanging();
					this._DefectTo = value;
					this.SendPropertyChanged("DefectTo");
					this.OnDefectToChanged();
				}
			}
		}
		
		[Column(Storage="_IsCutOut", DbType="Bit")]
		public System.Nullable<bool> IsCutOut
		{
			get
			{
				return this._IsCutOut;
			}
			set
			{
				if ((this._IsCutOut != value))
				{
					this.OnIsCutOutChanging(value);
					this.SendPropertyChanging();
					this._IsCutOut = value;
					this.SendPropertyChanged("IsCutOut");
					this.OnIsCutOutChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLaceChainDefect", Storage="_BandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public BandLaceHeader BandLaceHeader
		{
			get
			{
				return this._BandLaceHeader.Entity;
			}
			set
			{
				BandLaceHeader previousValue = this._BandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._BandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BandLaceHeader.Entity = null;
						previousValue.BandLaceChainDefects.Remove(this);
					}
					this._BandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.BandLaceChainDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("BandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ErrorCode")]
	public partial class ErrorCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OID;
		
		private string _Code;
		
		private string _NameEN;
		
		private string _NameCN;
		
		private string _NameBD;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(int value);
    partial void OnOIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnNameENChanging(string value);
    partial void OnNameENChanged();
    partial void OnNameCNChanging(string value);
    partial void OnNameCNChanged();
    partial void OnNameBDChanging(string value);
    partial void OnNameBDChanged();
    #endregion
		
		public ErrorCode()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(20)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_NameEN", DbType="VarChar(500)")]
		public string NameEN
		{
			get
			{
				return this._NameEN;
			}
			set
			{
				if ((this._NameEN != value))
				{
					this.OnNameENChanging(value);
					this.SendPropertyChanging();
					this._NameEN = value;
					this.SendPropertyChanged("NameEN");
					this.OnNameENChanged();
				}
			}
		}
		
		[Column(Storage="_NameCN", DbType="VarChar(500)")]
		public string NameCN
		{
			get
			{
				return this._NameCN;
			}
			set
			{
				if ((this._NameCN != value))
				{
					this.OnNameCNChanging(value);
					this.SendPropertyChanging();
					this._NameCN = value;
					this.SendPropertyChanged("NameCN");
					this.OnNameCNChanged();
				}
			}
		}
		
		[Column(Storage="_NameBD", DbType="VarChar(500)")]
		public string NameBD
		{
			get
			{
				return this._NameBD;
			}
			set
			{
				if ((this._NameBD != value))
				{
					this.OnNameBDChanging(value);
					this.SendPropertyChanging();
					this._NameBD = value;
					this.SendPropertyChanged("NameBD");
					this.OnNameBDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sFabric_Insp_Header")]
	public partial class sFabric_Insp_Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Item_No;
		
		private string _Item_Desc;
		
		private string _PO;
		
		private string _HdoNo;
		
		private string _ProjectNo;
		
		private string _IQC_Reference;
		
		private string _Lot_Id;
		
		private System.Nullable<decimal> _Actual_Length;
		
		private System.Nullable<decimal> _Actual_Weight;
		
		private System.Nullable<decimal> _Supplier_Width;
		
		private System.Nullable<decimal> _Insp_Length;
		
		private System.Nullable<decimal> _GM_SQM;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Supplier_Code;
		
		private string _Supplich_Batch;
		
		private string _Roll_No;
		
		private System.Nullable<int> _Total_Points;
		
		private System.Nullable<decimal> _Points_Hundred_SQM;
		
		private System.Nullable<decimal> _Deductive_Qty;
		
		private System.Nullable<decimal> _Wastage;
		
		private string _Insp_Result;
		
		private string _Party_Insp_Result;
		
		private string _Spread_Insp_Result;
		
		private string _Mould_Trial_Result;
		
		private string _Color_Group_Status;
		
		private string _Spread_Defect_Exist;
		
		private string _Insp_Confirm;
		
		private System.Nullable<decimal> _PH_Sample;
		
		private System.Nullable<decimal> _Panel_Size1;
		
		private System.Nullable<decimal> _Panel_Size2;
		
		private System.Nullable<decimal> _Special_Marker;
		
		private string _Spread_Remark;
		
		private string _Mould_Trial_Remark;
		
		private string _Stock_In_Date;
		
		private System.Nullable<System.DateTime> _Stock_In_Date_DateTime;
		
		private System.Nullable<int> _Turn_Size;
		
		private string _Supplier_Length_Unit;
		
		private string _Supplier_Width_Unit;
		
		private System.Nullable<decimal> _SideToSideH_Width;
		
		private string _Inspector;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private string _LightStatus;
		
		private string _InvoiceNo;
		
		private string _Supplier_Item_No;
		
		private string _Insp_Result_Reason;
		
		private string _Phy_Properties_Result;
		
		private string _SupplierItemColor;
		
		private string _WeftYarnClass;
		
		private System.Nullable<decimal> _WeftYarnPercentage;
		
		private string _WeftYarnStatus;
		
		private string _WeftYarnSolution1;
		
		private string _WeftYarnSolution2;
		
		private System.Nullable<decimal> _WeftYarnWastage;
		
		private System.Nullable<decimal> _ElongationWarpResult;
		
		private System.Nullable<decimal> _ElongationWeftResult;
		
		private string _ElongationStatus;
		
		private string _ElongationSolution1;
		
		private string _ElongationSolution2;
		
		private string _WeftYarn;
		
		private string _Elongation;
		
		private string _MouldTrial;
		
		private string _MouldTrialSolution1;
		
		private string _MouldTrialSolution2;
		
		private System.Nullable<System.DateTime> _Inspection_Date;
		
		private System.Nullable<int> _RefNo;
		
		private string _Warehouse;
		
		private string _AgreedByCutting;
		
		private string _ColorMatching;
		
		private string _ColorMatchingResult;
		
		private System.Nullable<int> _ColorMatchingAction;
		
		private string _MouldTrialResult;
		
		private System.Nullable<int> _MouldTrialAction;
		
		private string _ElongationResult;
		
		private System.Nullable<int> _ElongationAction;
		
		private string _Lamination;
		
		private string _LaminationResult;
		
		private System.Nullable<int> _LaminationAction;
		
		private string _Bonding;
		
		private string _BondingResult;
		
		private System.Nullable<int> _BondingAction;
		
		private string _ThicknessResult;
		
		private string _LengthResult;
		
		private string _WidthResult;
		
		private System.Nullable<decimal> _StandardWidth;
		
		private System.Nullable<decimal> _StandardWeightGmSqm;
		
		private string _OverallRemark;
		
		private string _MissingAudit;
		
		private string _SplitFlag;
		
		private System.Nullable<decimal> _UsableWidthMinByLot;
		
		private System.Nullable<decimal> _DiffWidthPercent;
		
		private System.Nullable<int> _RollQty;
		
		private string _SampleSize;
		
		private System.Nullable<long> _ActionLogOID;
		
		private System.Nullable<decimal> _DiffLengthAveByLot;
		
		private System.Nullable<decimal> _TotalLengthByLot;
		
		private string _RegularDefectResult;
		
		private System.Nullable<decimal> _TotalActualLengthByLot;
		
		private System.Nullable<decimal> _PackageListlengthByBatch;
		
		private string _SuppItemRef;
		
		private string _ColorName;
		
		private System.Nullable<int> _RollQtyByBatch;
		
		private System.Nullable<int> _TotalScore1ByLot;
		
		private System.Nullable<int> _TotalScore2ByLot;
		
		private System.Nullable<decimal> _MeasLengthByLot;
		
		private System.Nullable<decimal> _POLength;
		
		private System.Nullable<decimal> _OverAllClaimLength;
		
		private System.Nullable<decimal> _StandardWeightGmSqmMax;
		
		private System.Nullable<decimal> _StandardWeightGmSqmMin;
		
		private string _StandardWeightGmSqmS;
		
		private System.Nullable<int> _Step1DefectTotalPoint;
		
		private System.Nullable<int> _Step1Pt100m2;
		
		private string _Step1DefectResult;
		
		private System.Nullable<decimal> _Step1MeasLength;
		
		private System.Nullable<decimal> _Step1MeasWidth;
		
		private System.Nullable<decimal> _Step1MeasSq;
		
		private System.Nullable<int> _Step1DefectScore1;
		
		private System.Nullable<int> _Step1DefectScore2;
		
		private System.Nullable<decimal> _Step1LossQty;
		
		private System.Nullable<decimal> _Step1LossPercent;
		
		private System.Nullable<decimal> _Step1ClaimQtyFull;
		
		private System.Nullable<decimal> _Step1ClaimQtyAQL;
		
		private System.Nullable<int> _Step2IrregularScore1;
		
		private System.Nullable<int> _Step2IrregularScore2;
		
		private System.Nullable<decimal> _Step2IrregularLossQty;
		
		private System.Nullable<decimal> _Step2IrregulardLossPercent;
		
		private System.Nullable<decimal> _Step2ClaimQtyFull;
		
		private System.Nullable<decimal> _Step2ClaimQtyAQL;
		
		private string _Step2HaveRegular;
		
		private System.Nullable<decimal> _Step2EvadeMarkerLossPercent;
		
		private string _Step2RegularLossWidth;
		
		private string _Step2ConfirmByCutting;
		
		private System.Nullable<decimal> _Step2ClaimRegularQty;
		
		private System.Nullable<decimal> _Step2ClaimSubTotalQty;
		
		private string _Step2ClaimAction;
		
		private string _OtherOverallResult;
		
		private System.Nullable<decimal> _OverallClaimPercent;
		
		private string _CutCurling;
		
		private string _CutCurlingResult;
		
		private string _OtherOverallResultByBatch;
		
		private System.Nullable<decimal> _OtherOverAllClaimLength;
		
		private System.Nullable<decimal> _OtherOverAllClaimLengthByBatch;
		
		private string _AuditStage;
		
		private string _Step1DefectResultByLot;
		
		private System.Nullable<decimal> _TotalLenghtByLotExcludePass;
		
		private string _CutOffRollFlag;
		
		private string _NeedCutOut;
		
		private System.Nullable<decimal> _CutOutLength;
		
		private System.Nullable<decimal> _CutOutClaimQty;
		
		private System.Nullable<decimal> _OverallClaimQtyAgreed;
		
		private System.Nullable<decimal> _NarrowWidthClaimQtyByLot;
		
		private System.Nullable<decimal> _PARTIIIFinalClaimQty;
		
		private System.Nullable<char> @__1111OddEvenRowFlag;
		
		private System.Nullable<decimal> _PartITotalClaimQty;
		
		private System.Nullable<decimal> _Step2ClaimRegularQtyByLot;
		
		private string _WidthResultByBatch;
		
		private string _WidthResultByLot;
		
		private string _LengthResultByLot;
		
		private string _ThicknessResultByLot;
		
		private System.Nullable<int> _AuditRollQtyByLot;
		
		private System.Nullable<decimal> _TotalActualLengthHasEvadeLossMarker;
		
		private System.Nullable<decimal> _TotalStep2ClaimRegularQtyHasEvadeLossMarker;
		
		private string _MarkerType;
		
		private string _PartIFinalClaimafewth;
		
		private System.Nullable<decimal> _AuditPassQty;
		
		private System.Nullable<decimal> _AuditSpotDefectQtyByLot;
		
		private System.Nullable<decimal> _AuditVerticalChainDefectQty;
		
		private System.Nullable<decimal> _AuditHorizontalChainDefectQty;
		
		private System.Nullable<decimal> _VerticalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectLossPerentByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _CutOutLengthPercent;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _LengthDiffLossByLot;
		
		private System.Nullable<decimal> _PartIFinalClaimQty;
		
		private System.Nullable<decimal> _PartIIFinalClaimQty;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private System.Nullable<decimal> _Step1LossQtyByID;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private EntitySet<sFabric_Insp_PartDefect> _sFabric_Insp_PartDefects;
		
		private EntitySet<sFabric_Insp_Picture> _sFabric_Insp_Pictures;
		
		private EntitySet<sFabric_Insp_SpreadDefect> _sFabric_Insp_SpreadDefects;
		
		private EntitySet<sFabric_Insp_Width> _sFabric_Insp_Widths;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnItem_DescChanging(string value);
    partial void OnItem_DescChanged();
    partial void OnPOChanging(string value);
    partial void OnPOChanged();
    partial void OnHdoNoChanging(string value);
    partial void OnHdoNoChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnIQC_ReferenceChanging(string value);
    partial void OnIQC_ReferenceChanged();
    partial void OnLot_IdChanging(string value);
    partial void OnLot_IdChanged();
    partial void OnActual_LengthChanging(System.Nullable<decimal> value);
    partial void OnActual_LengthChanged();
    partial void OnActual_WeightChanging(System.Nullable<decimal> value);
    partial void OnActual_WeightChanged();
    partial void OnSupplier_WidthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_WidthChanged();
    partial void OnInsp_LengthChanging(System.Nullable<decimal> value);
    partial void OnInsp_LengthChanged();
    partial void OnGM_SQMChanging(System.Nullable<decimal> value);
    partial void OnGM_SQMChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnSupplier_CodeChanging(string value);
    partial void OnSupplier_CodeChanged();
    partial void OnSupplich_BatchChanging(string value);
    partial void OnSupplich_BatchChanged();
    partial void OnRoll_NoChanging(string value);
    partial void OnRoll_NoChanged();
    partial void OnTotal_PointsChanging(System.Nullable<int> value);
    partial void OnTotal_PointsChanged();
    partial void OnPoints_Hundred_SQMChanging(System.Nullable<decimal> value);
    partial void OnPoints_Hundred_SQMChanged();
    partial void OnDeductive_QtyChanging(System.Nullable<decimal> value);
    partial void OnDeductive_QtyChanged();
    partial void OnWastageChanging(System.Nullable<decimal> value);
    partial void OnWastageChanged();
    partial void OnInsp_ResultChanging(string value);
    partial void OnInsp_ResultChanged();
    partial void OnParty_Insp_ResultChanging(string value);
    partial void OnParty_Insp_ResultChanged();
    partial void OnSpread_Insp_ResultChanging(string value);
    partial void OnSpread_Insp_ResultChanged();
    partial void OnMould_Trial_ResultChanging(string value);
    partial void OnMould_Trial_ResultChanged();
    partial void OnColor_Group_StatusChanging(string value);
    partial void OnColor_Group_StatusChanged();
    partial void OnSpread_Defect_ExistChanging(string value);
    partial void OnSpread_Defect_ExistChanged();
    partial void OnInsp_ConfirmChanging(string value);
    partial void OnInsp_ConfirmChanged();
    partial void OnPH_SampleChanging(System.Nullable<decimal> value);
    partial void OnPH_SampleChanged();
    partial void OnPanel_Size1Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size1Changed();
    partial void OnPanel_Size2Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size2Changed();
    partial void OnSpecial_MarkerChanging(System.Nullable<decimal> value);
    partial void OnSpecial_MarkerChanged();
    partial void OnSpread_RemarkChanging(string value);
    partial void OnSpread_RemarkChanged();
    partial void OnMould_Trial_RemarkChanging(string value);
    partial void OnMould_Trial_RemarkChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnStock_In_Date_DateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStock_In_Date_DateTimeChanged();
    partial void OnTurn_SizeChanging(System.Nullable<int> value);
    partial void OnTurn_SizeChanged();
    partial void OnSupplier_Length_UnitChanging(string value);
    partial void OnSupplier_Length_UnitChanged();
    partial void OnSupplier_Width_UnitChanging(string value);
    partial void OnSupplier_Width_UnitChanged();
    partial void OnSideToSideH_WidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSideH_WidthChanged();
    partial void OnInspectorChanging(string value);
    partial void OnInspectorChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    partial void OnLightStatusChanging(string value);
    partial void OnLightStatusChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnSupplier_Item_NoChanging(string value);
    partial void OnSupplier_Item_NoChanged();
    partial void OnInsp_Result_ReasonChanging(string value);
    partial void OnInsp_Result_ReasonChanged();
    partial void OnPhy_Properties_ResultChanging(string value);
    partial void OnPhy_Properties_ResultChanged();
    partial void OnSupplierItemColorChanging(string value);
    partial void OnSupplierItemColorChanged();
    partial void OnWeftYarnClassChanging(string value);
    partial void OnWeftYarnClassChanged();
    partial void OnWeftYarnPercentageChanging(System.Nullable<decimal> value);
    partial void OnWeftYarnPercentageChanged();
    partial void OnWeftYarnStatusChanging(string value);
    partial void OnWeftYarnStatusChanged();
    partial void OnWeftYarnSolution1Changing(string value);
    partial void OnWeftYarnSolution1Changed();
    partial void OnWeftYarnSolution2Changing(string value);
    partial void OnWeftYarnSolution2Changed();
    partial void OnWeftYarnWastageChanging(System.Nullable<decimal> value);
    partial void OnWeftYarnWastageChanged();
    partial void OnElongationWarpResultChanging(System.Nullable<decimal> value);
    partial void OnElongationWarpResultChanged();
    partial void OnElongationWeftResultChanging(System.Nullable<decimal> value);
    partial void OnElongationWeftResultChanged();
    partial void OnElongationStatusChanging(string value);
    partial void OnElongationStatusChanged();
    partial void OnElongationSolution1Changing(string value);
    partial void OnElongationSolution1Changed();
    partial void OnElongationSolution2Changing(string value);
    partial void OnElongationSolution2Changed();
    partial void OnWeftYarnChanging(string value);
    partial void OnWeftYarnChanged();
    partial void OnElongationChanging(string value);
    partial void OnElongationChanged();
    partial void OnMouldTrialChanging(string value);
    partial void OnMouldTrialChanged();
    partial void OnMouldTrialSolution1Changing(string value);
    partial void OnMouldTrialSolution1Changed();
    partial void OnMouldTrialSolution2Changing(string value);
    partial void OnMouldTrialSolution2Changed();
    partial void OnInspection_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnInspection_DateChanged();
    partial void OnRefNoChanging(System.Nullable<int> value);
    partial void OnRefNoChanged();
    partial void OnWarehouseChanging(string value);
    partial void OnWarehouseChanged();
    partial void OnAgreedByCuttingChanging(string value);
    partial void OnAgreedByCuttingChanged();
    partial void OnColorMatchingChanging(string value);
    partial void OnColorMatchingChanged();
    partial void OnColorMatchingResultChanging(string value);
    partial void OnColorMatchingResultChanged();
    partial void OnColorMatchingActionChanging(System.Nullable<int> value);
    partial void OnColorMatchingActionChanged();
    partial void OnMouldTrialResultChanging(string value);
    partial void OnMouldTrialResultChanged();
    partial void OnMouldTrialActionChanging(System.Nullable<int> value);
    partial void OnMouldTrialActionChanged();
    partial void OnElongationResultChanging(string value);
    partial void OnElongationResultChanged();
    partial void OnElongationActionChanging(System.Nullable<int> value);
    partial void OnElongationActionChanged();
    partial void OnLaminationChanging(string value);
    partial void OnLaminationChanged();
    partial void OnLaminationResultChanging(string value);
    partial void OnLaminationResultChanged();
    partial void OnLaminationActionChanging(System.Nullable<int> value);
    partial void OnLaminationActionChanged();
    partial void OnBondingChanging(string value);
    partial void OnBondingChanged();
    partial void OnBondingResultChanging(string value);
    partial void OnBondingResultChanged();
    partial void OnBondingActionChanging(System.Nullable<int> value);
    partial void OnBondingActionChanged();
    partial void OnThicknessResultChanging(string value);
    partial void OnThicknessResultChanged();
    partial void OnLengthResultChanging(string value);
    partial void OnLengthResultChanged();
    partial void OnWidthResultChanging(string value);
    partial void OnWidthResultChanged();
    partial void OnStandardWidthChanging(System.Nullable<decimal> value);
    partial void OnStandardWidthChanged();
    partial void OnStandardWeightGmSqmChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmChanged();
    partial void OnOverallRemarkChanging(string value);
    partial void OnOverallRemarkChanged();
    partial void OnMissingAuditChanging(string value);
    partial void OnMissingAuditChanged();
    partial void OnSplitFlagChanging(string value);
    partial void OnSplitFlagChanged();
    partial void OnUsableWidthMinByLotChanging(System.Nullable<decimal> value);
    partial void OnUsableWidthMinByLotChanged();
    partial void OnDiffWidthPercentChanging(System.Nullable<decimal> value);
    partial void OnDiffWidthPercentChanged();
    partial void OnRollQtyChanging(System.Nullable<int> value);
    partial void OnRollQtyChanged();
    partial void OnSampleSizeChanging(string value);
    partial void OnSampleSizeChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnDiffLengthAveByLotChanging(System.Nullable<decimal> value);
    partial void OnDiffLengthAveByLotChanged();
    partial void OnTotalLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnTotalLengthByLotChanged();
    partial void OnRegularDefectResultChanging(string value);
    partial void OnRegularDefectResultChanged();
    partial void OnTotalActualLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnTotalActualLengthByLotChanged();
    partial void OnPackageListlengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnPackageListlengthByBatchChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    partial void OnRollQtyByBatchChanging(System.Nullable<int> value);
    partial void OnRollQtyByBatchChanged();
    partial void OnTotalScore1ByLotChanging(System.Nullable<int> value);
    partial void OnTotalScore1ByLotChanged();
    partial void OnTotalScore2ByLotChanging(System.Nullable<int> value);
    partial void OnTotalScore2ByLotChanged();
    partial void OnMeasLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnMeasLengthByLotChanged();
    partial void OnPOLengthChanging(System.Nullable<decimal> value);
    partial void OnPOLengthChanged();
    partial void OnOverAllClaimLengthChanging(System.Nullable<decimal> value);
    partial void OnOverAllClaimLengthChanged();
    partial void OnStandardWeightGmSqmMaxChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmMaxChanged();
    partial void OnStandardWeightGmSqmMinChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmMinChanged();
    partial void OnStandardWeightGmSqmSChanging(string value);
    partial void OnStandardWeightGmSqmSChanged();
    partial void OnStep1DefectTotalPointChanging(System.Nullable<int> value);
    partial void OnStep1DefectTotalPointChanged();
    partial void OnStep1Pt100m2Changing(System.Nullable<int> value);
    partial void OnStep1Pt100m2Changed();
    partial void OnStep1DefectResultChanging(string value);
    partial void OnStep1DefectResultChanged();
    partial void OnStep1MeasLengthChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasLengthChanged();
    partial void OnStep1MeasWidthChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasWidthChanged();
    partial void OnStep1MeasSqChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasSqChanged();
    partial void OnStep1DefectScore1Changing(System.Nullable<int> value);
    partial void OnStep1DefectScore1Changed();
    partial void OnStep1DefectScore2Changing(System.Nullable<int> value);
    partial void OnStep1DefectScore2Changed();
    partial void OnStep1LossQtyChanging(System.Nullable<decimal> value);
    partial void OnStep1LossQtyChanged();
    partial void OnStep1LossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep1LossPercentChanged();
    partial void OnStep1ClaimQtyFullChanging(System.Nullable<decimal> value);
    partial void OnStep1ClaimQtyFullChanged();
    partial void OnStep1ClaimQtyAQLChanging(System.Nullable<decimal> value);
    partial void OnStep1ClaimQtyAQLChanged();
    partial void OnStep2IrregularScore1Changing(System.Nullable<int> value);
    partial void OnStep2IrregularScore1Changed();
    partial void OnStep2IrregularScore2Changing(System.Nullable<int> value);
    partial void OnStep2IrregularScore2Changed();
    partial void OnStep2IrregularLossQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2IrregularLossQtyChanged();
    partial void OnStep2IrregulardLossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep2IrregulardLossPercentChanged();
    partial void OnStep2ClaimQtyFullChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimQtyFullChanged();
    partial void OnStep2ClaimQtyAQLChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimQtyAQLChanged();
    partial void OnStep2HaveRegularChanging(string value);
    partial void OnStep2HaveRegularChanged();
    partial void OnStep2EvadeMarkerLossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep2EvadeMarkerLossPercentChanged();
    partial void OnStep2RegularLossWidthChanging(string value);
    partial void OnStep2RegularLossWidthChanged();
    partial void OnStep2ConfirmByCuttingChanging(string value);
    partial void OnStep2ConfirmByCuttingChanged();
    partial void OnStep2ClaimRegularQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimRegularQtyChanged();
    partial void OnStep2ClaimSubTotalQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimSubTotalQtyChanged();
    partial void OnStep2ClaimActionChanging(string value);
    partial void OnStep2ClaimActionChanged();
    partial void OnOtherOverallResultChanging(string value);
    partial void OnOtherOverallResultChanged();
    partial void OnOverallClaimPercentChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentChanged();
    partial void OnCutCurlingChanging(string value);
    partial void OnCutCurlingChanged();
    partial void OnCutCurlingResultChanging(string value);
    partial void OnCutCurlingResultChanged();
    partial void OnOtherOverallResultByBatchChanging(string value);
    partial void OnOtherOverallResultByBatchChanged();
    partial void OnOtherOverAllClaimLengthChanging(System.Nullable<decimal> value);
    partial void OnOtherOverAllClaimLengthChanged();
    partial void OnOtherOverAllClaimLengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnOtherOverAllClaimLengthByBatchChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnStep1DefectResultByLotChanging(string value);
    partial void OnStep1DefectResultByLotChanged();
    partial void OnTotalLenghtByLotExcludePassChanging(System.Nullable<decimal> value);
    partial void OnTotalLenghtByLotExcludePassChanged();
    partial void OnCutOffRollFlagChanging(string value);
    partial void OnCutOffRollFlagChanged();
    partial void OnNeedCutOutChanging(string value);
    partial void OnNeedCutOutChanged();
    partial void OnCutOutLengthChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthChanged();
    partial void OnCutOutClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnCutOutClaimQtyChanged();
    partial void OnOverallClaimQtyAgreedChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimQtyAgreedChanged();
    partial void OnNarrowWidthClaimQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimQtyByLotChanged();
    partial void OnPARTIIIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPARTIIIFinalClaimQtyChanged();
    partial void On_1111OddEvenRowFlagChanging(System.Nullable<char> value);
    partial void On_1111OddEvenRowFlagChanged();
    partial void OnPartITotalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartITotalClaimQtyChanged();
    partial void OnStep2ClaimRegularQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimRegularQtyByLotChanged();
    partial void OnWidthResultByBatchChanging(string value);
    partial void OnWidthResultByBatchChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnThicknessResultByLotChanging(string value);
    partial void OnThicknessResultByLotChanged();
    partial void OnAuditRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditRollQtyByLotChanged();
    partial void OnTotalActualLengthHasEvadeLossMarkerChanging(System.Nullable<decimal> value);
    partial void OnTotalActualLengthHasEvadeLossMarkerChanged();
    partial void OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanging(System.Nullable<decimal> value);
    partial void OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanged();
    partial void OnMarkerTypeChanging(string value);
    partial void OnMarkerTypeChanged();
    partial void OnPartIFinalClaimafewthChanging(string value);
    partial void OnPartIFinalClaimafewthChanged();
    partial void OnAuditPassQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditPassQtyChanged();
    partial void OnAuditSpotDefectQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSpotDefectQtyByLotChanged();
    partial void OnAuditVerticalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditVerticalChainDefectQtyChanged();
    partial void OnAuditHorizontalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditHorizontalChainDefectQtyChanged();
    partial void OnVerticalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnVerticalChainDefectClaimByLotChanged();
    partial void OnHorizontalChainDefectLossPerentByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectLossPerentByLotChanged();
    partial void OnHorizontalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectClaimByLotChanged();
    partial void OnCutOutLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthPercentChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnLengthDiffLossByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffLossByLotChanged();
    partial void OnPartIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartIFinalClaimQtyChanged();
    partial void OnPartIIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartIIFinalClaimQtyChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnStep1LossQtyByIDChanging(System.Nullable<decimal> value);
    partial void OnStep1LossQtyByIDChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    #endregion
		
		public sFabric_Insp_Header()
		{
			this._sFabric_Insp_PartDefects = new EntitySet<sFabric_Insp_PartDefect>(new Action<sFabric_Insp_PartDefect>(this.attach_sFabric_Insp_PartDefects), new Action<sFabric_Insp_PartDefect>(this.detach_sFabric_Insp_PartDefects));
			this._sFabric_Insp_Pictures = new EntitySet<sFabric_Insp_Picture>(new Action<sFabric_Insp_Picture>(this.attach_sFabric_Insp_Pictures), new Action<sFabric_Insp_Picture>(this.detach_sFabric_Insp_Pictures));
			this._sFabric_Insp_SpreadDefects = new EntitySet<sFabric_Insp_SpreadDefect>(new Action<sFabric_Insp_SpreadDefect>(this.attach_sFabric_Insp_SpreadDefects), new Action<sFabric_Insp_SpreadDefect>(this.detach_sFabric_Insp_SpreadDefects));
			this._sFabric_Insp_Widths = new EntitySet<sFabric_Insp_Width>(new Action<sFabric_Insp_Width>(this.attach_sFabric_Insp_Widths), new Action<sFabric_Insp_Width>(this.detach_sFabric_Insp_Widths));
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50)")]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this.OnItem_DescChanging(value);
					this.SendPropertyChanging();
					this._Item_Desc = value;
					this.SendPropertyChanged("Item_Desc");
					this.OnItem_DescChanged();
				}
			}
		}
		
		[Column(Storage="_PO", DbType="VarChar(8)")]
		public string PO
		{
			get
			{
				return this._PO;
			}
			set
			{
				if ((this._PO != value))
				{
					this.OnPOChanging(value);
					this.SendPropertyChanging();
					this._PO = value;
					this.SendPropertyChanged("PO");
					this.OnPOChanged();
				}
			}
		}
		
		[Column(Storage="_HdoNo", DbType="VarChar(50)")]
		public string HdoNo
		{
			get
			{
				return this._HdoNo;
			}
			set
			{
				if ((this._HdoNo != value))
				{
					this.OnHdoNoChanging(value);
					this.SendPropertyChanging();
					this._HdoNo = value;
					this.SendPropertyChanged("HdoNo");
					this.OnHdoNoChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(1000)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_IQC_Reference", DbType="VarChar(50)")]
		public string IQC_Reference
		{
			get
			{
				return this._IQC_Reference;
			}
			set
			{
				if ((this._IQC_Reference != value))
				{
					this.OnIQC_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._IQC_Reference = value;
					this.SendPropertyChanged("IQC_Reference");
					this.OnIQC_ReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(1000)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this.OnLot_IdChanging(value);
					this.SendPropertyChanging();
					this._Lot_Id = value;
					this.SendPropertyChanged("Lot_Id");
					this.OnLot_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Length
		{
			get
			{
				return this._Actual_Length;
			}
			set
			{
				if ((this._Actual_Length != value))
				{
					this.OnActual_LengthChanging(value);
					this.SendPropertyChanging();
					this._Actual_Length = value;
					this.SendPropertyChanged("Actual_Length");
					this.OnActual_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Weight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Weight
		{
			get
			{
				return this._Actual_Weight;
			}
			set
			{
				if ((this._Actual_Weight != value))
				{
					this.OnActual_WeightChanging(value);
					this.SendPropertyChanging();
					this._Actual_Weight = value;
					this.SendPropertyChanged("Actual_Weight");
					this.OnActual_WeightChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Supplier_Width
		{
			get
			{
				return this._Supplier_Width;
			}
			set
			{
				if ((this._Supplier_Width != value))
				{
					this.OnSupplier_WidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width = value;
					this.SendPropertyChanged("Supplier_Width");
					this.OnSupplier_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Length
		{
			get
			{
				return this._Insp_Length;
			}
			set
			{
				if ((this._Insp_Length != value))
				{
					this.OnInsp_LengthChanging(value);
					this.SendPropertyChanging();
					this._Insp_Length = value;
					this.SendPropertyChanged("Insp_Length");
					this.OnInsp_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_GM_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GM_SQM
		{
			get
			{
				return this._GM_SQM;
			}
			set
			{
				if ((this._GM_SQM != value))
				{
					this.OnGM_SQMChanging(value);
					this.SendPropertyChanging();
					this._GM_SQM = value;
					this.SendPropertyChanged("GM_SQM");
					this.OnGM_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Code", DbType="VarChar(7)")]
		public string Supplier_Code
		{
			get
			{
				return this._Supplier_Code;
			}
			set
			{
				if ((this._Supplier_Code != value))
				{
					this.OnSupplier_CodeChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Code = value;
					this.SendPropertyChanged("Supplier_Code");
					this.OnSupplier_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50)")]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this.OnSupplich_BatchChanging(value);
					this.SendPropertyChanging();
					this._Supplich_Batch = value;
					this.SendPropertyChanged("Supplich_Batch");
					this.OnSupplich_BatchChanged();
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this.OnRoll_NoChanging(value);
					this.SendPropertyChanging();
					this._Roll_No = value;
					this.SendPropertyChanged("Roll_No");
					this.OnRoll_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Total_Points", DbType="Int")]
		public System.Nullable<int> Total_Points
		{
			get
			{
				return this._Total_Points;
			}
			set
			{
				if ((this._Total_Points != value))
				{
					this.OnTotal_PointsChanging(value);
					this.SendPropertyChanging();
					this._Total_Points = value;
					this.SendPropertyChanged("Total_Points");
					this.OnTotal_PointsChanged();
				}
			}
		}
		
		[Column(Storage="_Points_Hundred_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Points_Hundred_SQM
		{
			get
			{
				return this._Points_Hundred_SQM;
			}
			set
			{
				if ((this._Points_Hundred_SQM != value))
				{
					this.OnPoints_Hundred_SQMChanging(value);
					this.SendPropertyChanging();
					this._Points_Hundred_SQM = value;
					this.SendPropertyChanged("Points_Hundred_SQM");
					this.OnPoints_Hundred_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Deductive_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Deductive_Qty
		{
			get
			{
				return this._Deductive_Qty;
			}
			set
			{
				if ((this._Deductive_Qty != value))
				{
					this.OnDeductive_QtyChanging(value);
					this.SendPropertyChanging();
					this._Deductive_Qty = value;
					this.SendPropertyChanged("Deductive_Qty");
					this.OnDeductive_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Wastage", DbType="Decimal(20,6)")]
		public System.Nullable<decimal> Wastage
		{
			get
			{
				return this._Wastage;
			}
			set
			{
				if ((this._Wastage != value))
				{
					this.OnWastageChanging(value);
					this.SendPropertyChanging();
					this._Wastage = value;
					this.SendPropertyChanged("Wastage");
					this.OnWastageChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Result", DbType="VarChar(50)")]
		public string Insp_Result
		{
			get
			{
				return this._Insp_Result;
			}
			set
			{
				if ((this._Insp_Result != value))
				{
					this.OnInsp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Insp_Result = value;
					this.SendPropertyChanged("Insp_Result");
					this.OnInsp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Party_Insp_Result", DbType="VarChar(50)")]
		public string Party_Insp_Result
		{
			get
			{
				return this._Party_Insp_Result;
			}
			set
			{
				if ((this._Party_Insp_Result != value))
				{
					this.OnParty_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Party_Insp_Result = value;
					this.SendPropertyChanged("Party_Insp_Result");
					this.OnParty_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Insp_Result", DbType="VarChar(50)")]
		public string Spread_Insp_Result
		{
			get
			{
				return this._Spread_Insp_Result;
			}
			set
			{
				if ((this._Spread_Insp_Result != value))
				{
					this.OnSpread_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Spread_Insp_Result = value;
					this.SendPropertyChanged("Spread_Insp_Result");
					this.OnSpread_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Result", DbType="VarChar(50)")]
		public string Mould_Trial_Result
		{
			get
			{
				return this._Mould_Trial_Result;
			}
			set
			{
				if ((this._Mould_Trial_Result != value))
				{
					this.OnMould_Trial_ResultChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Result = value;
					this.SendPropertyChanged("Mould_Trial_Result");
					this.OnMould_Trial_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Color_Group_Status", DbType="VarChar(50)")]
		public string Color_Group_Status
		{
			get
			{
				return this._Color_Group_Status;
			}
			set
			{
				if ((this._Color_Group_Status != value))
				{
					this.OnColor_Group_StatusChanging(value);
					this.SendPropertyChanging();
					this._Color_Group_Status = value;
					this.SendPropertyChanged("Color_Group_Status");
					this.OnColor_Group_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Exist", DbType="VarChar(50)")]
		public string Spread_Defect_Exist
		{
			get
			{
				return this._Spread_Defect_Exist;
			}
			set
			{
				if ((this._Spread_Defect_Exist != value))
				{
					this.OnSpread_Defect_ExistChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Exist = value;
					this.SendPropertyChanged("Spread_Defect_Exist");
					this.OnSpread_Defect_ExistChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Confirm", DbType="VarChar(50)")]
		public string Insp_Confirm
		{
			get
			{
				return this._Insp_Confirm;
			}
			set
			{
				if ((this._Insp_Confirm != value))
				{
					this.OnInsp_ConfirmChanging(value);
					this.SendPropertyChanging();
					this._Insp_Confirm = value;
					this.SendPropertyChanged("Insp_Confirm");
					this.OnInsp_ConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Sample", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PH_Sample
		{
			get
			{
				return this._PH_Sample;
			}
			set
			{
				if ((this._PH_Sample != value))
				{
					this.OnPH_SampleChanging(value);
					this.SendPropertyChanging();
					this._PH_Sample = value;
					this.SendPropertyChanged("PH_Sample");
					this.OnPH_SampleChanged();
				}
			}
		}
		
		[Column(Storage="_Panel_Size1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size1
		{
			get
			{
				return this._Panel_Size1;
			}
			set
			{
				if ((this._Panel_Size1 != value))
				{
					this.OnPanel_Size1Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size1 = value;
					this.SendPropertyChanged("Panel_Size1");
					this.OnPanel_Size1Changed();
				}
			}
		}
		
		[Column(Storage="_Panel_Size2", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size2
		{
			get
			{
				return this._Panel_Size2;
			}
			set
			{
				if ((this._Panel_Size2 != value))
				{
					this.OnPanel_Size2Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size2 = value;
					this.SendPropertyChanged("Panel_Size2");
					this.OnPanel_Size2Changed();
				}
			}
		}
		
		[Column(Storage="_Special_Marker", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Special_Marker
		{
			get
			{
				return this._Special_Marker;
			}
			set
			{
				if ((this._Special_Marker != value))
				{
					this.OnSpecial_MarkerChanging(value);
					this.SendPropertyChanging();
					this._Special_Marker = value;
					this.SendPropertyChanged("Special_Marker");
					this.OnSpecial_MarkerChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Remark", DbType="VarChar(500)")]
		public string Spread_Remark
		{
			get
			{
				return this._Spread_Remark;
			}
			set
			{
				if ((this._Spread_Remark != value))
				{
					this.OnSpread_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Spread_Remark = value;
					this.SendPropertyChanged("Spread_Remark");
					this.OnSpread_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Remark", DbType="VarChar(500)")]
		public string Mould_Trial_Remark
		{
			get
			{
				return this._Mould_Trial_Remark;
			}
			set
			{
				if ((this._Mould_Trial_Remark != value))
				{
					this.OnMould_Trial_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Remark = value;
					this.SendPropertyChanged("Mould_Trial_Remark");
					this.OnMould_Trial_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10)")]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Stock_In_Date_DateTime
		{
			get
			{
				return this._Stock_In_Date_DateTime;
			}
			set
			{
				if ((this._Stock_In_Date_DateTime != value))
				{
					this.OnStock_In_Date_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date_DateTime = value;
					this.SendPropertyChanged("Stock_In_Date_DateTime");
					this.OnStock_In_Date_DateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Turn_Size", DbType="Int")]
		public System.Nullable<int> Turn_Size
		{
			get
			{
				return this._Turn_Size;
			}
			set
			{
				if ((this._Turn_Size != value))
				{
					this.OnTurn_SizeChanging(value);
					this.SendPropertyChanging();
					this._Turn_Size = value;
					this.SendPropertyChanged("Turn_Size");
					this.OnTurn_SizeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Length_Unit", DbType="VarChar(50)")]
		public string Supplier_Length_Unit
		{
			get
			{
				return this._Supplier_Length_Unit;
			}
			set
			{
				if ((this._Supplier_Length_Unit != value))
				{
					this.OnSupplier_Length_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Length_Unit = value;
					this.SendPropertyChanged("Supplier_Length_Unit");
					this.OnSupplier_Length_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width_Unit", DbType="VarChar(50)")]
		public string Supplier_Width_Unit
		{
			get
			{
				return this._Supplier_Width_Unit;
			}
			set
			{
				if ((this._Supplier_Width_Unit != value))
				{
					this.OnSupplier_Width_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width_Unit = value;
					this.SendPropertyChanged("Supplier_Width_Unit");
					this.OnSupplier_Width_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSideH_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSideH_Width
		{
			get
			{
				return this._SideToSideH_Width;
			}
			set
			{
				if ((this._SideToSideH_Width != value))
				{
					this.OnSideToSideH_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSideH_Width = value;
					this.SendPropertyChanged("SideToSideH_Width");
					this.OnSideToSideH_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Inspector", DbType="VarChar(50)")]
		public string Inspector
		{
			get
			{
				return this._Inspector;
			}
			set
			{
				if ((this._Inspector != value))
				{
					this.OnInspectorChanging(value);
					this.SendPropertyChanging();
					this._Inspector = value;
					this.SendPropertyChanged("Inspector");
					this.OnInspectorChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_LightStatus", DbType="VarChar(50)")]
		public string LightStatus
		{
			get
			{
				return this._LightStatus;
			}
			set
			{
				if ((this._LightStatus != value))
				{
					this.OnLightStatusChanging(value);
					this.SendPropertyChanging();
					this._LightStatus = value;
					this.SendPropertyChanged("LightStatus");
					this.OnLightStatusChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(50)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Item_No", DbType="VarChar(50)")]
		public string Supplier_Item_No
		{
			get
			{
				return this._Supplier_Item_No;
			}
			set
			{
				if ((this._Supplier_Item_No != value))
				{
					this.OnSupplier_Item_NoChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Item_No = value;
					this.SendPropertyChanged("Supplier_Item_No");
					this.OnSupplier_Item_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Result_Reason", DbType="VarChar(2000)")]
		public string Insp_Result_Reason
		{
			get
			{
				return this._Insp_Result_Reason;
			}
			set
			{
				if ((this._Insp_Result_Reason != value))
				{
					this.OnInsp_Result_ReasonChanging(value);
					this.SendPropertyChanging();
					this._Insp_Result_Reason = value;
					this.SendPropertyChanged("Insp_Result_Reason");
					this.OnInsp_Result_ReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Phy_Properties_Result", DbType="VarChar(50)")]
		public string Phy_Properties_Result
		{
			get
			{
				return this._Phy_Properties_Result;
			}
			set
			{
				if ((this._Phy_Properties_Result != value))
				{
					this.OnPhy_Properties_ResultChanging(value);
					this.SendPropertyChanging();
					this._Phy_Properties_Result = value;
					this.SendPropertyChanged("Phy_Properties_Result");
					this.OnPhy_Properties_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierItemColor", DbType="VarChar(50)")]
		public string SupplierItemColor
		{
			get
			{
				return this._SupplierItemColor;
			}
			set
			{
				if ((this._SupplierItemColor != value))
				{
					this.OnSupplierItemColorChanging(value);
					this.SendPropertyChanging();
					this._SupplierItemColor = value;
					this.SendPropertyChanged("SupplierItemColor");
					this.OnSupplierItemColorChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnClass", DbType="NVarChar(50)")]
		public string WeftYarnClass
		{
			get
			{
				return this._WeftYarnClass;
			}
			set
			{
				if ((this._WeftYarnClass != value))
				{
					this.OnWeftYarnClassChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnClass = value;
					this.SendPropertyChanged("WeftYarnClass");
					this.OnWeftYarnClassChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnPercentage", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> WeftYarnPercentage
		{
			get
			{
				return this._WeftYarnPercentage;
			}
			set
			{
				if ((this._WeftYarnPercentage != value))
				{
					this.OnWeftYarnPercentageChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnPercentage = value;
					this.SendPropertyChanged("WeftYarnPercentage");
					this.OnWeftYarnPercentageChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnStatus", DbType="VarChar(50)")]
		public string WeftYarnStatus
		{
			get
			{
				return this._WeftYarnStatus;
			}
			set
			{
				if ((this._WeftYarnStatus != value))
				{
					this.OnWeftYarnStatusChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnStatus = value;
					this.SendPropertyChanged("WeftYarnStatus");
					this.OnWeftYarnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution1", DbType="NVarChar(50)")]
		public string WeftYarnSolution1
		{
			get
			{
				return this._WeftYarnSolution1;
			}
			set
			{
				if ((this._WeftYarnSolution1 != value))
				{
					this.OnWeftYarnSolution1Changing(value);
					this.SendPropertyChanging();
					this._WeftYarnSolution1 = value;
					this.SendPropertyChanged("WeftYarnSolution1");
					this.OnWeftYarnSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution2", DbType="NVarChar(50)")]
		public string WeftYarnSolution2
		{
			get
			{
				return this._WeftYarnSolution2;
			}
			set
			{
				if ((this._WeftYarnSolution2 != value))
				{
					this.OnWeftYarnSolution2Changing(value);
					this.SendPropertyChanging();
					this._WeftYarnSolution2 = value;
					this.SendPropertyChanged("WeftYarnSolution2");
					this.OnWeftYarnSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarnWastage", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> WeftYarnWastage
		{
			get
			{
				return this._WeftYarnWastage;
			}
			set
			{
				if ((this._WeftYarnWastage != value))
				{
					this.OnWeftYarnWastageChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnWastage = value;
					this.SendPropertyChanged("WeftYarnWastage");
					this.OnWeftYarnWastageChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWarpResult", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> ElongationWarpResult
		{
			get
			{
				return this._ElongationWarpResult;
			}
			set
			{
				if ((this._ElongationWarpResult != value))
				{
					this.OnElongationWarpResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationWarpResult = value;
					this.SendPropertyChanged("ElongationWarpResult");
					this.OnElongationWarpResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWeftResult", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> ElongationWeftResult
		{
			get
			{
				return this._ElongationWeftResult;
			}
			set
			{
				if ((this._ElongationWeftResult != value))
				{
					this.OnElongationWeftResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationWeftResult = value;
					this.SendPropertyChanged("ElongationWeftResult");
					this.OnElongationWeftResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationStatus", DbType="VarChar(50)")]
		public string ElongationStatus
		{
			get
			{
				return this._ElongationStatus;
			}
			set
			{
				if ((this._ElongationStatus != value))
				{
					this.OnElongationStatusChanging(value);
					this.SendPropertyChanging();
					this._ElongationStatus = value;
					this.SendPropertyChanged("ElongationStatus");
					this.OnElongationStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationSolution1", DbType="NVarChar(50)")]
		public string ElongationSolution1
		{
			get
			{
				return this._ElongationSolution1;
			}
			set
			{
				if ((this._ElongationSolution1 != value))
				{
					this.OnElongationSolution1Changing(value);
					this.SendPropertyChanging();
					this._ElongationSolution1 = value;
					this.SendPropertyChanged("ElongationSolution1");
					this.OnElongationSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_ElongationSolution2", DbType="NVarChar(50)")]
		public string ElongationSolution2
		{
			get
			{
				return this._ElongationSolution2;
			}
			set
			{
				if ((this._ElongationSolution2 != value))
				{
					this.OnElongationSolution2Changing(value);
					this.SendPropertyChanging();
					this._ElongationSolution2 = value;
					this.SendPropertyChanged("ElongationSolution2");
					this.OnElongationSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarn", DbType="VarChar(10)")]
		public string WeftYarn
		{
			get
			{
				return this._WeftYarn;
			}
			set
			{
				if ((this._WeftYarn != value))
				{
					this.OnWeftYarnChanging(value);
					this.SendPropertyChanging();
					this._WeftYarn = value;
					this.SendPropertyChanged("WeftYarn");
					this.OnWeftYarnChanged();
				}
			}
		}
		
		[Column(Storage="_Elongation", DbType="VarChar(10)")]
		public string Elongation
		{
			get
			{
				return this._Elongation;
			}
			set
			{
				if ((this._Elongation != value))
				{
					this.OnElongationChanging(value);
					this.SendPropertyChanging();
					this._Elongation = value;
					this.SendPropertyChanged("Elongation");
					this.OnElongationChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrial", DbType="VarChar(10)")]
		public string MouldTrial
		{
			get
			{
				return this._MouldTrial;
			}
			set
			{
				if ((this._MouldTrial != value))
				{
					this.OnMouldTrialChanging(value);
					this.SendPropertyChanging();
					this._MouldTrial = value;
					this.SendPropertyChanged("MouldTrial");
					this.OnMouldTrialChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialSolution1", DbType="NVarChar(50)")]
		public string MouldTrialSolution1
		{
			get
			{
				return this._MouldTrialSolution1;
			}
			set
			{
				if ((this._MouldTrialSolution1 != value))
				{
					this.OnMouldTrialSolution1Changing(value);
					this.SendPropertyChanging();
					this._MouldTrialSolution1 = value;
					this.SendPropertyChanged("MouldTrialSolution1");
					this.OnMouldTrialSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_MouldTrialSolution2", DbType="NVarChar(50)")]
		public string MouldTrialSolution2
		{
			get
			{
				return this._MouldTrialSolution2;
			}
			set
			{
				if ((this._MouldTrialSolution2 != value))
				{
					this.OnMouldTrialSolution2Changing(value);
					this.SendPropertyChanging();
					this._MouldTrialSolution2 = value;
					this.SendPropertyChanged("MouldTrialSolution2");
					this.OnMouldTrialSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_Inspection_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Inspection_Date
		{
			get
			{
				return this._Inspection_Date;
			}
			set
			{
				if ((this._Inspection_Date != value))
				{
					this.OnInspection_DateChanging(value);
					this.SendPropertyChanging();
					this._Inspection_Date = value;
					this.SendPropertyChanged("Inspection_Date");
					this.OnInspection_DateChanged();
				}
			}
		}
		
		[Column(Storage="_RefNo", DbType="Int")]
		public System.Nullable<int> RefNo
		{
			get
			{
				return this._RefNo;
			}
			set
			{
				if ((this._RefNo != value))
				{
					this.OnRefNoChanging(value);
					this.SendPropertyChanging();
					this._RefNo = value;
					this.SendPropertyChanged("RefNo");
					this.OnRefNoChanged();
				}
			}
		}
		
		[Column(Storage="_Warehouse", DbType="VarChar(10)")]
		public string Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				if ((this._Warehouse != value))
				{
					this.OnWarehouseChanging(value);
					this.SendPropertyChanging();
					this._Warehouse = value;
					this.SendPropertyChanged("Warehouse");
					this.OnWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedByCutting", DbType="VarChar(20)")]
		public string AgreedByCutting
		{
			get
			{
				return this._AgreedByCutting;
			}
			set
			{
				if ((this._AgreedByCutting != value))
				{
					this.OnAgreedByCuttingChanging(value);
					this.SendPropertyChanging();
					this._AgreedByCutting = value;
					this.SendPropertyChanged("AgreedByCutting");
					this.OnAgreedByCuttingChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatching", DbType="VarChar(10)")]
		public string ColorMatching
		{
			get
			{
				return this._ColorMatching;
			}
			set
			{
				if ((this._ColorMatching != value))
				{
					this.OnColorMatchingChanging(value);
					this.SendPropertyChanging();
					this._ColorMatching = value;
					this.SendPropertyChanged("ColorMatching");
					this.OnColorMatchingChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatchingResult", DbType="VarChar(20)")]
		public string ColorMatchingResult
		{
			get
			{
				return this._ColorMatchingResult;
			}
			set
			{
				if ((this._ColorMatchingResult != value))
				{
					this.OnColorMatchingResultChanging(value);
					this.SendPropertyChanging();
					this._ColorMatchingResult = value;
					this.SendPropertyChanged("ColorMatchingResult");
					this.OnColorMatchingResultChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatchingAction", DbType="Int")]
		public System.Nullable<int> ColorMatchingAction
		{
			get
			{
				return this._ColorMatchingAction;
			}
			set
			{
				if ((this._ColorMatchingAction != value))
				{
					this.OnColorMatchingActionChanging(value);
					this.SendPropertyChanging();
					this._ColorMatchingAction = value;
					this.SendPropertyChanged("ColorMatchingAction");
					this.OnColorMatchingActionChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialResult", DbType="VarChar(20)")]
		public string MouldTrialResult
		{
			get
			{
				return this._MouldTrialResult;
			}
			set
			{
				if ((this._MouldTrialResult != value))
				{
					this.OnMouldTrialResultChanging(value);
					this.SendPropertyChanging();
					this._MouldTrialResult = value;
					this.SendPropertyChanged("MouldTrialResult");
					this.OnMouldTrialResultChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialAction", DbType="Int")]
		public System.Nullable<int> MouldTrialAction
		{
			get
			{
				return this._MouldTrialAction;
			}
			set
			{
				if ((this._MouldTrialAction != value))
				{
					this.OnMouldTrialActionChanging(value);
					this.SendPropertyChanging();
					this._MouldTrialAction = value;
					this.SendPropertyChanged("MouldTrialAction");
					this.OnMouldTrialActionChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationResult", DbType="VarChar(20)")]
		public string ElongationResult
		{
			get
			{
				return this._ElongationResult;
			}
			set
			{
				if ((this._ElongationResult != value))
				{
					this.OnElongationResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationResult = value;
					this.SendPropertyChanged("ElongationResult");
					this.OnElongationResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationAction", DbType="Int")]
		public System.Nullable<int> ElongationAction
		{
			get
			{
				return this._ElongationAction;
			}
			set
			{
				if ((this._ElongationAction != value))
				{
					this.OnElongationActionChanging(value);
					this.SendPropertyChanging();
					this._ElongationAction = value;
					this.SendPropertyChanged("ElongationAction");
					this.OnElongationActionChanged();
				}
			}
		}
		
		[Column(Storage="_Lamination", DbType="VarChar(10)")]
		public string Lamination
		{
			get
			{
				return this._Lamination;
			}
			set
			{
				if ((this._Lamination != value))
				{
					this.OnLaminationChanging(value);
					this.SendPropertyChanging();
					this._Lamination = value;
					this.SendPropertyChanged("Lamination");
					this.OnLaminationChanged();
				}
			}
		}
		
		[Column(Storage="_LaminationResult", DbType="VarChar(20)")]
		public string LaminationResult
		{
			get
			{
				return this._LaminationResult;
			}
			set
			{
				if ((this._LaminationResult != value))
				{
					this.OnLaminationResultChanging(value);
					this.SendPropertyChanging();
					this._LaminationResult = value;
					this.SendPropertyChanged("LaminationResult");
					this.OnLaminationResultChanged();
				}
			}
		}
		
		[Column(Storage="_LaminationAction", DbType="Int")]
		public System.Nullable<int> LaminationAction
		{
			get
			{
				return this._LaminationAction;
			}
			set
			{
				if ((this._LaminationAction != value))
				{
					this.OnLaminationActionChanging(value);
					this.SendPropertyChanging();
					this._LaminationAction = value;
					this.SendPropertyChanged("LaminationAction");
					this.OnLaminationActionChanged();
				}
			}
		}
		
		[Column(Storage="_Bonding", DbType="VarChar(10)")]
		public string Bonding
		{
			get
			{
				return this._Bonding;
			}
			set
			{
				if ((this._Bonding != value))
				{
					this.OnBondingChanging(value);
					this.SendPropertyChanging();
					this._Bonding = value;
					this.SendPropertyChanged("Bonding");
					this.OnBondingChanged();
				}
			}
		}
		
		[Column(Storage="_BondingResult", DbType="VarChar(20)")]
		public string BondingResult
		{
			get
			{
				return this._BondingResult;
			}
			set
			{
				if ((this._BondingResult != value))
				{
					this.OnBondingResultChanging(value);
					this.SendPropertyChanging();
					this._BondingResult = value;
					this.SendPropertyChanged("BondingResult");
					this.OnBondingResultChanged();
				}
			}
		}
		
		[Column(Storage="_BondingAction", DbType="Int")]
		public System.Nullable<int> BondingAction
		{
			get
			{
				return this._BondingAction;
			}
			set
			{
				if ((this._BondingAction != value))
				{
					this.OnBondingActionChanging(value);
					this.SendPropertyChanging();
					this._BondingAction = value;
					this.SendPropertyChanged("BondingAction");
					this.OnBondingActionChanged();
				}
			}
		}
		
		[Column(Storage="_ThicknessResult", DbType="VarChar(20)")]
		public string ThicknessResult
		{
			get
			{
				return this._ThicknessResult;
			}
			set
			{
				if ((this._ThicknessResult != value))
				{
					this.OnThicknessResultChanging(value);
					this.SendPropertyChanging();
					this._ThicknessResult = value;
					this.SendPropertyChanged("ThicknessResult");
					this.OnThicknessResultChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResult", DbType="VarChar(20)")]
		public string LengthResult
		{
			get
			{
				return this._LengthResult;
			}
			set
			{
				if ((this._LengthResult != value))
				{
					this.OnLengthResultChanging(value);
					this.SendPropertyChanging();
					this._LengthResult = value;
					this.SendPropertyChanged("LengthResult");
					this.OnLengthResultChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResult", DbType="VarChar(20)")]
		public string WidthResult
		{
			get
			{
				return this._WidthResult;
			}
			set
			{
				if ((this._WidthResult != value))
				{
					this.OnWidthResultChanging(value);
					this.SendPropertyChanging();
					this._WidthResult = value;
					this.SendPropertyChanged("WidthResult");
					this.OnWidthResultChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWidth
		{
			get
			{
				return this._StandardWidth;
			}
			set
			{
				if ((this._StandardWidth != value))
				{
					this.OnStandardWidthChanging(value);
					this.SendPropertyChanging();
					this._StandardWidth = value;
					this.SendPropertyChanged("StandardWidth");
					this.OnStandardWidthChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqm", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqm
		{
			get
			{
				return this._StandardWeightGmSqm;
			}
			set
			{
				if ((this._StandardWeightGmSqm != value))
				{
					this.OnStandardWeightGmSqmChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqm = value;
					this.SendPropertyChanged("StandardWeightGmSqm");
					this.OnStandardWeightGmSqmChanged();
				}
			}
		}
		
		[Column(Storage="_OverallRemark", DbType="NVarChar(300)")]
		public string OverallRemark
		{
			get
			{
				return this._OverallRemark;
			}
			set
			{
				if ((this._OverallRemark != value))
				{
					this.OnOverallRemarkChanging(value);
					this.SendPropertyChanging();
					this._OverallRemark = value;
					this.SendPropertyChanged("OverallRemark");
					this.OnOverallRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_MissingAudit", DbType="NVarChar(1000)")]
		public string MissingAudit
		{
			get
			{
				return this._MissingAudit;
			}
			set
			{
				if ((this._MissingAudit != value))
				{
					this.OnMissingAuditChanging(value);
					this.SendPropertyChanging();
					this._MissingAudit = value;
					this.SendPropertyChanged("MissingAudit");
					this.OnMissingAuditChanged();
				}
			}
		}
		
		[Column(Storage="_SplitFlag", DbType="VarChar(10)")]
		public string SplitFlag
		{
			get
			{
				return this._SplitFlag;
			}
			set
			{
				if ((this._SplitFlag != value))
				{
					this.OnSplitFlagChanging(value);
					this.SendPropertyChanging();
					this._SplitFlag = value;
					this.SendPropertyChanged("SplitFlag");
					this.OnSplitFlagChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidthMinByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> UsableWidthMinByLot
		{
			get
			{
				return this._UsableWidthMinByLot;
			}
			set
			{
				if ((this._UsableWidthMinByLot != value))
				{
					this.OnUsableWidthMinByLotChanging(value);
					this.SendPropertyChanging();
					this._UsableWidthMinByLot = value;
					this.SendPropertyChanged("UsableWidthMinByLot");
					this.OnUsableWidthMinByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DiffWidthPercent", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> DiffWidthPercent
		{
			get
			{
				return this._DiffWidthPercent;
			}
			set
			{
				if ((this._DiffWidthPercent != value))
				{
					this.OnDiffWidthPercentChanging(value);
					this.SendPropertyChanging();
					this._DiffWidthPercent = value;
					this.SendPropertyChanged("DiffWidthPercent");
					this.OnDiffWidthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_RollQty", DbType="Int")]
		public System.Nullable<int> RollQty
		{
			get
			{
				return this._RollQty;
			}
			set
			{
				if ((this._RollQty != value))
				{
					this.OnRollQtyChanging(value);
					this.SendPropertyChanging();
					this._RollQty = value;
					this.SendPropertyChanged("RollQty");
					this.OnRollQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SampleSize", DbType="VarChar(10)")]
		public string SampleSize
		{
			get
			{
				return this._SampleSize;
			}
			set
			{
				if ((this._SampleSize != value))
				{
					this.OnSampleSizeChanging(value);
					this.SendPropertyChanging();
					this._SampleSize = value;
					this.SendPropertyChanged("SampleSize");
					this.OnSampleSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DiffLengthAveByLot", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> DiffLengthAveByLot
		{
			get
			{
				return this._DiffLengthAveByLot;
			}
			set
			{
				if ((this._DiffLengthAveByLot != value))
				{
					this.OnDiffLengthAveByLotChanging(value);
					this.SendPropertyChanging();
					this._DiffLengthAveByLot = value;
					this.SendPropertyChanged("DiffLengthAveByLot");
					this.OnDiffLengthAveByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLengthByLot
		{
			get
			{
				return this._TotalLengthByLot;
			}
			set
			{
				if ((this._TotalLengthByLot != value))
				{
					this.OnTotalLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalLengthByLot = value;
					this.SendPropertyChanged("TotalLengthByLot");
					this.OnTotalLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_RegularDefectResult", DbType="VarChar(50)")]
		public string RegularDefectResult
		{
			get
			{
				return this._RegularDefectResult;
			}
			set
			{
				if ((this._RegularDefectResult != value))
				{
					this.OnRegularDefectResultChanging(value);
					this.SendPropertyChanging();
					this._RegularDefectResult = value;
					this.SendPropertyChanged("RegularDefectResult");
					this.OnRegularDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_TotalActualLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalActualLengthByLot
		{
			get
			{
				return this._TotalActualLengthByLot;
			}
			set
			{
				if ((this._TotalActualLengthByLot != value))
				{
					this.OnTotalActualLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalActualLengthByLot = value;
					this.SendPropertyChanged("TotalActualLengthByLot");
					this.OnTotalActualLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackageListlengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackageListlengthByBatch
		{
			get
			{
				return this._PackageListlengthByBatch;
			}
			set
			{
				if ((this._PackageListlengthByBatch != value))
				{
					this.OnPackageListlengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._PackageListlengthByBatch = value;
					this.SendPropertyChanged("PackageListlengthByBatch");
					this.OnPackageListlengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(50)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_ColorName", DbType="VarChar(50)")]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByBatch", DbType="Int")]
		public System.Nullable<int> RollQtyByBatch
		{
			get
			{
				return this._RollQtyByBatch;
			}
			set
			{
				if ((this._RollQtyByBatch != value))
				{
					this.OnRollQtyByBatchChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByBatch = value;
					this.SendPropertyChanged("RollQtyByBatch");
					this.OnRollQtyByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_TotalScore1ByLot", DbType="Int")]
		public System.Nullable<int> TotalScore1ByLot
		{
			get
			{
				return this._TotalScore1ByLot;
			}
			set
			{
				if ((this._TotalScore1ByLot != value))
				{
					this.OnTotalScore1ByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalScore1ByLot = value;
					this.SendPropertyChanged("TotalScore1ByLot");
					this.OnTotalScore1ByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalScore2ByLot", DbType="Int")]
		public System.Nullable<int> TotalScore2ByLot
		{
			get
			{
				return this._TotalScore2ByLot;
			}
			set
			{
				if ((this._TotalScore2ByLot != value))
				{
					this.OnTotalScore2ByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalScore2ByLot = value;
					this.SendPropertyChanged("TotalScore2ByLot");
					this.OnTotalScore2ByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasLengthByLot
		{
			get
			{
				return this._MeasLengthByLot;
			}
			set
			{
				if ((this._MeasLengthByLot != value))
				{
					this.OnMeasLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._MeasLengthByLot = value;
					this.SendPropertyChanged("MeasLengthByLot");
					this.OnMeasLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POLength
		{
			get
			{
				return this._POLength;
			}
			set
			{
				if ((this._POLength != value))
				{
					this.OnPOLengthChanging(value);
					this.SendPropertyChanging();
					this._POLength = value;
					this.SendPropertyChanged("POLength");
					this.OnPOLengthChanged();
				}
			}
		}
		
		[Column(Storage="_OverAllClaimLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverAllClaimLength
		{
			get
			{
				return this._OverAllClaimLength;
			}
			set
			{
				if ((this._OverAllClaimLength != value))
				{
					this.OnOverAllClaimLengthChanging(value);
					this.SendPropertyChanging();
					this._OverAllClaimLength = value;
					this.SendPropertyChanged("OverAllClaimLength");
					this.OnOverAllClaimLengthChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqmMax
		{
			get
			{
				return this._StandardWeightGmSqmMax;
			}
			set
			{
				if ((this._StandardWeightGmSqmMax != value))
				{
					this.OnStandardWeightGmSqmMaxChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmMax = value;
					this.SendPropertyChanged("StandardWeightGmSqmMax");
					this.OnStandardWeightGmSqmMaxChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqmMin
		{
			get
			{
				return this._StandardWeightGmSqmMin;
			}
			set
			{
				if ((this._StandardWeightGmSqmMin != value))
				{
					this.OnStandardWeightGmSqmMinChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmMin = value;
					this.SendPropertyChanged("StandardWeightGmSqmMin");
					this.OnStandardWeightGmSqmMinChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmS", DbType="NVarChar(50)")]
		public string StandardWeightGmSqmS
		{
			get
			{
				return this._StandardWeightGmSqmS;
			}
			set
			{
				if ((this._StandardWeightGmSqmS != value))
				{
					this.OnStandardWeightGmSqmSChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmS = value;
					this.SendPropertyChanged("StandardWeightGmSqmS");
					this.OnStandardWeightGmSqmSChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectTotalPoint", DbType="Int")]
		public System.Nullable<int> Step1DefectTotalPoint
		{
			get
			{
				return this._Step1DefectTotalPoint;
			}
			set
			{
				if ((this._Step1DefectTotalPoint != value))
				{
					this.OnStep1DefectTotalPointChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectTotalPoint = value;
					this.SendPropertyChanged("Step1DefectTotalPoint");
					this.OnStep1DefectTotalPointChanged();
				}
			}
		}
		
		[Column(Storage="_Step1Pt100m2", DbType="Int")]
		public System.Nullable<int> Step1Pt100m2
		{
			get
			{
				return this._Step1Pt100m2;
			}
			set
			{
				if ((this._Step1Pt100m2 != value))
				{
					this.OnStep1Pt100m2Changing(value);
					this.SendPropertyChanging();
					this._Step1Pt100m2 = value;
					this.SendPropertyChanged("Step1Pt100m2");
					this.OnStep1Pt100m2Changed();
				}
			}
		}
		
		[Column(Storage="_Step1DefectResult", DbType="VarChar(100)")]
		public string Step1DefectResult
		{
			get
			{
				return this._Step1DefectResult;
			}
			set
			{
				if ((this._Step1DefectResult != value))
				{
					this.OnStep1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectResult = value;
					this.SendPropertyChanged("Step1DefectResult");
					this.OnStep1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasLength
		{
			get
			{
				return this._Step1MeasLength;
			}
			set
			{
				if ((this._Step1MeasLength != value))
				{
					this.OnStep1MeasLengthChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasLength = value;
					this.SendPropertyChanged("Step1MeasLength");
					this.OnStep1MeasLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasWidth
		{
			get
			{
				return this._Step1MeasWidth;
			}
			set
			{
				if ((this._Step1MeasWidth != value))
				{
					this.OnStep1MeasWidthChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasWidth = value;
					this.SendPropertyChanged("Step1MeasWidth");
					this.OnStep1MeasWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasSq", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasSq
		{
			get
			{
				return this._Step1MeasSq;
			}
			set
			{
				if ((this._Step1MeasSq != value))
				{
					this.OnStep1MeasSqChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasSq = value;
					this.SendPropertyChanged("Step1MeasSq");
					this.OnStep1MeasSqChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectScore1", DbType="Int")]
		public System.Nullable<int> Step1DefectScore1
		{
			get
			{
				return this._Step1DefectScore1;
			}
			set
			{
				if ((this._Step1DefectScore1 != value))
				{
					this.OnStep1DefectScore1Changing(value);
					this.SendPropertyChanging();
					this._Step1DefectScore1 = value;
					this.SendPropertyChanged("Step1DefectScore1");
					this.OnStep1DefectScore1Changed();
				}
			}
		}
		
		[Column(Storage="_Step1DefectScore2", DbType="Int")]
		public System.Nullable<int> Step1DefectScore2
		{
			get
			{
				return this._Step1DefectScore2;
			}
			set
			{
				if ((this._Step1DefectScore2 != value))
				{
					this.OnStep1DefectScore2Changing(value);
					this.SendPropertyChanging();
					this._Step1DefectScore2 = value;
					this.SendPropertyChanged("Step1DefectScore2");
					this.OnStep1DefectScore2Changed();
				}
			}
		}
		
		[Column(Storage="_Step1LossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossQty
		{
			get
			{
				return this._Step1LossQty;
			}
			set
			{
				if ((this._Step1LossQty != value))
				{
					this.OnStep1LossQtyChanging(value);
					this.SendPropertyChanging();
					this._Step1LossQty = value;
					this.SendPropertyChanged("Step1LossQty");
					this.OnStep1LossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step1LossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossPercent
		{
			get
			{
				return this._Step1LossPercent;
			}
			set
			{
				if ((this._Step1LossPercent != value))
				{
					this.OnStep1LossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step1LossPercent = value;
					this.SendPropertyChanged("Step1LossPercent");
					this.OnStep1LossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step1ClaimQtyFull", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1ClaimQtyFull
		{
			get
			{
				return this._Step1ClaimQtyFull;
			}
			set
			{
				if ((this._Step1ClaimQtyFull != value))
				{
					this.OnStep1ClaimQtyFullChanging(value);
					this.SendPropertyChanging();
					this._Step1ClaimQtyFull = value;
					this.SendPropertyChanged("Step1ClaimQtyFull");
					this.OnStep1ClaimQtyFullChanged();
				}
			}
		}
		
		[Column(Storage="_Step1ClaimQtyAQL", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1ClaimQtyAQL
		{
			get
			{
				return this._Step1ClaimQtyAQL;
			}
			set
			{
				if ((this._Step1ClaimQtyAQL != value))
				{
					this.OnStep1ClaimQtyAQLChanging(value);
					this.SendPropertyChanging();
					this._Step1ClaimQtyAQL = value;
					this.SendPropertyChanged("Step1ClaimQtyAQL");
					this.OnStep1ClaimQtyAQLChanged();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularScore1", DbType="Int")]
		public System.Nullable<int> Step2IrregularScore1
		{
			get
			{
				return this._Step2IrregularScore1;
			}
			set
			{
				if ((this._Step2IrregularScore1 != value))
				{
					this.OnStep2IrregularScore1Changing(value);
					this.SendPropertyChanging();
					this._Step2IrregularScore1 = value;
					this.SendPropertyChanged("Step2IrregularScore1");
					this.OnStep2IrregularScore1Changed();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularScore2", DbType="Int")]
		public System.Nullable<int> Step2IrregularScore2
		{
			get
			{
				return this._Step2IrregularScore2;
			}
			set
			{
				if ((this._Step2IrregularScore2 != value))
				{
					this.OnStep2IrregularScore2Changing(value);
					this.SendPropertyChanging();
					this._Step2IrregularScore2 = value;
					this.SendPropertyChanged("Step2IrregularScore2");
					this.OnStep2IrregularScore2Changed();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2IrregularLossQty
		{
			get
			{
				return this._Step2IrregularLossQty;
			}
			set
			{
				if ((this._Step2IrregularLossQty != value))
				{
					this.OnStep2IrregularLossQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2IrregularLossQty = value;
					this.SendPropertyChanged("Step2IrregularLossQty");
					this.OnStep2IrregularLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2IrregulardLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2IrregulardLossPercent
		{
			get
			{
				return this._Step2IrregulardLossPercent;
			}
			set
			{
				if ((this._Step2IrregulardLossPercent != value))
				{
					this.OnStep2IrregulardLossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step2IrregulardLossPercent = value;
					this.SendPropertyChanged("Step2IrregulardLossPercent");
					this.OnStep2IrregulardLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimQtyFull", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimQtyFull
		{
			get
			{
				return this._Step2ClaimQtyFull;
			}
			set
			{
				if ((this._Step2ClaimQtyFull != value))
				{
					this.OnStep2ClaimQtyFullChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimQtyFull = value;
					this.SendPropertyChanged("Step2ClaimQtyFull");
					this.OnStep2ClaimQtyFullChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimQtyAQL", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimQtyAQL
		{
			get
			{
				return this._Step2ClaimQtyAQL;
			}
			set
			{
				if ((this._Step2ClaimQtyAQL != value))
				{
					this.OnStep2ClaimQtyAQLChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimQtyAQL = value;
					this.SendPropertyChanged("Step2ClaimQtyAQL");
					this.OnStep2ClaimQtyAQLChanged();
				}
			}
		}
		
		[Column(Storage="_Step2HaveRegular", DbType="VarChar(20)")]
		public string Step2HaveRegular
		{
			get
			{
				return this._Step2HaveRegular;
			}
			set
			{
				if ((this._Step2HaveRegular != value))
				{
					this.OnStep2HaveRegularChanging(value);
					this.SendPropertyChanging();
					this._Step2HaveRegular = value;
					this.SendPropertyChanged("Step2HaveRegular");
					this.OnStep2HaveRegularChanged();
				}
			}
		}
		
		[Column(Storage="_Step2EvadeMarkerLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2EvadeMarkerLossPercent
		{
			get
			{
				return this._Step2EvadeMarkerLossPercent;
			}
			set
			{
				if ((this._Step2EvadeMarkerLossPercent != value))
				{
					this.OnStep2EvadeMarkerLossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step2EvadeMarkerLossPercent = value;
					this.SendPropertyChanged("Step2EvadeMarkerLossPercent");
					this.OnStep2EvadeMarkerLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step2RegularLossWidth", DbType="VarChar(100)")]
		public string Step2RegularLossWidth
		{
			get
			{
				return this._Step2RegularLossWidth;
			}
			set
			{
				if ((this._Step2RegularLossWidth != value))
				{
					this.OnStep2RegularLossWidthChanging(value);
					this.SendPropertyChanging();
					this._Step2RegularLossWidth = value;
					this.SendPropertyChanged("Step2RegularLossWidth");
					this.OnStep2RegularLossWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ConfirmByCutting", DbType="VarChar(100)")]
		public string Step2ConfirmByCutting
		{
			get
			{
				return this._Step2ConfirmByCutting;
			}
			set
			{
				if ((this._Step2ConfirmByCutting != value))
				{
					this.OnStep2ConfirmByCuttingChanging(value);
					this.SendPropertyChanging();
					this._Step2ConfirmByCutting = value;
					this.SendPropertyChanged("Step2ConfirmByCutting");
					this.OnStep2ConfirmByCuttingChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimRegularQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimRegularQty
		{
			get
			{
				return this._Step2ClaimRegularQty;
			}
			set
			{
				if ((this._Step2ClaimRegularQty != value))
				{
					this.OnStep2ClaimRegularQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimRegularQty = value;
					this.SendPropertyChanged("Step2ClaimRegularQty");
					this.OnStep2ClaimRegularQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimSubTotalQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimSubTotalQty
		{
			get
			{
				return this._Step2ClaimSubTotalQty;
			}
			set
			{
				if ((this._Step2ClaimSubTotalQty != value))
				{
					this.OnStep2ClaimSubTotalQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimSubTotalQty = value;
					this.SendPropertyChanged("Step2ClaimSubTotalQty");
					this.OnStep2ClaimSubTotalQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimAction", DbType="VarChar(100)")]
		public string Step2ClaimAction
		{
			get
			{
				return this._Step2ClaimAction;
			}
			set
			{
				if ((this._Step2ClaimAction != value))
				{
					this.OnStep2ClaimActionChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimAction = value;
					this.SendPropertyChanged("Step2ClaimAction");
					this.OnStep2ClaimActionChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverallResult", DbType="VarChar(100)")]
		public string OtherOverallResult
		{
			get
			{
				return this._OtherOverallResult;
			}
			set
			{
				if ((this._OtherOverallResult != value))
				{
					this.OnOtherOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OtherOverallResult = value;
					this.SendPropertyChanged("OtherOverallResult");
					this.OnOtherOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercent
		{
			get
			{
				return this._OverallClaimPercent;
			}
			set
			{
				if ((this._OverallClaimPercent != value))
				{
					this.OnOverallClaimPercentChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercent = value;
					this.SendPropertyChanged("OverallClaimPercent");
					this.OnOverallClaimPercentChanged();
				}
			}
		}
		
		[Column(Storage="_CutCurling", DbType="VarChar(10)")]
		public string CutCurling
		{
			get
			{
				return this._CutCurling;
			}
			set
			{
				if ((this._CutCurling != value))
				{
					this.OnCutCurlingChanging(value);
					this.SendPropertyChanging();
					this._CutCurling = value;
					this.SendPropertyChanged("CutCurling");
					this.OnCutCurlingChanged();
				}
			}
		}
		
		[Column(Storage="_CutCurlingResult", DbType="VarChar(20)")]
		public string CutCurlingResult
		{
			get
			{
				return this._CutCurlingResult;
			}
			set
			{
				if ((this._CutCurlingResult != value))
				{
					this.OnCutCurlingResultChanging(value);
					this.SendPropertyChanging();
					this._CutCurlingResult = value;
					this.SendPropertyChanged("CutCurlingResult");
					this.OnCutCurlingResultChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverallResultByBatch", DbType="VarChar(100)")]
		public string OtherOverallResultByBatch
		{
			get
			{
				return this._OtherOverallResultByBatch;
			}
			set
			{
				if ((this._OtherOverallResultByBatch != value))
				{
					this.OnOtherOverallResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._OtherOverallResultByBatch = value;
					this.SendPropertyChanged("OtherOverallResultByBatch");
					this.OnOtherOverallResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverAllClaimLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OtherOverAllClaimLength
		{
			get
			{
				return this._OtherOverAllClaimLength;
			}
			set
			{
				if ((this._OtherOverAllClaimLength != value))
				{
					this.OnOtherOverAllClaimLengthChanging(value);
					this.SendPropertyChanging();
					this._OtherOverAllClaimLength = value;
					this.SendPropertyChanged("OtherOverAllClaimLength");
					this.OnOtherOverAllClaimLengthChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverAllClaimLengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OtherOverAllClaimLengthByBatch
		{
			get
			{
				return this._OtherOverAllClaimLengthByBatch;
			}
			set
			{
				if ((this._OtherOverAllClaimLengthByBatch != value))
				{
					this.OnOtherOverAllClaimLengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._OtherOverAllClaimLengthByBatch = value;
					this.SendPropertyChanged("OtherOverAllClaimLengthByBatch");
					this.OnOtherOverAllClaimLengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectResultByLot", DbType="VarChar(100)")]
		public string Step1DefectResultByLot
		{
			get
			{
				return this._Step1DefectResultByLot;
			}
			set
			{
				if ((this._Step1DefectResultByLot != value))
				{
					this.OnStep1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectResultByLot = value;
					this.SendPropertyChanged("Step1DefectResultByLot");
					this.OnStep1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLenghtByLotExcludePass", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLenghtByLotExcludePass
		{
			get
			{
				return this._TotalLenghtByLotExcludePass;
			}
			set
			{
				if ((this._TotalLenghtByLotExcludePass != value))
				{
					this.OnTotalLenghtByLotExcludePassChanging(value);
					this.SendPropertyChanging();
					this._TotalLenghtByLotExcludePass = value;
					this.SendPropertyChanged("TotalLenghtByLotExcludePass");
					this.OnTotalLenghtByLotExcludePassChanged();
				}
			}
		}
		
		[Column(Storage="_CutOffRollFlag", DbType="VarChar(10)")]
		public string CutOffRollFlag
		{
			get
			{
				return this._CutOffRollFlag;
			}
			set
			{
				if ((this._CutOffRollFlag != value))
				{
					this.OnCutOffRollFlagChanging(value);
					this.SendPropertyChanging();
					this._CutOffRollFlag = value;
					this.SendPropertyChanged("CutOffRollFlag");
					this.OnCutOffRollFlagChanged();
				}
			}
		}
		
		[Column(Storage="_NeedCutOut", DbType="VarChar(10)")]
		public string NeedCutOut
		{
			get
			{
				return this._NeedCutOut;
			}
			set
			{
				if ((this._NeedCutOut != value))
				{
					this.OnNeedCutOutChanging(value);
					this.SendPropertyChanging();
					this._NeedCutOut = value;
					this.SendPropertyChanged("NeedCutOut");
					this.OnNeedCutOutChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLength
		{
			get
			{
				return this._CutOutLength;
			}
			set
			{
				if ((this._CutOutLength != value))
				{
					this.OnCutOutLengthChanging(value);
					this.SendPropertyChanging();
					this._CutOutLength = value;
					this.SendPropertyChanged("CutOutLength");
					this.OnCutOutLengthChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutClaimQty
		{
			get
			{
				return this._CutOutClaimQty;
			}
			set
			{
				if ((this._CutOutClaimQty != value))
				{
					this.OnCutOutClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._CutOutClaimQty = value;
					this.SendPropertyChanged("CutOutClaimQty");
					this.OnCutOutClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQtyAgreed", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimQtyAgreed
		{
			get
			{
				return this._OverallClaimQtyAgreed;
			}
			set
			{
				if ((this._OverallClaimQtyAgreed != value))
				{
					this.OnOverallClaimQtyAgreedChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQtyAgreed = value;
					this.SendPropertyChanged("OverallClaimQtyAgreed");
					this.OnOverallClaimQtyAgreedChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimQtyByLot
		{
			get
			{
				return this._NarrowWidthClaimQtyByLot;
			}
			set
			{
				if ((this._NarrowWidthClaimQtyByLot != value))
				{
					this.OnNarrowWidthClaimQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimQtyByLot = value;
					this.SendPropertyChanged("NarrowWidthClaimQtyByLot");
					this.OnNarrowWidthClaimQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PARTIIIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PARTIIIFinalClaimQty
		{
			get
			{
				return this._PARTIIIFinalClaimQty;
			}
			set
			{
				if ((this._PARTIIIFinalClaimQty != value))
				{
					this.OnPARTIIIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PARTIIIFinalClaimQty = value;
					this.SendPropertyChanged("PARTIIIFinalClaimQty");
					this.OnPARTIIIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Name="[1111OddEvenRowFlag]", Storage="__1111OddEvenRowFlag", DbType="VarChar(1)")]
		public System.Nullable<char> _1111OddEvenRowFlag
		{
			get
			{
				return this.@__1111OddEvenRowFlag;
			}
			set
			{
				if ((this.@__1111OddEvenRowFlag != value))
				{
					this.On_1111OddEvenRowFlagChanging(value);
					this.SendPropertyChanging();
					this.@__1111OddEvenRowFlag = value;
					this.SendPropertyChanged("_1111OddEvenRowFlag");
					this.On_1111OddEvenRowFlagChanged();
				}
			}
		}
		
		[Column(Storage="_PartITotalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartITotalClaimQty
		{
			get
			{
				return this._PartITotalClaimQty;
			}
			set
			{
				if ((this._PartITotalClaimQty != value))
				{
					this.OnPartITotalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartITotalClaimQty = value;
					this.SendPropertyChanged("PartITotalClaimQty");
					this.OnPartITotalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimRegularQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimRegularQtyByLot
		{
			get
			{
				return this._Step2ClaimRegularQtyByLot;
			}
			set
			{
				if ((this._Step2ClaimRegularQtyByLot != value))
				{
					this.OnStep2ClaimRegularQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimRegularQtyByLot = value;
					this.SendPropertyChanged("Step2ClaimRegularQtyByLot");
					this.OnStep2ClaimRegularQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByBatch", DbType="VarChar(20)")]
		public string WidthResultByBatch
		{
			get
			{
				return this._WidthResultByBatch;
			}
			set
			{
				if ((this._WidthResultByBatch != value))
				{
					this.OnWidthResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByBatch = value;
					this.SendPropertyChanged("WidthResultByBatch");
					this.OnWidthResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(20)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(20)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ThicknessResultByLot", DbType="VarChar(20)")]
		public string ThicknessResultByLot
		{
			get
			{
				return this._ThicknessResultByLot;
			}
			set
			{
				if ((this._ThicknessResultByLot != value))
				{
					this.OnThicknessResultByLotChanging(value);
					this.SendPropertyChanging();
					this._ThicknessResultByLot = value;
					this.SendPropertyChanged("ThicknessResultByLot");
					this.OnThicknessResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditRollQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditRollQtyByLot
		{
			get
			{
				return this._AuditRollQtyByLot;
			}
			set
			{
				if ((this._AuditRollQtyByLot != value))
				{
					this.OnAuditRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditRollQtyByLot = value;
					this.SendPropertyChanged("AuditRollQtyByLot");
					this.OnAuditRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalActualLengthHasEvadeLossMarker", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalActualLengthHasEvadeLossMarker
		{
			get
			{
				return this._TotalActualLengthHasEvadeLossMarker;
			}
			set
			{
				if ((this._TotalActualLengthHasEvadeLossMarker != value))
				{
					this.OnTotalActualLengthHasEvadeLossMarkerChanging(value);
					this.SendPropertyChanging();
					this._TotalActualLengthHasEvadeLossMarker = value;
					this.SendPropertyChanged("TotalActualLengthHasEvadeLossMarker");
					this.OnTotalActualLengthHasEvadeLossMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStep2ClaimRegularQtyHasEvadeLossMarker", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalStep2ClaimRegularQtyHasEvadeLossMarker
		{
			get
			{
				return this._TotalStep2ClaimRegularQtyHasEvadeLossMarker;
			}
			set
			{
				if ((this._TotalStep2ClaimRegularQtyHasEvadeLossMarker != value))
				{
					this.OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanging(value);
					this.SendPropertyChanging();
					this._TotalStep2ClaimRegularQtyHasEvadeLossMarker = value;
					this.SendPropertyChanged("TotalStep2ClaimRegularQtyHasEvadeLossMarker");
					this.OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_MarkerType", DbType="VarChar(20)")]
		public string MarkerType
		{
			get
			{
				return this._MarkerType;
			}
			set
			{
				if ((this._MarkerType != value))
				{
					this.OnMarkerTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkerType = value;
					this.SendPropertyChanged("MarkerType");
					this.OnMarkerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimafewth", DbType="VarChar(20)")]
		public string PartIFinalClaimafewth
		{
			get
			{
				return this._PartIFinalClaimafewth;
			}
			set
			{
				if ((this._PartIFinalClaimafewth != value))
				{
					this.OnPartIFinalClaimafewthChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimafewth = value;
					this.SendPropertyChanged("PartIFinalClaimafewth");
					this.OnPartIFinalClaimafewthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditPassQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditPassQty
		{
			get
			{
				return this._AuditPassQty;
			}
			set
			{
				if ((this._AuditPassQty != value))
				{
					this.OnAuditPassQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditPassQty = value;
					this.SendPropertyChanged("AuditPassQty");
					this.OnAuditPassQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSpotDefectQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSpotDefectQtyByLot
		{
			get
			{
				return this._AuditSpotDefectQtyByLot;
			}
			set
			{
				if ((this._AuditSpotDefectQtyByLot != value))
				{
					this.OnAuditSpotDefectQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSpotDefectQtyByLot = value;
					this.SendPropertyChanged("AuditSpotDefectQtyByLot");
					this.OnAuditSpotDefectQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditVerticalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditVerticalChainDefectQty
		{
			get
			{
				return this._AuditVerticalChainDefectQty;
			}
			set
			{
				if ((this._AuditVerticalChainDefectQty != value))
				{
					this.OnAuditVerticalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditVerticalChainDefectQty = value;
					this.SendPropertyChanged("AuditVerticalChainDefectQty");
					this.OnAuditVerticalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditHorizontalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditHorizontalChainDefectQty
		{
			get
			{
				return this._AuditHorizontalChainDefectQty;
			}
			set
			{
				if ((this._AuditHorizontalChainDefectQty != value))
				{
					this.OnAuditHorizontalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditHorizontalChainDefectQty = value;
					this.SendPropertyChanged("AuditHorizontalChainDefectQty");
					this.OnAuditHorizontalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> VerticalChainDefectClaimByLot
		{
			get
			{
				return this._VerticalChainDefectClaimByLot;
			}
			set
			{
				if ((this._VerticalChainDefectClaimByLot != value))
				{
					this.OnVerticalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._VerticalChainDefectClaimByLot = value;
					this.SendPropertyChanged("VerticalChainDefectClaimByLot");
					this.OnVerticalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectLossPerentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectLossPerentByLot
		{
			get
			{
				return this._HorizontalChainDefectLossPerentByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectLossPerentByLot != value))
				{
					this.OnHorizontalChainDefectLossPerentByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectLossPerentByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectLossPerentByLot");
					this.OnHorizontalChainDefectLossPerentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectClaimByLot
		{
			get
			{
				return this._HorizontalChainDefectClaimByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectClaimByLot != value))
				{
					this.OnHorizontalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectClaimByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectClaimByLot");
					this.OnHorizontalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLengthPercent
		{
			get
			{
				return this._CutOutLengthPercent;
			}
			set
			{
				if ((this._CutOutLengthPercent != value))
				{
					this.OnCutOutLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._CutOutLengthPercent = value;
					this.SendPropertyChanged("CutOutLengthPercent");
					this.OnCutOutLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiffLossByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiffLossByLot
		{
			get
			{
				return this._LengthDiffLossByLot;
			}
			set
			{
				if ((this._LengthDiffLossByLot != value))
				{
					this.OnLengthDiffLossByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthDiffLossByLot = value;
					this.SendPropertyChanged("LengthDiffLossByLot");
					this.OnLengthDiffLossByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartIFinalClaimQty
		{
			get
			{
				return this._PartIFinalClaimQty;
			}
			set
			{
				if ((this._PartIFinalClaimQty != value))
				{
					this.OnPartIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimQty = value;
					this.SendPropertyChanged("PartIFinalClaimQty");
					this.OnPartIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PartIIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartIIFinalClaimQty
		{
			get
			{
				return this._PartIIFinalClaimQty;
			}
			set
			{
				if ((this._PartIIFinalClaimQty != value))
				{
					this.OnPartIIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartIIFinalClaimQty = value;
					this.SendPropertyChanged("PartIIFinalClaimQty");
					this.OnPartIIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Step1LossQtyByID", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossQtyByID
		{
			get
			{
				return this._Step1LossQtyByID;
			}
			set
			{
				if ((this._Step1LossQtyByID != value))
				{
					this.OnStep1LossQtyByIDChanging(value);
					this.SendPropertyChanging();
					this._Step1LossQtyByID = value;
					this.SendPropertyChanged("Step1LossQtyByID");
					this.OnStep1LossQtyByIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_PartDefect", Storage="_sFabric_Insp_PartDefects", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<sFabric_Insp_PartDefect> sFabric_Insp_PartDefects
		{
			get
			{
				return this._sFabric_Insp_PartDefects;
			}
			set
			{
				this._sFabric_Insp_PartDefects.Assign(value);
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_Picture", Storage="_sFabric_Insp_Pictures", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<sFabric_Insp_Picture> sFabric_Insp_Pictures
		{
			get
			{
				return this._sFabric_Insp_Pictures;
			}
			set
			{
				this._sFabric_Insp_Pictures.Assign(value);
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_SpreadDefect", Storage="_sFabric_Insp_SpreadDefects", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<sFabric_Insp_SpreadDefect> sFabric_Insp_SpreadDefects
		{
			get
			{
				return this._sFabric_Insp_SpreadDefects;
			}
			set
			{
				this._sFabric_Insp_SpreadDefects.Assign(value);
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_Width", Storage="_sFabric_Insp_Widths", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<sFabric_Insp_Width> sFabric_Insp_Widths
		{
			get
			{
				return this._sFabric_Insp_Widths;
			}
			set
			{
				this._sFabric_Insp_Widths.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sFabric_Insp_PartDefects(sFabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = this;
		}
		
		private void detach_sFabric_Insp_PartDefects(sFabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = null;
		}
		
		private void attach_sFabric_Insp_Pictures(sFabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = this;
		}
		
		private void detach_sFabric_Insp_Pictures(sFabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = null;
		}
		
		private void attach_sFabric_Insp_SpreadDefects(sFabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = this;
		}
		
		private void detach_sFabric_Insp_SpreadDefects(sFabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = null;
		}
		
		private void attach_sFabric_Insp_Widths(sFabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = this;
		}
		
		private void detach_sFabric_Insp_Widths(sFabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.sFabric_Insp_Header = null;
		}
	}
	
	[Table(Name="dbo.sFabric_Insp_PartDefect")]
	public partial class sFabric_Insp_PartDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private string _Defect_Place;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private int _Defect_Degree;
		
		private System.Nullable<int> _Defect_Degree_Count;
		
		private System.Nullable<int> _Defect_Deduce_Points;
		
		private EntityRef<sFabric_Insp_Header> _sFabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnDefect_PlaceChanging(string value);
    partial void OnDefect_PlaceChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnDefect_DegreeChanging(int value);
    partial void OnDefect_DegreeChanged();
    partial void OnDefect_Degree_CountChanging(System.Nullable<int> value);
    partial void OnDefect_Degree_CountChanged();
    partial void OnDefect_Deduce_PointsChanging(System.Nullable<int> value);
    partial void OnDefect_Deduce_PointsChanged();
    #endregion
		
		public sFabric_Insp_PartDefect()
		{
			this._sFabric_Insp_Header = default(EntityRef<sFabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Place", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Place
		{
			get
			{
				return this._Defect_Place;
			}
			set
			{
				if ((this._Defect_Place != value))
				{
					this.OnDefect_PlaceChanging(value);
					this.SendPropertyChanging();
					this._Defect_Place = value;
					this.SendPropertyChanged("Defect_Place");
					this.OnDefect_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Defect_Degree
		{
			get
			{
				return this._Defect_Degree;
			}
			set
			{
				if ((this._Defect_Degree != value))
				{
					this.OnDefect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree = value;
					this.SendPropertyChanged("Defect_Degree");
					this.OnDefect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Degree_Count", DbType="Int")]
		public System.Nullable<int> Defect_Degree_Count
		{
			get
			{
				return this._Defect_Degree_Count;
			}
			set
			{
				if ((this._Defect_Degree_Count != value))
				{
					this.OnDefect_Degree_CountChanging(value);
					this.SendPropertyChanging();
					this._Defect_Degree_Count = value;
					this.SendPropertyChanged("Defect_Degree_Count");
					this.OnDefect_Degree_CountChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Deduce_Points", DbType="Int")]
		public System.Nullable<int> Defect_Deduce_Points
		{
			get
			{
				return this._Defect_Deduce_Points;
			}
			set
			{
				if ((this._Defect_Deduce_Points != value))
				{
					this.OnDefect_Deduce_PointsChanging(value);
					this.SendPropertyChanging();
					this._Defect_Deduce_Points = value;
					this.SendPropertyChanged("Defect_Deduce_Points");
					this.OnDefect_Deduce_PointsChanged();
				}
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_PartDefect", Storage="_sFabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sFabric_Insp_Header sFabric_Insp_Header
		{
			get
			{
				return this._sFabric_Insp_Header.Entity;
			}
			set
			{
				sFabric_Insp_Header previousValue = this._sFabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._sFabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sFabric_Insp_Header.Entity = null;
						previousValue.sFabric_Insp_PartDefects.Remove(this);
					}
					this._sFabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.sFabric_Insp_PartDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("sFabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sFabric_Insp_Picture")]
	public partial class sFabric_Insp_Picture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _BroadNo;
		
		private System.Data.Linq.Binary _Photo_Image;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private EntityRef<sFabric_Insp_Header> _sFabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnBroadNoChanging(int value);
    partial void OnBroadNoChanged();
    partial void OnPhoto_ImageChanging(System.Data.Linq.Binary value);
    partial void OnPhoto_ImageChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    #endregion
		
		public sFabric_Insp_Picture()
		{
			this._sFabric_Insp_Header = default(EntityRef<sFabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_BroadNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BroadNo
		{
			get
			{
				return this._BroadNo;
			}
			set
			{
				if ((this._BroadNo != value))
				{
					this.OnBroadNoChanging(value);
					this.SendPropertyChanging();
					this._BroadNo = value;
					this.SendPropertyChanged("BroadNo");
					this.OnBroadNoChanged();
				}
			}
		}
		
		[Column(Storage="_Photo_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo_Image
		{
			get
			{
				return this._Photo_Image;
			}
			set
			{
				if ((this._Photo_Image != value))
				{
					this.OnPhoto_ImageChanging(value);
					this.SendPropertyChanging();
					this._Photo_Image = value;
					this.SendPropertyChanged("Photo_Image");
					this.OnPhoto_ImageChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_Picture", Storage="_sFabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sFabric_Insp_Header sFabric_Insp_Header
		{
			get
			{
				return this._sFabric_Insp_Header.Entity;
			}
			set
			{
				sFabric_Insp_Header previousValue = this._sFabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._sFabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sFabric_Insp_Header.Entity = null;
						previousValue.sFabric_Insp_Pictures.Remove(this);
					}
					this._sFabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.sFabric_Insp_Pictures.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("sFabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sFabric_Insp_SpreadDefect")]
	public partial class sFabric_Insp_SpreadDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Defect_Type;
		
		private string _Defect_Name;
		
		private string _Spread_Defect_Degree;
		
		private int _From_Place;
		
		private int _To_Place;
		
		private string _Proc_Code1;
		
		private string _Proc_Code2;
		
		private string _Proc_Code3;
		
		private string _Proc_Code4;
		
		private string _Proc_Code5;
		
		private string _Proc_Status;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private System.Nullable<double> _AddtionalPercent;
		
		private System.Nullable<decimal> _From_Place_Length;
		
		private System.Nullable<decimal> _To_Place_Length;
		
		private System.Nullable<bool> _IsCutOut;
		
		private EntityRef<sFabric_Insp_Header> _sFabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDefect_TypeChanging(string value);
    partial void OnDefect_TypeChanged();
    partial void OnDefect_NameChanging(string value);
    partial void OnDefect_NameChanged();
    partial void OnSpread_Defect_DegreeChanging(string value);
    partial void OnSpread_Defect_DegreeChanged();
    partial void OnFrom_PlaceChanging(int value);
    partial void OnFrom_PlaceChanged();
    partial void OnTo_PlaceChanging(int value);
    partial void OnTo_PlaceChanged();
    partial void OnProc_Code1Changing(string value);
    partial void OnProc_Code1Changed();
    partial void OnProc_Code2Changing(string value);
    partial void OnProc_Code2Changed();
    partial void OnProc_Code3Changing(string value);
    partial void OnProc_Code3Changed();
    partial void OnProc_Code4Changing(string value);
    partial void OnProc_Code4Changed();
    partial void OnProc_Code5Changing(string value);
    partial void OnProc_Code5Changed();
    partial void OnProc_StatusChanging(string value);
    partial void OnProc_StatusChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnAddtionalPercentChanging(System.Nullable<double> value);
    partial void OnAddtionalPercentChanged();
    partial void OnFrom_Place_LengthChanging(System.Nullable<decimal> value);
    partial void OnFrom_Place_LengthChanged();
    partial void OnTo_Place_LengthChanging(System.Nullable<decimal> value);
    partial void OnTo_Place_LengthChanged();
    partial void OnIsCutOutChanging(System.Nullable<bool> value);
    partial void OnIsCutOutChanged();
    #endregion
		
		public sFabric_Insp_SpreadDefect()
		{
			this._sFabric_Insp_Header = default(EntityRef<sFabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Type
		{
			get
			{
				return this._Defect_Type;
			}
			set
			{
				if ((this._Defect_Type != value))
				{
					this.OnDefect_TypeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Type = value;
					this.SendPropertyChanged("Defect_Type");
					this.OnDefect_TypeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this.OnDefect_NameChanging(value);
					this.SendPropertyChanging();
					this._Defect_Name = value;
					this.SendPropertyChanged("Defect_Name");
					this.OnDefect_NameChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Degree", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Spread_Defect_Degree
		{
			get
			{
				return this._Spread_Defect_Degree;
			}
			set
			{
				if ((this._Spread_Defect_Degree != value))
				{
					this.OnSpread_Defect_DegreeChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Degree = value;
					this.SendPropertyChanged("Spread_Defect_Degree");
					this.OnSpread_Defect_DegreeChanged();
				}
			}
		}
		
		[Column(Storage="_From_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int From_Place
		{
			get
			{
				return this._From_Place;
			}
			set
			{
				if ((this._From_Place != value))
				{
					this.OnFrom_PlaceChanging(value);
					this.SendPropertyChanging();
					this._From_Place = value;
					this.SendPropertyChanged("From_Place");
					this.OnFrom_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_To_Place", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int To_Place
		{
			get
			{
				return this._To_Place;
			}
			set
			{
				if ((this._To_Place != value))
				{
					this.OnTo_PlaceChanging(value);
					this.SendPropertyChanging();
					this._To_Place = value;
					this.SendPropertyChanged("To_Place");
					this.OnTo_PlaceChanged();
				}
			}
		}
		
		[Column(Storage="_Proc_Code1", DbType="VarChar(50)")]
		public string Proc_Code1
		{
			get
			{
				return this._Proc_Code1;
			}
			set
			{
				if ((this._Proc_Code1 != value))
				{
					this.OnProc_Code1Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code1 = value;
					this.SendPropertyChanged("Proc_Code1");
					this.OnProc_Code1Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code2", DbType="VarChar(50)")]
		public string Proc_Code2
		{
			get
			{
				return this._Proc_Code2;
			}
			set
			{
				if ((this._Proc_Code2 != value))
				{
					this.OnProc_Code2Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code2 = value;
					this.SendPropertyChanged("Proc_Code2");
					this.OnProc_Code2Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code3", DbType="VarChar(50)")]
		public string Proc_Code3
		{
			get
			{
				return this._Proc_Code3;
			}
			set
			{
				if ((this._Proc_Code3 != value))
				{
					this.OnProc_Code3Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code3 = value;
					this.SendPropertyChanged("Proc_Code3");
					this.OnProc_Code3Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code4", DbType="VarChar(50)")]
		public string Proc_Code4
		{
			get
			{
				return this._Proc_Code4;
			}
			set
			{
				if ((this._Proc_Code4 != value))
				{
					this.OnProc_Code4Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code4 = value;
					this.SendPropertyChanged("Proc_Code4");
					this.OnProc_Code4Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Code5", DbType="VarChar(50)")]
		public string Proc_Code5
		{
			get
			{
				return this._Proc_Code5;
			}
			set
			{
				if ((this._Proc_Code5 != value))
				{
					this.OnProc_Code5Changing(value);
					this.SendPropertyChanging();
					this._Proc_Code5 = value;
					this.SendPropertyChanged("Proc_Code5");
					this.OnProc_Code5Changed();
				}
			}
		}
		
		[Column(Storage="_Proc_Status", DbType="VarChar(50)")]
		public string Proc_Status
		{
			get
			{
				return this._Proc_Status;
			}
			set
			{
				if ((this._Proc_Status != value))
				{
					this.OnProc_StatusChanging(value);
					this.SendPropertyChanging();
					this._Proc_Status = value;
					this.SendPropertyChanged("Proc_Status");
					this.OnProc_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_AddtionalPercent", DbType="Float")]
		public System.Nullable<double> AddtionalPercent
		{
			get
			{
				return this._AddtionalPercent;
			}
			set
			{
				if ((this._AddtionalPercent != value))
				{
					this.OnAddtionalPercentChanging(value);
					this.SendPropertyChanging();
					this._AddtionalPercent = value;
					this.SendPropertyChanged("AddtionalPercent");
					this.OnAddtionalPercentChanged();
				}
			}
		}
		
		[Column(Storage="_From_Place_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> From_Place_Length
		{
			get
			{
				return this._From_Place_Length;
			}
			set
			{
				if ((this._From_Place_Length != value))
				{
					this.OnFrom_Place_LengthChanging(value);
					this.SendPropertyChanging();
					this._From_Place_Length = value;
					this.SendPropertyChanged("From_Place_Length");
					this.OnFrom_Place_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_To_Place_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> To_Place_Length
		{
			get
			{
				return this._To_Place_Length;
			}
			set
			{
				if ((this._To_Place_Length != value))
				{
					this.OnTo_Place_LengthChanging(value);
					this.SendPropertyChanging();
					this._To_Place_Length = value;
					this.SendPropertyChanged("To_Place_Length");
					this.OnTo_Place_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_IsCutOut", DbType="Bit")]
		public System.Nullable<bool> IsCutOut
		{
			get
			{
				return this._IsCutOut;
			}
			set
			{
				if ((this._IsCutOut != value))
				{
					this.OnIsCutOutChanging(value);
					this.SendPropertyChanging();
					this._IsCutOut = value;
					this.SendPropertyChanged("IsCutOut");
					this.OnIsCutOutChanged();
				}
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_SpreadDefect", Storage="_sFabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sFabric_Insp_Header sFabric_Insp_Header
		{
			get
			{
				return this._sFabric_Insp_Header.Entity;
			}
			set
			{
				sFabric_Insp_Header previousValue = this._sFabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._sFabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sFabric_Insp_Header.Entity = null;
						previousValue.sFabric_Insp_SpreadDefects.Remove(this);
					}
					this._sFabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.sFabric_Insp_SpreadDefects.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("sFabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sFabric_Insp_Width")]
	public partial class sFabric_Insp_Width : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private int _System_Install_No;
		
		private int _Detect_Turn_No;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private System.Nullable<decimal> _SideToSide_Width;
		
		private EntityRef<sFabric_Insp_Header> _sFabric_Insp_Header;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnDetect_Turn_NoChanging(int value);
    partial void OnDetect_Turn_NoChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnSideToSide_WidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSide_WidthChanged();
    #endregion
		
		public sFabric_Insp_Width()
		{
			this._sFabric_Insp_Header = default(EntityRef<sFabric_Insp_Header>);
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					if (this._sFabric_Insp_Header.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Detect_Turn_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Detect_Turn_No
		{
			get
			{
				return this._Detect_Turn_No;
			}
			set
			{
				if ((this._Detect_Turn_No != value))
				{
					this.OnDetect_Turn_NoChanging(value);
					this.SendPropertyChanging();
					this._Detect_Turn_No = value;
					this.SendPropertyChanged("Detect_Turn_No");
					this.OnDetect_Turn_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSide_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSide_Width
		{
			get
			{
				return this._SideToSide_Width;
			}
			set
			{
				if ((this._SideToSide_Width != value))
				{
					this.OnSideToSide_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSide_Width = value;
					this.SendPropertyChanged("SideToSide_Width");
					this.OnSideToSide_WidthChanged();
				}
			}
		}
		
		[Association(Name="sFabric_Insp_Header_sFabric_Insp_Width", Storage="_sFabric_Insp_Header", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sFabric_Insp_Header sFabric_Insp_Header
		{
			get
			{
				return this._sFabric_Insp_Header.Entity;
			}
			set
			{
				sFabric_Insp_Header previousValue = this._sFabric_Insp_Header.Entity;
				if (((previousValue != value) 
							|| (this._sFabric_Insp_Header.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sFabric_Insp_Header.Entity = null;
						previousValue.sFabric_Insp_Widths.Remove(this);
					}
					this._sFabric_Insp_Header.Entity = value;
					if ((value != null))
					{
						value.sFabric_Insp_Widths.Add(this);
						this._Company = value.Company;
						this._System_Install_No = value.System_Install_No;
					}
					else
					{
						this._Company = default(string);
						this._System_Install_No = default(int);
					}
					this.SendPropertyChanged("sFabric_Insp_Header");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBandLaceHeader")]
	public partial class sBandLaceHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _Whse;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _RollQtyByLot;
		
		private System.Nullable<int> _RollQtyByBatch;
		
		private string _LotID;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _SuppItemRef;
		
		private string _SuppCode;
		
		private string _ProjectNo;
		
		private string _PONo;
		
		private string _HDONo;
		
		private string _RollNo;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _IDAuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private string _AuditStage;
		
		private string _AuditType;
		
		private string _StepFlag;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<int> _ChainDefectPointQty;
		
		private System.Nullable<int> _TotalDefectPointQty;
		
		private System.Nullable<decimal> _PointQtyPer50M;
		
		private System.Nullable<decimal> _DeductLengthEachSpot;
		
		private System.Nullable<decimal> _SpotDefectLossPercent;
		
		private System.Nullable<decimal> _SpotDefectLossQty;
		
		private System.Nullable<decimal> _SpotDefectLossQtyByLot1;
		
		private System.Nullable<decimal> _ChainDefectLength;
		
		private System.Nullable<decimal> _ChainDefectLengthByLot1;
		
		private System.Nullable<decimal> _ChainDefectPercent;
		
		private string _Part1DefectResult;
		
		private string _Part1DefectResultByLot;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private string _NeedEvadeMarker;
		
		private System.Nullable<decimal> _EvadeMarkerLossPercent;
		
		private System.Nullable<decimal> _EvadeMarkerLossClaim;
		
		private System.Nullable<decimal> _EvadeMarkerLossClaimByLot1;
		
		private string _NeedCutoutDefect;
		
		private System.Nullable<decimal> _CutoutDefectDistance;
		
		private System.Nullable<decimal> _CutoutClaim;
		
		private System.Nullable<decimal> _CutoutClaimByLot1;
		
		private System.Nullable<decimal> _Part1DefectTotalClaimByLot;
		
		private System.Nullable<decimal> _PackingListLength;
		
		private System.Nullable<decimal> _MeasureLength;
		
		private System.Nullable<decimal> _LengthDifferent;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _CutLengthForTesting;
		
		private System.Nullable<decimal> _FinalStockInLength;
		
		private System.Nullable<decimal> _AuditLengthDifferentByLot;
		
		private System.Nullable<decimal> _AuditSampleSizeQtyByLot;
		
		private System.Nullable<decimal> _POQtyByLot;
		
		private System.Nullable<decimal> _PackingListLengthByBatch;
		
		private System.Nullable<decimal> _PackingListLengthByLot;
		
		private System.Nullable<decimal> _ShortLengthClaimQtyByLot;
		
		private string _AgreedEdgeToEdgeWidthRangeByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMinWidthByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMaxWidthByLot;
		
		private System.Nullable<decimal> _MeasureEdgeToEdgeWidth;
		
		private System.Nullable<decimal> _WidthDifferent;
		
		private System.Nullable<decimal> _MeasureWidth;
		
		private System.Nullable<decimal> _NarrowestWidthByBatch;
		
		private System.Nullable<decimal> _NarrowestWidthByLot;
		
		private System.Nullable<decimal> _NarrowWidthMarkeLossPercent;
		
		private System.Nullable<decimal> _NarrowWidthMarkeLossPercentByBatch;
		
		private string _WidthResult;
		
		private string _WidthResultByBatch;
		
		private string _WidthResultByLot;
		
		private System.Nullable<decimal> _NarrowWidthClaim;
		
		private System.Nullable<decimal> _NarrowWidthClaimByBatch;
		
		private System.Nullable<decimal> _NarrowWidthClaimByLot;
		
		private System.Nullable<decimal> _GramWeightPerSQMMin;
		
		private System.Nullable<decimal> _GramWeightPerSQMMax;
		
		private string _GramWeightPerSQMRange;
		
		private System.Nullable<decimal> _ActualWeight;
		
		private System.Nullable<decimal> _WeightDifferent;
		
		private string _WeightResultByLot;
		
		private System.Nullable<decimal> _PatternShapeMin;
		
		private System.Nullable<decimal> _PatternShapeMax;
		
		private string _PatternShapeRangeByLot;
		
		private System.Nullable<decimal> _ActualPatternShape;
		
		private System.Nullable<decimal> _PatternShapeDifferent;
		
		private System.Nullable<decimal> _PatternShapeMarkerLossPercentByLot;
		
		private string _PatternShapeResult1;
		
		private string _PatternShapeResultByLot;
		
		private System.Nullable<decimal> _PatternShapeClaimByLot;
		
		private string _Part2MeasureResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _BatchNo;
		
		private string _NeedShadeGrpg;
		
		private string _ShadeGrpgResult;
		
		private string _NeedSkewnessAndBow;
		
		private System.Nullable<decimal> _SkewnessDistanceAB;
		
		private System.Nullable<decimal> _SkewnessDistanceCD;
		
		private string _SkewnessAndBowResult;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallAgreedClaimByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _OverallConfirmBy;
		
		private string _ActionLogSeqNo;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _FailSolution;
		
		private string _Auditor;
		
		private string _Part4SpecificDefectResultByLot;
		
		private System.Nullable<decimal> _Part4FinalClaimByLot;
		
		private System.Nullable<int> _AuditRollQtyByLot;
		
		private System.Nullable<decimal> _DefectLossQty;
		
		private System.Nullable<decimal> _DefectLossQtyByLot;
		
		private System.Nullable<decimal> _Part1DefectClaimPercentByLot;
		
		private System.Nullable<decimal> _Part1DefectClaimByLot;
		
		private System.Nullable<decimal> _PassQty;
		
		private System.Nullable<decimal> _PassQtyByLot;
		
		private System.Nullable<decimal> _AuditSpotDefectQtyByLot;
		
		private System.Nullable<decimal> _AuditVerticalChainDefectQty;
		
		private System.Nullable<decimal> _AuditHorizontalChainDefectQty;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _VerticalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _CutOutLengthPercent;
		
		private System.Nullable<decimal> _HorizontalChainDefectLossPerentByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectClaimByLot;
		
		private string _PartIFinalClaimafewth;
		
		private System.Nullable<decimal> _SpotDefectClaimByLot;
		
		private System.Nullable<decimal> _FinalStockInLengthByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private EntitySet<sBandLaceSpotDefect> _sBandLaceSpotDefects;
		
		private EntitySet<sBandLaceChainDefect> _sBandLaceChainDefects;
		
		private EntitySet<sBandLandWidth> _sBandLandWidths;
		
		private EntitySet<sBandLandPatternShapeRepeat> _sBandLandPatternShapeRepeats;
		
		private EntitySet<sBandLandSkewnessBow> _sBandLandSkewnessBows;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnRollQtyByLotChanged();
    partial void OnRollQtyByBatchChanging(System.Nullable<int> value);
    partial void OnRollQtyByBatchChanged();
    partial void OnLotIDChanging(string value);
    partial void OnLotIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnPONoChanging(string value);
    partial void OnPONoChanged();
    partial void OnHDONoChanging(string value);
    partial void OnHDONoChanged();
    partial void OnRollNoChanging(string value);
    partial void OnRollNoChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnIDAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnStepFlagChanging(string value);
    partial void OnStepFlagChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnChainDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnChainDefectPointQtyChanged();
    partial void OnTotalDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnTotalDefectPointQtyChanged();
    partial void OnPointQtyPer50MChanging(System.Nullable<decimal> value);
    partial void OnPointQtyPer50MChanged();
    partial void OnDeductLengthEachSpotChanging(System.Nullable<decimal> value);
    partial void OnDeductLengthEachSpotChanged();
    partial void OnSpotDefectLossPercentChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectLossPercentChanged();
    partial void OnSpotDefectLossQtyChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectLossQtyChanged();
    partial void OnSpotDefectLossQtyByLot1Changing(System.Nullable<decimal> value);
    partial void OnSpotDefectLossQtyByLot1Changed();
    partial void OnChainDefectLengthChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthChanged();
    partial void OnChainDefectLengthByLot1Changing(System.Nullable<decimal> value);
    partial void OnChainDefectLengthByLot1Changed();
    partial void OnChainDefectPercentChanging(System.Nullable<decimal> value);
    partial void OnChainDefectPercentChanged();
    partial void OnPart1DefectResultChanging(string value);
    partial void OnPart1DefectResultChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnNeedEvadeMarkerChanging(string value);
    partial void OnNeedEvadeMarkerChanged();
    partial void OnEvadeMarkerLossPercentChanging(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossPercentChanged();
    partial void OnEvadeMarkerLossClaimChanging(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossClaimChanged();
    partial void OnEvadeMarkerLossClaimByLot1Changing(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossClaimByLot1Changed();
    partial void OnNeedCutoutDefectChanging(string value);
    partial void OnNeedCutoutDefectChanged();
    partial void OnCutoutDefectDistanceChanging(System.Nullable<decimal> value);
    partial void OnCutoutDefectDistanceChanged();
    partial void OnCutoutClaimChanging(System.Nullable<decimal> value);
    partial void OnCutoutClaimChanged();
    partial void OnCutoutClaimByLot1Changing(System.Nullable<decimal> value);
    partial void OnCutoutClaimByLot1Changed();
    partial void OnPart1DefectTotalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectTotalClaimByLotChanged();
    partial void OnPackingListLengthChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthChanged();
    partial void OnMeasureLengthChanging(System.Nullable<decimal> value);
    partial void OnMeasureLengthChanged();
    partial void OnLengthDifferentChanging(System.Nullable<decimal> value);
    partial void OnLengthDifferentChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnCutLengthForTestingChanging(System.Nullable<decimal> value);
    partial void OnCutLengthForTestingChanged();
    partial void OnFinalStockInLengthChanging(System.Nullable<decimal> value);
    partial void OnFinalStockInLengthChanged();
    partial void OnAuditLengthDifferentByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditLengthDifferentByLotChanged();
    partial void OnAuditSampleSizeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSampleSizeQtyByLotChanged();
    partial void OnPOQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPOQtyByLotChanged();
    partial void OnPackingListLengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByBatchChanged();
    partial void OnPackingListLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByLotChanged();
    partial void OnShortLengthClaimQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimQtyByLotChanged();
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanging(string value);
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanged();
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanged();
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanged();
    partial void OnMeasureEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureEdgeToEdgeWidthChanged();
    partial void OnWidthDifferentChanging(System.Nullable<decimal> value);
    partial void OnWidthDifferentChanged();
    partial void OnMeasureWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureWidthChanged();
    partial void OnNarrowestWidthByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowestWidthByBatchChanged();
    partial void OnNarrowestWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowestWidthByLotChanged();
    partial void OnNarrowWidthMarkeLossPercentChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthMarkeLossPercentChanged();
    partial void OnNarrowWidthMarkeLossPercentByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthMarkeLossPercentByBatchChanged();
    partial void OnWidthResultChanging(string value);
    partial void OnWidthResultChanged();
    partial void OnWidthResultByBatchChanging(string value);
    partial void OnWidthResultByBatchChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnNarrowWidthClaimChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimChanged();
    partial void OnNarrowWidthClaimByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimByBatchChanged();
    partial void OnNarrowWidthClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimByLotChanged();
    partial void OnGramWeightPerSQMMinChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPerSQMMinChanged();
    partial void OnGramWeightPerSQMMaxChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPerSQMMaxChanged();
    partial void OnGramWeightPerSQMRangeChanging(string value);
    partial void OnGramWeightPerSQMRangeChanged();
    partial void OnActualWeightChanging(System.Nullable<decimal> value);
    partial void OnActualWeightChanged();
    partial void OnWeightDifferentChanging(System.Nullable<decimal> value);
    partial void OnWeightDifferentChanged();
    partial void OnWeightResultByLotChanging(string value);
    partial void OnWeightResultByLotChanged();
    partial void OnPatternShapeMinChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMinChanged();
    partial void OnPatternShapeMaxChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMaxChanged();
    partial void OnPatternShapeRangeByLotChanging(string value);
    partial void OnPatternShapeRangeByLotChanged();
    partial void OnActualPatternShapeChanging(System.Nullable<decimal> value);
    partial void OnActualPatternShapeChanged();
    partial void OnPatternShapeDifferentChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeDifferentChanged();
    partial void OnPatternShapeMarkerLossPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMarkerLossPercentByLotChanged();
    partial void OnPatternShapeResult1Changing(string value);
    partial void OnPatternShapeResult1Changed();
    partial void OnPatternShapeResultByLotChanging(string value);
    partial void OnPatternShapeResultByLotChanged();
    partial void OnPatternShapeClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeClaimByLotChanged();
    partial void OnPart2MeasureResultByLotChanging(string value);
    partial void OnPart2MeasureResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnBatchNoChanging(string value);
    partial void OnBatchNoChanged();
    partial void OnNeedShadeGrpgChanging(string value);
    partial void OnNeedShadeGrpgChanged();
    partial void OnShadeGrpgResultChanging(string value);
    partial void OnShadeGrpgResultChanged();
    partial void OnNeedSkewnessAndBowChanging(string value);
    partial void OnNeedSkewnessAndBowChanged();
    partial void OnSkewnessDistanceABChanging(System.Nullable<decimal> value);
    partial void OnSkewnessDistanceABChanged();
    partial void OnSkewnessDistanceCDChanging(System.Nullable<decimal> value);
    partial void OnSkewnessDistanceCDChanged();
    partial void OnSkewnessAndBowResultChanging(string value);
    partial void OnSkewnessAndBowResultChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallAgreedClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallAgreedClaimByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnPart4SpecificDefectResultByLotChanging(string value);
    partial void OnPart4SpecificDefectResultByLotChanged();
    partial void OnPart4FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4FinalClaimByLotChanged();
    partial void OnAuditRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditRollQtyByLotChanged();
    partial void OnDefectLossQtyChanging(System.Nullable<decimal> value);
    partial void OnDefectLossQtyChanged();
    partial void OnDefectLossQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnDefectLossQtyByLotChanged();
    partial void OnPart1DefectClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectClaimPercentByLotChanged();
    partial void OnPart1DefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectClaimByLotChanged();
    partial void OnPassQtyChanging(System.Nullable<decimal> value);
    partial void OnPassQtyChanged();
    partial void OnPassQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPassQtyByLotChanged();
    partial void OnAuditSpotDefectQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSpotDefectQtyByLotChanged();
    partial void OnAuditVerticalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditVerticalChainDefectQtyChanged();
    partial void OnAuditHorizontalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditHorizontalChainDefectQtyChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnVerticalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnVerticalChainDefectClaimByLotChanged();
    partial void OnCutOutLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthPercentChanged();
    partial void OnHorizontalChainDefectLossPerentByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectLossPerentByLotChanged();
    partial void OnHorizontalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectClaimByLotChanged();
    partial void OnPartIFinalClaimafewthChanging(string value);
    partial void OnPartIFinalClaimafewthChanged();
    partial void OnSpotDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectClaimByLotChanged();
    partial void OnFinalStockInLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnFinalStockInLengthByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    #endregion
		
		public sBandLaceHeader()
		{
			this._sBandLaceSpotDefects = new EntitySet<sBandLaceSpotDefect>(new Action<sBandLaceSpotDefect>(this.attach_sBandLaceSpotDefects), new Action<sBandLaceSpotDefect>(this.detach_sBandLaceSpotDefects));
			this._sBandLaceChainDefects = new EntitySet<sBandLaceChainDefect>(new Action<sBandLaceChainDefect>(this.attach_sBandLaceChainDefects), new Action<sBandLaceChainDefect>(this.detach_sBandLaceChainDefects));
			this._sBandLandWidths = new EntitySet<sBandLandWidth>(new Action<sBandLandWidth>(this.attach_sBandLandWidths), new Action<sBandLandWidth>(this.detach_sBandLandWidths));
			this._sBandLandPatternShapeRepeats = new EntitySet<sBandLandPatternShapeRepeat>(new Action<sBandLandPatternShapeRepeat>(this.attach_sBandLandPatternShapeRepeats), new Action<sBandLandPatternShapeRepeat>(this.detach_sBandLandPatternShapeRepeats));
			this._sBandLandSkewnessBows = new EntitySet<sBandLandSkewnessBow>(new Action<sBandLandSkewnessBow>(this.attach_sBandLandSkewnessBows), new Action<sBandLandSkewnessBow>(this.detach_sBandLandSkewnessBows));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(10)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByLot", DbType="Int")]
		public System.Nullable<int> RollQtyByLot
		{
			get
			{
				return this._RollQtyByLot;
			}
			set
			{
				if ((this._RollQtyByLot != value))
				{
					this.OnRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByLot = value;
					this.SendPropertyChanged("RollQtyByLot");
					this.OnRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByBatch", DbType="Int")]
		public System.Nullable<int> RollQtyByBatch
		{
			get
			{
				return this._RollQtyByBatch;
			}
			set
			{
				if ((this._RollQtyByBatch != value))
				{
					this.OnRollQtyByBatchChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByBatch = value;
					this.SendPropertyChanged("RollQtyByBatch");
					this.OnRollQtyByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_LotID", DbType="VarChar(15)")]
		public string LotID
		{
			get
			{
				return this._LotID;
			}
			set
			{
				if ((this._LotID != value))
				{
					this.OnLotIDChanging(value);
					this.SendPropertyChanging();
					this._LotID = value;
					this.SendPropertyChanged("LotID");
					this.OnLotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(20)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(30)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(20)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_PONo", DbType="VarChar(20)")]
		public string PONo
		{
			get
			{
				return this._PONo;
			}
			set
			{
				if ((this._PONo != value))
				{
					this.OnPONoChanging(value);
					this.SendPropertyChanging();
					this._PONo = value;
					this.SendPropertyChanged("PONo");
					this.OnPONoChanged();
				}
			}
		}
		
		[Column(Storage="_HDONo", DbType="VarChar(20)")]
		public string HDONo
		{
			get
			{
				return this._HDONo;
			}
			set
			{
				if ((this._HDONo != value))
				{
					this.OnHDONoChanging(value);
					this.SendPropertyChanging();
					this._HDONo = value;
					this.SendPropertyChanged("HDONo");
					this.OnHDONoChanged();
				}
			}
		}
		
		[Column(Storage="_RollNo", DbType="VarChar(10)")]
		public string RollNo
		{
			get
			{
				return this._RollNo;
			}
			set
			{
				if ((this._RollNo != value))
				{
					this.OnRollNoChanging(value);
					this.SendPropertyChanging();
					this._RollNo = value;
					this.SendPropertyChanged("RollNo");
					this.OnRollNoChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IDAuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDAuditDate
		{
			get
			{
				return this._IDAuditDate;
			}
			set
			{
				if ((this._IDAuditDate != value))
				{
					this.OnIDAuditDateChanging(value);
					this.SendPropertyChanging();
					this._IDAuditDate = value;
					this.SendPropertyChanged("IDAuditDate");
					this.OnIDAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(20)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StepFlag", DbType="VarChar(20)")]
		public string StepFlag
		{
			get
			{
				return this._StepFlag;
			}
			set
			{
				if ((this._StepFlag != value))
				{
					this.OnStepFlagChanging(value);
					this.SendPropertyChanging();
					this._StepFlag = value;
					this.SendPropertyChanged("StepFlag");
					this.OnStepFlagChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPointQty", DbType="Int")]
		public System.Nullable<int> ChainDefectPointQty
		{
			get
			{
				return this._ChainDefectPointQty;
			}
			set
			{
				if ((this._ChainDefectPointQty != value))
				{
					this.OnChainDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPointQty = value;
					this.SendPropertyChanged("ChainDefectPointQty");
					this.OnChainDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDefectPointQty", DbType="Int")]
		public System.Nullable<int> TotalDefectPointQty
		{
			get
			{
				return this._TotalDefectPointQty;
			}
			set
			{
				if ((this._TotalDefectPointQty != value))
				{
					this.OnTotalDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalDefectPointQty = value;
					this.SendPropertyChanged("TotalDefectPointQty");
					this.OnTotalDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PointQtyPer50M", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PointQtyPer50M
		{
			get
			{
				return this._PointQtyPer50M;
			}
			set
			{
				if ((this._PointQtyPer50M != value))
				{
					this.OnPointQtyPer50MChanging(value);
					this.SendPropertyChanging();
					this._PointQtyPer50M = value;
					this.SendPropertyChanged("PointQtyPer50M");
					this.OnPointQtyPer50MChanged();
				}
			}
		}
		
		[Column(Storage="_DeductLengthEachSpot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DeductLengthEachSpot
		{
			get
			{
				return this._DeductLengthEachSpot;
			}
			set
			{
				if ((this._DeductLengthEachSpot != value))
				{
					this.OnDeductLengthEachSpotChanging(value);
					this.SendPropertyChanging();
					this._DeductLengthEachSpot = value;
					this.SendPropertyChanged("DeductLengthEachSpot");
					this.OnDeductLengthEachSpotChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossPercent
		{
			get
			{
				return this._SpotDefectLossPercent;
			}
			set
			{
				if ((this._SpotDefectLossPercent != value))
				{
					this.OnSpotDefectLossPercentChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectLossPercent = value;
					this.SendPropertyChanged("SpotDefectLossPercent");
					this.OnSpotDefectLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossQty
		{
			get
			{
				return this._SpotDefectLossQty;
			}
			set
			{
				if ((this._SpotDefectLossQty != value))
				{
					this.OnSpotDefectLossQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectLossQty = value;
					this.SendPropertyChanged("SpotDefectLossQty");
					this.OnSpotDefectLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossQtyByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossQtyByLot1
		{
			get
			{
				return this._SpotDefectLossQtyByLot1;
			}
			set
			{
				if ((this._SpotDefectLossQtyByLot1 != value))
				{
					this.OnSpotDefectLossQtyByLot1Changing(value);
					this.SendPropertyChanging();
					this._SpotDefectLossQtyByLot1 = value;
					this.SendPropertyChanged("SpotDefectLossQtyByLot1");
					this.OnSpotDefectLossQtyByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLength
		{
			get
			{
				return this._ChainDefectLength;
			}
			set
			{
				if ((this._ChainDefectLength != value))
				{
					this.OnChainDefectLengthChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLength = value;
					this.SendPropertyChanged("ChainDefectLength");
					this.OnChainDefectLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLengthByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLengthByLot1
		{
			get
			{
				return this._ChainDefectLengthByLot1;
			}
			set
			{
				if ((this._ChainDefectLengthByLot1 != value))
				{
					this.OnChainDefectLengthByLot1Changing(value);
					this.SendPropertyChanging();
					this._ChainDefectLengthByLot1 = value;
					this.SendPropertyChanged("ChainDefectLengthByLot1");
					this.OnChainDefectLengthByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectPercent
		{
			get
			{
				return this._ChainDefectPercent;
			}
			set
			{
				if ((this._ChainDefectPercent != value))
				{
					this.OnChainDefectPercentChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPercent = value;
					this.SendPropertyChanged("ChainDefectPercent");
					this.OnChainDefectPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResult", DbType="VarChar(5)")]
		public string Part1DefectResult
		{
			get
			{
				return this._Part1DefectResult;
			}
			set
			{
				if ((this._Part1DefectResult != value))
				{
					this.OnPart1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResult = value;
					this.SendPropertyChanged("Part1DefectResult");
					this.OnPart1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedEvadeMarker", DbType="VarChar(5)")]
		public string NeedEvadeMarker
		{
			get
			{
				return this._NeedEvadeMarker;
			}
			set
			{
				if ((this._NeedEvadeMarker != value))
				{
					this.OnNeedEvadeMarkerChanging(value);
					this.SendPropertyChanging();
					this._NeedEvadeMarker = value;
					this.SendPropertyChanged("NeedEvadeMarker");
					this.OnNeedEvadeMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossPercent
		{
			get
			{
				return this._EvadeMarkerLossPercent;
			}
			set
			{
				if ((this._EvadeMarkerLossPercent != value))
				{
					this.OnEvadeMarkerLossPercentChanging(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossPercent = value;
					this.SendPropertyChanged("EvadeMarkerLossPercent");
					this.OnEvadeMarkerLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossClaim
		{
			get
			{
				return this._EvadeMarkerLossClaim;
			}
			set
			{
				if ((this._EvadeMarkerLossClaim != value))
				{
					this.OnEvadeMarkerLossClaimChanging(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossClaim = value;
					this.SendPropertyChanged("EvadeMarkerLossClaim");
					this.OnEvadeMarkerLossClaimChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossClaimByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossClaimByLot1
		{
			get
			{
				return this._EvadeMarkerLossClaimByLot1;
			}
			set
			{
				if ((this._EvadeMarkerLossClaimByLot1 != value))
				{
					this.OnEvadeMarkerLossClaimByLot1Changing(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossClaimByLot1 = value;
					this.SendPropertyChanged("EvadeMarkerLossClaimByLot1");
					this.OnEvadeMarkerLossClaimByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_NeedCutoutDefect", DbType="VarChar(5)")]
		public string NeedCutoutDefect
		{
			get
			{
				return this._NeedCutoutDefect;
			}
			set
			{
				if ((this._NeedCutoutDefect != value))
				{
					this.OnNeedCutoutDefectChanging(value);
					this.SendPropertyChanging();
					this._NeedCutoutDefect = value;
					this.SendPropertyChanged("NeedCutoutDefect");
					this.OnNeedCutoutDefectChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutDefectDistance", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutDefectDistance
		{
			get
			{
				return this._CutoutDefectDistance;
			}
			set
			{
				if ((this._CutoutDefectDistance != value))
				{
					this.OnCutoutDefectDistanceChanging(value);
					this.SendPropertyChanging();
					this._CutoutDefectDistance = value;
					this.SendPropertyChanged("CutoutDefectDistance");
					this.OnCutoutDefectDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutClaim
		{
			get
			{
				return this._CutoutClaim;
			}
			set
			{
				if ((this._CutoutClaim != value))
				{
					this.OnCutoutClaimChanging(value);
					this.SendPropertyChanging();
					this._CutoutClaim = value;
					this.SendPropertyChanged("CutoutClaim");
					this.OnCutoutClaimChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutClaimByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutClaimByLot1
		{
			get
			{
				return this._CutoutClaimByLot1;
			}
			set
			{
				if ((this._CutoutClaimByLot1 != value))
				{
					this.OnCutoutClaimByLot1Changing(value);
					this.SendPropertyChanging();
					this._CutoutClaimByLot1 = value;
					this.SendPropertyChanged("CutoutClaimByLot1");
					this.OnCutoutClaimByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_Part1DefectTotalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectTotalClaimByLot
		{
			get
			{
				return this._Part1DefectTotalClaimByLot;
			}
			set
			{
				if ((this._Part1DefectTotalClaimByLot != value))
				{
					this.OnPart1DefectTotalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectTotalClaimByLot = value;
					this.SendPropertyChanged("Part1DefectTotalClaimByLot");
					this.OnPart1DefectTotalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLength
		{
			get
			{
				return this._PackingListLength;
			}
			set
			{
				if ((this._PackingListLength != value))
				{
					this.OnPackingListLengthChanging(value);
					this.SendPropertyChanging();
					this._PackingListLength = value;
					this.SendPropertyChanged("PackingListLength");
					this.OnPackingListLengthChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureLength
		{
			get
			{
				return this._MeasureLength;
			}
			set
			{
				if ((this._MeasureLength != value))
				{
					this.OnMeasureLengthChanging(value);
					this.SendPropertyChanging();
					this._MeasureLength = value;
					this.SendPropertyChanged("MeasureLength");
					this.OnMeasureLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDifferent
		{
			get
			{
				return this._LengthDifferent;
			}
			set
			{
				if ((this._LengthDifferent != value))
				{
					this.OnLengthDifferentChanging(value);
					this.SendPropertyChanging();
					this._LengthDifferent = value;
					this.SendPropertyChanged("LengthDifferent");
					this.OnLengthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutLengthForTesting", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutLengthForTesting
		{
			get
			{
				return this._CutLengthForTesting;
			}
			set
			{
				if ((this._CutLengthForTesting != value))
				{
					this.OnCutLengthForTestingChanging(value);
					this.SendPropertyChanging();
					this._CutLengthForTesting = value;
					this.SendPropertyChanged("CutLengthForTesting");
					this.OnCutLengthForTestingChanged();
				}
			}
		}
		
		[Column(Storage="_FinalStockInLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> FinalStockInLength
		{
			get
			{
				return this._FinalStockInLength;
			}
			set
			{
				if ((this._FinalStockInLength != value))
				{
					this.OnFinalStockInLengthChanging(value);
					this.SendPropertyChanging();
					this._FinalStockInLength = value;
					this.SendPropertyChanged("FinalStockInLength");
					this.OnFinalStockInLengthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditLengthDifferentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditLengthDifferentByLot
		{
			get
			{
				return this._AuditLengthDifferentByLot;
			}
			set
			{
				if ((this._AuditLengthDifferentByLot != value))
				{
					this.OnAuditLengthDifferentByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditLengthDifferentByLot = value;
					this.SendPropertyChanged("AuditLengthDifferentByLot");
					this.OnAuditLengthDifferentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSampleSizeQtyByLot
		{
			get
			{
				return this._AuditSampleSizeQtyByLot;
			}
			set
			{
				if ((this._AuditSampleSizeQtyByLot != value))
				{
					this.OnAuditSampleSizeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQtyByLot = value;
					this.SendPropertyChanged("AuditSampleSizeQtyByLot");
					this.OnAuditSampleSizeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POQtyByLot
		{
			get
			{
				return this._POQtyByLot;
			}
			set
			{
				if ((this._POQtyByLot != value))
				{
					this.OnPOQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._POQtyByLot = value;
					this.SendPropertyChanged("POQtyByLot");
					this.OnPOQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByBatch
		{
			get
			{
				return this._PackingListLengthByBatch;
			}
			set
			{
				if ((this._PackingListLengthByBatch != value))
				{
					this.OnPackingListLengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByBatch = value;
					this.SendPropertyChanged("PackingListLengthByBatch");
					this.OnPackingListLengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByLot
		{
			get
			{
				return this._PackingListLengthByLot;
			}
			set
			{
				if ((this._PackingListLengthByLot != value))
				{
					this.OnPackingListLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByLot = value;
					this.SendPropertyChanged("PackingListLengthByLot");
					this.OnPackingListLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaimQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaimQtyByLot
		{
			get
			{
				return this._ShortLengthClaimQtyByLot;
			}
			set
			{
				if ((this._ShortLengthClaimQtyByLot != value))
				{
					this.OnShortLengthClaimQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaimQtyByLot = value;
					this.SendPropertyChanged("ShortLengthClaimQtyByLot");
					this.OnShortLengthClaimQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeWidthRangeByLot", DbType="VarChar(200)")]
		public string AgreedEdgeToEdgeWidthRangeByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeWidthRangeByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeWidthRangeByLot != value))
				{
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeWidthRangeByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeWidthRangeByLot");
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMinWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMinWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMinWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMinWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMinWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMinWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMinWidthByLot");
					this.OnAgreedEdgeToEdgeMinWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMaxWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMaxWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMaxWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMaxWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMaxWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMaxWidthByLot");
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureEdgeToEdgeWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureEdgeToEdgeWidth
		{
			get
			{
				return this._MeasureEdgeToEdgeWidth;
			}
			set
			{
				if ((this._MeasureEdgeToEdgeWidth != value))
				{
					this.OnMeasureEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureEdgeToEdgeWidth = value;
					this.SendPropertyChanged("MeasureEdgeToEdgeWidth");
					this.OnMeasureEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_WidthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WidthDifferent
		{
			get
			{
				return this._WidthDifferent;
			}
			set
			{
				if ((this._WidthDifferent != value))
				{
					this.OnWidthDifferentChanging(value);
					this.SendPropertyChanging();
					this._WidthDifferent = value;
					this.SendPropertyChanged("WidthDifferent");
					this.OnWidthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureWidth
		{
			get
			{
				return this._MeasureWidth;
			}
			set
			{
				if ((this._MeasureWidth != value))
				{
					this.OnMeasureWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureWidth = value;
					this.SendPropertyChanged("MeasureWidth");
					this.OnMeasureWidthChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowestWidthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowestWidthByBatch
		{
			get
			{
				return this._NarrowestWidthByBatch;
			}
			set
			{
				if ((this._NarrowestWidthByBatch != value))
				{
					this.OnNarrowestWidthByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowestWidthByBatch = value;
					this.SendPropertyChanged("NarrowestWidthByBatch");
					this.OnNarrowestWidthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowestWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowestWidthByLot
		{
			get
			{
				return this._NarrowestWidthByLot;
			}
			set
			{
				if ((this._NarrowestWidthByLot != value))
				{
					this.OnNarrowestWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowestWidthByLot = value;
					this.SendPropertyChanged("NarrowestWidthByLot");
					this.OnNarrowestWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthMarkeLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthMarkeLossPercent
		{
			get
			{
				return this._NarrowWidthMarkeLossPercent;
			}
			set
			{
				if ((this._NarrowWidthMarkeLossPercent != value))
				{
					this.OnNarrowWidthMarkeLossPercentChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthMarkeLossPercent = value;
					this.SendPropertyChanged("NarrowWidthMarkeLossPercent");
					this.OnNarrowWidthMarkeLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthMarkeLossPercentByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthMarkeLossPercentByBatch
		{
			get
			{
				return this._NarrowWidthMarkeLossPercentByBatch;
			}
			set
			{
				if ((this._NarrowWidthMarkeLossPercentByBatch != value))
				{
					this.OnNarrowWidthMarkeLossPercentByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthMarkeLossPercentByBatch = value;
					this.SendPropertyChanged("NarrowWidthMarkeLossPercentByBatch");
					this.OnNarrowWidthMarkeLossPercentByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResult", DbType="VarChar(5)")]
		public string WidthResult
		{
			get
			{
				return this._WidthResult;
			}
			set
			{
				if ((this._WidthResult != value))
				{
					this.OnWidthResultChanging(value);
					this.SendPropertyChanging();
					this._WidthResult = value;
					this.SendPropertyChanged("WidthResult");
					this.OnWidthResultChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByBatch", DbType="VarChar(5)")]
		public string WidthResultByBatch
		{
			get
			{
				return this._WidthResultByBatch;
			}
			set
			{
				if ((this._WidthResultByBatch != value))
				{
					this.OnWidthResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByBatch = value;
					this.SendPropertyChanged("WidthResultByBatch");
					this.OnWidthResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(5)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaim
		{
			get
			{
				return this._NarrowWidthClaim;
			}
			set
			{
				if ((this._NarrowWidthClaim != value))
				{
					this.OnNarrowWidthClaimChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaim = value;
					this.SendPropertyChanged("NarrowWidthClaim");
					this.OnNarrowWidthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimByBatch
		{
			get
			{
				return this._NarrowWidthClaimByBatch;
			}
			set
			{
				if ((this._NarrowWidthClaimByBatch != value))
				{
					this.OnNarrowWidthClaimByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimByBatch = value;
					this.SendPropertyChanged("NarrowWidthClaimByBatch");
					this.OnNarrowWidthClaimByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimByLot
		{
			get
			{
				return this._NarrowWidthClaimByLot;
			}
			set
			{
				if ((this._NarrowWidthClaimByLot != value))
				{
					this.OnNarrowWidthClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimByLot = value;
					this.SendPropertyChanged("NarrowWidthClaimByLot");
					this.OnNarrowWidthClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPerSQMMin
		{
			get
			{
				return this._GramWeightPerSQMMin;
			}
			set
			{
				if ((this._GramWeightPerSQMMin != value))
				{
					this.OnGramWeightPerSQMMinChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMMin = value;
					this.SendPropertyChanged("GramWeightPerSQMMin");
					this.OnGramWeightPerSQMMinChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPerSQMMax
		{
			get
			{
				return this._GramWeightPerSQMMax;
			}
			set
			{
				if ((this._GramWeightPerSQMMax != value))
				{
					this.OnGramWeightPerSQMMaxChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMMax = value;
					this.SendPropertyChanged("GramWeightPerSQMMax");
					this.OnGramWeightPerSQMMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMRange", DbType="VarChar(200)")]
		public string GramWeightPerSQMRange
		{
			get
			{
				return this._GramWeightPerSQMRange;
			}
			set
			{
				if ((this._GramWeightPerSQMRange != value))
				{
					this.OnGramWeightPerSQMRangeChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMRange = value;
					this.SendPropertyChanged("GramWeightPerSQMRange");
					this.OnGramWeightPerSQMRangeChanged();
				}
			}
		}
		
		[Column(Storage="_ActualWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualWeight
		{
			get
			{
				return this._ActualWeight;
			}
			set
			{
				if ((this._ActualWeight != value))
				{
					this.OnActualWeightChanging(value);
					this.SendPropertyChanging();
					this._ActualWeight = value;
					this.SendPropertyChanged("ActualWeight");
					this.OnActualWeightChanged();
				}
			}
		}
		
		[Column(Storage="_WeightDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WeightDifferent
		{
			get
			{
				return this._WeightDifferent;
			}
			set
			{
				if ((this._WeightDifferent != value))
				{
					this.OnWeightDifferentChanging(value);
					this.SendPropertyChanging();
					this._WeightDifferent = value;
					this.SendPropertyChanged("WeightDifferent");
					this.OnWeightDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WeightResultByLot", DbType="VarChar(5)")]
		public string WeightResultByLot
		{
			get
			{
				return this._WeightResultByLot;
			}
			set
			{
				if ((this._WeightResultByLot != value))
				{
					this.OnWeightResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WeightResultByLot = value;
					this.SendPropertyChanged("WeightResultByLot");
					this.OnWeightResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMin
		{
			get
			{
				return this._PatternShapeMin;
			}
			set
			{
				if ((this._PatternShapeMin != value))
				{
					this.OnPatternShapeMinChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMin = value;
					this.SendPropertyChanged("PatternShapeMin");
					this.OnPatternShapeMinChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMax
		{
			get
			{
				return this._PatternShapeMax;
			}
			set
			{
				if ((this._PatternShapeMax != value))
				{
					this.OnPatternShapeMaxChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMax = value;
					this.SendPropertyChanged("PatternShapeMax");
					this.OnPatternShapeMaxChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRangeByLot", DbType="VarChar(200)")]
		public string PatternShapeRangeByLot
		{
			get
			{
				return this._PatternShapeRangeByLot;
			}
			set
			{
				if ((this._PatternShapeRangeByLot != value))
				{
					this.OnPatternShapeRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRangeByLot = value;
					this.SendPropertyChanged("PatternShapeRangeByLot");
					this.OnPatternShapeRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActualPatternShape", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualPatternShape
		{
			get
			{
				return this._ActualPatternShape;
			}
			set
			{
				if ((this._ActualPatternShape != value))
				{
					this.OnActualPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._ActualPatternShape = value;
					this.SendPropertyChanged("ActualPatternShape");
					this.OnActualPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeDifferent
		{
			get
			{
				return this._PatternShapeDifferent;
			}
			set
			{
				if ((this._PatternShapeDifferent != value))
				{
					this.OnPatternShapeDifferentChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeDifferent = value;
					this.SendPropertyChanged("PatternShapeDifferent");
					this.OnPatternShapeDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMarkerLossPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMarkerLossPercentByLot
		{
			get
			{
				return this._PatternShapeMarkerLossPercentByLot;
			}
			set
			{
				if ((this._PatternShapeMarkerLossPercentByLot != value))
				{
					this.OnPatternShapeMarkerLossPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMarkerLossPercentByLot = value;
					this.SendPropertyChanged("PatternShapeMarkerLossPercentByLot");
					this.OnPatternShapeMarkerLossPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResult1", DbType="VarChar(5)")]
		public string PatternShapeResult1
		{
			get
			{
				return this._PatternShapeResult1;
			}
			set
			{
				if ((this._PatternShapeResult1 != value))
				{
					this.OnPatternShapeResult1Changing(value);
					this.SendPropertyChanging();
					this._PatternShapeResult1 = value;
					this.SendPropertyChanged("PatternShapeResult1");
					this.OnPatternShapeResult1Changed();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResultByLot", DbType="VarChar(5)")]
		public string PatternShapeResultByLot
		{
			get
			{
				return this._PatternShapeResultByLot;
			}
			set
			{
				if ((this._PatternShapeResultByLot != value))
				{
					this.OnPatternShapeResultByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResultByLot = value;
					this.SendPropertyChanged("PatternShapeResultByLot");
					this.OnPatternShapeResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeClaimByLot
		{
			get
			{
				return this._PatternShapeClaimByLot;
			}
			set
			{
				if ((this._PatternShapeClaimByLot != value))
				{
					this.OnPatternShapeClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeClaimByLot = value;
					this.SendPropertyChanged("PatternShapeClaimByLot");
					this.OnPatternShapeClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2MeasureResultByLot", DbType="VarChar(5)")]
		public string Part2MeasureResultByLot
		{
			get
			{
				return this._Part2MeasureResultByLot;
			}
			set
			{
				if ((this._Part2MeasureResultByLot != value))
				{
					this.OnPart2MeasureResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2MeasureResultByLot = value;
					this.SendPropertyChanged("Part2MeasureResultByLot");
					this.OnPart2MeasureResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_BatchNo", DbType="VarChar(100)")]
		public string BatchNo
		{
			get
			{
				return this._BatchNo;
			}
			set
			{
				if ((this._BatchNo != value))
				{
					this.OnBatchNoChanging(value);
					this.SendPropertyChanging();
					this._BatchNo = value;
					this.SendPropertyChanged("BatchNo");
					this.OnBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_NeedShadeGrpg", DbType="VarChar(5)")]
		public string NeedShadeGrpg
		{
			get
			{
				return this._NeedShadeGrpg;
			}
			set
			{
				if ((this._NeedShadeGrpg != value))
				{
					this.OnNeedShadeGrpgChanging(value);
					this.SendPropertyChanging();
					this._NeedShadeGrpg = value;
					this.SendPropertyChanged("NeedShadeGrpg");
					this.OnNeedShadeGrpgChanged();
				}
			}
		}
		
		[Column(Storage="_ShadeGrpgResult", DbType="VarChar(5)")]
		public string ShadeGrpgResult
		{
			get
			{
				return this._ShadeGrpgResult;
			}
			set
			{
				if ((this._ShadeGrpgResult != value))
				{
					this.OnShadeGrpgResultChanging(value);
					this.SendPropertyChanging();
					this._ShadeGrpgResult = value;
					this.SendPropertyChanged("ShadeGrpgResult");
					this.OnShadeGrpgResultChanged();
				}
			}
		}
		
		[Column(Storage="_NeedSkewnessAndBow", DbType="VarChar(5)")]
		public string NeedSkewnessAndBow
		{
			get
			{
				return this._NeedSkewnessAndBow;
			}
			set
			{
				if ((this._NeedSkewnessAndBow != value))
				{
					this.OnNeedSkewnessAndBowChanging(value);
					this.SendPropertyChanging();
					this._NeedSkewnessAndBow = value;
					this.SendPropertyChanged("NeedSkewnessAndBow");
					this.OnNeedSkewnessAndBowChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessDistanceAB", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SkewnessDistanceAB
		{
			get
			{
				return this._SkewnessDistanceAB;
			}
			set
			{
				if ((this._SkewnessDistanceAB != value))
				{
					this.OnSkewnessDistanceABChanging(value);
					this.SendPropertyChanging();
					this._SkewnessDistanceAB = value;
					this.SendPropertyChanged("SkewnessDistanceAB");
					this.OnSkewnessDistanceABChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessDistanceCD", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SkewnessDistanceCD
		{
			get
			{
				return this._SkewnessDistanceCD;
			}
			set
			{
				if ((this._SkewnessDistanceCD != value))
				{
					this.OnSkewnessDistanceCDChanging(value);
					this.SendPropertyChanging();
					this._SkewnessDistanceCD = value;
					this.SendPropertyChanged("SkewnessDistanceCD");
					this.OnSkewnessDistanceCDChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessAndBowResult", DbType="VarChar(5)")]
		public string SkewnessAndBowResult
		{
			get
			{
				return this._SkewnessAndBowResult;
			}
			set
			{
				if ((this._SkewnessAndBowResult != value))
				{
					this.OnSkewnessAndBowResultChanging(value);
					this.SendPropertyChanging();
					this._SkewnessAndBowResult = value;
					this.SendPropertyChanged("SkewnessAndBowResult");
					this.OnSkewnessAndBowResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallAgreedClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallAgreedClaimByLot
		{
			get
			{
				return this._OverallAgreedClaimByLot;
			}
			set
			{
				if ((this._OverallAgreedClaimByLot != value))
				{
					this.OnOverallAgreedClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallAgreedClaimByLot = value;
					this.SendPropertyChanged("OverallAgreedClaimByLot");
					this.OnOverallAgreedClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(20)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(100)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Part4SpecificDefectResultByLot", DbType="VarChar(5)")]
		public string Part4SpecificDefectResultByLot
		{
			get
			{
				return this._Part4SpecificDefectResultByLot;
			}
			set
			{
				if ((this._Part4SpecificDefectResultByLot != value))
				{
					this.OnPart4SpecificDefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4SpecificDefectResultByLot = value;
					this.SendPropertyChanged("Part4SpecificDefectResultByLot");
					this.OnPart4SpecificDefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4FinalClaimByLot
		{
			get
			{
				return this._Part4FinalClaimByLot;
			}
			set
			{
				if ((this._Part4FinalClaimByLot != value))
				{
					this.OnPart4FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4FinalClaimByLot = value;
					this.SendPropertyChanged("Part4FinalClaimByLot");
					this.OnPart4FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditRollQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditRollQtyByLot
		{
			get
			{
				return this._AuditRollQtyByLot;
			}
			set
			{
				if ((this._AuditRollQtyByLot != value))
				{
					this.OnAuditRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditRollQtyByLot = value;
					this.SendPropertyChanged("AuditRollQtyByLot");
					this.OnAuditRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DefectLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectLossQty
		{
			get
			{
				return this._DefectLossQty;
			}
			set
			{
				if ((this._DefectLossQty != value))
				{
					this.OnDefectLossQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectLossQty = value;
					this.SendPropertyChanged("DefectLossQty");
					this.OnDefectLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectLossQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectLossQtyByLot
		{
			get
			{
				return this._DefectLossQtyByLot;
			}
			set
			{
				if ((this._DefectLossQtyByLot != value))
				{
					this.OnDefectLossQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._DefectLossQtyByLot = value;
					this.SendPropertyChanged("DefectLossQtyByLot");
					this.OnDefectLossQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectClaimPercentByLot
		{
			get
			{
				return this._Part1DefectClaimPercentByLot;
			}
			set
			{
				if ((this._Part1DefectClaimPercentByLot != value))
				{
					this.OnPart1DefectClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectClaimPercentByLot = value;
					this.SendPropertyChanged("Part1DefectClaimPercentByLot");
					this.OnPart1DefectClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectClaimByLot
		{
			get
			{
				return this._Part1DefectClaimByLot;
			}
			set
			{
				if ((this._Part1DefectClaimByLot != value))
				{
					this.OnPart1DefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectClaimByLot = value;
					this.SendPropertyChanged("Part1DefectClaimByLot");
					this.OnPart1DefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PassQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PassQty
		{
			get
			{
				return this._PassQty;
			}
			set
			{
				if ((this._PassQty != value))
				{
					this.OnPassQtyChanging(value);
					this.SendPropertyChanging();
					this._PassQty = value;
					this.SendPropertyChanged("PassQty");
					this.OnPassQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PassQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PassQtyByLot
		{
			get
			{
				return this._PassQtyByLot;
			}
			set
			{
				if ((this._PassQtyByLot != value))
				{
					this.OnPassQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PassQtyByLot = value;
					this.SendPropertyChanged("PassQtyByLot");
					this.OnPassQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSpotDefectQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSpotDefectQtyByLot
		{
			get
			{
				return this._AuditSpotDefectQtyByLot;
			}
			set
			{
				if ((this._AuditSpotDefectQtyByLot != value))
				{
					this.OnAuditSpotDefectQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSpotDefectQtyByLot = value;
					this.SendPropertyChanged("AuditSpotDefectQtyByLot");
					this.OnAuditSpotDefectQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditVerticalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditVerticalChainDefectQty
		{
			get
			{
				return this._AuditVerticalChainDefectQty;
			}
			set
			{
				if ((this._AuditVerticalChainDefectQty != value))
				{
					this.OnAuditVerticalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditVerticalChainDefectQty = value;
					this.SendPropertyChanged("AuditVerticalChainDefectQty");
					this.OnAuditVerticalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditHorizontalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditHorizontalChainDefectQty
		{
			get
			{
				return this._AuditHorizontalChainDefectQty;
			}
			set
			{
				if ((this._AuditHorizontalChainDefectQty != value))
				{
					this.OnAuditHorizontalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditHorizontalChainDefectQty = value;
					this.SendPropertyChanged("AuditHorizontalChainDefectQty");
					this.OnAuditHorizontalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> VerticalChainDefectClaimByLot
		{
			get
			{
				return this._VerticalChainDefectClaimByLot;
			}
			set
			{
				if ((this._VerticalChainDefectClaimByLot != value))
				{
					this.OnVerticalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._VerticalChainDefectClaimByLot = value;
					this.SendPropertyChanged("VerticalChainDefectClaimByLot");
					this.OnVerticalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLengthPercent
		{
			get
			{
				return this._CutOutLengthPercent;
			}
			set
			{
				if ((this._CutOutLengthPercent != value))
				{
					this.OnCutOutLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._CutOutLengthPercent = value;
					this.SendPropertyChanged("CutOutLengthPercent");
					this.OnCutOutLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectLossPerentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectLossPerentByLot
		{
			get
			{
				return this._HorizontalChainDefectLossPerentByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectLossPerentByLot != value))
				{
					this.OnHorizontalChainDefectLossPerentByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectLossPerentByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectLossPerentByLot");
					this.OnHorizontalChainDefectLossPerentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectClaimByLot
		{
			get
			{
				return this._HorizontalChainDefectClaimByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectClaimByLot != value))
				{
					this.OnHorizontalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectClaimByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectClaimByLot");
					this.OnHorizontalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimafewth", DbType="VarChar(20)")]
		public string PartIFinalClaimafewth
		{
			get
			{
				return this._PartIFinalClaimafewth;
			}
			set
			{
				if ((this._PartIFinalClaimafewth != value))
				{
					this.OnPartIFinalClaimafewthChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimafewth = value;
					this.SendPropertyChanged("PartIFinalClaimafewth");
					this.OnPartIFinalClaimafewthChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectClaimByLot
		{
			get
			{
				return this._SpotDefectClaimByLot;
			}
			set
			{
				if ((this._SpotDefectClaimByLot != value))
				{
					this.OnSpotDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectClaimByLot = value;
					this.SendPropertyChanged("SpotDefectClaimByLot");
					this.OnSpotDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_FinalStockInLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> FinalStockInLengthByLot
		{
			get
			{
				return this._FinalStockInLengthByLot;
			}
			set
			{
				if ((this._FinalStockInLengthByLot != value))
				{
					this.OnFinalStockInLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._FinalStockInLengthByLot = value;
					this.SendPropertyChanged("FinalStockInLengthByLot");
					this.OnFinalStockInLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLaceSpotDefect", Storage="_sBandLaceSpotDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBandLaceSpotDefect> sBandLaceSpotDefects
		{
			get
			{
				return this._sBandLaceSpotDefects;
			}
			set
			{
				this._sBandLaceSpotDefects.Assign(value);
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLaceChainDefect", Storage="_sBandLaceChainDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBandLaceChainDefect> sBandLaceChainDefects
		{
			get
			{
				return this._sBandLaceChainDefects;
			}
			set
			{
				this._sBandLaceChainDefects.Assign(value);
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandWidth", Storage="_sBandLandWidths", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBandLandWidth> sBandLandWidths
		{
			get
			{
				return this._sBandLandWidths;
			}
			set
			{
				this._sBandLandWidths.Assign(value);
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandPatternShapeRepeat", Storage="_sBandLandPatternShapeRepeats", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBandLandPatternShapeRepeat> sBandLandPatternShapeRepeats
		{
			get
			{
				return this._sBandLandPatternShapeRepeats;
			}
			set
			{
				this._sBandLandPatternShapeRepeats.Assign(value);
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandSkewnessBow", Storage="_sBandLandSkewnessBows", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBandLandSkewnessBow> sBandLandSkewnessBows
		{
			get
			{
				return this._sBandLandSkewnessBows;
			}
			set
			{
				this._sBandLandSkewnessBows.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sBandLaceSpotDefects(sBandLaceSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = this;
		}
		
		private void detach_sBandLaceSpotDefects(sBandLaceSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = null;
		}
		
		private void attach_sBandLaceChainDefects(sBandLaceChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = this;
		}
		
		private void detach_sBandLaceChainDefects(sBandLaceChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = null;
		}
		
		private void attach_sBandLandWidths(sBandLandWidth entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = this;
		}
		
		private void detach_sBandLandWidths(sBandLandWidth entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = null;
		}
		
		private void attach_sBandLandPatternShapeRepeats(sBandLandPatternShapeRepeat entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = this;
		}
		
		private void detach_sBandLandPatternShapeRepeats(sBandLandPatternShapeRepeat entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = null;
		}
		
		private void attach_sBandLandSkewnessBows(sBandLandSkewnessBow entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = this;
		}
		
		private void detach_sBandLandSkewnessBows(sBandLandSkewnessBow entity)
		{
			this.SendPropertyChanging();
			entity.sBandLaceHeader = null;
		}
	}
	
	[Table(Name="dbo.sBandLaceSpotDefect")]
	public partial class sBandLaceSpotDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectPointQty;
		
		private EntityRef<sBandLaceHeader> _sBandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnDefectPointQtyChanged();
    #endregion
		
		public sBandLaceSpotDefect()
		{
			this._sBandLaceHeader = default(EntityRef<sBandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPointQty", DbType="Int")]
		public System.Nullable<int> DefectPointQty
		{
			get
			{
				return this._DefectPointQty;
			}
			set
			{
				if ((this._DefectPointQty != value))
				{
					this.OnDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectPointQty = value;
					this.SendPropertyChanged("DefectPointQty");
					this.OnDefectPointQtyChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLaceSpotDefect", Storage="_sBandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBandLaceHeader sBandLaceHeader
		{
			get
			{
				return this._sBandLaceHeader.Entity;
			}
			set
			{
				sBandLaceHeader previousValue = this._sBandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBandLaceHeader.Entity = null;
						previousValue.sBandLaceSpotDefects.Remove(this);
					}
					this._sBandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.sBandLaceSpotDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBandLaceChainDefect")]
	public partial class sBandLaceChainDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _DefectFrom;
		
		private System.Nullable<decimal> _DefectTo;
		
		private System.Nullable<bool> _IsCutOut;
		
		private EntityRef<sBandLaceHeader> _sBandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnDefectFromChanging(System.Nullable<decimal> value);
    partial void OnDefectFromChanged();
    partial void OnDefectToChanging(System.Nullable<decimal> value);
    partial void OnDefectToChanged();
    partial void OnIsCutOutChanging(System.Nullable<bool> value);
    partial void OnIsCutOutChanged();
    #endregion
		
		public sBandLaceChainDefect()
		{
			this._sBandLaceHeader = default(EntityRef<sBandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_DefectFrom", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectFrom
		{
			get
			{
				return this._DefectFrom;
			}
			set
			{
				if ((this._DefectFrom != value))
				{
					this.OnDefectFromChanging(value);
					this.SendPropertyChanging();
					this._DefectFrom = value;
					this.SendPropertyChanged("DefectFrom");
					this.OnDefectFromChanged();
				}
			}
		}
		
		[Column(Storage="_DefectTo", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectTo
		{
			get
			{
				return this._DefectTo;
			}
			set
			{
				if ((this._DefectTo != value))
				{
					this.OnDefectToChanging(value);
					this.SendPropertyChanging();
					this._DefectTo = value;
					this.SendPropertyChanged("DefectTo");
					this.OnDefectToChanged();
				}
			}
		}
		
		[Column(Storage="_IsCutOut", DbType="Bit")]
		public System.Nullable<bool> IsCutOut
		{
			get
			{
				return this._IsCutOut;
			}
			set
			{
				if ((this._IsCutOut != value))
				{
					this.OnIsCutOutChanging(value);
					this.SendPropertyChanging();
					this._IsCutOut = value;
					this.SendPropertyChanged("IsCutOut");
					this.OnIsCutOutChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLaceChainDefect", Storage="_sBandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBandLaceHeader sBandLaceHeader
		{
			get
			{
				return this._sBandLaceHeader.Entity;
			}
			set
			{
				sBandLaceHeader previousValue = this._sBandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBandLaceHeader.Entity = null;
						previousValue.sBandLaceChainDefects.Remove(this);
					}
					this._sBandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.sBandLaceChainDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBandLandWidth")]
	public partial class sBandLandWidth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _UsableWidth;
		
		private System.Nullable<decimal> _SideToSideWidth;
		
		private EntityRef<sBandLaceHeader> _sBandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnUsableWidthChanging(System.Nullable<decimal> value);
    partial void OnUsableWidthChanged();
    partial void OnSideToSideWidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSideWidthChanged();
    #endregion
		
		public sBandLandWidth()
		{
			this._sBandLaceHeader = default(EntityRef<sBandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> UsableWidth
		{
			get
			{
				return this._UsableWidth;
			}
			set
			{
				if ((this._UsableWidth != value))
				{
					this.OnUsableWidthChanging(value);
					this.SendPropertyChanging();
					this._UsableWidth = value;
					this.SendPropertyChanged("UsableWidth");
					this.OnUsableWidthChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSideWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSideWidth
		{
			get
			{
				return this._SideToSideWidth;
			}
			set
			{
				if ((this._SideToSideWidth != value))
				{
					this.OnSideToSideWidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSideWidth = value;
					this.SendPropertyChanged("SideToSideWidth");
					this.OnSideToSideWidthChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandWidth", Storage="_sBandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBandLaceHeader sBandLaceHeader
		{
			get
			{
				return this._sBandLaceHeader.Entity;
			}
			set
			{
				sBandLaceHeader previousValue = this._sBandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBandLaceHeader.Entity = null;
						previousValue.sBandLandWidths.Remove(this);
					}
					this._sBandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.sBandLandWidths.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBandLandPatternShapeRepeat")]
	public partial class sBandLandPatternShapeRepeat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _MeasurePatternShapeRepeat;
		
		private EntityRef<sBandLaceHeader> _sBandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnMeasurePatternShapeRepeatChanging(System.Nullable<decimal> value);
    partial void OnMeasurePatternShapeRepeatChanged();
    #endregion
		
		public sBandLandPatternShapeRepeat()
		{
			this._sBandLaceHeader = default(EntityRef<sBandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_MeasurePatternShapeRepeat", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasurePatternShapeRepeat
		{
			get
			{
				return this._MeasurePatternShapeRepeat;
			}
			set
			{
				if ((this._MeasurePatternShapeRepeat != value))
				{
					this.OnMeasurePatternShapeRepeatChanging(value);
					this.SendPropertyChanging();
					this._MeasurePatternShapeRepeat = value;
					this.SendPropertyChanged("MeasurePatternShapeRepeat");
					this.OnMeasurePatternShapeRepeatChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandPatternShapeRepeat", Storage="_sBandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBandLaceHeader sBandLaceHeader
		{
			get
			{
				return this._sBandLaceHeader.Entity;
			}
			set
			{
				sBandLaceHeader previousValue = this._sBandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBandLaceHeader.Entity = null;
						previousValue.sBandLandPatternShapeRepeats.Remove(this);
					}
					this._sBandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.sBandLandPatternShapeRepeats.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBandLandSkewnessBow")]
	public partial class sBandLandSkewnessBow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private System.Nullable<int> _SectionNo;
		
		private System.Nullable<decimal> _MeasureSkewnessDistanceCD;
		
		private EntityRef<sBandLaceHeader> _sBandLaceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnSectionNoChanging(System.Nullable<int> value);
    partial void OnSectionNoChanged();
    partial void OnMeasureSkewnessDistanceCDChanging(System.Nullable<decimal> value);
    partial void OnMeasureSkewnessDistanceCDChanged();
    #endregion
		
		public sBandLandSkewnessBow()
		{
			this._sBandLaceHeader = default(EntityRef<sBandLaceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBandLaceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SectionNo", DbType="Int")]
		public System.Nullable<int> SectionNo
		{
			get
			{
				return this._SectionNo;
			}
			set
			{
				if ((this._SectionNo != value))
				{
					this.OnSectionNoChanging(value);
					this.SendPropertyChanging();
					this._SectionNo = value;
					this.SendPropertyChanged("SectionNo");
					this.OnSectionNoChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureSkewnessDistanceCD", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureSkewnessDistanceCD
		{
			get
			{
				return this._MeasureSkewnessDistanceCD;
			}
			set
			{
				if ((this._MeasureSkewnessDistanceCD != value))
				{
					this.OnMeasureSkewnessDistanceCDChanging(value);
					this.SendPropertyChanging();
					this._MeasureSkewnessDistanceCD = value;
					this.SendPropertyChanged("MeasureSkewnessDistanceCD");
					this.OnMeasureSkewnessDistanceCDChanged();
				}
			}
		}
		
		[Association(Name="sBandLaceHeader_sBandLandSkewnessBow", Storage="_sBandLaceHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBandLaceHeader sBandLaceHeader
		{
			get
			{
				return this._sBandLaceHeader.Entity;
			}
			set
			{
				sBandLaceHeader previousValue = this._sBandLaceHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBandLaceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBandLaceHeader.Entity = null;
						previousValue.sBandLandSkewnessBows.Remove(this);
					}
					this._sBandLaceHeader.Entity = value;
					if ((value != null))
					{
						value.sBandLandSkewnessBows.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBandLaceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sElasticHeader")]
	public partial class sElasticHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _Whse;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQtyByLot;
		
		private string _LotID;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _SuppItemRef;
		
		private string _SuppCode;
		
		private string _ProjectNo;
		
		private string _PONo;
		
		private string _HDONo;
		
		private string _BoxNo;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _IDAuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private string _AuditStage;
		
		private string _AuditType;
		
		private string _HasChainDefect;
		
		private string _ChainDefectResult;
		
		private string _Part1DefectResult;
		
		private string _Part1DefectResultByLot;
		
		private System.Nullable<decimal> _Part1DefectTotalClaimByLot;
		
		private System.Nullable<decimal> _PackingListLength;
		
		private System.Nullable<int> _AuditSampleSizeQty;
		
		private System.Nullable<int> _AuditSampleSizeQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByLot;
		
		private System.Nullable<decimal> _POQtyByLot;
		
		private System.Nullable<decimal> _PackingListLengthByLot;
		
		private string _AgreedEdgeToEdgeWidthRangeByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMinWidthByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMaxWidthByLot;
		
		private System.Nullable<decimal> _MeasureEdgeToEdgeWidth;
		
		private System.Nullable<decimal> _WidthDifferent;
		
		private string _WidthResultByLot;
		
		private string _NeedPatternShape;
		
		private System.Nullable<decimal> _PatternShapeMin;
		
		private System.Nullable<decimal> _PatternShapeMax;
		
		private string _PatternShapeRangeByLot;
		
		private System.Nullable<decimal> _ActualPatternShape;
		
		private System.Nullable<decimal> _PatternShapeDifferent;
		
		private string _PatternShapeResult;
		
		private string _PatternShapeResultByLot;
		
		private System.Nullable<decimal> _GramWeightPer100CMMin;
		
		private System.Nullable<decimal> _GramWeightPer100CMMax;
		
		private string _GramWeightPer100CMRange;
		
		private System.Nullable<decimal> _ActualWeight;
		
		private System.Nullable<decimal> _WeightDifferent;
		
		private string _WeightResultByLot;
		
		private string _Part2MeasureResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _NeedShadeGrpg;
		
		private string _ShadeGrpgResult;
		
		private string _NeedElongation;
		
		private string _ElongationResult;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallAgreedClaimByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _OverallConfirmBy;
		
		private string _ActionLogSeqNo;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _FailSolution;
		
		private string _Auditor;
		
		private System.Nullable<decimal> _ChainDefectLength;
		
		private System.Nullable<decimal> _ChainDefectLengthPercent;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private string _Part4SpecificDefectResultByLot;
		
		private System.Nullable<decimal> _Part4FinalClaimByLot;
		
		private System.Nullable<int> _AuditBoxQtyByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private string _SpotDefectResult;
		
		private System.Nullable<int> _ChainDefectPointQty;
		
		private System.Nullable<int> _TotalDefectPointQty;
		
		private System.Nullable<decimal> _ProWeightQty;
		
		private System.Nullable<decimal> _PullBoxWeight;
		
		private System.Nullable<decimal> _SampleQuantumWeight;
		
		private System.Nullable<decimal> _LengthDiff;
		
		private System.Nullable<decimal> _LengthPercentByLot;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _ShortLengthClaim;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private EntitySet<sElasticSpotDefect> _sElasticSpotDefects;
		
		private EntitySet<sElasticChainDefect> _sElasticChainDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyByLotChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyByLotChanged();
    partial void OnLotIDChanging(string value);
    partial void OnLotIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnPONoChanging(string value);
    partial void OnPONoChanged();
    partial void OnHDONoChanging(string value);
    partial void OnHDONoChanged();
    partial void OnBoxNoChanging(string value);
    partial void OnBoxNoChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnIDAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnHasChainDefectChanging(string value);
    partial void OnHasChainDefectChanged();
    partial void OnChainDefectResultChanging(string value);
    partial void OnChainDefectResultChanged();
    partial void OnPart1DefectResultChanging(string value);
    partial void OnPart1DefectResultChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart1DefectTotalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectTotalClaimByLotChanged();
    partial void OnPackingListLengthChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthChanged();
    partial void OnAuditSampleSizeQtyChanging(System.Nullable<int> value);
    partial void OnAuditSampleSizeQtyChanged();
    partial void OnAuditSampleSizeQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditSampleSizeQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByLotChanged();
    partial void OnPOQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPOQtyByLotChanged();
    partial void OnPackingListLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByLotChanged();
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanging(string value);
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanged();
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanged();
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanged();
    partial void OnMeasureEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureEdgeToEdgeWidthChanged();
    partial void OnWidthDifferentChanging(System.Nullable<decimal> value);
    partial void OnWidthDifferentChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnNeedPatternShapeChanging(string value);
    partial void OnNeedPatternShapeChanged();
    partial void OnPatternShapeMinChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMinChanged();
    partial void OnPatternShapeMaxChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMaxChanged();
    partial void OnPatternShapeRangeByLotChanging(string value);
    partial void OnPatternShapeRangeByLotChanged();
    partial void OnActualPatternShapeChanging(System.Nullable<decimal> value);
    partial void OnActualPatternShapeChanged();
    partial void OnPatternShapeDifferentChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeDifferentChanged();
    partial void OnPatternShapeResultChanging(string value);
    partial void OnPatternShapeResultChanged();
    partial void OnPatternShapeResultByLotChanging(string value);
    partial void OnPatternShapeResultByLotChanged();
    partial void OnGramWeightPer100CMMinChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPer100CMMinChanged();
    partial void OnGramWeightPer100CMMaxChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPer100CMMaxChanged();
    partial void OnGramWeightPer100CMRangeChanging(string value);
    partial void OnGramWeightPer100CMRangeChanged();
    partial void OnActualWeightChanging(System.Nullable<decimal> value);
    partial void OnActualWeightChanged();
    partial void OnWeightDifferentChanging(System.Nullable<decimal> value);
    partial void OnWeightDifferentChanged();
    partial void OnWeightResultByLotChanging(string value);
    partial void OnWeightResultByLotChanged();
    partial void OnPart2MeasureResultByLotChanging(string value);
    partial void OnPart2MeasureResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnNeedShadeGrpgChanging(string value);
    partial void OnNeedShadeGrpgChanged();
    partial void OnShadeGrpgResultChanging(string value);
    partial void OnShadeGrpgResultChanged();
    partial void OnNeedElongationChanging(string value);
    partial void OnNeedElongationChanged();
    partial void OnElongationResultChanging(string value);
    partial void OnElongationResultChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallAgreedClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallAgreedClaimByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnChainDefectLengthChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthChanged();
    partial void OnChainDefectLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthPercentChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnPart4SpecificDefectResultByLotChanging(string value);
    partial void OnPart4SpecificDefectResultByLotChanged();
    partial void OnPart4FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4FinalClaimByLotChanged();
    partial void OnAuditBoxQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnSpotDefectResultChanging(string value);
    partial void OnSpotDefectResultChanged();
    partial void OnChainDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnChainDefectPointQtyChanged();
    partial void OnTotalDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnTotalDefectPointQtyChanged();
    partial void OnProWeightQtyChanging(System.Nullable<decimal> value);
    partial void OnProWeightQtyChanged();
    partial void OnPullBoxWeightChanging(System.Nullable<decimal> value);
    partial void OnPullBoxWeightChanged();
    partial void OnSampleQuantumWeightChanging(System.Nullable<decimal> value);
    partial void OnSampleQuantumWeightChanged();
    partial void OnLengthDiffChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffChanged();
    partial void OnLengthPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthPercentByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    #endregion
		
		public sElasticHeader()
		{
			this._sElasticSpotDefects = new EntitySet<sElasticSpotDefect>(new Action<sElasticSpotDefect>(this.attach_sElasticSpotDefects), new Action<sElasticSpotDefect>(this.detach_sElasticSpotDefects));
			this._sElasticChainDefects = new EntitySet<sElasticChainDefect>(new Action<sElasticChainDefect>(this.attach_sElasticChainDefects), new Action<sElasticChainDefect>(this.detach_sElasticChainDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(10)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQtyByLot", DbType="Int")]
		public System.Nullable<int> TotalBoxQtyByLot
		{
			get
			{
				return this._TotalBoxQtyByLot;
			}
			set
			{
				if ((this._TotalBoxQtyByLot != value))
				{
					this.OnTotalBoxQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQtyByLot = value;
					this.SendPropertyChanged("TotalBoxQtyByLot");
					this.OnTotalBoxQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LotID", DbType="VarChar(15)")]
		public string LotID
		{
			get
			{
				return this._LotID;
			}
			set
			{
				if ((this._LotID != value))
				{
					this.OnLotIDChanging(value);
					this.SendPropertyChanging();
					this._LotID = value;
					this.SendPropertyChanged("LotID");
					this.OnLotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(20)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(30)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(20)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_PONo", DbType="VarChar(20)")]
		public string PONo
		{
			get
			{
				return this._PONo;
			}
			set
			{
				if ((this._PONo != value))
				{
					this.OnPONoChanging(value);
					this.SendPropertyChanging();
					this._PONo = value;
					this.SendPropertyChanged("PONo");
					this.OnPONoChanged();
				}
			}
		}
		
		[Column(Storage="_HDONo", DbType="VarChar(20)")]
		public string HDONo
		{
			get
			{
				return this._HDONo;
			}
			set
			{
				if ((this._HDONo != value))
				{
					this.OnHDONoChanging(value);
					this.SendPropertyChanging();
					this._HDONo = value;
					this.SendPropertyChanged("HDONo");
					this.OnHDONoChanged();
				}
			}
		}
		
		[Column(Storage="_BoxNo", DbType="VarChar(10)")]
		public string BoxNo
		{
			get
			{
				return this._BoxNo;
			}
			set
			{
				if ((this._BoxNo != value))
				{
					this.OnBoxNoChanging(value);
					this.SendPropertyChanging();
					this._BoxNo = value;
					this.SendPropertyChanged("BoxNo");
					this.OnBoxNoChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IDAuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDAuditDate
		{
			get
			{
				return this._IDAuditDate;
			}
			set
			{
				if ((this._IDAuditDate != value))
				{
					this.OnIDAuditDateChanging(value);
					this.SendPropertyChanging();
					this._IDAuditDate = value;
					this.SendPropertyChanged("IDAuditDate");
					this.OnIDAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(20)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HasChainDefect", DbType="VarChar(5)")]
		public string HasChainDefect
		{
			get
			{
				return this._HasChainDefect;
			}
			set
			{
				if ((this._HasChainDefect != value))
				{
					this.OnHasChainDefectChanging(value);
					this.SendPropertyChanging();
					this._HasChainDefect = value;
					this.SendPropertyChanged("HasChainDefect");
					this.OnHasChainDefectChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectResult", DbType="VarChar(5)")]
		public string ChainDefectResult
		{
			get
			{
				return this._ChainDefectResult;
			}
			set
			{
				if ((this._ChainDefectResult != value))
				{
					this.OnChainDefectResultChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectResult = value;
					this.SendPropertyChanged("ChainDefectResult");
					this.OnChainDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResult", DbType="VarChar(5)")]
		public string Part1DefectResult
		{
			get
			{
				return this._Part1DefectResult;
			}
			set
			{
				if ((this._Part1DefectResult != value))
				{
					this.OnPart1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResult = value;
					this.SendPropertyChanged("Part1DefectResult");
					this.OnPart1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectTotalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectTotalClaimByLot
		{
			get
			{
				return this._Part1DefectTotalClaimByLot;
			}
			set
			{
				if ((this._Part1DefectTotalClaimByLot != value))
				{
					this.OnPart1DefectTotalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectTotalClaimByLot = value;
					this.SendPropertyChanged("Part1DefectTotalClaimByLot");
					this.OnPart1DefectTotalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLength
		{
			get
			{
				return this._PackingListLength;
			}
			set
			{
				if ((this._PackingListLength != value))
				{
					this.OnPackingListLengthChanging(value);
					this.SendPropertyChanging();
					this._PackingListLength = value;
					this.SendPropertyChanged("PackingListLength");
					this.OnPackingListLengthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQty", DbType="Int")]
		public System.Nullable<int> AuditSampleSizeQty
		{
			get
			{
				return this._AuditSampleSizeQty;
			}
			set
			{
				if ((this._AuditSampleSizeQty != value))
				{
					this.OnAuditSampleSizeQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQty = value;
					this.SendPropertyChanged("AuditSampleSizeQty");
					this.OnAuditSampleSizeQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditSampleSizeQtyByLot
		{
			get
			{
				return this._AuditSampleSizeQtyByLot;
			}
			set
			{
				if ((this._AuditSampleSizeQtyByLot != value))
				{
					this.OnAuditSampleSizeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQtyByLot = value;
					this.SendPropertyChanged("AuditSampleSizeQtyByLot");
					this.OnAuditSampleSizeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByLot", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByLot
		{
			get
			{
				return this._AQL25StandardQtyByLot;
			}
			set
			{
				if ((this._AQL25StandardQtyByLot != value))
				{
					this.OnAQL25StandardQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByLot = value;
					this.SendPropertyChanged("AQL25StandardQtyByLot");
					this.OnAQL25StandardQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POQtyByLot
		{
			get
			{
				return this._POQtyByLot;
			}
			set
			{
				if ((this._POQtyByLot != value))
				{
					this.OnPOQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._POQtyByLot = value;
					this.SendPropertyChanged("POQtyByLot");
					this.OnPOQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByLot
		{
			get
			{
				return this._PackingListLengthByLot;
			}
			set
			{
				if ((this._PackingListLengthByLot != value))
				{
					this.OnPackingListLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByLot = value;
					this.SendPropertyChanged("PackingListLengthByLot");
					this.OnPackingListLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeWidthRangeByLot", DbType="VarChar(200)")]
		public string AgreedEdgeToEdgeWidthRangeByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeWidthRangeByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeWidthRangeByLot != value))
				{
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeWidthRangeByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeWidthRangeByLot");
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMinWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMinWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMinWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMinWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMinWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMinWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMinWidthByLot");
					this.OnAgreedEdgeToEdgeMinWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMaxWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMaxWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMaxWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMaxWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMaxWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMaxWidthByLot");
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureEdgeToEdgeWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureEdgeToEdgeWidth
		{
			get
			{
				return this._MeasureEdgeToEdgeWidth;
			}
			set
			{
				if ((this._MeasureEdgeToEdgeWidth != value))
				{
					this.OnMeasureEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureEdgeToEdgeWidth = value;
					this.SendPropertyChanged("MeasureEdgeToEdgeWidth");
					this.OnMeasureEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_WidthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WidthDifferent
		{
			get
			{
				return this._WidthDifferent;
			}
			set
			{
				if ((this._WidthDifferent != value))
				{
					this.OnWidthDifferentChanging(value);
					this.SendPropertyChanging();
					this._WidthDifferent = value;
					this.SendPropertyChanged("WidthDifferent");
					this.OnWidthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(5)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedPatternShape", DbType="VarChar(5)")]
		public string NeedPatternShape
		{
			get
			{
				return this._NeedPatternShape;
			}
			set
			{
				if ((this._NeedPatternShape != value))
				{
					this.OnNeedPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._NeedPatternShape = value;
					this.SendPropertyChanged("NeedPatternShape");
					this.OnNeedPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMin
		{
			get
			{
				return this._PatternShapeMin;
			}
			set
			{
				if ((this._PatternShapeMin != value))
				{
					this.OnPatternShapeMinChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMin = value;
					this.SendPropertyChanged("PatternShapeMin");
					this.OnPatternShapeMinChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMax
		{
			get
			{
				return this._PatternShapeMax;
			}
			set
			{
				if ((this._PatternShapeMax != value))
				{
					this.OnPatternShapeMaxChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMax = value;
					this.SendPropertyChanged("PatternShapeMax");
					this.OnPatternShapeMaxChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRangeByLot", DbType="VarChar(200)")]
		public string PatternShapeRangeByLot
		{
			get
			{
				return this._PatternShapeRangeByLot;
			}
			set
			{
				if ((this._PatternShapeRangeByLot != value))
				{
					this.OnPatternShapeRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRangeByLot = value;
					this.SendPropertyChanged("PatternShapeRangeByLot");
					this.OnPatternShapeRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActualPatternShape", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualPatternShape
		{
			get
			{
				return this._ActualPatternShape;
			}
			set
			{
				if ((this._ActualPatternShape != value))
				{
					this.OnActualPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._ActualPatternShape = value;
					this.SendPropertyChanged("ActualPatternShape");
					this.OnActualPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeDifferent
		{
			get
			{
				return this._PatternShapeDifferent;
			}
			set
			{
				if ((this._PatternShapeDifferent != value))
				{
					this.OnPatternShapeDifferentChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeDifferent = value;
					this.SendPropertyChanged("PatternShapeDifferent");
					this.OnPatternShapeDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResult", DbType="VarChar(5)")]
		public string PatternShapeResult
		{
			get
			{
				return this._PatternShapeResult;
			}
			set
			{
				if ((this._PatternShapeResult != value))
				{
					this.OnPatternShapeResultChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResult = value;
					this.SendPropertyChanged("PatternShapeResult");
					this.OnPatternShapeResultChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResultByLot", DbType="VarChar(5)")]
		public string PatternShapeResultByLot
		{
			get
			{
				return this._PatternShapeResultByLot;
			}
			set
			{
				if ((this._PatternShapeResultByLot != value))
				{
					this.OnPatternShapeResultByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResultByLot = value;
					this.SendPropertyChanged("PatternShapeResultByLot");
					this.OnPatternShapeResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPer100CMMin
		{
			get
			{
				return this._GramWeightPer100CMMin;
			}
			set
			{
				if ((this._GramWeightPer100CMMin != value))
				{
					this.OnGramWeightPer100CMMinChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMMin = value;
					this.SendPropertyChanged("GramWeightPer100CMMin");
					this.OnGramWeightPer100CMMinChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPer100CMMax
		{
			get
			{
				return this._GramWeightPer100CMMax;
			}
			set
			{
				if ((this._GramWeightPer100CMMax != value))
				{
					this.OnGramWeightPer100CMMaxChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMMax = value;
					this.SendPropertyChanged("GramWeightPer100CMMax");
					this.OnGramWeightPer100CMMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMRange", DbType="VarChar(200)")]
		public string GramWeightPer100CMRange
		{
			get
			{
				return this._GramWeightPer100CMRange;
			}
			set
			{
				if ((this._GramWeightPer100CMRange != value))
				{
					this.OnGramWeightPer100CMRangeChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMRange = value;
					this.SendPropertyChanged("GramWeightPer100CMRange");
					this.OnGramWeightPer100CMRangeChanged();
				}
			}
		}
		
		[Column(Storage="_ActualWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualWeight
		{
			get
			{
				return this._ActualWeight;
			}
			set
			{
				if ((this._ActualWeight != value))
				{
					this.OnActualWeightChanging(value);
					this.SendPropertyChanging();
					this._ActualWeight = value;
					this.SendPropertyChanged("ActualWeight");
					this.OnActualWeightChanged();
				}
			}
		}
		
		[Column(Storage="_WeightDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WeightDifferent
		{
			get
			{
				return this._WeightDifferent;
			}
			set
			{
				if ((this._WeightDifferent != value))
				{
					this.OnWeightDifferentChanging(value);
					this.SendPropertyChanging();
					this._WeightDifferent = value;
					this.SendPropertyChanged("WeightDifferent");
					this.OnWeightDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WeightResultByLot", DbType="VarChar(5)")]
		public string WeightResultByLot
		{
			get
			{
				return this._WeightResultByLot;
			}
			set
			{
				if ((this._WeightResultByLot != value))
				{
					this.OnWeightResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WeightResultByLot = value;
					this.SendPropertyChanged("WeightResultByLot");
					this.OnWeightResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2MeasureResultByLot", DbType="VarChar(5)")]
		public string Part2MeasureResultByLot
		{
			get
			{
				return this._Part2MeasureResultByLot;
			}
			set
			{
				if ((this._Part2MeasureResultByLot != value))
				{
					this.OnPart2MeasureResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2MeasureResultByLot = value;
					this.SendPropertyChanged("Part2MeasureResultByLot");
					this.OnPart2MeasureResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedShadeGrpg", DbType="VarChar(5)")]
		public string NeedShadeGrpg
		{
			get
			{
				return this._NeedShadeGrpg;
			}
			set
			{
				if ((this._NeedShadeGrpg != value))
				{
					this.OnNeedShadeGrpgChanging(value);
					this.SendPropertyChanging();
					this._NeedShadeGrpg = value;
					this.SendPropertyChanged("NeedShadeGrpg");
					this.OnNeedShadeGrpgChanged();
				}
			}
		}
		
		[Column(Storage="_ShadeGrpgResult", DbType="VarChar(5)")]
		public string ShadeGrpgResult
		{
			get
			{
				return this._ShadeGrpgResult;
			}
			set
			{
				if ((this._ShadeGrpgResult != value))
				{
					this.OnShadeGrpgResultChanging(value);
					this.SendPropertyChanging();
					this._ShadeGrpgResult = value;
					this.SendPropertyChanged("ShadeGrpgResult");
					this.OnShadeGrpgResultChanged();
				}
			}
		}
		
		[Column(Storage="_NeedElongation", DbType="VarChar(5)")]
		public string NeedElongation
		{
			get
			{
				return this._NeedElongation;
			}
			set
			{
				if ((this._NeedElongation != value))
				{
					this.OnNeedElongationChanging(value);
					this.SendPropertyChanging();
					this._NeedElongation = value;
					this.SendPropertyChanged("NeedElongation");
					this.OnNeedElongationChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationResult", DbType="VarChar(5)")]
		public string ElongationResult
		{
			get
			{
				return this._ElongationResult;
			}
			set
			{
				if ((this._ElongationResult != value))
				{
					this.OnElongationResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationResult = value;
					this.SendPropertyChanged("ElongationResult");
					this.OnElongationResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallAgreedClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallAgreedClaimByLot
		{
			get
			{
				return this._OverallAgreedClaimByLot;
			}
			set
			{
				if ((this._OverallAgreedClaimByLot != value))
				{
					this.OnOverallAgreedClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallAgreedClaimByLot = value;
					this.SendPropertyChanged("OverallAgreedClaimByLot");
					this.OnOverallAgreedClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(20)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(100)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLength
		{
			get
			{
				return this._ChainDefectLength;
			}
			set
			{
				if ((this._ChainDefectLength != value))
				{
					this.OnChainDefectLengthChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLength = value;
					this.SendPropertyChanged("ChainDefectLength");
					this.OnChainDefectLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLengthPercent
		{
			get
			{
				return this._ChainDefectLengthPercent;
			}
			set
			{
				if ((this._ChainDefectLengthPercent != value))
				{
					this.OnChainDefectLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLengthPercent = value;
					this.SendPropertyChanged("ChainDefectLengthPercent");
					this.OnChainDefectLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4SpecificDefectResultByLot", DbType="VarChar(5)")]
		public string Part4SpecificDefectResultByLot
		{
			get
			{
				return this._Part4SpecificDefectResultByLot;
			}
			set
			{
				if ((this._Part4SpecificDefectResultByLot != value))
				{
					this.OnPart4SpecificDefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4SpecificDefectResultByLot = value;
					this.SendPropertyChanged("Part4SpecificDefectResultByLot");
					this.OnPart4SpecificDefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4FinalClaimByLot
		{
			get
			{
				return this._Part4FinalClaimByLot;
			}
			set
			{
				if ((this._Part4FinalClaimByLot != value))
				{
					this.OnPart4FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4FinalClaimByLot = value;
					this.SendPropertyChanged("Part4FinalClaimByLot");
					this.OnPart4FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditBoxQtyByLot
		{
			get
			{
				return this._AuditBoxQtyByLot;
			}
			set
			{
				if ((this._AuditBoxQtyByLot != value))
				{
					this.OnAuditBoxQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQtyByLot = value;
					this.SendPropertyChanged("AuditBoxQtyByLot");
					this.OnAuditBoxQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectResult", DbType="VarChar(5)")]
		public string SpotDefectResult
		{
			get
			{
				return this._SpotDefectResult;
			}
			set
			{
				if ((this._SpotDefectResult != value))
				{
					this.OnSpotDefectResultChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectResult = value;
					this.SendPropertyChanged("SpotDefectResult");
					this.OnSpotDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPointQty", DbType="Int")]
		public System.Nullable<int> ChainDefectPointQty
		{
			get
			{
				return this._ChainDefectPointQty;
			}
			set
			{
				if ((this._ChainDefectPointQty != value))
				{
					this.OnChainDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPointQty = value;
					this.SendPropertyChanged("ChainDefectPointQty");
					this.OnChainDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDefectPointQty", DbType="Int")]
		public System.Nullable<int> TotalDefectPointQty
		{
			get
			{
				return this._TotalDefectPointQty;
			}
			set
			{
				if ((this._TotalDefectPointQty != value))
				{
					this.OnTotalDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalDefectPointQty = value;
					this.SendPropertyChanged("TotalDefectPointQty");
					this.OnTotalDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ProWeightQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ProWeightQty
		{
			get
			{
				return this._ProWeightQty;
			}
			set
			{
				if ((this._ProWeightQty != value))
				{
					this.OnProWeightQtyChanging(value);
					this.SendPropertyChanging();
					this._ProWeightQty = value;
					this.SendPropertyChanged("ProWeightQty");
					this.OnProWeightQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullBoxWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PullBoxWeight
		{
			get
			{
				return this._PullBoxWeight;
			}
			set
			{
				if ((this._PullBoxWeight != value))
				{
					this.OnPullBoxWeightChanging(value);
					this.SendPropertyChanging();
					this._PullBoxWeight = value;
					this.SendPropertyChanged("PullBoxWeight");
					this.OnPullBoxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SampleQuantumWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SampleQuantumWeight
		{
			get
			{
				return this._SampleQuantumWeight;
			}
			set
			{
				if ((this._SampleQuantumWeight != value))
				{
					this.OnSampleQuantumWeightChanging(value);
					this.SendPropertyChanging();
					this._SampleQuantumWeight = value;
					this.SendPropertyChanged("SampleQuantumWeight");
					this.OnSampleQuantumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiff", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiff
		{
			get
			{
				return this._LengthDiff;
			}
			set
			{
				if ((this._LengthDiff != value))
				{
					this.OnLengthDiffChanging(value);
					this.SendPropertyChanging();
					this._LengthDiff = value;
					this.SendPropertyChanged("LengthDiff");
					this.OnLengthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_LengthPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthPercentByLot
		{
			get
			{
				return this._LengthPercentByLot;
			}
			set
			{
				if ((this._LengthPercentByLot != value))
				{
					this.OnLengthPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthPercentByLot = value;
					this.SendPropertyChanged("LengthPercentByLot");
					this.OnLengthPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaim
		{
			get
			{
				return this._ShortLengthClaim;
			}
			set
			{
				if ((this._ShortLengthClaim != value))
				{
					this.OnShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaim = value;
					this.SendPropertyChanged("ShortLengthClaim");
					this.OnShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Association(Name="sElasticHeader_sElasticSpotDefect", Storage="_sElasticSpotDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sElasticSpotDefect> sElasticSpotDefects
		{
			get
			{
				return this._sElasticSpotDefects;
			}
			set
			{
				this._sElasticSpotDefects.Assign(value);
			}
		}
		
		[Association(Name="sElasticHeader_sElasticChainDefect", Storage="_sElasticChainDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sElasticChainDefect> sElasticChainDefects
		{
			get
			{
				return this._sElasticChainDefects;
			}
			set
			{
				this._sElasticChainDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sElasticSpotDefects(sElasticSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.sElasticHeader = this;
		}
		
		private void detach_sElasticSpotDefects(sElasticSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.sElasticHeader = null;
		}
		
		private void attach_sElasticChainDefects(sElasticChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.sElasticHeader = this;
		}
		
		private void detach_sElasticChainDefects(sElasticChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.sElasticHeader = null;
		}
	}
	
	[Table(Name="dbo.sElasticSpotDefect")]
	public partial class sElasticSpotDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectPointQty;
		
		private EntityRef<sElasticHeader> _sElasticHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnDefectPointQtyChanged();
    #endregion
		
		public sElasticSpotDefect()
		{
			this._sElasticHeader = default(EntityRef<sElasticHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sElasticHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectPointQty", DbType="Int")]
		public System.Nullable<int> DefectPointQty
		{
			get
			{
				return this._DefectPointQty;
			}
			set
			{
				if ((this._DefectPointQty != value))
				{
					this.OnDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectPointQty = value;
					this.SendPropertyChanged("DefectPointQty");
					this.OnDefectPointQtyChanged();
				}
			}
		}
		
		[Association(Name="sElasticHeader_sElasticSpotDefect", Storage="_sElasticHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sElasticHeader sElasticHeader
		{
			get
			{
				return this._sElasticHeader.Entity;
			}
			set
			{
				sElasticHeader previousValue = this._sElasticHeader.Entity;
				if (((previousValue != value) 
							|| (this._sElasticHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sElasticHeader.Entity = null;
						previousValue.sElasticSpotDefects.Remove(this);
					}
					this._sElasticHeader.Entity = value;
					if ((value != null))
					{
						value.sElasticSpotDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sElasticHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sElasticChainDefect")]
	public partial class sElasticChainDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<decimal> _DefectFrom;
		
		private System.Nullable<decimal> _DefectTo;
		
		private EntityRef<sElasticHeader> _sElasticHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnDefectFromChanging(System.Nullable<decimal> value);
    partial void OnDefectFromChanged();
    partial void OnDefectToChanging(System.Nullable<decimal> value);
    partial void OnDefectToChanged();
    #endregion
		
		public sElasticChainDefect()
		{
			this._sElasticHeader = default(EntityRef<sElasticHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sElasticHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[Column(Storage="_DefectFrom", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectFrom
		{
			get
			{
				return this._DefectFrom;
			}
			set
			{
				if ((this._DefectFrom != value))
				{
					this.OnDefectFromChanging(value);
					this.SendPropertyChanging();
					this._DefectFrom = value;
					this.SendPropertyChanged("DefectFrom");
					this.OnDefectFromChanged();
				}
			}
		}
		
		[Column(Storage="_DefectTo", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectTo
		{
			get
			{
				return this._DefectTo;
			}
			set
			{
				if ((this._DefectTo != value))
				{
					this.OnDefectToChanging(value);
					this.SendPropertyChanging();
					this._DefectTo = value;
					this.SendPropertyChanged("DefectTo");
					this.OnDefectToChanged();
				}
			}
		}
		
		[Association(Name="sElasticHeader_sElasticChainDefect", Storage="_sElasticHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sElasticHeader sElasticHeader
		{
			get
			{
				return this._sElasticHeader.Entity;
			}
			set
			{
				sElasticHeader previousValue = this._sElasticHeader.Entity;
				if (((previousValue != value) 
							|| (this._sElasticHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sElasticHeader.Entity = null;
						previousValue.sElasticChainDefects.Remove(this);
					}
					this._sElasticHeader.Entity = value;
					if ((value != null))
					{
						value.sElasticChainDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sElasticHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sFabric_Defect_File")]
	public partial class sFabric_Defect_File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Company;
		
		private string _Style_Code;
		
		private string _Defect_Code;
		
		private System.Nullable<int> _Seq_No;
		
		private string _User_Id;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnStyle_CodeChanging(string value);
    partial void OnStyle_CodeChanged();
    partial void OnDefect_CodeChanging(string value);
    partial void OnDefect_CodeChanged();
    partial void OnSeq_NoChanging(System.Nullable<int> value);
    partial void OnSeq_NoChanged();
    partial void OnUser_IdChanging(string value);
    partial void OnUser_IdChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    #endregion
		
		public sFabric_Defect_File()
		{
			OnCreated();
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Style_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Style_Code
		{
			get
			{
				return this._Style_Code;
			}
			set
			{
				if ((this._Style_Code != value))
				{
					this.OnStyle_CodeChanging(value);
					this.SendPropertyChanging();
					this._Style_Code = value;
					this.SendPropertyChanged("Style_Code");
					this.OnStyle_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Defect_Code", DbType="VarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Defect_Code
		{
			get
			{
				return this._Defect_Code;
			}
			set
			{
				if ((this._Defect_Code != value))
				{
					this.OnDefect_CodeChanging(value);
					this.SendPropertyChanging();
					this._Defect_Code = value;
					this.SendPropertyChanged("Defect_Code");
					this.OnDefect_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Seq_No", DbType="Int")]
		public System.Nullable<int> Seq_No
		{
			get
			{
				return this._Seq_No;
			}
			set
			{
				if ((this._Seq_No != value))
				{
					this.OnSeq_NoChanging(value);
					this.SendPropertyChanging();
					this._Seq_No = value;
					this.SendPropertyChanged("Seq_No");
					this.OnSeq_NoChanged();
				}
			}
		}
		
		[Column(Storage="_User_Id", DbType="VarChar(50)")]
		public string User_Id
		{
			get
			{
				return this._User_Id;
			}
			set
			{
				if ((this._User_Id != value))
				{
					this.OnUser_IdChanging(value);
					this.SendPropertyChanging();
					this._User_Id = value;
					this.SendPropertyChanged("User_Id");
					this.OnUser_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sAccessoryHeader")]
	public partial class sAccessoryHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _SuppCode;
		
		private string _PONO;
		
		private string _HDONO;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQty;
		
		private System.Nullable<int> _PullIndQtyByLot;
		
		private System.Nullable<int> _TotalAuditSample;
		
		private System.Nullable<int> _TotalStockInQty;
		
		private System.Nullable<int> _AuditBoxQty;
		
		private string _AuditType;
		
		private string _AuditQty;
		
		private string _Remark;
		
		private string _AuditStage;
		
		private System.Nullable<int> _DefectQty;
		
		private System.Nullable<int> _DefectCount;
		
		private System.Nullable<int> _RejectQty;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _ActionLogNO;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _Auditor;
		
		private string _Whse;
		
		private string _SuppRef;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _ColorShade;
		
		private string _ProjectNO;
		
		private string _ItemIDNO;
		
		private string _IndPackNO;
		
		private string _AuditSKUCrossCup;
		
		private System.Nullable<int> _TotalAuditSKUCrossCup;
		
		private string _AuditSKU;
		
		private System.Nullable<int> _TotalAuditSKU;
		
		private System.Nullable<int> _PackListQty;
		
		private System.Nullable<int> _PackListQtyByLot;
		
		private System.Nullable<int> _AQLAuditQty;
		
		private System.Nullable<int> _AQLAuditQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByLot;
		
		private string _DefectResultByID;
		
		private string _DefectResultByColor;
		
		private System.Nullable<decimal> _AgreedUsableWidthMin;
		
		private System.Nullable<decimal> _AgreedUsableWidthMax;
		
		private string _AgreedUsableWidthRange;
		
		private System.Nullable<decimal> _EdgeToEdgeWidth;
		
		private System.Nullable<decimal> _EdgeToEdgeWidthDiff;
		
		private string _EdgeToEdgeWidthResultByLot;
		
		private string _WidthResultByID;
		
		private string _WidthResultByColor;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private string _OverallConfirmBy;
		
		private string _FailSolution;
		
		private System.Nullable<int> _TotalItemIDNO;
		
		private System.Nullable<int> _TotalPONO;
		
		private System.Nullable<int> _TotalSuppRef;
		
		private System.Nullable<int> _TotalSuppCode;
		
		private System.Nullable<int> _TotalItemCode;
		
		private System.Nullable<int> _TotalColorCode;
		
		private System.Nullable<int> _TotalProject;
		
		private System.Nullable<int> _TotalClaimRejectedQty;
		
		private System.Nullable<int> _TotalOffQty;
		
		private System.Nullable<int> _OverallClaimQty;
		
		private System.Nullable<int> _CasingTotalPullQty;
		
		private string _CasingPullCaseNo;
		
		private System.Nullable<int> _CasingTotalDefectQty;
		
		private System.Nullable<int> _CasingRejectQty;
		
		private System.Nullable<int> _CasingPackListQty;
		
		private System.Nullable<int> _CasingLabelQty;
		
		private System.Nullable<int> _CasingDiffQty;
		
		private System.Nullable<int> _CasingDiffQtyByLot;
		
		private string _Part1DefectResultByLot;
		
		private string _Part2Result;
		
		private string _Part2ResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _ColorShadeResult;
		
		private System.Nullable<int> _AuditCaseQtyByLot;
		
		private System.Nullable<int> _CountQty;
		
		private System.Nullable<int> _CountDiffQty;
		
		private System.Nullable<int> _CountDiffQtyByLot;
		
		private string _CountResult;
		
		private string _Part1Result;
		
		private string _Part1ResultByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private System.Nullable<decimal> _ProWeightQty;
		
		private System.Nullable<decimal> _PullBoxWeight;
		
		private System.Nullable<decimal> _SampleQuantumWeight;
		
		private System.Nullable<decimal> _LengthDiff;
		
		private System.Nullable<decimal> _LengthPercentByLot;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _ShortLengthClaim;
		
		private string _Part4ResultByLot;
		
		private System.Nullable<decimal> _Part4ClaimByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _WeightMinFromMIDc;
		
		private System.Nullable<decimal> _WeightMaxFromMIDc;
		
		private string _WeightRange;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private EntitySet<sAccessoryDefect> _sAccessoryDefects;
		
		private EntitySet<sAccessoryCasingDefect> _sAccessoryCasingDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnHDONOChanging(string value);
    partial void OnHDONOChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyChanged();
    partial void OnPullIndQtyByLotChanging(System.Nullable<int> value);
    partial void OnPullIndQtyByLotChanged();
    partial void OnTotalAuditSampleChanging(System.Nullable<int> value);
    partial void OnTotalAuditSampleChanged();
    partial void OnTotalStockInQtyChanging(System.Nullable<int> value);
    partial void OnTotalStockInQtyChanged();
    partial void OnAuditBoxQtyChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnAuditQtyChanging(string value);
    partial void OnAuditQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    partial void OnDefectCountChanging(System.Nullable<int> value);
    partial void OnDefectCountChanged();
    partial void OnRejectQtyChanging(System.Nullable<int> value);
    partial void OnRejectQtyChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnActionLogNOChanging(string value);
    partial void OnActionLogNOChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnColorShadeChanging(string value);
    partial void OnColorShadeChanged();
    partial void OnProjectNOChanging(string value);
    partial void OnProjectNOChanged();
    partial void OnItemIDNOChanging(string value);
    partial void OnItemIDNOChanged();
    partial void OnIndPackNOChanging(string value);
    partial void OnIndPackNOChanged();
    partial void OnAuditSKUCrossCupChanging(string value);
    partial void OnAuditSKUCrossCupChanged();
    partial void OnTotalAuditSKUCrossCupChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUCrossCupChanged();
    partial void OnAuditSKUChanging(string value);
    partial void OnAuditSKUChanged();
    partial void OnTotalAuditSKUChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUChanged();
    partial void OnPackListQtyChanging(System.Nullable<int> value);
    partial void OnPackListQtyChanged();
    partial void OnPackListQtyByLotChanging(System.Nullable<int> value);
    partial void OnPackListQtyByLotChanged();
    partial void OnAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyChanged();
    partial void OnAQLAuditQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByLotChanged();
    partial void OnDefectResultByIDChanging(string value);
    partial void OnDefectResultByIDChanged();
    partial void OnDefectResultByColorChanging(string value);
    partial void OnDefectResultByColorChanged();
    partial void OnAgreedUsableWidthMinChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMinChanged();
    partial void OnAgreedUsableWidthMaxChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMaxChanged();
    partial void OnAgreedUsableWidthRangeChanging(string value);
    partial void OnAgreedUsableWidthRangeChanged();
    partial void OnEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthChanged();
    partial void OnEdgeToEdgeWidthDiffChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthDiffChanged();
    partial void OnEdgeToEdgeWidthResultByLotChanging(string value);
    partial void OnEdgeToEdgeWidthResultByLotChanged();
    partial void OnWidthResultByIDChanging(string value);
    partial void OnWidthResultByIDChanged();
    partial void OnWidthResultByColorChanging(string value);
    partial void OnWidthResultByColorChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnTotalItemIDNOChanging(System.Nullable<int> value);
    partial void OnTotalItemIDNOChanged();
    partial void OnTotalPONOChanging(System.Nullable<int> value);
    partial void OnTotalPONOChanged();
    partial void OnTotalSuppRefChanging(System.Nullable<int> value);
    partial void OnTotalSuppRefChanged();
    partial void OnTotalSuppCodeChanging(System.Nullable<int> value);
    partial void OnTotalSuppCodeChanged();
    partial void OnTotalItemCodeChanging(System.Nullable<int> value);
    partial void OnTotalItemCodeChanged();
    partial void OnTotalColorCodeChanging(System.Nullable<int> value);
    partial void OnTotalColorCodeChanged();
    partial void OnTotalProjectChanging(System.Nullable<int> value);
    partial void OnTotalProjectChanged();
    partial void OnTotalClaimRejectedQtyChanging(System.Nullable<int> value);
    partial void OnTotalClaimRejectedQtyChanged();
    partial void OnTotalOffQtyChanging(System.Nullable<int> value);
    partial void OnTotalOffQtyChanged();
    partial void OnOverallClaimQtyChanging(System.Nullable<int> value);
    partial void OnOverallClaimQtyChanged();
    partial void OnCasingTotalPullQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalPullQtyChanged();
    partial void OnCasingPullCaseNoChanging(string value);
    partial void OnCasingPullCaseNoChanged();
    partial void OnCasingTotalDefectQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalDefectQtyChanged();
    partial void OnCasingRejectQtyChanging(System.Nullable<int> value);
    partial void OnCasingRejectQtyChanged();
    partial void OnCasingPackListQtyChanging(System.Nullable<int> value);
    partial void OnCasingPackListQtyChanged();
    partial void OnCasingLabelQtyChanging(System.Nullable<int> value);
    partial void OnCasingLabelQtyChanged();
    partial void OnCasingDiffQtyChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyChanged();
    partial void OnCasingDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyByLotChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart2ResultChanging(string value);
    partial void OnPart2ResultChanged();
    partial void OnPart2ResultByLotChanging(string value);
    partial void OnPart2ResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnColorShadeResultChanging(string value);
    partial void OnColorShadeResultChanged();
    partial void OnAuditCaseQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditCaseQtyByLotChanged();
    partial void OnCountQtyChanging(System.Nullable<int> value);
    partial void OnCountQtyChanged();
    partial void OnCountDiffQtyChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyChanged();
    partial void OnCountDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyByLotChanged();
    partial void OnCountResultChanging(string value);
    partial void OnCountResultChanged();
    partial void OnPart1ResultChanging(string value);
    partial void OnPart1ResultChanged();
    partial void OnPart1ResultByLotChanging(string value);
    partial void OnPart1ResultByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnProWeightQtyChanging(System.Nullable<decimal> value);
    partial void OnProWeightQtyChanged();
    partial void OnPullBoxWeightChanging(System.Nullable<decimal> value);
    partial void OnPullBoxWeightChanged();
    partial void OnSampleQuantumWeightChanging(System.Nullable<decimal> value);
    partial void OnSampleQuantumWeightChanged();
    partial void OnLengthDiffChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffChanged();
    partial void OnLengthPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthPercentByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimChanged();
    partial void OnPart4ResultByLotChanging(string value);
    partial void OnPart4ResultByLotChanged();
    partial void OnPart4ClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4ClaimByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnWeightMinFromMIDcChanging(System.Nullable<decimal> value);
    partial void OnWeightMinFromMIDcChanged();
    partial void OnWeightMaxFromMIDcChanging(System.Nullable<decimal> value);
    partial void OnWeightMaxFromMIDcChanged();
    partial void OnWeightRangeChanging(string value);
    partial void OnWeightRangeChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    #endregion
		
		public sAccessoryHeader()
		{
			this._sAccessoryDefects = new EntitySet<sAccessoryDefect>(new Action<sAccessoryDefect>(this.attach_sAccessoryDefects), new Action<sAccessoryDefect>(this.detach_sAccessoryDefects));
			this._sAccessoryCasingDefects = new EntitySet<sAccessoryCasingDefect>(new Action<sAccessoryCasingDefect>(this.attach_sAccessoryCasingDefects), new Action<sAccessoryCasingDefect>(this.detach_sAccessoryCasingDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(5)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PONO", DbType="VarChar(20)")]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_HDONO", DbType="VarChar(20)")]
		public string HDONO
		{
			get
			{
				return this._HDONO;
			}
			set
			{
				if ((this._HDONO != value))
				{
					this.OnHDONOChanging(value);
					this.SendPropertyChanging();
					this._HDONO = value;
					this.SendPropertyChanged("HDONO");
					this.OnHDONOChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQty", DbType="Int")]
		public System.Nullable<int> TotalBoxQty
		{
			get
			{
				return this._TotalBoxQty;
			}
			set
			{
				if ((this._TotalBoxQty != value))
				{
					this.OnTotalBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQty = value;
					this.SendPropertyChanged("TotalBoxQty");
					this.OnTotalBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullIndQtyByLot", DbType="Int")]
		public System.Nullable<int> PullIndQtyByLot
		{
			get
			{
				return this._PullIndQtyByLot;
			}
			set
			{
				if ((this._PullIndQtyByLot != value))
				{
					this.OnPullIndQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PullIndQtyByLot = value;
					this.SendPropertyChanged("PullIndQtyByLot");
					this.OnPullIndQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSample", DbType="Int")]
		public System.Nullable<int> TotalAuditSample
		{
			get
			{
				return this._TotalAuditSample;
			}
			set
			{
				if ((this._TotalAuditSample != value))
				{
					this.OnTotalAuditSampleChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSample = value;
					this.SendPropertyChanged("TotalAuditSample");
					this.OnTotalAuditSampleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStockInQty", DbType="Int")]
		public System.Nullable<int> TotalStockInQty
		{
			get
			{
				return this._TotalStockInQty;
			}
			set
			{
				if ((this._TotalStockInQty != value))
				{
					this.OnTotalStockInQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalStockInQty = value;
					this.SendPropertyChanged("TotalStockInQty");
					this.OnTotalStockInQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQty", DbType="Int")]
		public System.Nullable<int> AuditBoxQty
		{
			get
			{
				return this._AuditBoxQty;
			}
			set
			{
				if ((this._AuditBoxQty != value))
				{
					this.OnAuditBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQty = value;
					this.SendPropertyChanged("AuditBoxQty");
					this.OnAuditBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(50)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditQty", DbType="VarChar(50)")]
		public string AuditQty
		{
			get
			{
				return this._AuditQty;
			}
			set
			{
				if ((this._AuditQty != value))
				{
					this.OnAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditQty = value;
					this.SendPropertyChanged("AuditQty");
					this.OnAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCount", DbType="Int")]
		public System.Nullable<int> DefectCount
		{
			get
			{
				return this._DefectCount;
			}
			set
			{
				if ((this._DefectCount != value))
				{
					this.OnDefectCountChanging(value);
					this.SendPropertyChanging();
					this._DefectCount = value;
					this.SendPropertyChanged("DefectCount");
					this.OnDefectCountChanged();
				}
			}
		}
		
		[Column(Storage="_RejectQty", DbType="Int")]
		public System.Nullable<int> RejectQty
		{
			get
			{
				return this._RejectQty;
			}
			set
			{
				if ((this._RejectQty != value))
				{
					this.OnRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._RejectQty = value;
					this.SendPropertyChanged("RejectQty");
					this.OnRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogNO", DbType="VarChar(20)")]
		public string ActionLogNO
		{
			get
			{
				return this._ActionLogNO;
			}
			set
			{
				if ((this._ActionLogNO != value))
				{
					this.OnActionLogNOChanging(value);
					this.SendPropertyChanging();
					this._ActionLogNO = value;
					this.SendPropertyChanged("ActionLogNO");
					this.OnActionLogNOChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(50)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(20)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShade", DbType="VarChar(20)")]
		public string ColorShade
		{
			get
			{
				return this._ColorShade;
			}
			set
			{
				if ((this._ColorShade != value))
				{
					this.OnColorShadeChanging(value);
					this.SendPropertyChanging();
					this._ColorShade = value;
					this.SendPropertyChanged("ColorShade");
					this.OnColorShadeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNO", DbType="VarChar(20)")]
		public string ProjectNO
		{
			get
			{
				return this._ProjectNO;
			}
			set
			{
				if ((this._ProjectNO != value))
				{
					this.OnProjectNOChanging(value);
					this.SendPropertyChanging();
					this._ProjectNO = value;
					this.SendPropertyChanged("ProjectNO");
					this.OnProjectNOChanged();
				}
			}
		}
		
		[Column(Storage="_ItemIDNO", DbType="VarChar(20)")]
		public string ItemIDNO
		{
			get
			{
				return this._ItemIDNO;
			}
			set
			{
				if ((this._ItemIDNO != value))
				{
					this.OnItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._ItemIDNO = value;
					this.SendPropertyChanged("ItemIDNO");
					this.OnItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_IndPackNO", DbType="VarChar(20)")]
		public string IndPackNO
		{
			get
			{
				return this._IndPackNO;
			}
			set
			{
				if ((this._IndPackNO != value))
				{
					this.OnIndPackNOChanging(value);
					this.SendPropertyChanging();
					this._IndPackNO = value;
					this.SendPropertyChanged("IndPackNO");
					this.OnIndPackNOChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKUCrossCup", DbType="VarChar(100)")]
		public string AuditSKUCrossCup
		{
			get
			{
				return this._AuditSKUCrossCup;
			}
			set
			{
				if ((this._AuditSKUCrossCup != value))
				{
					this.OnAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AuditSKUCrossCup = value;
					this.SendPropertyChanged("AuditSKUCrossCup");
					this.OnAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKUCrossCup", DbType="Int")]
		public System.Nullable<int> TotalAuditSKUCrossCup
		{
			get
			{
				return this._TotalAuditSKUCrossCup;
			}
			set
			{
				if ((this._TotalAuditSKUCrossCup != value))
				{
					this.OnTotalAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKUCrossCup = value;
					this.SendPropertyChanged("TotalAuditSKUCrossCup");
					this.OnTotalAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKU", DbType="VarChar(50)")]
		public string AuditSKU
		{
			get
			{
				return this._AuditSKU;
			}
			set
			{
				if ((this._AuditSKU != value))
				{
					this.OnAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._AuditSKU = value;
					this.SendPropertyChanged("AuditSKU");
					this.OnAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKU", DbType="Int")]
		public System.Nullable<int> TotalAuditSKU
		{
			get
			{
				return this._TotalAuditSKU;
			}
			set
			{
				if ((this._TotalAuditSKU != value))
				{
					this.OnTotalAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKU = value;
					this.SendPropertyChanged("TotalAuditSKU");
					this.OnTotalAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQty", DbType="Int")]
		public System.Nullable<int> PackListQty
		{
			get
			{
				return this._PackListQty;
			}
			set
			{
				if ((this._PackListQty != value))
				{
					this.OnPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._PackListQty = value;
					this.SendPropertyChanged("PackListQty");
					this.OnPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByLot", DbType="Int")]
		public System.Nullable<int> PackListQtyByLot
		{
			get
			{
				return this._PackListQtyByLot;
			}
			set
			{
				if ((this._PackListQtyByLot != value))
				{
					this.OnPackListQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByLot = value;
					this.SendPropertyChanged("PackListQtyByLot");
					this.OnPackListQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQty", DbType="Int")]
		public System.Nullable<int> AQLAuditQty
		{
			get
			{
				return this._AQLAuditQty;
			}
			set
			{
				if ((this._AQLAuditQty != value))
				{
					this.OnAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQty = value;
					this.SendPropertyChanged("AQLAuditQty");
					this.OnAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByLot", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByLot
		{
			get
			{
				return this._AQLAuditQtyByLot;
			}
			set
			{
				if ((this._AQLAuditQtyByLot != value))
				{
					this.OnAQLAuditQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByLot = value;
					this.SendPropertyChanged("AQLAuditQtyByLot");
					this.OnAQLAuditQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByLot", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByLot
		{
			get
			{
				return this._AQL25StandardQtyByLot;
			}
			set
			{
				if ((this._AQL25StandardQtyByLot != value))
				{
					this.OnAQL25StandardQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByLot = value;
					this.SendPropertyChanged("AQL25StandardQtyByLot");
					this.OnAQL25StandardQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByID", DbType="VarChar(20)")]
		public string DefectResultByID
		{
			get
			{
				return this._DefectResultByID;
			}
			set
			{
				if ((this._DefectResultByID != value))
				{
					this.OnDefectResultByIDChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByID = value;
					this.SendPropertyChanged("DefectResultByID");
					this.OnDefectResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByColor", DbType="VarChar(20)")]
		public string DefectResultByColor
		{
			get
			{
				return this._DefectResultByColor;
			}
			set
			{
				if ((this._DefectResultByColor != value))
				{
					this.OnDefectResultByColorChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByColor = value;
					this.SendPropertyChanged("DefectResultByColor");
					this.OnDefectResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMin
		{
			get
			{
				return this._AgreedUsableWidthMin;
			}
			set
			{
				if ((this._AgreedUsableWidthMin != value))
				{
					this.OnAgreedUsableWidthMinChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMin = value;
					this.SendPropertyChanged("AgreedUsableWidthMin");
					this.OnAgreedUsableWidthMinChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMax
		{
			get
			{
				return this._AgreedUsableWidthMax;
			}
			set
			{
				if ((this._AgreedUsableWidthMax != value))
				{
					this.OnAgreedUsableWidthMaxChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMax = value;
					this.SendPropertyChanged("AgreedUsableWidthMax");
					this.OnAgreedUsableWidthMaxChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthRange", DbType="VarChar(200)")]
		public string AgreedUsableWidthRange
		{
			get
			{
				return this._AgreedUsableWidthRange;
			}
			set
			{
				if ((this._AgreedUsableWidthRange != value))
				{
					this.OnAgreedUsableWidthRangeChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthRange = value;
					this.SendPropertyChanged("AgreedUsableWidthRange");
					this.OnAgreedUsableWidthRangeChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidth
		{
			get
			{
				return this._EdgeToEdgeWidth;
			}
			set
			{
				if ((this._EdgeToEdgeWidth != value))
				{
					this.OnEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidth = value;
					this.SendPropertyChanged("EdgeToEdgeWidth");
					this.OnEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthDiff", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidthDiff
		{
			get
			{
				return this._EdgeToEdgeWidthDiff;
			}
			set
			{
				if ((this._EdgeToEdgeWidthDiff != value))
				{
					this.OnEdgeToEdgeWidthDiffChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthDiff = value;
					this.SendPropertyChanged("EdgeToEdgeWidthDiff");
					this.OnEdgeToEdgeWidthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthResultByLot", DbType="VarChar(5)")]
		public string EdgeToEdgeWidthResultByLot
		{
			get
			{
				return this._EdgeToEdgeWidthResultByLot;
			}
			set
			{
				if ((this._EdgeToEdgeWidthResultByLot != value))
				{
					this.OnEdgeToEdgeWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthResultByLot = value;
					this.SendPropertyChanged("EdgeToEdgeWidthResultByLot");
					this.OnEdgeToEdgeWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByID", DbType="VarChar(20)")]
		public string WidthResultByID
		{
			get
			{
				return this._WidthResultByID;
			}
			set
			{
				if ((this._WidthResultByID != value))
				{
					this.OnWidthResultByIDChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByID = value;
					this.SendPropertyChanged("WidthResultByID");
					this.OnWidthResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByColor", DbType="VarChar(20)")]
		public string WidthResultByColor
		{
			get
			{
				return this._WidthResultByColor;
			}
			set
			{
				if ((this._WidthResultByColor != value))
				{
					this.OnWidthResultByColorChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByColor = value;
					this.SendPropertyChanged("WidthResultByColor");
					this.OnWidthResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemIDNO", DbType="Int")]
		public System.Nullable<int> TotalItemIDNO
		{
			get
			{
				return this._TotalItemIDNO;
			}
			set
			{
				if ((this._TotalItemIDNO != value))
				{
					this.OnTotalItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._TotalItemIDNO = value;
					this.SendPropertyChanged("TotalItemIDNO");
					this.OnTotalItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPONO", DbType="Int")]
		public System.Nullable<int> TotalPONO
		{
			get
			{
				return this._TotalPONO;
			}
			set
			{
				if ((this._TotalPONO != value))
				{
					this.OnTotalPONOChanging(value);
					this.SendPropertyChanging();
					this._TotalPONO = value;
					this.SendPropertyChanged("TotalPONO");
					this.OnTotalPONOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppRef", DbType="Int")]
		public System.Nullable<int> TotalSuppRef
		{
			get
			{
				return this._TotalSuppRef;
			}
			set
			{
				if ((this._TotalSuppRef != value))
				{
					this.OnTotalSuppRefChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppRef = value;
					this.SendPropertyChanged("TotalSuppRef");
					this.OnTotalSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppCode", DbType="Int")]
		public System.Nullable<int> TotalSuppCode
		{
			get
			{
				return this._TotalSuppCode;
			}
			set
			{
				if ((this._TotalSuppCode != value))
				{
					this.OnTotalSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppCode = value;
					this.SendPropertyChanged("TotalSuppCode");
					this.OnTotalSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemCode", DbType="Int")]
		public System.Nullable<int> TotalItemCode
		{
			get
			{
				return this._TotalItemCode;
			}
			set
			{
				if ((this._TotalItemCode != value))
				{
					this.OnTotalItemCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalItemCode = value;
					this.SendPropertyChanged("TotalItemCode");
					this.OnTotalItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalColorCode", DbType="Int")]
		public System.Nullable<int> TotalColorCode
		{
			get
			{
				return this._TotalColorCode;
			}
			set
			{
				if ((this._TotalColorCode != value))
				{
					this.OnTotalColorCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalColorCode = value;
					this.SendPropertyChanged("TotalColorCode");
					this.OnTotalColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalProject", DbType="Int")]
		public System.Nullable<int> TotalProject
		{
			get
			{
				return this._TotalProject;
			}
			set
			{
				if ((this._TotalProject != value))
				{
					this.OnTotalProjectChanging(value);
					this.SendPropertyChanging();
					this._TotalProject = value;
					this.SendPropertyChanged("TotalProject");
					this.OnTotalProjectChanged();
				}
			}
		}
		
		[Column(Storage="_TotalClaimRejectedQty", DbType="Int")]
		public System.Nullable<int> TotalClaimRejectedQty
		{
			get
			{
				return this._TotalClaimRejectedQty;
			}
			set
			{
				if ((this._TotalClaimRejectedQty != value))
				{
					this.OnTotalClaimRejectedQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalClaimRejectedQty = value;
					this.SendPropertyChanged("TotalClaimRejectedQty");
					this.OnTotalClaimRejectedQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalOffQty", DbType="Int")]
		public System.Nullable<int> TotalOffQty
		{
			get
			{
				return this._TotalOffQty;
			}
			set
			{
				if ((this._TotalOffQty != value))
				{
					this.OnTotalOffQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalOffQty = value;
					this.SendPropertyChanged("TotalOffQty");
					this.OnTotalOffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQty", DbType="Int")]
		public System.Nullable<int> OverallClaimQty
		{
			get
			{
				return this._OverallClaimQty;
			}
			set
			{
				if ((this._OverallClaimQty != value))
				{
					this.OnOverallClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQty = value;
					this.SendPropertyChanged("OverallClaimQty");
					this.OnOverallClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalPullQty", DbType="Int")]
		public System.Nullable<int> CasingTotalPullQty
		{
			get
			{
				return this._CasingTotalPullQty;
			}
			set
			{
				if ((this._CasingTotalPullQty != value))
				{
					this.OnCasingTotalPullQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalPullQty = value;
					this.SendPropertyChanged("CasingTotalPullQty");
					this.OnCasingTotalPullQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPullCaseNo", DbType="VarChar(50)")]
		public string CasingPullCaseNo
		{
			get
			{
				return this._CasingPullCaseNo;
			}
			set
			{
				if ((this._CasingPullCaseNo != value))
				{
					this.OnCasingPullCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CasingPullCaseNo = value;
					this.SendPropertyChanged("CasingPullCaseNo");
					this.OnCasingPullCaseNoChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalDefectQty", DbType="Int")]
		public System.Nullable<int> CasingTotalDefectQty
		{
			get
			{
				return this._CasingTotalDefectQty;
			}
			set
			{
				if ((this._CasingTotalDefectQty != value))
				{
					this.OnCasingTotalDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalDefectQty = value;
					this.SendPropertyChanged("CasingTotalDefectQty");
					this.OnCasingTotalDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingRejectQty", DbType="Int")]
		public System.Nullable<int> CasingRejectQty
		{
			get
			{
				return this._CasingRejectQty;
			}
			set
			{
				if ((this._CasingRejectQty != value))
				{
					this.OnCasingRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingRejectQty = value;
					this.SendPropertyChanged("CasingRejectQty");
					this.OnCasingRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPackListQty", DbType="Int")]
		public System.Nullable<int> CasingPackListQty
		{
			get
			{
				return this._CasingPackListQty;
			}
			set
			{
				if ((this._CasingPackListQty != value))
				{
					this.OnCasingPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingPackListQty = value;
					this.SendPropertyChanged("CasingPackListQty");
					this.OnCasingPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingLabelQty", DbType="Int")]
		public System.Nullable<int> CasingLabelQty
		{
			get
			{
				return this._CasingLabelQty;
			}
			set
			{
				if ((this._CasingLabelQty != value))
				{
					this.OnCasingLabelQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingLabelQty = value;
					this.SendPropertyChanged("CasingLabelQty");
					this.OnCasingLabelQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQty", DbType="Int")]
		public System.Nullable<int> CasingDiffQty
		{
			get
			{
				return this._CasingDiffQty;
			}
			set
			{
				if ((this._CasingDiffQty != value))
				{
					this.OnCasingDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQty = value;
					this.SendPropertyChanged("CasingDiffQty");
					this.OnCasingDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CasingDiffQtyByLot
		{
			get
			{
				return this._CasingDiffQtyByLot;
			}
			set
			{
				if ((this._CasingDiffQtyByLot != value))
				{
					this.OnCasingDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQtyByLot = value;
					this.SendPropertyChanged("CasingDiffQtyByLot");
					this.OnCasingDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Result", DbType="VarChar(5)")]
		public string Part2Result
		{
			get
			{
				return this._Part2Result;
			}
			set
			{
				if ((this._Part2Result != value))
				{
					this.OnPart2ResultChanging(value);
					this.SendPropertyChanging();
					this._Part2Result = value;
					this.SendPropertyChanged("Part2Result");
					this.OnPart2ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part2ResultByLot", DbType="VarChar(5)")]
		public string Part2ResultByLot
		{
			get
			{
				return this._Part2ResultByLot;
			}
			set
			{
				if ((this._Part2ResultByLot != value))
				{
					this.OnPart2ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2ResultByLot = value;
					this.SendPropertyChanged("Part2ResultByLot");
					this.OnPart2ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShadeResult", DbType="VarChar(5)")]
		public string ColorShadeResult
		{
			get
			{
				return this._ColorShadeResult;
			}
			set
			{
				if ((this._ColorShadeResult != value))
				{
					this.OnColorShadeResultChanging(value);
					this.SendPropertyChanging();
					this._ColorShadeResult = value;
					this.SendPropertyChanged("ColorShadeResult");
					this.OnColorShadeResultChanged();
				}
			}
		}
		
		[Column(Storage="_AuditCaseQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditCaseQtyByLot
		{
			get
			{
				return this._AuditCaseQtyByLot;
			}
			set
			{
				if ((this._AuditCaseQtyByLot != value))
				{
					this.OnAuditCaseQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditCaseQtyByLot = value;
					this.SendPropertyChanged("AuditCaseQtyByLot");
					this.OnAuditCaseQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountQty", DbType="Int")]
		public System.Nullable<int> CountQty
		{
			get
			{
				return this._CountQty;
			}
			set
			{
				if ((this._CountQty != value))
				{
					this.OnCountQtyChanging(value);
					this.SendPropertyChanging();
					this._CountQty = value;
					this.SendPropertyChanged("CountQty");
					this.OnCountQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQty", DbType="Int")]
		public System.Nullable<int> CountDiffQty
		{
			get
			{
				return this._CountDiffQty;
			}
			set
			{
				if ((this._CountDiffQty != value))
				{
					this.OnCountDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQty = value;
					this.SendPropertyChanged("CountDiffQty");
					this.OnCountDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CountDiffQtyByLot
		{
			get
			{
				return this._CountDiffQtyByLot;
			}
			set
			{
				if ((this._CountDiffQtyByLot != value))
				{
					this.OnCountDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQtyByLot = value;
					this.SendPropertyChanged("CountDiffQtyByLot");
					this.OnCountDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountResult", DbType="VarChar(5)")]
		public string CountResult
		{
			get
			{
				return this._CountResult;
			}
			set
			{
				if ((this._CountResult != value))
				{
					this.OnCountResultChanging(value);
					this.SendPropertyChanging();
					this._CountResult = value;
					this.SendPropertyChanged("CountResult");
					this.OnCountResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Result", DbType="VarChar(5)")]
		public string Part1Result
		{
			get
			{
				return this._Part1Result;
			}
			set
			{
				if ((this._Part1Result != value))
				{
					this.OnPart1ResultChanging(value);
					this.SendPropertyChanging();
					this._Part1Result = value;
					this.SendPropertyChanged("Part1Result");
					this.OnPart1ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1ResultByLot", DbType="VarChar(5)")]
		public string Part1ResultByLot
		{
			get
			{
				return this._Part1ResultByLot;
			}
			set
			{
				if ((this._Part1ResultByLot != value))
				{
					this.OnPart1ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1ResultByLot = value;
					this.SendPropertyChanged("Part1ResultByLot");
					this.OnPart1ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ProWeightQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ProWeightQty
		{
			get
			{
				return this._ProWeightQty;
			}
			set
			{
				if ((this._ProWeightQty != value))
				{
					this.OnProWeightQtyChanging(value);
					this.SendPropertyChanging();
					this._ProWeightQty = value;
					this.SendPropertyChanged("ProWeightQty");
					this.OnProWeightQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullBoxWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PullBoxWeight
		{
			get
			{
				return this._PullBoxWeight;
			}
			set
			{
				if ((this._PullBoxWeight != value))
				{
					this.OnPullBoxWeightChanging(value);
					this.SendPropertyChanging();
					this._PullBoxWeight = value;
					this.SendPropertyChanged("PullBoxWeight");
					this.OnPullBoxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SampleQuantumWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SampleQuantumWeight
		{
			get
			{
				return this._SampleQuantumWeight;
			}
			set
			{
				if ((this._SampleQuantumWeight != value))
				{
					this.OnSampleQuantumWeightChanging(value);
					this.SendPropertyChanging();
					this._SampleQuantumWeight = value;
					this.SendPropertyChanged("SampleQuantumWeight");
					this.OnSampleQuantumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiff", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiff
		{
			get
			{
				return this._LengthDiff;
			}
			set
			{
				if ((this._LengthDiff != value))
				{
					this.OnLengthDiffChanging(value);
					this.SendPropertyChanging();
					this._LengthDiff = value;
					this.SendPropertyChanged("LengthDiff");
					this.OnLengthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_LengthPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthPercentByLot
		{
			get
			{
				return this._LengthPercentByLot;
			}
			set
			{
				if ((this._LengthPercentByLot != value))
				{
					this.OnLengthPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthPercentByLot = value;
					this.SendPropertyChanged("LengthPercentByLot");
					this.OnLengthPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaim
		{
			get
			{
				return this._ShortLengthClaim;
			}
			set
			{
				if ((this._ShortLengthClaim != value))
				{
					this.OnShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaim = value;
					this.SendPropertyChanged("ShortLengthClaim");
					this.OnShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_Part4ResultByLot", DbType="VarChar(5)")]
		public string Part4ResultByLot
		{
			get
			{
				return this._Part4ResultByLot;
			}
			set
			{
				if ((this._Part4ResultByLot != value))
				{
					this.OnPart4ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4ResultByLot = value;
					this.SendPropertyChanged("Part4ResultByLot");
					this.OnPart4ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4ClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4ClaimByLot
		{
			get
			{
				return this._Part4ClaimByLot;
			}
			set
			{
				if ((this._Part4ClaimByLot != value))
				{
					this.OnPart4ClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4ClaimByLot = value;
					this.SendPropertyChanged("Part4ClaimByLot");
					this.OnPart4ClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_WeightMinFromMIDc", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> WeightMinFromMIDc
		{
			get
			{
				return this._WeightMinFromMIDc;
			}
			set
			{
				if ((this._WeightMinFromMIDc != value))
				{
					this.OnWeightMinFromMIDcChanging(value);
					this.SendPropertyChanging();
					this._WeightMinFromMIDc = value;
					this.SendPropertyChanged("WeightMinFromMIDc");
					this.OnWeightMinFromMIDcChanged();
				}
			}
		}
		
		[Column(Storage="_WeightMaxFromMIDc", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> WeightMaxFromMIDc
		{
			get
			{
				return this._WeightMaxFromMIDc;
			}
			set
			{
				if ((this._WeightMaxFromMIDc != value))
				{
					this.OnWeightMaxFromMIDcChanging(value);
					this.SendPropertyChanging();
					this._WeightMaxFromMIDc = value;
					this.SendPropertyChanged("WeightMaxFromMIDc");
					this.OnWeightMaxFromMIDcChanged();
				}
			}
		}
		
		[Column(Storage="_WeightRange", DbType="VarChar(200)")]
		public string WeightRange
		{
			get
			{
				return this._WeightRange;
			}
			set
			{
				if ((this._WeightRange != value))
				{
					this.OnWeightRangeChanging(value);
					this.SendPropertyChanging();
					this._WeightRange = value;
					this.SendPropertyChanged("WeightRange");
					this.OnWeightRangeChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Association(Name="sAccessoryHeader_sAccessoryDefect", Storage="_sAccessoryDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sAccessoryDefect> sAccessoryDefects
		{
			get
			{
				return this._sAccessoryDefects;
			}
			set
			{
				this._sAccessoryDefects.Assign(value);
			}
		}
		
		[Association(Name="sAccessoryHeader_sAccessoryCasingDefect", Storage="_sAccessoryCasingDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sAccessoryCasingDefect> sAccessoryCasingDefects
		{
			get
			{
				return this._sAccessoryCasingDefects;
			}
			set
			{
				this._sAccessoryCasingDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sAccessoryDefects(sAccessoryDefect entity)
		{
			this.SendPropertyChanging();
			entity.sAccessoryHeader = this;
		}
		
		private void detach_sAccessoryDefects(sAccessoryDefect entity)
		{
			this.SendPropertyChanging();
			entity.sAccessoryHeader = null;
		}
		
		private void attach_sAccessoryCasingDefects(sAccessoryCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.sAccessoryHeader = this;
		}
		
		private void detach_sAccessoryCasingDefects(sAccessoryCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.sAccessoryHeader = null;
		}
	}
	
	[Table(Name="dbo.sAccessoryDefect")]
	public partial class sAccessoryDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _Qty;
		
		private string _Flag;
		
		private EntityRef<sAccessoryHeader> _sAccessoryHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public sAccessoryDefect()
		{
			this._sAccessoryHeader = default(EntityRef<sAccessoryHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sAccessoryHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="sAccessoryHeader_sAccessoryDefect", Storage="_sAccessoryHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sAccessoryHeader sAccessoryHeader
		{
			get
			{
				return this._sAccessoryHeader.Entity;
			}
			set
			{
				sAccessoryHeader previousValue = this._sAccessoryHeader.Entity;
				if (((previousValue != value) 
							|| (this._sAccessoryHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sAccessoryHeader.Entity = null;
						previousValue.sAccessoryDefects.Remove(this);
					}
					this._sAccessoryHeader.Entity = value;
					if ((value != null))
					{
						value.sAccessoryDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sAccessoryHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sAccessoryCasingDefect")]
	public partial class sAccessoryCasingDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectQty;
		
		private EntityRef<sAccessoryHeader> _sAccessoryHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    #endregion
		
		public sAccessoryCasingDefect()
		{
			this._sAccessoryHeader = default(EntityRef<sAccessoryHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sAccessoryHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Association(Name="sAccessoryHeader_sAccessoryCasingDefect", Storage="_sAccessoryHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sAccessoryHeader sAccessoryHeader
		{
			get
			{
				return this._sAccessoryHeader.Entity;
			}
			set
			{
				sAccessoryHeader previousValue = this._sAccessoryHeader.Entity;
				if (((previousValue != value) 
							|| (this._sAccessoryHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sAccessoryHeader.Entity = null;
						previousValue.sAccessoryCasingDefects.Remove(this);
					}
					this._sAccessoryHeader.Entity = value;
					if ((value != null))
					{
						value.sAccessoryCasingDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sAccessoryHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBraCupHeader")]
	public partial class sBraCupHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _SuppCode;
		
		private string _PONO;
		
		private string _HDONO;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQty;
		
		private System.Nullable<int> _PullIndQtyByLot;
		
		private System.Nullable<int> _PackListQty;
		
		private System.Nullable<int> _PackListQtyByCrossCup;
		
		private System.Nullable<int> _PackListQtyByLot;
		
		private System.Nullable<int> _TotalAQLAuditQty;
		
		private System.Nullable<int> _TotalAuditSample;
		
		private System.Nullable<int> _TotalStockInQty;
		
		private System.Nullable<int> _AuditBoxQty;
		
		private string _AuditType;
		
		private string _AuditQty;
		
		private string _Remark;
		
		private string _AuditStage;
		
		private System.Nullable<int> _DefectQty;
		
		private System.Nullable<int> _DefectCount;
		
		private System.Nullable<int> _RejectQty;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _ActionLogNO;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _Auditor;
		
		private string _Whse;
		
		private string _SuppRef;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _ColorShade;
		
		private string _ProjectNO;
		
		private string _ItemIDNO;
		
		private string _IndPackNO;
		
		private string _AuditSKUCrossCup;
		
		private System.Nullable<int> _TotalAuditSKUCrossCup;
		
		private string _AuditSKU;
		
		private System.Nullable<int> _TotalAuditSKU;
		
		private System.Nullable<int> _AQLAuditQty;
		
		private System.Nullable<int> _AQLAuditQtyByCrossCup;
		
		private System.Nullable<int> _AQLAuditQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByCrossCup;
		
		private string _DefectResultByID;
		
		private string _DefectResultByColor;
		
		private System.Nullable<decimal> _AgreedUsableWidthMin;
		
		private System.Nullable<decimal> _AgreedUsableWidthMax;
		
		private string _AgreedUsableWidthRange;
		
		private System.Nullable<decimal> _EdgeToEdgeWidth;
		
		private System.Nullable<decimal> _EdgeToEdgeWidthDiff;
		
		private string _EdgeToEdgeWidthResultByLot;
		
		private string _WidthResultByID;
		
		private string _WidthResultByColor;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private string _OverallConfirmBy;
		
		private string _FailSolution;
		
		private System.Nullable<int> _TotalItemIDNO;
		
		private System.Nullable<int> _TotalPONO;
		
		private System.Nullable<int> _TotalSuppRef;
		
		private System.Nullable<int> _TotalSuppCode;
		
		private System.Nullable<int> _TotalItemCode;
		
		private System.Nullable<int> _TotalColorCode;
		
		private System.Nullable<int> _TotalProject;
		
		private System.Nullable<int> _TotalClaimRejectedQty;
		
		private System.Nullable<int> _TotalOffQty;
		
		private System.Nullable<int> _OverallClaimQty;
		
		private System.Nullable<int> _CasingTotalPullQty;
		
		private string _CasingPullCaseNo;
		
		private System.Nullable<int> _CasingTotalDefectQty;
		
		private System.Nullable<int> _CasingRejectQty;
		
		private System.Nullable<int> _CasingPackListQty;
		
		private System.Nullable<int> _CasingLabelQty;
		
		private System.Nullable<int> _CasingDiffQty;
		
		private System.Nullable<decimal> _CasingDiffPercent;
		
		private System.Nullable<int> _CasingDiffQtyByLot;
		
		private string _CasingResultByLot;
		
		private System.Nullable<decimal> _CasingShortLengthClaim;
		
		private string _Part1DefectResultByLot;
		
		private string _Part2Result;
		
		private string _Part2ResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _ColorShadeResult;
		
		private System.Nullable<int> _AuditCaseQtyByLot;
		
		private System.Nullable<int> _CountQty;
		
		private System.Nullable<int> _CountDiffQty;
		
		private System.Nullable<int> _CountDiffQtyByLot;
		
		private string _CountResult;
		
		private string _Part1Result;
		
		private string _Part1ResultByLot;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<int> _UnderPullSizeCupQtyByLot;
		
		private System.Nullable<int> _UnderPackingListSizeCupQtyByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private System.Nullable<bool> _NeedCheckQty;
		
		private string _ErrorCode;
		
		private string _ErrorNameEN;
		
		private System.Nullable<int> _ErrorQty;
		
		private EntitySet<sBraCupDefect> _sBraCupDefects;
		
		private EntitySet<sBraCupCasingDefect> _sBraCupCasingDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnHDONOChanging(string value);
    partial void OnHDONOChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyChanged();
    partial void OnPullIndQtyByLotChanging(System.Nullable<int> value);
    partial void OnPullIndQtyByLotChanged();
    partial void OnPackListQtyChanging(System.Nullable<int> value);
    partial void OnPackListQtyChanged();
    partial void OnPackListQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnPackListQtyByCrossCupChanged();
    partial void OnPackListQtyByLotChanging(System.Nullable<int> value);
    partial void OnPackListQtyByLotChanged();
    partial void OnTotalAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnTotalAQLAuditQtyChanged();
    partial void OnTotalAuditSampleChanging(System.Nullable<int> value);
    partial void OnTotalAuditSampleChanged();
    partial void OnTotalStockInQtyChanging(System.Nullable<int> value);
    partial void OnTotalStockInQtyChanged();
    partial void OnAuditBoxQtyChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnAuditQtyChanging(string value);
    partial void OnAuditQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    partial void OnDefectCountChanging(System.Nullable<int> value);
    partial void OnDefectCountChanged();
    partial void OnRejectQtyChanging(System.Nullable<int> value);
    partial void OnRejectQtyChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnActionLogNOChanging(string value);
    partial void OnActionLogNOChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnColorShadeChanging(string value);
    partial void OnColorShadeChanged();
    partial void OnProjectNOChanging(string value);
    partial void OnProjectNOChanged();
    partial void OnItemIDNOChanging(string value);
    partial void OnItemIDNOChanged();
    partial void OnIndPackNOChanging(string value);
    partial void OnIndPackNOChanged();
    partial void OnAuditSKUCrossCupChanging(string value);
    partial void OnAuditSKUCrossCupChanged();
    partial void OnTotalAuditSKUCrossCupChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUCrossCupChanged();
    partial void OnAuditSKUChanging(string value);
    partial void OnAuditSKUChanged();
    partial void OnTotalAuditSKUChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUChanged();
    partial void OnAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyChanged();
    partial void OnAQLAuditQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByCrossCupChanged();
    partial void OnAQLAuditQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByCrossCupChanged();
    partial void OnDefectResultByIDChanging(string value);
    partial void OnDefectResultByIDChanged();
    partial void OnDefectResultByColorChanging(string value);
    partial void OnDefectResultByColorChanged();
    partial void OnAgreedUsableWidthMinChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMinChanged();
    partial void OnAgreedUsableWidthMaxChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMaxChanged();
    partial void OnAgreedUsableWidthRangeChanging(string value);
    partial void OnAgreedUsableWidthRangeChanged();
    partial void OnEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthChanged();
    partial void OnEdgeToEdgeWidthDiffChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthDiffChanged();
    partial void OnEdgeToEdgeWidthResultByLotChanging(string value);
    partial void OnEdgeToEdgeWidthResultByLotChanged();
    partial void OnWidthResultByIDChanging(string value);
    partial void OnWidthResultByIDChanged();
    partial void OnWidthResultByColorChanging(string value);
    partial void OnWidthResultByColorChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnTotalItemIDNOChanging(System.Nullable<int> value);
    partial void OnTotalItemIDNOChanged();
    partial void OnTotalPONOChanging(System.Nullable<int> value);
    partial void OnTotalPONOChanged();
    partial void OnTotalSuppRefChanging(System.Nullable<int> value);
    partial void OnTotalSuppRefChanged();
    partial void OnTotalSuppCodeChanging(System.Nullable<int> value);
    partial void OnTotalSuppCodeChanged();
    partial void OnTotalItemCodeChanging(System.Nullable<int> value);
    partial void OnTotalItemCodeChanged();
    partial void OnTotalColorCodeChanging(System.Nullable<int> value);
    partial void OnTotalColorCodeChanged();
    partial void OnTotalProjectChanging(System.Nullable<int> value);
    partial void OnTotalProjectChanged();
    partial void OnTotalClaimRejectedQtyChanging(System.Nullable<int> value);
    partial void OnTotalClaimRejectedQtyChanged();
    partial void OnTotalOffQtyChanging(System.Nullable<int> value);
    partial void OnTotalOffQtyChanged();
    partial void OnOverallClaimQtyChanging(System.Nullable<int> value);
    partial void OnOverallClaimQtyChanged();
    partial void OnCasingTotalPullQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalPullQtyChanged();
    partial void OnCasingPullCaseNoChanging(string value);
    partial void OnCasingPullCaseNoChanged();
    partial void OnCasingTotalDefectQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalDefectQtyChanged();
    partial void OnCasingRejectQtyChanging(System.Nullable<int> value);
    partial void OnCasingRejectQtyChanged();
    partial void OnCasingPackListQtyChanging(System.Nullable<int> value);
    partial void OnCasingPackListQtyChanged();
    partial void OnCasingLabelQtyChanging(System.Nullable<int> value);
    partial void OnCasingLabelQtyChanged();
    partial void OnCasingDiffQtyChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyChanged();
    partial void OnCasingDiffPercentChanging(System.Nullable<decimal> value);
    partial void OnCasingDiffPercentChanged();
    partial void OnCasingDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyByLotChanged();
    partial void OnCasingResultByLotChanging(string value);
    partial void OnCasingResultByLotChanged();
    partial void OnCasingShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnCasingShortLengthClaimChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart2ResultChanging(string value);
    partial void OnPart2ResultChanged();
    partial void OnPart2ResultByLotChanging(string value);
    partial void OnPart2ResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnColorShadeResultChanging(string value);
    partial void OnColorShadeResultChanged();
    partial void OnAuditCaseQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditCaseQtyByLotChanged();
    partial void OnCountQtyChanging(System.Nullable<int> value);
    partial void OnCountQtyChanged();
    partial void OnCountDiffQtyChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyChanged();
    partial void OnCountDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyByLotChanged();
    partial void OnCountResultChanging(string value);
    partial void OnCountResultChanged();
    partial void OnPart1ResultChanging(string value);
    partial void OnPart1ResultChanged();
    partial void OnPart1ResultByLotChanging(string value);
    partial void OnPart1ResultByLotChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnUnderPullSizeCupQtyByLotChanging(System.Nullable<int> value);
    partial void OnUnderPullSizeCupQtyByLotChanged();
    partial void OnUnderPackingListSizeCupQtyByLotChanging(System.Nullable<int> value);
    partial void OnUnderPackingListSizeCupQtyByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnNeedCheckQtyChanging(System.Nullable<bool> value);
    partial void OnNeedCheckQtyChanged();
    partial void OnErrorCodeChanging(string value);
    partial void OnErrorCodeChanged();
    partial void OnErrorNameENChanging(string value);
    partial void OnErrorNameENChanged();
    partial void OnErrorQtyChanging(System.Nullable<int> value);
    partial void OnErrorQtyChanged();
    #endregion
		
		public sBraCupHeader()
		{
			this._sBraCupDefects = new EntitySet<sBraCupDefect>(new Action<sBraCupDefect>(this.attach_sBraCupDefects), new Action<sBraCupDefect>(this.detach_sBraCupDefects));
			this._sBraCupCasingDefects = new EntitySet<sBraCupCasingDefect>(new Action<sBraCupCasingDefect>(this.attach_sBraCupCasingDefects), new Action<sBraCupCasingDefect>(this.detach_sBraCupCasingDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(5)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PONO", DbType="VarChar(20)")]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_HDONO", DbType="VarChar(20)")]
		public string HDONO
		{
			get
			{
				return this._HDONO;
			}
			set
			{
				if ((this._HDONO != value))
				{
					this.OnHDONOChanging(value);
					this.SendPropertyChanging();
					this._HDONO = value;
					this.SendPropertyChanged("HDONO");
					this.OnHDONOChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQty", DbType="Int")]
		public System.Nullable<int> TotalBoxQty
		{
			get
			{
				return this._TotalBoxQty;
			}
			set
			{
				if ((this._TotalBoxQty != value))
				{
					this.OnTotalBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQty = value;
					this.SendPropertyChanged("TotalBoxQty");
					this.OnTotalBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullIndQtyByLot", DbType="Int")]
		public System.Nullable<int> PullIndQtyByLot
		{
			get
			{
				return this._PullIndQtyByLot;
			}
			set
			{
				if ((this._PullIndQtyByLot != value))
				{
					this.OnPullIndQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PullIndQtyByLot = value;
					this.SendPropertyChanged("PullIndQtyByLot");
					this.OnPullIndQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQty", DbType="Int")]
		public System.Nullable<int> PackListQty
		{
			get
			{
				return this._PackListQty;
			}
			set
			{
				if ((this._PackListQty != value))
				{
					this.OnPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._PackListQty = value;
					this.SendPropertyChanged("PackListQty");
					this.OnPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> PackListQtyByCrossCup
		{
			get
			{
				return this._PackListQtyByCrossCup;
			}
			set
			{
				if ((this._PackListQtyByCrossCup != value))
				{
					this.OnPackListQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByCrossCup = value;
					this.SendPropertyChanged("PackListQtyByCrossCup");
					this.OnPackListQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByLot", DbType="Int")]
		public System.Nullable<int> PackListQtyByLot
		{
			get
			{
				return this._PackListQtyByLot;
			}
			set
			{
				if ((this._PackListQtyByLot != value))
				{
					this.OnPackListQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByLot = value;
					this.SendPropertyChanged("PackListQtyByLot");
					this.OnPackListQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAQLAuditQty", DbType="Int")]
		public System.Nullable<int> TotalAQLAuditQty
		{
			get
			{
				return this._TotalAQLAuditQty;
			}
			set
			{
				if ((this._TotalAQLAuditQty != value))
				{
					this.OnTotalAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalAQLAuditQty = value;
					this.SendPropertyChanged("TotalAQLAuditQty");
					this.OnTotalAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSample", DbType="Int")]
		public System.Nullable<int> TotalAuditSample
		{
			get
			{
				return this._TotalAuditSample;
			}
			set
			{
				if ((this._TotalAuditSample != value))
				{
					this.OnTotalAuditSampleChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSample = value;
					this.SendPropertyChanged("TotalAuditSample");
					this.OnTotalAuditSampleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStockInQty", DbType="Int")]
		public System.Nullable<int> TotalStockInQty
		{
			get
			{
				return this._TotalStockInQty;
			}
			set
			{
				if ((this._TotalStockInQty != value))
				{
					this.OnTotalStockInQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalStockInQty = value;
					this.SendPropertyChanged("TotalStockInQty");
					this.OnTotalStockInQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQty", DbType="Int")]
		public System.Nullable<int> AuditBoxQty
		{
			get
			{
				return this._AuditBoxQty;
			}
			set
			{
				if ((this._AuditBoxQty != value))
				{
					this.OnAuditBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQty = value;
					this.SendPropertyChanged("AuditBoxQty");
					this.OnAuditBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(50)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditQty", DbType="VarChar(50)")]
		public string AuditQty
		{
			get
			{
				return this._AuditQty;
			}
			set
			{
				if ((this._AuditQty != value))
				{
					this.OnAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditQty = value;
					this.SendPropertyChanged("AuditQty");
					this.OnAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCount", DbType="Int")]
		public System.Nullable<int> DefectCount
		{
			get
			{
				return this._DefectCount;
			}
			set
			{
				if ((this._DefectCount != value))
				{
					this.OnDefectCountChanging(value);
					this.SendPropertyChanging();
					this._DefectCount = value;
					this.SendPropertyChanged("DefectCount");
					this.OnDefectCountChanged();
				}
			}
		}
		
		[Column(Storage="_RejectQty", DbType="Int")]
		public System.Nullable<int> RejectQty
		{
			get
			{
				return this._RejectQty;
			}
			set
			{
				if ((this._RejectQty != value))
				{
					this.OnRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._RejectQty = value;
					this.SendPropertyChanged("RejectQty");
					this.OnRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogNO", DbType="VarChar(20)")]
		public string ActionLogNO
		{
			get
			{
				return this._ActionLogNO;
			}
			set
			{
				if ((this._ActionLogNO != value))
				{
					this.OnActionLogNOChanging(value);
					this.SendPropertyChanging();
					this._ActionLogNO = value;
					this.SendPropertyChanged("ActionLogNO");
					this.OnActionLogNOChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(50)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(20)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShade", DbType="VarChar(20)")]
		public string ColorShade
		{
			get
			{
				return this._ColorShade;
			}
			set
			{
				if ((this._ColorShade != value))
				{
					this.OnColorShadeChanging(value);
					this.SendPropertyChanging();
					this._ColorShade = value;
					this.SendPropertyChanged("ColorShade");
					this.OnColorShadeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNO", DbType="VarChar(20)")]
		public string ProjectNO
		{
			get
			{
				return this._ProjectNO;
			}
			set
			{
				if ((this._ProjectNO != value))
				{
					this.OnProjectNOChanging(value);
					this.SendPropertyChanging();
					this._ProjectNO = value;
					this.SendPropertyChanged("ProjectNO");
					this.OnProjectNOChanged();
				}
			}
		}
		
		[Column(Storage="_ItemIDNO", DbType="VarChar(20)")]
		public string ItemIDNO
		{
			get
			{
				return this._ItemIDNO;
			}
			set
			{
				if ((this._ItemIDNO != value))
				{
					this.OnItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._ItemIDNO = value;
					this.SendPropertyChanged("ItemIDNO");
					this.OnItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_IndPackNO", DbType="VarChar(20)")]
		public string IndPackNO
		{
			get
			{
				return this._IndPackNO;
			}
			set
			{
				if ((this._IndPackNO != value))
				{
					this.OnIndPackNOChanging(value);
					this.SendPropertyChanging();
					this._IndPackNO = value;
					this.SendPropertyChanged("IndPackNO");
					this.OnIndPackNOChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKUCrossCup", DbType="VarChar(100)")]
		public string AuditSKUCrossCup
		{
			get
			{
				return this._AuditSKUCrossCup;
			}
			set
			{
				if ((this._AuditSKUCrossCup != value))
				{
					this.OnAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AuditSKUCrossCup = value;
					this.SendPropertyChanged("AuditSKUCrossCup");
					this.OnAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKUCrossCup", DbType="Int")]
		public System.Nullable<int> TotalAuditSKUCrossCup
		{
			get
			{
				return this._TotalAuditSKUCrossCup;
			}
			set
			{
				if ((this._TotalAuditSKUCrossCup != value))
				{
					this.OnTotalAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKUCrossCup = value;
					this.SendPropertyChanged("TotalAuditSKUCrossCup");
					this.OnTotalAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKU", DbType="VarChar(50)")]
		public string AuditSKU
		{
			get
			{
				return this._AuditSKU;
			}
			set
			{
				if ((this._AuditSKU != value))
				{
					this.OnAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._AuditSKU = value;
					this.SendPropertyChanged("AuditSKU");
					this.OnAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKU", DbType="Int")]
		public System.Nullable<int> TotalAuditSKU
		{
			get
			{
				return this._TotalAuditSKU;
			}
			set
			{
				if ((this._TotalAuditSKU != value))
				{
					this.OnTotalAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKU = value;
					this.SendPropertyChanged("TotalAuditSKU");
					this.OnTotalAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQty", DbType="Int")]
		public System.Nullable<int> AQLAuditQty
		{
			get
			{
				return this._AQLAuditQty;
			}
			set
			{
				if ((this._AQLAuditQty != value))
				{
					this.OnAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQty = value;
					this.SendPropertyChanged("AQLAuditQty");
					this.OnAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByCrossCup
		{
			get
			{
				return this._AQLAuditQtyByCrossCup;
			}
			set
			{
				if ((this._AQLAuditQtyByCrossCup != value))
				{
					this.OnAQLAuditQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByCrossCup = value;
					this.SendPropertyChanged("AQLAuditQtyByCrossCup");
					this.OnAQLAuditQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByLot", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByLot
		{
			get
			{
				return this._AQLAuditQtyByLot;
			}
			set
			{
				if ((this._AQLAuditQtyByLot != value))
				{
					this.OnAQLAuditQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByLot = value;
					this.SendPropertyChanged("AQLAuditQtyByLot");
					this.OnAQLAuditQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByCrossCup
		{
			get
			{
				return this._AQL25StandardQtyByCrossCup;
			}
			set
			{
				if ((this._AQL25StandardQtyByCrossCup != value))
				{
					this.OnAQL25StandardQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByCrossCup = value;
					this.SendPropertyChanged("AQL25StandardQtyByCrossCup");
					this.OnAQL25StandardQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByID", DbType="VarChar(20)")]
		public string DefectResultByID
		{
			get
			{
				return this._DefectResultByID;
			}
			set
			{
				if ((this._DefectResultByID != value))
				{
					this.OnDefectResultByIDChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByID = value;
					this.SendPropertyChanged("DefectResultByID");
					this.OnDefectResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByColor", DbType="VarChar(20)")]
		public string DefectResultByColor
		{
			get
			{
				return this._DefectResultByColor;
			}
			set
			{
				if ((this._DefectResultByColor != value))
				{
					this.OnDefectResultByColorChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByColor = value;
					this.SendPropertyChanged("DefectResultByColor");
					this.OnDefectResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMin
		{
			get
			{
				return this._AgreedUsableWidthMin;
			}
			set
			{
				if ((this._AgreedUsableWidthMin != value))
				{
					this.OnAgreedUsableWidthMinChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMin = value;
					this.SendPropertyChanged("AgreedUsableWidthMin");
					this.OnAgreedUsableWidthMinChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMax
		{
			get
			{
				return this._AgreedUsableWidthMax;
			}
			set
			{
				if ((this._AgreedUsableWidthMax != value))
				{
					this.OnAgreedUsableWidthMaxChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMax = value;
					this.SendPropertyChanged("AgreedUsableWidthMax");
					this.OnAgreedUsableWidthMaxChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthRange", DbType="VarChar(200)")]
		public string AgreedUsableWidthRange
		{
			get
			{
				return this._AgreedUsableWidthRange;
			}
			set
			{
				if ((this._AgreedUsableWidthRange != value))
				{
					this.OnAgreedUsableWidthRangeChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthRange = value;
					this.SendPropertyChanged("AgreedUsableWidthRange");
					this.OnAgreedUsableWidthRangeChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidth
		{
			get
			{
				return this._EdgeToEdgeWidth;
			}
			set
			{
				if ((this._EdgeToEdgeWidth != value))
				{
					this.OnEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidth = value;
					this.SendPropertyChanged("EdgeToEdgeWidth");
					this.OnEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthDiff", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidthDiff
		{
			get
			{
				return this._EdgeToEdgeWidthDiff;
			}
			set
			{
				if ((this._EdgeToEdgeWidthDiff != value))
				{
					this.OnEdgeToEdgeWidthDiffChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthDiff = value;
					this.SendPropertyChanged("EdgeToEdgeWidthDiff");
					this.OnEdgeToEdgeWidthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthResultByLot", DbType="VarChar(5)")]
		public string EdgeToEdgeWidthResultByLot
		{
			get
			{
				return this._EdgeToEdgeWidthResultByLot;
			}
			set
			{
				if ((this._EdgeToEdgeWidthResultByLot != value))
				{
					this.OnEdgeToEdgeWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthResultByLot = value;
					this.SendPropertyChanged("EdgeToEdgeWidthResultByLot");
					this.OnEdgeToEdgeWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByID", DbType="VarChar(20)")]
		public string WidthResultByID
		{
			get
			{
				return this._WidthResultByID;
			}
			set
			{
				if ((this._WidthResultByID != value))
				{
					this.OnWidthResultByIDChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByID = value;
					this.SendPropertyChanged("WidthResultByID");
					this.OnWidthResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByColor", DbType="VarChar(20)")]
		public string WidthResultByColor
		{
			get
			{
				return this._WidthResultByColor;
			}
			set
			{
				if ((this._WidthResultByColor != value))
				{
					this.OnWidthResultByColorChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByColor = value;
					this.SendPropertyChanged("WidthResultByColor");
					this.OnWidthResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemIDNO", DbType="Int")]
		public System.Nullable<int> TotalItemIDNO
		{
			get
			{
				return this._TotalItemIDNO;
			}
			set
			{
				if ((this._TotalItemIDNO != value))
				{
					this.OnTotalItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._TotalItemIDNO = value;
					this.SendPropertyChanged("TotalItemIDNO");
					this.OnTotalItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPONO", DbType="Int")]
		public System.Nullable<int> TotalPONO
		{
			get
			{
				return this._TotalPONO;
			}
			set
			{
				if ((this._TotalPONO != value))
				{
					this.OnTotalPONOChanging(value);
					this.SendPropertyChanging();
					this._TotalPONO = value;
					this.SendPropertyChanged("TotalPONO");
					this.OnTotalPONOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppRef", DbType="Int")]
		public System.Nullable<int> TotalSuppRef
		{
			get
			{
				return this._TotalSuppRef;
			}
			set
			{
				if ((this._TotalSuppRef != value))
				{
					this.OnTotalSuppRefChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppRef = value;
					this.SendPropertyChanged("TotalSuppRef");
					this.OnTotalSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppCode", DbType="Int")]
		public System.Nullable<int> TotalSuppCode
		{
			get
			{
				return this._TotalSuppCode;
			}
			set
			{
				if ((this._TotalSuppCode != value))
				{
					this.OnTotalSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppCode = value;
					this.SendPropertyChanged("TotalSuppCode");
					this.OnTotalSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemCode", DbType="Int")]
		public System.Nullable<int> TotalItemCode
		{
			get
			{
				return this._TotalItemCode;
			}
			set
			{
				if ((this._TotalItemCode != value))
				{
					this.OnTotalItemCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalItemCode = value;
					this.SendPropertyChanged("TotalItemCode");
					this.OnTotalItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalColorCode", DbType="Int")]
		public System.Nullable<int> TotalColorCode
		{
			get
			{
				return this._TotalColorCode;
			}
			set
			{
				if ((this._TotalColorCode != value))
				{
					this.OnTotalColorCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalColorCode = value;
					this.SendPropertyChanged("TotalColorCode");
					this.OnTotalColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalProject", DbType="Int")]
		public System.Nullable<int> TotalProject
		{
			get
			{
				return this._TotalProject;
			}
			set
			{
				if ((this._TotalProject != value))
				{
					this.OnTotalProjectChanging(value);
					this.SendPropertyChanging();
					this._TotalProject = value;
					this.SendPropertyChanged("TotalProject");
					this.OnTotalProjectChanged();
				}
			}
		}
		
		[Column(Storage="_TotalClaimRejectedQty", DbType="Int")]
		public System.Nullable<int> TotalClaimRejectedQty
		{
			get
			{
				return this._TotalClaimRejectedQty;
			}
			set
			{
				if ((this._TotalClaimRejectedQty != value))
				{
					this.OnTotalClaimRejectedQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalClaimRejectedQty = value;
					this.SendPropertyChanged("TotalClaimRejectedQty");
					this.OnTotalClaimRejectedQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalOffQty", DbType="Int")]
		public System.Nullable<int> TotalOffQty
		{
			get
			{
				return this._TotalOffQty;
			}
			set
			{
				if ((this._TotalOffQty != value))
				{
					this.OnTotalOffQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalOffQty = value;
					this.SendPropertyChanged("TotalOffQty");
					this.OnTotalOffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQty", DbType="Int")]
		public System.Nullable<int> OverallClaimQty
		{
			get
			{
				return this._OverallClaimQty;
			}
			set
			{
				if ((this._OverallClaimQty != value))
				{
					this.OnOverallClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQty = value;
					this.SendPropertyChanged("OverallClaimQty");
					this.OnOverallClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalPullQty", DbType="Int")]
		public System.Nullable<int> CasingTotalPullQty
		{
			get
			{
				return this._CasingTotalPullQty;
			}
			set
			{
				if ((this._CasingTotalPullQty != value))
				{
					this.OnCasingTotalPullQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalPullQty = value;
					this.SendPropertyChanged("CasingTotalPullQty");
					this.OnCasingTotalPullQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPullCaseNo", DbType="VarChar(50)")]
		public string CasingPullCaseNo
		{
			get
			{
				return this._CasingPullCaseNo;
			}
			set
			{
				if ((this._CasingPullCaseNo != value))
				{
					this.OnCasingPullCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CasingPullCaseNo = value;
					this.SendPropertyChanged("CasingPullCaseNo");
					this.OnCasingPullCaseNoChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalDefectQty", DbType="Int")]
		public System.Nullable<int> CasingTotalDefectQty
		{
			get
			{
				return this._CasingTotalDefectQty;
			}
			set
			{
				if ((this._CasingTotalDefectQty != value))
				{
					this.OnCasingTotalDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalDefectQty = value;
					this.SendPropertyChanged("CasingTotalDefectQty");
					this.OnCasingTotalDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingRejectQty", DbType="Int")]
		public System.Nullable<int> CasingRejectQty
		{
			get
			{
				return this._CasingRejectQty;
			}
			set
			{
				if ((this._CasingRejectQty != value))
				{
					this.OnCasingRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingRejectQty = value;
					this.SendPropertyChanged("CasingRejectQty");
					this.OnCasingRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPackListQty", DbType="Int")]
		public System.Nullable<int> CasingPackListQty
		{
			get
			{
				return this._CasingPackListQty;
			}
			set
			{
				if ((this._CasingPackListQty != value))
				{
					this.OnCasingPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingPackListQty = value;
					this.SendPropertyChanged("CasingPackListQty");
					this.OnCasingPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingLabelQty", DbType="Int")]
		public System.Nullable<int> CasingLabelQty
		{
			get
			{
				return this._CasingLabelQty;
			}
			set
			{
				if ((this._CasingLabelQty != value))
				{
					this.OnCasingLabelQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingLabelQty = value;
					this.SendPropertyChanged("CasingLabelQty");
					this.OnCasingLabelQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQty", DbType="Int")]
		public System.Nullable<int> CasingDiffQty
		{
			get
			{
				return this._CasingDiffQty;
			}
			set
			{
				if ((this._CasingDiffQty != value))
				{
					this.OnCasingDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQty = value;
					this.SendPropertyChanged("CasingDiffQty");
					this.OnCasingDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CasingDiffPercent
		{
			get
			{
				return this._CasingDiffPercent;
			}
			set
			{
				if ((this._CasingDiffPercent != value))
				{
					this.OnCasingDiffPercentChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffPercent = value;
					this.SendPropertyChanged("CasingDiffPercent");
					this.OnCasingDiffPercentChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CasingDiffQtyByLot
		{
			get
			{
				return this._CasingDiffQtyByLot;
			}
			set
			{
				if ((this._CasingDiffQtyByLot != value))
				{
					this.OnCasingDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQtyByLot = value;
					this.SendPropertyChanged("CasingDiffQtyByLot");
					this.OnCasingDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CasingResultByLot", DbType="VarChar(5)")]
		public string CasingResultByLot
		{
			get
			{
				return this._CasingResultByLot;
			}
			set
			{
				if ((this._CasingResultByLot != value))
				{
					this.OnCasingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingResultByLot = value;
					this.SendPropertyChanged("CasingResultByLot");
					this.OnCasingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CasingShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CasingShortLengthClaim
		{
			get
			{
				return this._CasingShortLengthClaim;
			}
			set
			{
				if ((this._CasingShortLengthClaim != value))
				{
					this.OnCasingShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._CasingShortLengthClaim = value;
					this.SendPropertyChanged("CasingShortLengthClaim");
					this.OnCasingShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Result", DbType="VarChar(5)")]
		public string Part2Result
		{
			get
			{
				return this._Part2Result;
			}
			set
			{
				if ((this._Part2Result != value))
				{
					this.OnPart2ResultChanging(value);
					this.SendPropertyChanging();
					this._Part2Result = value;
					this.SendPropertyChanged("Part2Result");
					this.OnPart2ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part2ResultByLot", DbType="VarChar(5)")]
		public string Part2ResultByLot
		{
			get
			{
				return this._Part2ResultByLot;
			}
			set
			{
				if ((this._Part2ResultByLot != value))
				{
					this.OnPart2ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2ResultByLot = value;
					this.SendPropertyChanged("Part2ResultByLot");
					this.OnPart2ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShadeResult", DbType="VarChar(5)")]
		public string ColorShadeResult
		{
			get
			{
				return this._ColorShadeResult;
			}
			set
			{
				if ((this._ColorShadeResult != value))
				{
					this.OnColorShadeResultChanging(value);
					this.SendPropertyChanging();
					this._ColorShadeResult = value;
					this.SendPropertyChanged("ColorShadeResult");
					this.OnColorShadeResultChanged();
				}
			}
		}
		
		[Column(Storage="_AuditCaseQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditCaseQtyByLot
		{
			get
			{
				return this._AuditCaseQtyByLot;
			}
			set
			{
				if ((this._AuditCaseQtyByLot != value))
				{
					this.OnAuditCaseQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditCaseQtyByLot = value;
					this.SendPropertyChanged("AuditCaseQtyByLot");
					this.OnAuditCaseQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountQty", DbType="Int")]
		public System.Nullable<int> CountQty
		{
			get
			{
				return this._CountQty;
			}
			set
			{
				if ((this._CountQty != value))
				{
					this.OnCountQtyChanging(value);
					this.SendPropertyChanging();
					this._CountQty = value;
					this.SendPropertyChanged("CountQty");
					this.OnCountQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQty", DbType="Int")]
		public System.Nullable<int> CountDiffQty
		{
			get
			{
				return this._CountDiffQty;
			}
			set
			{
				if ((this._CountDiffQty != value))
				{
					this.OnCountDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQty = value;
					this.SendPropertyChanged("CountDiffQty");
					this.OnCountDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CountDiffQtyByLot
		{
			get
			{
				return this._CountDiffQtyByLot;
			}
			set
			{
				if ((this._CountDiffQtyByLot != value))
				{
					this.OnCountDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQtyByLot = value;
					this.SendPropertyChanged("CountDiffQtyByLot");
					this.OnCountDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountResult", DbType="VarChar(5)")]
		public string CountResult
		{
			get
			{
				return this._CountResult;
			}
			set
			{
				if ((this._CountResult != value))
				{
					this.OnCountResultChanging(value);
					this.SendPropertyChanging();
					this._CountResult = value;
					this.SendPropertyChanged("CountResult");
					this.OnCountResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Result", DbType="VarChar(5)")]
		public string Part1Result
		{
			get
			{
				return this._Part1Result;
			}
			set
			{
				if ((this._Part1Result != value))
				{
					this.OnPart1ResultChanging(value);
					this.SendPropertyChanging();
					this._Part1Result = value;
					this.SendPropertyChanged("Part1Result");
					this.OnPart1ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1ResultByLot", DbType="VarChar(5)")]
		public string Part1ResultByLot
		{
			get
			{
				return this._Part1ResultByLot;
			}
			set
			{
				if ((this._Part1ResultByLot != value))
				{
					this.OnPart1ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1ResultByLot = value;
					this.SendPropertyChanged("Part1ResultByLot");
					this.OnPart1ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_UnderPullSizeCupQtyByLot", DbType="Int")]
		public System.Nullable<int> UnderPullSizeCupQtyByLot
		{
			get
			{
				return this._UnderPullSizeCupQtyByLot;
			}
			set
			{
				if ((this._UnderPullSizeCupQtyByLot != value))
				{
					this.OnUnderPullSizeCupQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._UnderPullSizeCupQtyByLot = value;
					this.SendPropertyChanged("UnderPullSizeCupQtyByLot");
					this.OnUnderPullSizeCupQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_UnderPackingListSizeCupQtyByLot", DbType="Int")]
		public System.Nullable<int> UnderPackingListSizeCupQtyByLot
		{
			get
			{
				return this._UnderPackingListSizeCupQtyByLot;
			}
			set
			{
				if ((this._UnderPackingListSizeCupQtyByLot != value))
				{
					this.OnUnderPackingListSizeCupQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._UnderPackingListSizeCupQtyByLot = value;
					this.SendPropertyChanged("UnderPackingListSizeCupQtyByLot");
					this.OnUnderPackingListSizeCupQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_NeedCheckQty", DbType="Bit")]
		public System.Nullable<bool> NeedCheckQty
		{
			get
			{
				return this._NeedCheckQty;
			}
			set
			{
				if ((this._NeedCheckQty != value))
				{
					this.OnNeedCheckQtyChanging(value);
					this.SendPropertyChanging();
					this._NeedCheckQty = value;
					this.SendPropertyChanged("NeedCheckQty");
					this.OnNeedCheckQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorCode", DbType="VarChar(20)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this.OnErrorCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorCode = value;
					this.SendPropertyChanged("ErrorCode");
					this.OnErrorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorNameEN", DbType="VarChar(300)")]
		public string ErrorNameEN
		{
			get
			{
				return this._ErrorNameEN;
			}
			set
			{
				if ((this._ErrorNameEN != value))
				{
					this.OnErrorNameENChanging(value);
					this.SendPropertyChanging();
					this._ErrorNameEN = value;
					this.SendPropertyChanged("ErrorNameEN");
					this.OnErrorNameENChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorQty", DbType="Int")]
		public System.Nullable<int> ErrorQty
		{
			get
			{
				return this._ErrorQty;
			}
			set
			{
				if ((this._ErrorQty != value))
				{
					this.OnErrorQtyChanging(value);
					this.SendPropertyChanging();
					this._ErrorQty = value;
					this.SendPropertyChanged("ErrorQty");
					this.OnErrorQtyChanged();
				}
			}
		}
		
		[Association(Name="sBraCupHeader_sBraCupDefect", Storage="_sBraCupDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBraCupDefect> sBraCupDefects
		{
			get
			{
				return this._sBraCupDefects;
			}
			set
			{
				this._sBraCupDefects.Assign(value);
			}
		}
		
		[Association(Name="sBraCupHeader_sBraCupCasingDefect", Storage="_sBraCupCasingDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<sBraCupCasingDefect> sBraCupCasingDefects
		{
			get
			{
				return this._sBraCupCasingDefects;
			}
			set
			{
				this._sBraCupCasingDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sBraCupDefects(sBraCupDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBraCupHeader = this;
		}
		
		private void detach_sBraCupDefects(sBraCupDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBraCupHeader = null;
		}
		
		private void attach_sBraCupCasingDefects(sBraCupCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBraCupHeader = this;
		}
		
		private void detach_sBraCupCasingDefects(sBraCupCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.sBraCupHeader = null;
		}
	}
	
	[Table(Name="dbo.sBraCupDefect")]
	public partial class sBraCupDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _Qty;
		
		private string _Flag;
		
		private EntityRef<sBraCupHeader> _sBraCupHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    #endregion
		
		public sBraCupDefect()
		{
			this._sBraCupHeader = default(EntityRef<sBraCupHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBraCupHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Association(Name="sBraCupHeader_sBraCupDefect", Storage="_sBraCupHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBraCupHeader sBraCupHeader
		{
			get
			{
				return this._sBraCupHeader.Entity;
			}
			set
			{
				sBraCupHeader previousValue = this._sBraCupHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBraCupHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBraCupHeader.Entity = null;
						previousValue.sBraCupDefects.Remove(this);
					}
					this._sBraCupHeader.Entity = value;
					if ((value != null))
					{
						value.sBraCupDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBraCupHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.sBraCupCasingDefect")]
	public partial class sBraCupCasingDefect : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<long> _HeaderOID;
		
		private string _DefectCode;
		
		private System.Nullable<int> _DefectQty;
		
		private EntityRef<sBraCupHeader> _sBraCupHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnHeaderOIDChanging(System.Nullable<long> value);
    partial void OnHeaderOIDChanged();
    partial void OnDefectCodeChanging(string value);
    partial void OnDefectCodeChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    #endregion
		
		public sBraCupCasingDefect()
		{
			this._sBraCupHeader = default(EntityRef<sBraCupHeader>);
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_HeaderOID", DbType="BigInt")]
		public System.Nullable<long> HeaderOID
		{
			get
			{
				return this._HeaderOID;
			}
			set
			{
				if ((this._HeaderOID != value))
				{
					if (this._sBraCupHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._HeaderOID = value;
					this.SendPropertyChanged("HeaderOID");
					this.OnHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCode", DbType="VarChar(10)")]
		public string DefectCode
		{
			get
			{
				return this._DefectCode;
			}
			set
			{
				if ((this._DefectCode != value))
				{
					this.OnDefectCodeChanging(value);
					this.SendPropertyChanging();
					this._DefectCode = value;
					this.SendPropertyChanged("DefectCode");
					this.OnDefectCodeChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Association(Name="sBraCupHeader_sBraCupCasingDefect", Storage="_sBraCupHeader", ThisKey="HeaderOID", OtherKey="OID", IsForeignKey=true, DeleteRule="CASCADE")]
		public sBraCupHeader sBraCupHeader
		{
			get
			{
				return this._sBraCupHeader.Entity;
			}
			set
			{
				sBraCupHeader previousValue = this._sBraCupHeader.Entity;
				if (((previousValue != value) 
							|| (this._sBraCupHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sBraCupHeader.Entity = null;
						previousValue.sBraCupCasingDefects.Remove(this);
					}
					this._sBraCupHeader.Entity = value;
					if ((value != null))
					{
						value.sBraCupCasingDefects.Add(this);
						this._HeaderOID = value.OID;
					}
					else
					{
						this._HeaderOID = default(Nullable<long>);
					}
					this.SendPropertyChanged("sBraCupHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.DebitNote")]
	public partial class DebitNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _DNNo;
		
		private System.Nullable<int> _AuditNo;
		
		private string _InvoiceNo;
		
		private System.Nullable<int> _AuditTeam;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private string _Creater;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private string _PaymentTerm;
		
		private string _Currency;
		
		private System.Nullable<decimal> _Price;
		
		private System.Nullable<decimal> _OverallClaim;
		
		private System.Nullable<System.DateTime> _SupplierCommentDate;
		
		private string _Remark;
		
		private System.Nullable<bool> _ProcessItem_Replenishment;
		
		private System.Nullable<bool> _ProcessItem_DebitNote;
		
		private System.Nullable<bool> _ProcessItem_SendReprocess;
		
		private System.Nullable<bool> _ProcessItem_Other;
		
		private string _SuppRef;
		
		private string _SupplierUnit;
		
		private System.Nullable<decimal> _UnitConvertRate;
		
		private string _SuppCode;
		
		private string _AuditNo1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnDNNoChanging(string value);
    partial void OnDNNoChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnAuditTeamChanging(System.Nullable<int> value);
    partial void OnAuditTeamChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnCreaterChanging(string value);
    partial void OnCreaterChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnPaymentTermChanging(string value);
    partial void OnPaymentTermChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnPriceChanging(System.Nullable<decimal> value);
    partial void OnPriceChanged();
    partial void OnOverallClaimChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimChanged();
    partial void OnSupplierCommentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSupplierCommentDateChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnProcessItem_ReplenishmentChanging(System.Nullable<bool> value);
    partial void OnProcessItem_ReplenishmentChanged();
    partial void OnProcessItem_DebitNoteChanging(System.Nullable<bool> value);
    partial void OnProcessItem_DebitNoteChanged();
    partial void OnProcessItem_SendReprocessChanging(System.Nullable<bool> value);
    partial void OnProcessItem_SendReprocessChanged();
    partial void OnProcessItem_OtherChanging(System.Nullable<bool> value);
    partial void OnProcessItem_OtherChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnSupplierUnitChanging(string value);
    partial void OnSupplierUnitChanged();
    partial void OnUnitConvertRateChanging(System.Nullable<decimal> value);
    partial void OnUnitConvertRateChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    #endregion
		
		public DebitNote()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DNNo", DbType="VarChar(20)")]
		public string DNNo
		{
			get
			{
				return this._DNNo;
			}
			set
			{
				if ((this._DNNo != value))
				{
					this.OnDNNoChanging(value);
					this.SendPropertyChanging();
					this._DNNo = value;
					this.SendPropertyChanged("DNNo");
					this.OnDNNoChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_AuditTeam", DbType="Int")]
		public System.Nullable<int> AuditTeam
		{
			get
			{
				return this._AuditTeam;
			}
			set
			{
				if ((this._AuditTeam != value))
				{
					this.OnAuditTeamChanging(value);
					this.SendPropertyChanging();
					this._AuditTeam = value;
					this.SendPropertyChanged("AuditTeam");
					this.OnAuditTeamChanged();
				}
			}
		}
		
		[Column(Storage="_IssueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Creater", DbType="VarChar(50)")]
		public string Creater
		{
			get
			{
				return this._Creater;
			}
			set
			{
				if ((this._Creater != value))
				{
					this.OnCreaterChanging(value);
					this.SendPropertyChanging();
					this._Creater = value;
					this.SendPropertyChanged("Creater");
					this.OnCreaterChanged();
				}
			}
		}
		
		[Column(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentTerm", DbType="VarChar(100)")]
		public string PaymentTerm
		{
			get
			{
				return this._PaymentTerm;
			}
			set
			{
				if ((this._PaymentTerm != value))
				{
					this.OnPaymentTermChanging(value);
					this.SendPropertyChanging();
					this._PaymentTerm = value;
					this.SendPropertyChanged("PaymentTerm");
					this.OnPaymentTermChanged();
				}
			}
		}
		
		[Column(Storage="_Currency", DbType="VarChar(10)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="Decimal(16,9)")]
		public System.Nullable<decimal> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaim
		{
			get
			{
				return this._OverallClaim;
			}
			set
			{
				if ((this._OverallClaim != value))
				{
					this.OnOverallClaimChanging(value);
					this.SendPropertyChanging();
					this._OverallClaim = value;
					this.SendPropertyChanged("OverallClaim");
					this.OnOverallClaimChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierCommentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SupplierCommentDate
		{
			get
			{
				return this._SupplierCommentDate;
			}
			set
			{
				if ((this._SupplierCommentDate != value))
				{
					this.OnSupplierCommentDateChanging(value);
					this.SendPropertyChanging();
					this._SupplierCommentDate = value;
					this.SendPropertyChanged("SupplierCommentDate");
					this.OnSupplierCommentDateChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(MAX)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessItem_Replenishment", DbType="Bit")]
		public System.Nullable<bool> ProcessItem_Replenishment
		{
			get
			{
				return this._ProcessItem_Replenishment;
			}
			set
			{
				if ((this._ProcessItem_Replenishment != value))
				{
					this.OnProcessItem_ReplenishmentChanging(value);
					this.SendPropertyChanging();
					this._ProcessItem_Replenishment = value;
					this.SendPropertyChanged("ProcessItem_Replenishment");
					this.OnProcessItem_ReplenishmentChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessItem_DebitNote", DbType="Bit")]
		public System.Nullable<bool> ProcessItem_DebitNote
		{
			get
			{
				return this._ProcessItem_DebitNote;
			}
			set
			{
				if ((this._ProcessItem_DebitNote != value))
				{
					this.OnProcessItem_DebitNoteChanging(value);
					this.SendPropertyChanging();
					this._ProcessItem_DebitNote = value;
					this.SendPropertyChanged("ProcessItem_DebitNote");
					this.OnProcessItem_DebitNoteChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessItem_SendReprocess", DbType="Bit")]
		public System.Nullable<bool> ProcessItem_SendReprocess
		{
			get
			{
				return this._ProcessItem_SendReprocess;
			}
			set
			{
				if ((this._ProcessItem_SendReprocess != value))
				{
					this.OnProcessItem_SendReprocessChanging(value);
					this.SendPropertyChanging();
					this._ProcessItem_SendReprocess = value;
					this.SendPropertyChanged("ProcessItem_SendReprocess");
					this.OnProcessItem_SendReprocessChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessItem_Other", DbType="Bit")]
		public System.Nullable<bool> ProcessItem_Other
		{
			get
			{
				return this._ProcessItem_Other;
			}
			set
			{
				if ((this._ProcessItem_Other != value))
				{
					this.OnProcessItem_OtherChanging(value);
					this.SendPropertyChanging();
					this._ProcessItem_Other = value;
					this.SendPropertyChanged("ProcessItem_Other");
					this.OnProcessItem_OtherChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(100)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierUnit", DbType="VarChar(20)")]
		public string SupplierUnit
		{
			get
			{
				return this._SupplierUnit;
			}
			set
			{
				if ((this._SupplierUnit != value))
				{
					this.OnSupplierUnitChanging(value);
					this.SendPropertyChanging();
					this._SupplierUnit = value;
					this.SendPropertyChanged("SupplierUnit");
					this.OnSupplierUnitChanged();
				}
			}
		}
		
		[Column(Storage="_UnitConvertRate", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> UnitConvertRate
		{
			get
			{
				return this._UnitConvertRate;
			}
			set
			{
				if ((this._UnitConvertRate != value))
				{
					this.OnUnitConvertRateChanging(value);
					this.SendPropertyChanging();
					this._UnitConvertRate = value;
					this.SendPropertyChanged("UnitConvertRate");
					this.OnUnitConvertRateChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.S21QCResultAction")]
	public partial class S21QCResultAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private System.Nullable<int> _SeqNo;
		
		private string _S21QCResult;
		
		private string _S21QCAction;
		
		private string _Desc_EN;
		
		private string _Desc_CN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnSeqNoChanging(System.Nullable<int> value);
    partial void OnSeqNoChanged();
    partial void OnS21QCResultChanging(string value);
    partial void OnS21QCResultChanged();
    partial void OnS21QCActionChanging(string value);
    partial void OnS21QCActionChanged();
    partial void OnDesc_ENChanging(string value);
    partial void OnDesc_ENChanged();
    partial void OnDesc_CNChanging(string value);
    partial void OnDesc_CNChanged();
    #endregion
		
		public S21QCResultAction()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo", DbType="Int")]
		public System.Nullable<int> SeqNo
		{
			get
			{
				return this._SeqNo;
			}
			set
			{
				if ((this._SeqNo != value))
				{
					this.OnSeqNoChanging(value);
					this.SendPropertyChanging();
					this._SeqNo = value;
					this.SendPropertyChanged("SeqNo");
					this.OnSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_S21QCResult", DbType="VarChar(100)")]
		public string S21QCResult
		{
			get
			{
				return this._S21QCResult;
			}
			set
			{
				if ((this._S21QCResult != value))
				{
					this.OnS21QCResultChanging(value);
					this.SendPropertyChanging();
					this._S21QCResult = value;
					this.SendPropertyChanged("S21QCResult");
					this.OnS21QCResultChanged();
				}
			}
		}
		
		[Column(Storage="_S21QCAction", DbType="VarChar(100)")]
		public string S21QCAction
		{
			get
			{
				return this._S21QCAction;
			}
			set
			{
				if ((this._S21QCAction != value))
				{
					this.OnS21QCActionChanging(value);
					this.SendPropertyChanging();
					this._S21QCAction = value;
					this.SendPropertyChanged("S21QCAction");
					this.OnS21QCActionChanged();
				}
			}
		}
		
		[Column(Storage="_Desc_EN", DbType="VarChar(1000)")]
		public string Desc_EN
		{
			get
			{
				return this._Desc_EN;
			}
			set
			{
				if ((this._Desc_EN != value))
				{
					this.OnDesc_ENChanging(value);
					this.SendPropertyChanging();
					this._Desc_EN = value;
					this.SendPropertyChanged("Desc_EN");
					this.OnDesc_ENChanged();
				}
			}
		}
		
		[Column(Storage="_Desc_CN", DbType="VarChar(1000)")]
		public string Desc_CN
		{
			get
			{
				return this._Desc_CN;
			}
			set
			{
				if ((this._Desc_CN != value))
				{
					this.OnDesc_CNChanging(value);
					this.SendPropertyChanging();
					this._Desc_CN = value;
					this.SendPropertyChanged("Desc_CN");
					this.OnDesc_CNChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogDetail")]
	public partial class ActionLogDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private long _AlertLogHeaderOID;
		
		private string _ActionLogID;
		
		private string _ActionLogSeqNo;
		
		private System.Nullable<System.DateTime> _StartFollowDate;
		
		private System.Nullable<int> _FollowCount;
		
		private string _Sender;
		
		private string _FollowSummary;
		
		private System.Data.Linq.Binary _Attachment;
		
		private string _AttFileName;
		
		private string _EmailTo;
		
		private string _EmailCc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnAlertLogHeaderOIDChanging(long value);
    partial void OnAlertLogHeaderOIDChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnStartFollowDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartFollowDateChanged();
    partial void OnFollowCountChanging(System.Nullable<int> value);
    partial void OnFollowCountChanged();
    partial void OnSenderChanging(string value);
    partial void OnSenderChanged();
    partial void OnFollowSummaryChanging(string value);
    partial void OnFollowSummaryChanged();
    partial void OnAttachmentChanging(System.Data.Linq.Binary value);
    partial void OnAttachmentChanged();
    partial void OnAttFileNameChanging(string value);
    partial void OnAttFileNameChanged();
    partial void OnEmailToChanging(string value);
    partial void OnEmailToChanged();
    partial void OnEmailCcChanging(string value);
    partial void OnEmailCcChanged();
    #endregion
		
		public ActionLogDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_AlertLogHeaderOID", DbType="BigInt NOT NULL")]
		public long AlertLogHeaderOID
		{
			get
			{
				return this._AlertLogHeaderOID;
			}
			set
			{
				if ((this._AlertLogHeaderOID != value))
				{
					this.OnAlertLogHeaderOIDChanging(value);
					this.SendPropertyChanging();
					this._AlertLogHeaderOID = value;
					this.SendPropertyChanged("AlertLogHeaderOID");
					this.OnAlertLogHeaderOIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(100)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_StartFollowDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartFollowDate
		{
			get
			{
				return this._StartFollowDate;
			}
			set
			{
				if ((this._StartFollowDate != value))
				{
					this.OnStartFollowDateChanging(value);
					this.SendPropertyChanging();
					this._StartFollowDate = value;
					this.SendPropertyChanged("StartFollowDate");
					this.OnStartFollowDateChanged();
				}
			}
		}
		
		[Column(Storage="_FollowCount", DbType="Int")]
		public System.Nullable<int> FollowCount
		{
			get
			{
				return this._FollowCount;
			}
			set
			{
				if ((this._FollowCount != value))
				{
					this.OnFollowCountChanging(value);
					this.SendPropertyChanging();
					this._FollowCount = value;
					this.SendPropertyChanged("FollowCount");
					this.OnFollowCountChanged();
				}
			}
		}
		
		[Column(Storage="_Sender", DbType="NVarChar(100)")]
		public string Sender
		{
			get
			{
				return this._Sender;
			}
			set
			{
				if ((this._Sender != value))
				{
					this.OnSenderChanging(value);
					this.SendPropertyChanging();
					this._Sender = value;
					this.SendPropertyChanged("Sender");
					this.OnSenderChanged();
				}
			}
		}
		
		[Column(Storage="_FollowSummary", DbType="NVarChar(MAX)")]
		public string FollowSummary
		{
			get
			{
				return this._FollowSummary;
			}
			set
			{
				if ((this._FollowSummary != value))
				{
					this.OnFollowSummaryChanging(value);
					this.SendPropertyChanging();
					this._FollowSummary = value;
					this.SendPropertyChanged("FollowSummary");
					this.OnFollowSummaryChanged();
				}
			}
		}
		
		[Column(Storage="_Attachment", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Attachment
		{
			get
			{
				return this._Attachment;
			}
			set
			{
				if ((this._Attachment != value))
				{
					this.OnAttachmentChanging(value);
					this.SendPropertyChanging();
					this._Attachment = value;
					this.SendPropertyChanged("Attachment");
					this.OnAttachmentChanged();
				}
			}
		}
		
		[Column(Storage="_AttFileName", DbType="NVarChar(200)")]
		public string AttFileName
		{
			get
			{
				return this._AttFileName;
			}
			set
			{
				if ((this._AttFileName != value))
				{
					this.OnAttFileNameChanging(value);
					this.SendPropertyChanging();
					this._AttFileName = value;
					this.SendPropertyChanged("AttFileName");
					this.OnAttFileNameChanged();
				}
			}
		}
		
		[Column(Storage="_EmailTo", DbType="VarChar(2000)")]
		public string EmailTo
		{
			get
			{
				return this._EmailTo;
			}
			set
			{
				if ((this._EmailTo != value))
				{
					this.OnEmailToChanging(value);
					this.SendPropertyChanging();
					this._EmailTo = value;
					this.SendPropertyChanged("EmailTo");
					this.OnEmailToChanged();
				}
			}
		}
		
		[Column(Storage="_EmailCc", DbType="VarChar(2000)")]
		public string EmailCc
		{
			get
			{
				return this._EmailCc;
			}
			set
			{
				if ((this._EmailCc != value))
				{
					this.OnEmailCcChanging(value);
					this.SendPropertyChanging();
					this._EmailCc = value;
					this.SendPropertyChanged("EmailCc");
					this.OnEmailCcChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fabric_Insp_Header")]
	public partial class Fabric_Insp_Header : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private int _System_Install_No;
		
		private string _Item_No;
		
		private string _Item_Desc;
		
		private string _PO;
		
		private string _HdoNo;
		
		private string _ProjectNo;
		
		private string _IQC_Reference;
		
		private string _Lot_Id;
		
		private System.Nullable<decimal> _Actual_Length;
		
		private System.Nullable<decimal> _Actual_Weight;
		
		private System.Nullable<decimal> _Supplier_Width;
		
		private System.Nullable<decimal> _Insp_Length;
		
		private System.Nullable<decimal> _GM_SQM;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Supplier_Code;
		
		private string _Supplich_Batch;
		
		private string _Roll_No;
		
		private System.Nullable<int> _Total_Points;
		
		private System.Nullable<decimal> _Points_Hundred_SQM;
		
		private System.Nullable<decimal> _Deductive_Qty;
		
		private System.Nullable<decimal> _Wastage;
		
		private string _Insp_Result;
		
		private string _Party_Insp_Result;
		
		private string _Spread_Insp_Result;
		
		private string _Mould_Trial_Result;
		
		private string _Color_Group_Status;
		
		private string _Spread_Defect_Exist;
		
		private string _Insp_Confirm;
		
		private System.Nullable<decimal> _PH_Sample;
		
		private System.Nullable<decimal> _Panel_Size1;
		
		private System.Nullable<decimal> _Panel_Size2;
		
		private System.Nullable<decimal> _Special_Marker;
		
		private string _Spread_Remark;
		
		private string _Mould_Trial_Remark;
		
		private string _Stock_In_Date;
		
		private System.Nullable<System.DateTime> _Stock_In_Date_DateTime;
		
		private System.Nullable<int> _Turn_Size;
		
		private string _Supplier_Length_Unit;
		
		private string _Supplier_Width_Unit;
		
		private System.Nullable<decimal> _SideToSideH_Width;
		
		private string _Inspector;
		
		private string _Create_User;
		
		private System.Nullable<System.DateTime> _Create_Date;
		
		private string _Change_User;
		
		private System.Nullable<System.DateTime> _Change_Date;
		
		private string _Use_Status;
		
		private string _LightStatus;
		
		private string _InvoiceNo;
		
		private string _Supplier_Item_No;
		
		private string _Insp_Result_Reason;
		
		private string _Phy_Properties_Result;
		
		private string _SupplierItemColor;
		
		private string _WeftYarnClass;
		
		private System.Nullable<decimal> _WeftYarnPercentage;
		
		private string _WeftYarnStatus;
		
		private string _WeftYarnSolution1;
		
		private string _WeftYarnSolution2;
		
		private System.Nullable<decimal> _WeftYarnWastage;
		
		private System.Nullable<decimal> _ElongationWarpResult;
		
		private System.Nullable<decimal> _ElongationWeftResult;
		
		private string _ElongationStatus;
		
		private string _ElongationSolution1;
		
		private string _ElongationSolution2;
		
		private string _WeftYarn;
		
		private string _Elongation;
		
		private string _MouldTrial;
		
		private string _MouldTrialSolution1;
		
		private string _MouldTrialSolution2;
		
		private System.Nullable<System.DateTime> _Inspection_Date;
		
		private System.Nullable<int> _RefNo;
		
		private string _Warehouse;
		
		private string _AgreedByCutting;
		
		private string _ColorMatching;
		
		private string _ColorMatchingResult;
		
		private System.Nullable<int> _ColorMatchingAction;
		
		private string _MouldTrialResult;
		
		private System.Nullable<int> _MouldTrialAction;
		
		private string _ElongationResult;
		
		private System.Nullable<int> _ElongationAction;
		
		private string _Lamination;
		
		private string _LaminationResult;
		
		private System.Nullable<int> _LaminationAction;
		
		private string _Bonding;
		
		private string _BondingResult;
		
		private System.Nullable<int> _BondingAction;
		
		private string _ThicknessResult;
		
		private string _LengthResult;
		
		private string _WidthResult;
		
		private System.Nullable<decimal> _StandardWidth;
		
		private System.Nullable<decimal> _StandardWeightGmSqm;
		
		private string _OverallRemark;
		
		private string _SplitFlag;
		
		private System.Nullable<decimal> _UsableWidthMinByLot;
		
		private System.Nullable<decimal> _DiffWidthPercent;
		
		private System.Nullable<int> _RollQty;
		
		private string _SampleSize;
		
		private System.Nullable<long> _ActionLogOID;
		
		private System.Nullable<decimal> _DiffLengthAveByLot;
		
		private System.Nullable<decimal> _TotalLengthByLot;
		
		private string _RegularDefectResult;
		
		private System.Nullable<decimal> _TotalActualLengthByLot;
		
		private System.Nullable<decimal> _PackageListlengthByBatch;
		
		private string _SuppItemRef;
		
		private string _ColorName;
		
		private System.Nullable<int> _RollQtyByBatch;
		
		private System.Nullable<int> _TotalScore1ByLot;
		
		private System.Nullable<int> _TotalScore2ByLot;
		
		private System.Nullable<decimal> _MeasLengthByLot;
		
		private System.Nullable<decimal> _POLength;
		
		private System.Nullable<decimal> _OverAllClaimLength;
		
		private System.Nullable<decimal> _StandardWeightGmSqmMax;
		
		private System.Nullable<decimal> _StandardWeightGmSqmMin;
		
		private string _StandardWeightGmSqmS;
		
		private System.Nullable<int> _Step1DefectTotalPoint;
		
		private System.Nullable<int> _Step1Pt100m2;
		
		private string _Step1DefectResult;
		
		private System.Nullable<decimal> _Step1MeasLength;
		
		private System.Nullable<decimal> _Step1MeasWidth;
		
		private System.Nullable<decimal> _Step1MeasSq;
		
		private System.Nullable<int> _Step1DefectScore1;
		
		private System.Nullable<int> _Step1DefectScore2;
		
		private System.Nullable<decimal> _Step1LossQty;
		
		private System.Nullable<decimal> _Step1LossPercent;
		
		private System.Nullable<decimal> _Step1ClaimQtyFull;
		
		private System.Nullable<decimal> _Step1ClaimQtyAQL;
		
		private System.Nullable<int> _Step2IrregularScore1;
		
		private System.Nullable<int> _Step2IrregularScore2;
		
		private System.Nullable<decimal> _Step2IrregularLossQty;
		
		private System.Nullable<decimal> _Step2IrregulardLossPercent;
		
		private System.Nullable<decimal> _Step2ClaimQtyFull;
		
		private System.Nullable<decimal> _Step2ClaimQtyAQL;
		
		private string _Step2HaveRegular;
		
		private System.Nullable<decimal> _Step2EvadeMarkerLossPercent;
		
		private string _Step2RegularLossWidth;
		
		private string _Step2ConfirmByCutting;
		
		private System.Nullable<decimal> _Step2ClaimRegularQty;
		
		private System.Nullable<decimal> _Step2ClaimSubTotalQty;
		
		private string _Step2ClaimAction;
		
		private string _OtherOverallResult;
		
		private System.Nullable<decimal> _OverallClaimPercent;
		
		private string _CutCurling;
		
		private string _CutCurlingResult;
		
		private string _OtherOverallResultByBatch;
		
		private System.Nullable<decimal> _OtherOverAllClaimLength;
		
		private System.Nullable<decimal> _OtherOverAllClaimLengthByBatch;
		
		private string _AuditStage;
		
		private string _Step1DefectResultByLot;
		
		private System.Nullable<decimal> _TotalLenghtByLotExcludePass;
		
		private string _CutOffRollFlag;
		
		private string _NeedCutOut;
		
		private System.Nullable<decimal> _CutOutLength;
		
		private System.Nullable<decimal> _CutOutClaimQty;
		
		private System.Nullable<decimal> _OverallClaimQtyAgreed;
		
		private System.Nullable<decimal> _NarrowWidthClaimQtyByLot;
		
		private System.Nullable<decimal> _PARTIIIFinalClaimQty;
		
		private System.Nullable<char> @__1111OddEvenRowFlag;
		
		private System.Nullable<decimal> _PartITotalClaimQty;
		
		private System.Nullable<decimal> _Step2ClaimRegularQtyByLot;
		
		private string _WidthResultByBatch;
		
		private string _WidthResultByLot;
		
		private string _LengthResultByLot;
		
		private string _ThicknessResultByLot;
		
		private System.Nullable<int> _AuditRollQtyByLot;
		
		private System.Nullable<decimal> _TotalActualLengthHasEvadeLossMarker;
		
		private System.Nullable<decimal> _TotalStep2ClaimRegularQtyHasEvadeLossMarker;
		
		private string _MarkerType;
		
		private string _PartIFinalClaimafewth;
		
		private System.Nullable<decimal> _AuditPassQty;
		
		private System.Nullable<decimal> _AuditSpotDefectQtyByLot;
		
		private System.Nullable<decimal> _AuditVerticalChainDefectQty;
		
		private System.Nullable<decimal> _AuditHorizontalChainDefectQty;
		
		private System.Nullable<decimal> _VerticalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectLossPerentByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _CutOutLengthPercent;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _LengthDiffLossByLot;
		
		private System.Nullable<decimal> _PartIFinalClaimQty;
		
		private System.Nullable<decimal> _PartIIFinalClaimQty;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private System.Nullable<decimal> _Step1LossQtyByID;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private string _Status;
		
		private string _MissingAudit;
		
		private string _ActionLogID;
		
		private string _ActionLogTaking;
		
		private string _ActionLogCategory;
		
		private string _ActionLogGroup;
		
		private System.Nullable<System.DateTime> _ActionLogTargetDate1;
		
		private System.Nullable<System.DateTime> _ActionLogRevisedDate1;
		
		private System.Nullable<System.DateTime> _ActionLogCmplDate1;
		
		private string _ActionLogIsCompleted;
		
		private EntitySet<Fabric_Insp_PartDefect> _Fabric_Insp_PartDefects;
		
		private EntitySet<Fabric_Insp_Picture> _Fabric_Insp_Pictures;
		
		private EntitySet<Fabric_Insp_Width> _Fabric_Insp_Widths;
		
		private EntitySet<Fabric_Insp_SpreadDefect> _Fabric_Insp_SpreadDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSystem_Install_NoChanging(int value);
    partial void OnSystem_Install_NoChanged();
    partial void OnItem_NoChanging(string value);
    partial void OnItem_NoChanged();
    partial void OnItem_DescChanging(string value);
    partial void OnItem_DescChanged();
    partial void OnPOChanging(string value);
    partial void OnPOChanged();
    partial void OnHdoNoChanging(string value);
    partial void OnHdoNoChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnIQC_ReferenceChanging(string value);
    partial void OnIQC_ReferenceChanged();
    partial void OnLot_IdChanging(string value);
    partial void OnLot_IdChanged();
    partial void OnActual_LengthChanging(System.Nullable<decimal> value);
    partial void OnActual_LengthChanged();
    partial void OnActual_WeightChanging(System.Nullable<decimal> value);
    partial void OnActual_WeightChanged();
    partial void OnSupplier_WidthChanging(System.Nullable<decimal> value);
    partial void OnSupplier_WidthChanged();
    partial void OnInsp_LengthChanging(System.Nullable<decimal> value);
    partial void OnInsp_LengthChanged();
    partial void OnGM_SQMChanging(System.Nullable<decimal> value);
    partial void OnGM_SQMChanged();
    partial void OnUsable_WidthChanging(System.Nullable<decimal> value);
    partial void OnUsable_WidthChanged();
    partial void OnSupplier_CodeChanging(string value);
    partial void OnSupplier_CodeChanged();
    partial void OnSupplich_BatchChanging(string value);
    partial void OnSupplich_BatchChanged();
    partial void OnRoll_NoChanging(string value);
    partial void OnRoll_NoChanged();
    partial void OnTotal_PointsChanging(System.Nullable<int> value);
    partial void OnTotal_PointsChanged();
    partial void OnPoints_Hundred_SQMChanging(System.Nullable<decimal> value);
    partial void OnPoints_Hundred_SQMChanged();
    partial void OnDeductive_QtyChanging(System.Nullable<decimal> value);
    partial void OnDeductive_QtyChanged();
    partial void OnWastageChanging(System.Nullable<decimal> value);
    partial void OnWastageChanged();
    partial void OnInsp_ResultChanging(string value);
    partial void OnInsp_ResultChanged();
    partial void OnParty_Insp_ResultChanging(string value);
    partial void OnParty_Insp_ResultChanged();
    partial void OnSpread_Insp_ResultChanging(string value);
    partial void OnSpread_Insp_ResultChanged();
    partial void OnMould_Trial_ResultChanging(string value);
    partial void OnMould_Trial_ResultChanged();
    partial void OnColor_Group_StatusChanging(string value);
    partial void OnColor_Group_StatusChanged();
    partial void OnSpread_Defect_ExistChanging(string value);
    partial void OnSpread_Defect_ExistChanged();
    partial void OnInsp_ConfirmChanging(string value);
    partial void OnInsp_ConfirmChanged();
    partial void OnPH_SampleChanging(System.Nullable<decimal> value);
    partial void OnPH_SampleChanged();
    partial void OnPanel_Size1Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size1Changed();
    partial void OnPanel_Size2Changing(System.Nullable<decimal> value);
    partial void OnPanel_Size2Changed();
    partial void OnSpecial_MarkerChanging(System.Nullable<decimal> value);
    partial void OnSpecial_MarkerChanged();
    partial void OnSpread_RemarkChanging(string value);
    partial void OnSpread_RemarkChanged();
    partial void OnMould_Trial_RemarkChanging(string value);
    partial void OnMould_Trial_RemarkChanged();
    partial void OnStock_In_DateChanging(string value);
    partial void OnStock_In_DateChanged();
    partial void OnStock_In_Date_DateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStock_In_Date_DateTimeChanged();
    partial void OnTurn_SizeChanging(System.Nullable<int> value);
    partial void OnTurn_SizeChanged();
    partial void OnSupplier_Length_UnitChanging(string value);
    partial void OnSupplier_Length_UnitChanged();
    partial void OnSupplier_Width_UnitChanging(string value);
    partial void OnSupplier_Width_UnitChanged();
    partial void OnSideToSideH_WidthChanging(System.Nullable<decimal> value);
    partial void OnSideToSideH_WidthChanged();
    partial void OnInspectorChanging(string value);
    partial void OnInspectorChanged();
    partial void OnCreate_UserChanging(string value);
    partial void OnCreate_UserChanged();
    partial void OnCreate_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreate_DateChanged();
    partial void OnChange_UserChanging(string value);
    partial void OnChange_UserChanged();
    partial void OnChange_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnChange_DateChanged();
    partial void OnUse_StatusChanging(string value);
    partial void OnUse_StatusChanged();
    partial void OnLightStatusChanging(string value);
    partial void OnLightStatusChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnSupplier_Item_NoChanging(string value);
    partial void OnSupplier_Item_NoChanged();
    partial void OnInsp_Result_ReasonChanging(string value);
    partial void OnInsp_Result_ReasonChanged();
    partial void OnPhy_Properties_ResultChanging(string value);
    partial void OnPhy_Properties_ResultChanged();
    partial void OnSupplierItemColorChanging(string value);
    partial void OnSupplierItemColorChanged();
    partial void OnWeftYarnClassChanging(string value);
    partial void OnWeftYarnClassChanged();
    partial void OnWeftYarnPercentageChanging(System.Nullable<decimal> value);
    partial void OnWeftYarnPercentageChanged();
    partial void OnWeftYarnStatusChanging(string value);
    partial void OnWeftYarnStatusChanged();
    partial void OnWeftYarnSolution1Changing(string value);
    partial void OnWeftYarnSolution1Changed();
    partial void OnWeftYarnSolution2Changing(string value);
    partial void OnWeftYarnSolution2Changed();
    partial void OnWeftYarnWastageChanging(System.Nullable<decimal> value);
    partial void OnWeftYarnWastageChanged();
    partial void OnElongationWarpResultChanging(System.Nullable<decimal> value);
    partial void OnElongationWarpResultChanged();
    partial void OnElongationWeftResultChanging(System.Nullable<decimal> value);
    partial void OnElongationWeftResultChanged();
    partial void OnElongationStatusChanging(string value);
    partial void OnElongationStatusChanged();
    partial void OnElongationSolution1Changing(string value);
    partial void OnElongationSolution1Changed();
    partial void OnElongationSolution2Changing(string value);
    partial void OnElongationSolution2Changed();
    partial void OnWeftYarnChanging(string value);
    partial void OnWeftYarnChanged();
    partial void OnElongationChanging(string value);
    partial void OnElongationChanged();
    partial void OnMouldTrialChanging(string value);
    partial void OnMouldTrialChanged();
    partial void OnMouldTrialSolution1Changing(string value);
    partial void OnMouldTrialSolution1Changed();
    partial void OnMouldTrialSolution2Changing(string value);
    partial void OnMouldTrialSolution2Changed();
    partial void OnInspection_DateChanging(System.Nullable<System.DateTime> value);
    partial void OnInspection_DateChanged();
    partial void OnRefNoChanging(System.Nullable<int> value);
    partial void OnRefNoChanged();
    partial void OnWarehouseChanging(string value);
    partial void OnWarehouseChanged();
    partial void OnAgreedByCuttingChanging(string value);
    partial void OnAgreedByCuttingChanged();
    partial void OnColorMatchingChanging(string value);
    partial void OnColorMatchingChanged();
    partial void OnColorMatchingResultChanging(string value);
    partial void OnColorMatchingResultChanged();
    partial void OnColorMatchingActionChanging(System.Nullable<int> value);
    partial void OnColorMatchingActionChanged();
    partial void OnMouldTrialResultChanging(string value);
    partial void OnMouldTrialResultChanged();
    partial void OnMouldTrialActionChanging(System.Nullable<int> value);
    partial void OnMouldTrialActionChanged();
    partial void OnElongationResultChanging(string value);
    partial void OnElongationResultChanged();
    partial void OnElongationActionChanging(System.Nullable<int> value);
    partial void OnElongationActionChanged();
    partial void OnLaminationChanging(string value);
    partial void OnLaminationChanged();
    partial void OnLaminationResultChanging(string value);
    partial void OnLaminationResultChanged();
    partial void OnLaminationActionChanging(System.Nullable<int> value);
    partial void OnLaminationActionChanged();
    partial void OnBondingChanging(string value);
    partial void OnBondingChanged();
    partial void OnBondingResultChanging(string value);
    partial void OnBondingResultChanged();
    partial void OnBondingActionChanging(System.Nullable<int> value);
    partial void OnBondingActionChanged();
    partial void OnThicknessResultChanging(string value);
    partial void OnThicknessResultChanged();
    partial void OnLengthResultChanging(string value);
    partial void OnLengthResultChanged();
    partial void OnWidthResultChanging(string value);
    partial void OnWidthResultChanged();
    partial void OnStandardWidthChanging(System.Nullable<decimal> value);
    partial void OnStandardWidthChanged();
    partial void OnStandardWeightGmSqmChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmChanged();
    partial void OnOverallRemarkChanging(string value);
    partial void OnOverallRemarkChanged();
    partial void OnSplitFlagChanging(string value);
    partial void OnSplitFlagChanged();
    partial void OnUsableWidthMinByLotChanging(System.Nullable<decimal> value);
    partial void OnUsableWidthMinByLotChanged();
    partial void OnDiffWidthPercentChanging(System.Nullable<decimal> value);
    partial void OnDiffWidthPercentChanged();
    partial void OnRollQtyChanging(System.Nullable<int> value);
    partial void OnRollQtyChanged();
    partial void OnSampleSizeChanging(string value);
    partial void OnSampleSizeChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnDiffLengthAveByLotChanging(System.Nullable<decimal> value);
    partial void OnDiffLengthAveByLotChanged();
    partial void OnTotalLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnTotalLengthByLotChanged();
    partial void OnRegularDefectResultChanging(string value);
    partial void OnRegularDefectResultChanged();
    partial void OnTotalActualLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnTotalActualLengthByLotChanged();
    partial void OnPackageListlengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnPackageListlengthByBatchChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnColorNameChanging(string value);
    partial void OnColorNameChanged();
    partial void OnRollQtyByBatchChanging(System.Nullable<int> value);
    partial void OnRollQtyByBatchChanged();
    partial void OnTotalScore1ByLotChanging(System.Nullable<int> value);
    partial void OnTotalScore1ByLotChanged();
    partial void OnTotalScore2ByLotChanging(System.Nullable<int> value);
    partial void OnTotalScore2ByLotChanged();
    partial void OnMeasLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnMeasLengthByLotChanged();
    partial void OnPOLengthChanging(System.Nullable<decimal> value);
    partial void OnPOLengthChanged();
    partial void OnOverAllClaimLengthChanging(System.Nullable<decimal> value);
    partial void OnOverAllClaimLengthChanged();
    partial void OnStandardWeightGmSqmMaxChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmMaxChanged();
    partial void OnStandardWeightGmSqmMinChanging(System.Nullable<decimal> value);
    partial void OnStandardWeightGmSqmMinChanged();
    partial void OnStandardWeightGmSqmSChanging(string value);
    partial void OnStandardWeightGmSqmSChanged();
    partial void OnStep1DefectTotalPointChanging(System.Nullable<int> value);
    partial void OnStep1DefectTotalPointChanged();
    partial void OnStep1Pt100m2Changing(System.Nullable<int> value);
    partial void OnStep1Pt100m2Changed();
    partial void OnStep1DefectResultChanging(string value);
    partial void OnStep1DefectResultChanged();
    partial void OnStep1MeasLengthChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasLengthChanged();
    partial void OnStep1MeasWidthChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasWidthChanged();
    partial void OnStep1MeasSqChanging(System.Nullable<decimal> value);
    partial void OnStep1MeasSqChanged();
    partial void OnStep1DefectScore1Changing(System.Nullable<int> value);
    partial void OnStep1DefectScore1Changed();
    partial void OnStep1DefectScore2Changing(System.Nullable<int> value);
    partial void OnStep1DefectScore2Changed();
    partial void OnStep1LossQtyChanging(System.Nullable<decimal> value);
    partial void OnStep1LossQtyChanged();
    partial void OnStep1LossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep1LossPercentChanged();
    partial void OnStep1ClaimQtyFullChanging(System.Nullable<decimal> value);
    partial void OnStep1ClaimQtyFullChanged();
    partial void OnStep1ClaimQtyAQLChanging(System.Nullable<decimal> value);
    partial void OnStep1ClaimQtyAQLChanged();
    partial void OnStep2IrregularScore1Changing(System.Nullable<int> value);
    partial void OnStep2IrregularScore1Changed();
    partial void OnStep2IrregularScore2Changing(System.Nullable<int> value);
    partial void OnStep2IrregularScore2Changed();
    partial void OnStep2IrregularLossQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2IrregularLossQtyChanged();
    partial void OnStep2IrregulardLossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep2IrregulardLossPercentChanged();
    partial void OnStep2ClaimQtyFullChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimQtyFullChanged();
    partial void OnStep2ClaimQtyAQLChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimQtyAQLChanged();
    partial void OnStep2HaveRegularChanging(string value);
    partial void OnStep2HaveRegularChanged();
    partial void OnStep2EvadeMarkerLossPercentChanging(System.Nullable<decimal> value);
    partial void OnStep2EvadeMarkerLossPercentChanged();
    partial void OnStep2RegularLossWidthChanging(string value);
    partial void OnStep2RegularLossWidthChanged();
    partial void OnStep2ConfirmByCuttingChanging(string value);
    partial void OnStep2ConfirmByCuttingChanged();
    partial void OnStep2ClaimRegularQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimRegularQtyChanged();
    partial void OnStep2ClaimSubTotalQtyChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimSubTotalQtyChanged();
    partial void OnStep2ClaimActionChanging(string value);
    partial void OnStep2ClaimActionChanged();
    partial void OnOtherOverallResultChanging(string value);
    partial void OnOtherOverallResultChanged();
    partial void OnOverallClaimPercentChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentChanged();
    partial void OnCutCurlingChanging(string value);
    partial void OnCutCurlingChanged();
    partial void OnCutCurlingResultChanging(string value);
    partial void OnCutCurlingResultChanged();
    partial void OnOtherOverallResultByBatchChanging(string value);
    partial void OnOtherOverallResultByBatchChanged();
    partial void OnOtherOverAllClaimLengthChanging(System.Nullable<decimal> value);
    partial void OnOtherOverAllClaimLengthChanged();
    partial void OnOtherOverAllClaimLengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnOtherOverAllClaimLengthByBatchChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnStep1DefectResultByLotChanging(string value);
    partial void OnStep1DefectResultByLotChanged();
    partial void OnTotalLenghtByLotExcludePassChanging(System.Nullable<decimal> value);
    partial void OnTotalLenghtByLotExcludePassChanged();
    partial void OnCutOffRollFlagChanging(string value);
    partial void OnCutOffRollFlagChanged();
    partial void OnNeedCutOutChanging(string value);
    partial void OnNeedCutOutChanged();
    partial void OnCutOutLengthChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthChanged();
    partial void OnCutOutClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnCutOutClaimQtyChanged();
    partial void OnOverallClaimQtyAgreedChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimQtyAgreedChanged();
    partial void OnNarrowWidthClaimQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimQtyByLotChanged();
    partial void OnPARTIIIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPARTIIIFinalClaimQtyChanged();
    partial void On_1111OddEvenRowFlagChanging(System.Nullable<char> value);
    partial void On_1111OddEvenRowFlagChanged();
    partial void OnPartITotalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartITotalClaimQtyChanged();
    partial void OnStep2ClaimRegularQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnStep2ClaimRegularQtyByLotChanged();
    partial void OnWidthResultByBatchChanging(string value);
    partial void OnWidthResultByBatchChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnThicknessResultByLotChanging(string value);
    partial void OnThicknessResultByLotChanged();
    partial void OnAuditRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditRollQtyByLotChanged();
    partial void OnTotalActualLengthHasEvadeLossMarkerChanging(System.Nullable<decimal> value);
    partial void OnTotalActualLengthHasEvadeLossMarkerChanged();
    partial void OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanging(System.Nullable<decimal> value);
    partial void OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanged();
    partial void OnMarkerTypeChanging(string value);
    partial void OnMarkerTypeChanged();
    partial void OnPartIFinalClaimafewthChanging(string value);
    partial void OnPartIFinalClaimafewthChanged();
    partial void OnAuditPassQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditPassQtyChanged();
    partial void OnAuditSpotDefectQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSpotDefectQtyByLotChanged();
    partial void OnAuditVerticalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditVerticalChainDefectQtyChanged();
    partial void OnAuditHorizontalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditHorizontalChainDefectQtyChanged();
    partial void OnVerticalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnVerticalChainDefectClaimByLotChanged();
    partial void OnHorizontalChainDefectLossPerentByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectLossPerentByLotChanged();
    partial void OnHorizontalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectClaimByLotChanged();
    partial void OnCutOutLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthPercentChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnLengthDiffLossByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffLossByLotChanged();
    partial void OnPartIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartIFinalClaimQtyChanged();
    partial void OnPartIIFinalClaimQtyChanging(System.Nullable<decimal> value);
    partial void OnPartIIFinalClaimQtyChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnStep1LossQtyByIDChanging(System.Nullable<decimal> value);
    partial void OnStep1LossQtyByIDChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnMissingAuditChanging(string value);
    partial void OnMissingAuditChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogTakingChanging(string value);
    partial void OnActionLogTakingChanged();
    partial void OnActionLogCategoryChanging(string value);
    partial void OnActionLogCategoryChanged();
    partial void OnActionLogGroupChanging(string value);
    partial void OnActionLogGroupChanged();
    partial void OnActionLogTargetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogTargetDateChanged();
    partial void OnActionLogRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogRevisedDateChanged();
    partial void OnActionLogCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogCmplDateChanged();
    partial void OnActionLogIsCompletedChanging(string value);
    partial void OnActionLogIsCompletedChanged();
    #endregion
		
		public Fabric_Insp_Header()
		{
			this._Fabric_Insp_PartDefects = new EntitySet<Fabric_Insp_PartDefect>(new Action<Fabric_Insp_PartDefect>(this.attach_Fabric_Insp_PartDefects), new Action<Fabric_Insp_PartDefect>(this.detach_Fabric_Insp_PartDefects));
			this._Fabric_Insp_Pictures = new EntitySet<Fabric_Insp_Picture>(new Action<Fabric_Insp_Picture>(this.attach_Fabric_Insp_Pictures), new Action<Fabric_Insp_Picture>(this.detach_Fabric_Insp_Pictures));
			this._Fabric_Insp_Widths = new EntitySet<Fabric_Insp_Width>(new Action<Fabric_Insp_Width>(this.attach_Fabric_Insp_Widths), new Action<Fabric_Insp_Width>(this.detach_Fabric_Insp_Widths));
			this._Fabric_Insp_SpreadDefects = new EntitySet<Fabric_Insp_SpreadDefect>(new Action<Fabric_Insp_SpreadDefect>(this.attach_Fabric_Insp_SpreadDefects), new Action<Fabric_Insp_SpreadDefect>(this.detach_Fabric_Insp_SpreadDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.Always, DbType="BigInt NOT NULL IDENTITY", IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this.OnSystem_Install_NoChanging(value);
					this.SendPropertyChanging();
					this._System_Install_No = value;
					this.SendPropertyChanged("System_Install_No");
					this.OnSystem_Install_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15)")]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this.OnItem_NoChanging(value);
					this.SendPropertyChanging();
					this._Item_No = value;
					this.SendPropertyChanged("Item_No");
					this.OnItem_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50)")]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this.OnItem_DescChanging(value);
					this.SendPropertyChanging();
					this._Item_Desc = value;
					this.SendPropertyChanged("Item_Desc");
					this.OnItem_DescChanged();
				}
			}
		}
		
		[Column(Storage="_PO", DbType="VarChar(8)")]
		public string PO
		{
			get
			{
				return this._PO;
			}
			set
			{
				if ((this._PO != value))
				{
					this.OnPOChanging(value);
					this.SendPropertyChanging();
					this._PO = value;
					this.SendPropertyChanged("PO");
					this.OnPOChanged();
				}
			}
		}
		
		[Column(Storage="_HdoNo", DbType="VarChar(50)")]
		public string HdoNo
		{
			get
			{
				return this._HdoNo;
			}
			set
			{
				if ((this._HdoNo != value))
				{
					this.OnHdoNoChanging(value);
					this.SendPropertyChanging();
					this._HdoNo = value;
					this.SendPropertyChanged("HdoNo");
					this.OnHdoNoChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(1000)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_IQC_Reference", DbType="VarChar(50)")]
		public string IQC_Reference
		{
			get
			{
				return this._IQC_Reference;
			}
			set
			{
				if ((this._IQC_Reference != value))
				{
					this.OnIQC_ReferenceChanging(value);
					this.SendPropertyChanging();
					this._IQC_Reference = value;
					this.SendPropertyChanged("IQC_Reference");
					this.OnIQC_ReferenceChanged();
				}
			}
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(1000)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this.OnLot_IdChanging(value);
					this.SendPropertyChanging();
					this._Lot_Id = value;
					this.SendPropertyChanged("Lot_Id");
					this.OnLot_IdChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Length
		{
			get
			{
				return this._Actual_Length;
			}
			set
			{
				if ((this._Actual_Length != value))
				{
					this.OnActual_LengthChanging(value);
					this.SendPropertyChanging();
					this._Actual_Length = value;
					this.SendPropertyChanged("Actual_Length");
					this.OnActual_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_Actual_Weight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Actual_Weight
		{
			get
			{
				return this._Actual_Weight;
			}
			set
			{
				if ((this._Actual_Weight != value))
				{
					this.OnActual_WeightChanging(value);
					this.SendPropertyChanging();
					this._Actual_Weight = value;
					this.SendPropertyChanged("Actual_Weight");
					this.OnActual_WeightChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Supplier_Width
		{
			get
			{
				return this._Supplier_Width;
			}
			set
			{
				if ((this._Supplier_Width != value))
				{
					this.OnSupplier_WidthChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width = value;
					this.SendPropertyChanged("Supplier_Width");
					this.OnSupplier_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Length", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Insp_Length
		{
			get
			{
				return this._Insp_Length;
			}
			set
			{
				if ((this._Insp_Length != value))
				{
					this.OnInsp_LengthChanging(value);
					this.SendPropertyChanging();
					this._Insp_Length = value;
					this.SendPropertyChanged("Insp_Length");
					this.OnInsp_LengthChanged();
				}
			}
		}
		
		[Column(Storage="_GM_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GM_SQM
		{
			get
			{
				return this._GM_SQM;
			}
			set
			{
				if ((this._GM_SQM != value))
				{
					this.OnGM_SQMChanging(value);
					this.SendPropertyChanging();
					this._GM_SQM = value;
					this.SendPropertyChanged("GM_SQM");
					this.OnGM_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this.OnUsable_WidthChanging(value);
					this.SendPropertyChanging();
					this._Usable_Width = value;
					this.SendPropertyChanged("Usable_Width");
					this.OnUsable_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Code", DbType="VarChar(7)")]
		public string Supplier_Code
		{
			get
			{
				return this._Supplier_Code;
			}
			set
			{
				if ((this._Supplier_Code != value))
				{
					this.OnSupplier_CodeChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Code = value;
					this.SendPropertyChanged("Supplier_Code");
					this.OnSupplier_CodeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50)")]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this.OnSupplich_BatchChanging(value);
					this.SendPropertyChanging();
					this._Supplich_Batch = value;
					this.SendPropertyChanged("Supplich_Batch");
					this.OnSupplich_BatchChanged();
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this.OnRoll_NoChanging(value);
					this.SendPropertyChanging();
					this._Roll_No = value;
					this.SendPropertyChanged("Roll_No");
					this.OnRoll_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Total_Points", DbType="Int")]
		public System.Nullable<int> Total_Points
		{
			get
			{
				return this._Total_Points;
			}
			set
			{
				if ((this._Total_Points != value))
				{
					this.OnTotal_PointsChanging(value);
					this.SendPropertyChanging();
					this._Total_Points = value;
					this.SendPropertyChanged("Total_Points");
					this.OnTotal_PointsChanged();
				}
			}
		}
		
		[Column(Storage="_Points_Hundred_SQM", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Points_Hundred_SQM
		{
			get
			{
				return this._Points_Hundred_SQM;
			}
			set
			{
				if ((this._Points_Hundred_SQM != value))
				{
					this.OnPoints_Hundred_SQMChanging(value);
					this.SendPropertyChanging();
					this._Points_Hundred_SQM = value;
					this.SendPropertyChanged("Points_Hundred_SQM");
					this.OnPoints_Hundred_SQMChanged();
				}
			}
		}
		
		[Column(Storage="_Deductive_Qty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Deductive_Qty
		{
			get
			{
				return this._Deductive_Qty;
			}
			set
			{
				if ((this._Deductive_Qty != value))
				{
					this.OnDeductive_QtyChanging(value);
					this.SendPropertyChanging();
					this._Deductive_Qty = value;
					this.SendPropertyChanged("Deductive_Qty");
					this.OnDeductive_QtyChanged();
				}
			}
		}
		
		[Column(Storage="_Wastage", DbType="Decimal(20,6)")]
		public System.Nullable<decimal> Wastage
		{
			get
			{
				return this._Wastage;
			}
			set
			{
				if ((this._Wastage != value))
				{
					this.OnWastageChanging(value);
					this.SendPropertyChanging();
					this._Wastage = value;
					this.SendPropertyChanged("Wastage");
					this.OnWastageChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Result", DbType="VarChar(50)")]
		public string Insp_Result
		{
			get
			{
				return this._Insp_Result;
			}
			set
			{
				if ((this._Insp_Result != value))
				{
					this.OnInsp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Insp_Result = value;
					this.SendPropertyChanged("Insp_Result");
					this.OnInsp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Party_Insp_Result", DbType="VarChar(50)")]
		public string Party_Insp_Result
		{
			get
			{
				return this._Party_Insp_Result;
			}
			set
			{
				if ((this._Party_Insp_Result != value))
				{
					this.OnParty_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Party_Insp_Result = value;
					this.SendPropertyChanged("Party_Insp_Result");
					this.OnParty_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Insp_Result", DbType="VarChar(50)")]
		public string Spread_Insp_Result
		{
			get
			{
				return this._Spread_Insp_Result;
			}
			set
			{
				if ((this._Spread_Insp_Result != value))
				{
					this.OnSpread_Insp_ResultChanging(value);
					this.SendPropertyChanging();
					this._Spread_Insp_Result = value;
					this.SendPropertyChanged("Spread_Insp_Result");
					this.OnSpread_Insp_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Result", DbType="VarChar(50)")]
		public string Mould_Trial_Result
		{
			get
			{
				return this._Mould_Trial_Result;
			}
			set
			{
				if ((this._Mould_Trial_Result != value))
				{
					this.OnMould_Trial_ResultChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Result = value;
					this.SendPropertyChanged("Mould_Trial_Result");
					this.OnMould_Trial_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Color_Group_Status", DbType="VarChar(50)")]
		public string Color_Group_Status
		{
			get
			{
				return this._Color_Group_Status;
			}
			set
			{
				if ((this._Color_Group_Status != value))
				{
					this.OnColor_Group_StatusChanging(value);
					this.SendPropertyChanging();
					this._Color_Group_Status = value;
					this.SendPropertyChanged("Color_Group_Status");
					this.OnColor_Group_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Defect_Exist", DbType="VarChar(50)")]
		public string Spread_Defect_Exist
		{
			get
			{
				return this._Spread_Defect_Exist;
			}
			set
			{
				if ((this._Spread_Defect_Exist != value))
				{
					this.OnSpread_Defect_ExistChanging(value);
					this.SendPropertyChanging();
					this._Spread_Defect_Exist = value;
					this.SendPropertyChanged("Spread_Defect_Exist");
					this.OnSpread_Defect_ExistChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Confirm", DbType="VarChar(50)")]
		public string Insp_Confirm
		{
			get
			{
				return this._Insp_Confirm;
			}
			set
			{
				if ((this._Insp_Confirm != value))
				{
					this.OnInsp_ConfirmChanging(value);
					this.SendPropertyChanging();
					this._Insp_Confirm = value;
					this.SendPropertyChanged("Insp_Confirm");
					this.OnInsp_ConfirmChanged();
				}
			}
		}
		
		[Column(Storage="_PH_Sample", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PH_Sample
		{
			get
			{
				return this._PH_Sample;
			}
			set
			{
				if ((this._PH_Sample != value))
				{
					this.OnPH_SampleChanging(value);
					this.SendPropertyChanging();
					this._PH_Sample = value;
					this.SendPropertyChanged("PH_Sample");
					this.OnPH_SampleChanged();
				}
			}
		}
		
		[Column(Storage="_Panel_Size1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size1
		{
			get
			{
				return this._Panel_Size1;
			}
			set
			{
				if ((this._Panel_Size1 != value))
				{
					this.OnPanel_Size1Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size1 = value;
					this.SendPropertyChanged("Panel_Size1");
					this.OnPanel_Size1Changed();
				}
			}
		}
		
		[Column(Storage="_Panel_Size2", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Panel_Size2
		{
			get
			{
				return this._Panel_Size2;
			}
			set
			{
				if ((this._Panel_Size2 != value))
				{
					this.OnPanel_Size2Changing(value);
					this.SendPropertyChanging();
					this._Panel_Size2 = value;
					this.SendPropertyChanged("Panel_Size2");
					this.OnPanel_Size2Changed();
				}
			}
		}
		
		[Column(Storage="_Special_Marker", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> Special_Marker
		{
			get
			{
				return this._Special_Marker;
			}
			set
			{
				if ((this._Special_Marker != value))
				{
					this.OnSpecial_MarkerChanging(value);
					this.SendPropertyChanging();
					this._Special_Marker = value;
					this.SendPropertyChanged("Special_Marker");
					this.OnSpecial_MarkerChanged();
				}
			}
		}
		
		[Column(Storage="_Spread_Remark", DbType="VarChar(500)")]
		public string Spread_Remark
		{
			get
			{
				return this._Spread_Remark;
			}
			set
			{
				if ((this._Spread_Remark != value))
				{
					this.OnSpread_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Spread_Remark = value;
					this.SendPropertyChanged("Spread_Remark");
					this.OnSpread_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Remark", DbType="VarChar(500)")]
		public string Mould_Trial_Remark
		{
			get
			{
				return this._Mould_Trial_Remark;
			}
			set
			{
				if ((this._Mould_Trial_Remark != value))
				{
					this.OnMould_Trial_RemarkChanging(value);
					this.SendPropertyChanging();
					this._Mould_Trial_Remark = value;
					this.SendPropertyChanged("Mould_Trial_Remark");
					this.OnMould_Trial_RemarkChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10)")]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this.OnStock_In_DateChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date = value;
					this.SendPropertyChanged("Stock_In_Date");
					this.OnStock_In_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date_DateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Stock_In_Date_DateTime
		{
			get
			{
				return this._Stock_In_Date_DateTime;
			}
			set
			{
				if ((this._Stock_In_Date_DateTime != value))
				{
					this.OnStock_In_Date_DateTimeChanging(value);
					this.SendPropertyChanging();
					this._Stock_In_Date_DateTime = value;
					this.SendPropertyChanged("Stock_In_Date_DateTime");
					this.OnStock_In_Date_DateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Turn_Size", DbType="Int")]
		public System.Nullable<int> Turn_Size
		{
			get
			{
				return this._Turn_Size;
			}
			set
			{
				if ((this._Turn_Size != value))
				{
					this.OnTurn_SizeChanging(value);
					this.SendPropertyChanging();
					this._Turn_Size = value;
					this.SendPropertyChanged("Turn_Size");
					this.OnTurn_SizeChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Length_Unit", DbType="VarChar(50)")]
		public string Supplier_Length_Unit
		{
			get
			{
				return this._Supplier_Length_Unit;
			}
			set
			{
				if ((this._Supplier_Length_Unit != value))
				{
					this.OnSupplier_Length_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Length_Unit = value;
					this.SendPropertyChanged("Supplier_Length_Unit");
					this.OnSupplier_Length_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Width_Unit", DbType="VarChar(50)")]
		public string Supplier_Width_Unit
		{
			get
			{
				return this._Supplier_Width_Unit;
			}
			set
			{
				if ((this._Supplier_Width_Unit != value))
				{
					this.OnSupplier_Width_UnitChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Width_Unit = value;
					this.SendPropertyChanged("Supplier_Width_Unit");
					this.OnSupplier_Width_UnitChanged();
				}
			}
		}
		
		[Column(Storage="_SideToSideH_Width", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SideToSideH_Width
		{
			get
			{
				return this._SideToSideH_Width;
			}
			set
			{
				if ((this._SideToSideH_Width != value))
				{
					this.OnSideToSideH_WidthChanging(value);
					this.SendPropertyChanging();
					this._SideToSideH_Width = value;
					this.SendPropertyChanged("SideToSideH_Width");
					this.OnSideToSideH_WidthChanged();
				}
			}
		}
		
		[Column(Storage="_Inspector", DbType="VarChar(50)")]
		public string Inspector
		{
			get
			{
				return this._Inspector;
			}
			set
			{
				if ((this._Inspector != value))
				{
					this.OnInspectorChanging(value);
					this.SendPropertyChanging();
					this._Inspector = value;
					this.SendPropertyChanged("Inspector");
					this.OnInspectorChanged();
				}
			}
		}
		
		[Column(Storage="_Create_User", DbType="VarChar(50)")]
		public string Create_User
		{
			get
			{
				return this._Create_User;
			}
			set
			{
				if ((this._Create_User != value))
				{
					this.OnCreate_UserChanging(value);
					this.SendPropertyChanging();
					this._Create_User = value;
					this.SendPropertyChanged("Create_User");
					this.OnCreate_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Create_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Create_Date
		{
			get
			{
				return this._Create_Date;
			}
			set
			{
				if ((this._Create_Date != value))
				{
					this.OnCreate_DateChanging(value);
					this.SendPropertyChanging();
					this._Create_Date = value;
					this.SendPropertyChanged("Create_Date");
					this.OnCreate_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Change_User", DbType="VarChar(50)")]
		public string Change_User
		{
			get
			{
				return this._Change_User;
			}
			set
			{
				if ((this._Change_User != value))
				{
					this.OnChange_UserChanging(value);
					this.SendPropertyChanging();
					this._Change_User = value;
					this.SendPropertyChanged("Change_User");
					this.OnChange_UserChanged();
				}
			}
		}
		
		[Column(Storage="_Change_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Change_Date
		{
			get
			{
				return this._Change_Date;
			}
			set
			{
				if ((this._Change_Date != value))
				{
					this.OnChange_DateChanging(value);
					this.SendPropertyChanging();
					this._Change_Date = value;
					this.SendPropertyChanged("Change_Date");
					this.OnChange_DateChanged();
				}
			}
		}
		
		[Column(Storage="_Use_Status", DbType="VarChar(50)")]
		public string Use_Status
		{
			get
			{
				return this._Use_Status;
			}
			set
			{
				if ((this._Use_Status != value))
				{
					this.OnUse_StatusChanging(value);
					this.SendPropertyChanging();
					this._Use_Status = value;
					this.SendPropertyChanged("Use_Status");
					this.OnUse_StatusChanged();
				}
			}
		}
		
		[Column(Storage="_LightStatus", DbType="VarChar(50)")]
		public string LightStatus
		{
			get
			{
				return this._LightStatus;
			}
			set
			{
				if ((this._LightStatus != value))
				{
					this.OnLightStatusChanging(value);
					this.SendPropertyChanging();
					this._LightStatus = value;
					this.SendPropertyChanged("LightStatus");
					this.OnLightStatusChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(50)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_Supplier_Item_No", DbType="VarChar(50)")]
		public string Supplier_Item_No
		{
			get
			{
				return this._Supplier_Item_No;
			}
			set
			{
				if ((this._Supplier_Item_No != value))
				{
					this.OnSupplier_Item_NoChanging(value);
					this.SendPropertyChanging();
					this._Supplier_Item_No = value;
					this.SendPropertyChanged("Supplier_Item_No");
					this.OnSupplier_Item_NoChanged();
				}
			}
		}
		
		[Column(Storage="_Insp_Result_Reason", DbType="VarChar(2000)")]
		public string Insp_Result_Reason
		{
			get
			{
				return this._Insp_Result_Reason;
			}
			set
			{
				if ((this._Insp_Result_Reason != value))
				{
					this.OnInsp_Result_ReasonChanging(value);
					this.SendPropertyChanging();
					this._Insp_Result_Reason = value;
					this.SendPropertyChanged("Insp_Result_Reason");
					this.OnInsp_Result_ReasonChanged();
				}
			}
		}
		
		[Column(Storage="_Phy_Properties_Result", DbType="VarChar(50)")]
		public string Phy_Properties_Result
		{
			get
			{
				return this._Phy_Properties_Result;
			}
			set
			{
				if ((this._Phy_Properties_Result != value))
				{
					this.OnPhy_Properties_ResultChanging(value);
					this.SendPropertyChanging();
					this._Phy_Properties_Result = value;
					this.SendPropertyChanged("Phy_Properties_Result");
					this.OnPhy_Properties_ResultChanged();
				}
			}
		}
		
		[Column(Storage="_SupplierItemColor", DbType="VarChar(50)")]
		public string SupplierItemColor
		{
			get
			{
				return this._SupplierItemColor;
			}
			set
			{
				if ((this._SupplierItemColor != value))
				{
					this.OnSupplierItemColorChanging(value);
					this.SendPropertyChanging();
					this._SupplierItemColor = value;
					this.SendPropertyChanged("SupplierItemColor");
					this.OnSupplierItemColorChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnClass", DbType="NVarChar(50)")]
		public string WeftYarnClass
		{
			get
			{
				return this._WeftYarnClass;
			}
			set
			{
				if ((this._WeftYarnClass != value))
				{
					this.OnWeftYarnClassChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnClass = value;
					this.SendPropertyChanged("WeftYarnClass");
					this.OnWeftYarnClassChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnPercentage", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> WeftYarnPercentage
		{
			get
			{
				return this._WeftYarnPercentage;
			}
			set
			{
				if ((this._WeftYarnPercentage != value))
				{
					this.OnWeftYarnPercentageChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnPercentage = value;
					this.SendPropertyChanged("WeftYarnPercentage");
					this.OnWeftYarnPercentageChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnStatus", DbType="VarChar(50)")]
		public string WeftYarnStatus
		{
			get
			{
				return this._WeftYarnStatus;
			}
			set
			{
				if ((this._WeftYarnStatus != value))
				{
					this.OnWeftYarnStatusChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnStatus = value;
					this.SendPropertyChanged("WeftYarnStatus");
					this.OnWeftYarnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution1", DbType="NVarChar(50)")]
		public string WeftYarnSolution1
		{
			get
			{
				return this._WeftYarnSolution1;
			}
			set
			{
				if ((this._WeftYarnSolution1 != value))
				{
					this.OnWeftYarnSolution1Changing(value);
					this.SendPropertyChanging();
					this._WeftYarnSolution1 = value;
					this.SendPropertyChanged("WeftYarnSolution1");
					this.OnWeftYarnSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution2", DbType="NVarChar(50)")]
		public string WeftYarnSolution2
		{
			get
			{
				return this._WeftYarnSolution2;
			}
			set
			{
				if ((this._WeftYarnSolution2 != value))
				{
					this.OnWeftYarnSolution2Changing(value);
					this.SendPropertyChanging();
					this._WeftYarnSolution2 = value;
					this.SendPropertyChanged("WeftYarnSolution2");
					this.OnWeftYarnSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarnWastage", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> WeftYarnWastage
		{
			get
			{
				return this._WeftYarnWastage;
			}
			set
			{
				if ((this._WeftYarnWastage != value))
				{
					this.OnWeftYarnWastageChanging(value);
					this.SendPropertyChanging();
					this._WeftYarnWastage = value;
					this.SendPropertyChanged("WeftYarnWastage");
					this.OnWeftYarnWastageChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWarpResult", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> ElongationWarpResult
		{
			get
			{
				return this._ElongationWarpResult;
			}
			set
			{
				if ((this._ElongationWarpResult != value))
				{
					this.OnElongationWarpResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationWarpResult = value;
					this.SendPropertyChanged("ElongationWarpResult");
					this.OnElongationWarpResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationWeftResult", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> ElongationWeftResult
		{
			get
			{
				return this._ElongationWeftResult;
			}
			set
			{
				if ((this._ElongationWeftResult != value))
				{
					this.OnElongationWeftResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationWeftResult = value;
					this.SendPropertyChanged("ElongationWeftResult");
					this.OnElongationWeftResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationStatus", DbType="VarChar(50)")]
		public string ElongationStatus
		{
			get
			{
				return this._ElongationStatus;
			}
			set
			{
				if ((this._ElongationStatus != value))
				{
					this.OnElongationStatusChanging(value);
					this.SendPropertyChanging();
					this._ElongationStatus = value;
					this.SendPropertyChanged("ElongationStatus");
					this.OnElongationStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationSolution1", DbType="NVarChar(50)")]
		public string ElongationSolution1
		{
			get
			{
				return this._ElongationSolution1;
			}
			set
			{
				if ((this._ElongationSolution1 != value))
				{
					this.OnElongationSolution1Changing(value);
					this.SendPropertyChanging();
					this._ElongationSolution1 = value;
					this.SendPropertyChanged("ElongationSolution1");
					this.OnElongationSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_ElongationSolution2", DbType="NVarChar(50)")]
		public string ElongationSolution2
		{
			get
			{
				return this._ElongationSolution2;
			}
			set
			{
				if ((this._ElongationSolution2 != value))
				{
					this.OnElongationSolution2Changing(value);
					this.SendPropertyChanging();
					this._ElongationSolution2 = value;
					this.SendPropertyChanged("ElongationSolution2");
					this.OnElongationSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_WeftYarn", DbType="VarChar(10)")]
		public string WeftYarn
		{
			get
			{
				return this._WeftYarn;
			}
			set
			{
				if ((this._WeftYarn != value))
				{
					this.OnWeftYarnChanging(value);
					this.SendPropertyChanging();
					this._WeftYarn = value;
					this.SendPropertyChanged("WeftYarn");
					this.OnWeftYarnChanged();
				}
			}
		}
		
		[Column(Storage="_Elongation", DbType="VarChar(10)")]
		public string Elongation
		{
			get
			{
				return this._Elongation;
			}
			set
			{
				if ((this._Elongation != value))
				{
					this.OnElongationChanging(value);
					this.SendPropertyChanging();
					this._Elongation = value;
					this.SendPropertyChanged("Elongation");
					this.OnElongationChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrial", DbType="VarChar(10)")]
		public string MouldTrial
		{
			get
			{
				return this._MouldTrial;
			}
			set
			{
				if ((this._MouldTrial != value))
				{
					this.OnMouldTrialChanging(value);
					this.SendPropertyChanging();
					this._MouldTrial = value;
					this.SendPropertyChanged("MouldTrial");
					this.OnMouldTrialChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialSolution1", DbType="NVarChar(50)")]
		public string MouldTrialSolution1
		{
			get
			{
				return this._MouldTrialSolution1;
			}
			set
			{
				if ((this._MouldTrialSolution1 != value))
				{
					this.OnMouldTrialSolution1Changing(value);
					this.SendPropertyChanging();
					this._MouldTrialSolution1 = value;
					this.SendPropertyChanged("MouldTrialSolution1");
					this.OnMouldTrialSolution1Changed();
				}
			}
		}
		
		[Column(Storage="_MouldTrialSolution2", DbType="NVarChar(50)")]
		public string MouldTrialSolution2
		{
			get
			{
				return this._MouldTrialSolution2;
			}
			set
			{
				if ((this._MouldTrialSolution2 != value))
				{
					this.OnMouldTrialSolution2Changing(value);
					this.SendPropertyChanging();
					this._MouldTrialSolution2 = value;
					this.SendPropertyChanged("MouldTrialSolution2");
					this.OnMouldTrialSolution2Changed();
				}
			}
		}
		
		[Column(Storage="_Inspection_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Inspection_Date
		{
			get
			{
				return this._Inspection_Date;
			}
			set
			{
				if ((this._Inspection_Date != value))
				{
					this.OnInspection_DateChanging(value);
					this.SendPropertyChanging();
					this._Inspection_Date = value;
					this.SendPropertyChanged("Inspection_Date");
					this.OnInspection_DateChanged();
				}
			}
		}
		
		[Column(Storage="_RefNo", DbType="Int")]
		public System.Nullable<int> RefNo
		{
			get
			{
				return this._RefNo;
			}
			set
			{
				if ((this._RefNo != value))
				{
					this.OnRefNoChanging(value);
					this.SendPropertyChanging();
					this._RefNo = value;
					this.SendPropertyChanged("RefNo");
					this.OnRefNoChanged();
				}
			}
		}
		
		[Column(Storage="_Warehouse", DbType="VarChar(10)")]
		public string Warehouse
		{
			get
			{
				return this._Warehouse;
			}
			set
			{
				if ((this._Warehouse != value))
				{
					this.OnWarehouseChanging(value);
					this.SendPropertyChanging();
					this._Warehouse = value;
					this.SendPropertyChanged("Warehouse");
					this.OnWarehouseChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedByCutting", DbType="VarChar(20)")]
		public string AgreedByCutting
		{
			get
			{
				return this._AgreedByCutting;
			}
			set
			{
				if ((this._AgreedByCutting != value))
				{
					this.OnAgreedByCuttingChanging(value);
					this.SendPropertyChanging();
					this._AgreedByCutting = value;
					this.SendPropertyChanged("AgreedByCutting");
					this.OnAgreedByCuttingChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatching", DbType="VarChar(10)")]
		public string ColorMatching
		{
			get
			{
				return this._ColorMatching;
			}
			set
			{
				if ((this._ColorMatching != value))
				{
					this.OnColorMatchingChanging(value);
					this.SendPropertyChanging();
					this._ColorMatching = value;
					this.SendPropertyChanged("ColorMatching");
					this.OnColorMatchingChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatchingResult", DbType="VarChar(20)")]
		public string ColorMatchingResult
		{
			get
			{
				return this._ColorMatchingResult;
			}
			set
			{
				if ((this._ColorMatchingResult != value))
				{
					this.OnColorMatchingResultChanging(value);
					this.SendPropertyChanging();
					this._ColorMatchingResult = value;
					this.SendPropertyChanged("ColorMatchingResult");
					this.OnColorMatchingResultChanged();
				}
			}
		}
		
		[Column(Storage="_ColorMatchingAction", DbType="Int")]
		public System.Nullable<int> ColorMatchingAction
		{
			get
			{
				return this._ColorMatchingAction;
			}
			set
			{
				if ((this._ColorMatchingAction != value))
				{
					this.OnColorMatchingActionChanging(value);
					this.SendPropertyChanging();
					this._ColorMatchingAction = value;
					this.SendPropertyChanged("ColorMatchingAction");
					this.OnColorMatchingActionChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialResult", DbType="VarChar(20)")]
		public string MouldTrialResult
		{
			get
			{
				return this._MouldTrialResult;
			}
			set
			{
				if ((this._MouldTrialResult != value))
				{
					this.OnMouldTrialResultChanging(value);
					this.SendPropertyChanging();
					this._MouldTrialResult = value;
					this.SendPropertyChanged("MouldTrialResult");
					this.OnMouldTrialResultChanged();
				}
			}
		}
		
		[Column(Storage="_MouldTrialAction", DbType="Int")]
		public System.Nullable<int> MouldTrialAction
		{
			get
			{
				return this._MouldTrialAction;
			}
			set
			{
				if ((this._MouldTrialAction != value))
				{
					this.OnMouldTrialActionChanging(value);
					this.SendPropertyChanging();
					this._MouldTrialAction = value;
					this.SendPropertyChanged("MouldTrialAction");
					this.OnMouldTrialActionChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationResult", DbType="VarChar(20)")]
		public string ElongationResult
		{
			get
			{
				return this._ElongationResult;
			}
			set
			{
				if ((this._ElongationResult != value))
				{
					this.OnElongationResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationResult = value;
					this.SendPropertyChanged("ElongationResult");
					this.OnElongationResultChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationAction", DbType="Int")]
		public System.Nullable<int> ElongationAction
		{
			get
			{
				return this._ElongationAction;
			}
			set
			{
				if ((this._ElongationAction != value))
				{
					this.OnElongationActionChanging(value);
					this.SendPropertyChanging();
					this._ElongationAction = value;
					this.SendPropertyChanged("ElongationAction");
					this.OnElongationActionChanged();
				}
			}
		}
		
		[Column(Storage="_Lamination", DbType="VarChar(10)")]
		public string Lamination
		{
			get
			{
				return this._Lamination;
			}
			set
			{
				if ((this._Lamination != value))
				{
					this.OnLaminationChanging(value);
					this.SendPropertyChanging();
					this._Lamination = value;
					this.SendPropertyChanged("Lamination");
					this.OnLaminationChanged();
				}
			}
		}
		
		[Column(Storage="_LaminationResult", DbType="VarChar(20)")]
		public string LaminationResult
		{
			get
			{
				return this._LaminationResult;
			}
			set
			{
				if ((this._LaminationResult != value))
				{
					this.OnLaminationResultChanging(value);
					this.SendPropertyChanging();
					this._LaminationResult = value;
					this.SendPropertyChanged("LaminationResult");
					this.OnLaminationResultChanged();
				}
			}
		}
		
		[Column(Storage="_LaminationAction", DbType="Int")]
		public System.Nullable<int> LaminationAction
		{
			get
			{
				return this._LaminationAction;
			}
			set
			{
				if ((this._LaminationAction != value))
				{
					this.OnLaminationActionChanging(value);
					this.SendPropertyChanging();
					this._LaminationAction = value;
					this.SendPropertyChanged("LaminationAction");
					this.OnLaminationActionChanged();
				}
			}
		}
		
		[Column(Storage="_Bonding", DbType="VarChar(10)")]
		public string Bonding
		{
			get
			{
				return this._Bonding;
			}
			set
			{
				if ((this._Bonding != value))
				{
					this.OnBondingChanging(value);
					this.SendPropertyChanging();
					this._Bonding = value;
					this.SendPropertyChanged("Bonding");
					this.OnBondingChanged();
				}
			}
		}
		
		[Column(Storage="_BondingResult", DbType="VarChar(20)")]
		public string BondingResult
		{
			get
			{
				return this._BondingResult;
			}
			set
			{
				if ((this._BondingResult != value))
				{
					this.OnBondingResultChanging(value);
					this.SendPropertyChanging();
					this._BondingResult = value;
					this.SendPropertyChanged("BondingResult");
					this.OnBondingResultChanged();
				}
			}
		}
		
		[Column(Storage="_BondingAction", DbType="Int")]
		public System.Nullable<int> BondingAction
		{
			get
			{
				return this._BondingAction;
			}
			set
			{
				if ((this._BondingAction != value))
				{
					this.OnBondingActionChanging(value);
					this.SendPropertyChanging();
					this._BondingAction = value;
					this.SendPropertyChanged("BondingAction");
					this.OnBondingActionChanged();
				}
			}
		}
		
		[Column(Storage="_ThicknessResult", DbType="VarChar(20)")]
		public string ThicknessResult
		{
			get
			{
				return this._ThicknessResult;
			}
			set
			{
				if ((this._ThicknessResult != value))
				{
					this.OnThicknessResultChanging(value);
					this.SendPropertyChanging();
					this._ThicknessResult = value;
					this.SendPropertyChanged("ThicknessResult");
					this.OnThicknessResultChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResult", DbType="VarChar(20)")]
		public string LengthResult
		{
			get
			{
				return this._LengthResult;
			}
			set
			{
				if ((this._LengthResult != value))
				{
					this.OnLengthResultChanging(value);
					this.SendPropertyChanging();
					this._LengthResult = value;
					this.SendPropertyChanged("LengthResult");
					this.OnLengthResultChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResult", DbType="VarChar(20)")]
		public string WidthResult
		{
			get
			{
				return this._WidthResult;
			}
			set
			{
				if ((this._WidthResult != value))
				{
					this.OnWidthResultChanging(value);
					this.SendPropertyChanging();
					this._WidthResult = value;
					this.SendPropertyChanged("WidthResult");
					this.OnWidthResultChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWidth
		{
			get
			{
				return this._StandardWidth;
			}
			set
			{
				if ((this._StandardWidth != value))
				{
					this.OnStandardWidthChanging(value);
					this.SendPropertyChanging();
					this._StandardWidth = value;
					this.SendPropertyChanged("StandardWidth");
					this.OnStandardWidthChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqm", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqm
		{
			get
			{
				return this._StandardWeightGmSqm;
			}
			set
			{
				if ((this._StandardWeightGmSqm != value))
				{
					this.OnStandardWeightGmSqmChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqm = value;
					this.SendPropertyChanged("StandardWeightGmSqm");
					this.OnStandardWeightGmSqmChanged();
				}
			}
		}
		
		[Column(Storage="_OverallRemark", DbType="NVarChar(300)")]
		public string OverallRemark
		{
			get
			{
				return this._OverallRemark;
			}
			set
			{
				if ((this._OverallRemark != value))
				{
					this.OnOverallRemarkChanging(value);
					this.SendPropertyChanging();
					this._OverallRemark = value;
					this.SendPropertyChanged("OverallRemark");
					this.OnOverallRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_SplitFlag", DbType="VarChar(10)")]
		public string SplitFlag
		{
			get
			{
				return this._SplitFlag;
			}
			set
			{
				if ((this._SplitFlag != value))
				{
					this.OnSplitFlagChanging(value);
					this.SendPropertyChanging();
					this._SplitFlag = value;
					this.SendPropertyChanged("SplitFlag");
					this.OnSplitFlagChanged();
				}
			}
		}
		
		[Column(Storage="_UsableWidthMinByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> UsableWidthMinByLot
		{
			get
			{
				return this._UsableWidthMinByLot;
			}
			set
			{
				if ((this._UsableWidthMinByLot != value))
				{
					this.OnUsableWidthMinByLotChanging(value);
					this.SendPropertyChanging();
					this._UsableWidthMinByLot = value;
					this.SendPropertyChanged("UsableWidthMinByLot");
					this.OnUsableWidthMinByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DiffWidthPercent", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> DiffWidthPercent
		{
			get
			{
				return this._DiffWidthPercent;
			}
			set
			{
				if ((this._DiffWidthPercent != value))
				{
					this.OnDiffWidthPercentChanging(value);
					this.SendPropertyChanging();
					this._DiffWidthPercent = value;
					this.SendPropertyChanged("DiffWidthPercent");
					this.OnDiffWidthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_RollQty", DbType="Int")]
		public System.Nullable<int> RollQty
		{
			get
			{
				return this._RollQty;
			}
			set
			{
				if ((this._RollQty != value))
				{
					this.OnRollQtyChanging(value);
					this.SendPropertyChanging();
					this._RollQty = value;
					this.SendPropertyChanged("RollQty");
					this.OnRollQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SampleSize", DbType="VarChar(10)")]
		public string SampleSize
		{
			get
			{
				return this._SampleSize;
			}
			set
			{
				if ((this._SampleSize != value))
				{
					this.OnSampleSizeChanging(value);
					this.SendPropertyChanging();
					this._SampleSize = value;
					this.SendPropertyChanged("SampleSize");
					this.OnSampleSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_DiffLengthAveByLot", DbType="Decimal(20,2)")]
		public System.Nullable<decimal> DiffLengthAveByLot
		{
			get
			{
				return this._DiffLengthAveByLot;
			}
			set
			{
				if ((this._DiffLengthAveByLot != value))
				{
					this.OnDiffLengthAveByLotChanging(value);
					this.SendPropertyChanging();
					this._DiffLengthAveByLot = value;
					this.SendPropertyChanged("DiffLengthAveByLot");
					this.OnDiffLengthAveByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLengthByLot
		{
			get
			{
				return this._TotalLengthByLot;
			}
			set
			{
				if ((this._TotalLengthByLot != value))
				{
					this.OnTotalLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalLengthByLot = value;
					this.SendPropertyChanged("TotalLengthByLot");
					this.OnTotalLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_RegularDefectResult", DbType="VarChar(50)")]
		public string RegularDefectResult
		{
			get
			{
				return this._RegularDefectResult;
			}
			set
			{
				if ((this._RegularDefectResult != value))
				{
					this.OnRegularDefectResultChanging(value);
					this.SendPropertyChanging();
					this._RegularDefectResult = value;
					this.SendPropertyChanged("RegularDefectResult");
					this.OnRegularDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_TotalActualLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalActualLengthByLot
		{
			get
			{
				return this._TotalActualLengthByLot;
			}
			set
			{
				if ((this._TotalActualLengthByLot != value))
				{
					this.OnTotalActualLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalActualLengthByLot = value;
					this.SendPropertyChanged("TotalActualLengthByLot");
					this.OnTotalActualLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackageListlengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackageListlengthByBatch
		{
			get
			{
				return this._PackageListlengthByBatch;
			}
			set
			{
				if ((this._PackageListlengthByBatch != value))
				{
					this.OnPackageListlengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._PackageListlengthByBatch = value;
					this.SendPropertyChanged("PackageListlengthByBatch");
					this.OnPackageListlengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(50)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_ColorName", DbType="VarChar(50)")]
		public string ColorName
		{
			get
			{
				return this._ColorName;
			}
			set
			{
				if ((this._ColorName != value))
				{
					this.OnColorNameChanging(value);
					this.SendPropertyChanging();
					this._ColorName = value;
					this.SendPropertyChanged("ColorName");
					this.OnColorNameChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByBatch", DbType="Int")]
		public System.Nullable<int> RollQtyByBatch
		{
			get
			{
				return this._RollQtyByBatch;
			}
			set
			{
				if ((this._RollQtyByBatch != value))
				{
					this.OnRollQtyByBatchChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByBatch = value;
					this.SendPropertyChanged("RollQtyByBatch");
					this.OnRollQtyByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_TotalScore1ByLot", DbType="Int")]
		public System.Nullable<int> TotalScore1ByLot
		{
			get
			{
				return this._TotalScore1ByLot;
			}
			set
			{
				if ((this._TotalScore1ByLot != value))
				{
					this.OnTotalScore1ByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalScore1ByLot = value;
					this.SendPropertyChanged("TotalScore1ByLot");
					this.OnTotalScore1ByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalScore2ByLot", DbType="Int")]
		public System.Nullable<int> TotalScore2ByLot
		{
			get
			{
				return this._TotalScore2ByLot;
			}
			set
			{
				if ((this._TotalScore2ByLot != value))
				{
					this.OnTotalScore2ByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalScore2ByLot = value;
					this.SendPropertyChanged("TotalScore2ByLot");
					this.OnTotalScore2ByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasLengthByLot
		{
			get
			{
				return this._MeasLengthByLot;
			}
			set
			{
				if ((this._MeasLengthByLot != value))
				{
					this.OnMeasLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._MeasLengthByLot = value;
					this.SendPropertyChanged("MeasLengthByLot");
					this.OnMeasLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POLength
		{
			get
			{
				return this._POLength;
			}
			set
			{
				if ((this._POLength != value))
				{
					this.OnPOLengthChanging(value);
					this.SendPropertyChanging();
					this._POLength = value;
					this.SendPropertyChanged("POLength");
					this.OnPOLengthChanged();
				}
			}
		}
		
		[Column(Storage="_OverAllClaimLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverAllClaimLength
		{
			get
			{
				return this._OverAllClaimLength;
			}
			set
			{
				if ((this._OverAllClaimLength != value))
				{
					this.OnOverAllClaimLengthChanging(value);
					this.SendPropertyChanging();
					this._OverAllClaimLength = value;
					this.SendPropertyChanged("OverAllClaimLength");
					this.OnOverAllClaimLengthChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqmMax
		{
			get
			{
				return this._StandardWeightGmSqmMax;
			}
			set
			{
				if ((this._StandardWeightGmSqmMax != value))
				{
					this.OnStandardWeightGmSqmMaxChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmMax = value;
					this.SendPropertyChanged("StandardWeightGmSqmMax");
					this.OnStandardWeightGmSqmMaxChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> StandardWeightGmSqmMin
		{
			get
			{
				return this._StandardWeightGmSqmMin;
			}
			set
			{
				if ((this._StandardWeightGmSqmMin != value))
				{
					this.OnStandardWeightGmSqmMinChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmMin = value;
					this.SendPropertyChanged("StandardWeightGmSqmMin");
					this.OnStandardWeightGmSqmMinChanged();
				}
			}
		}
		
		[Column(Storage="_StandardWeightGmSqmS", DbType="NVarChar(50)")]
		public string StandardWeightGmSqmS
		{
			get
			{
				return this._StandardWeightGmSqmS;
			}
			set
			{
				if ((this._StandardWeightGmSqmS != value))
				{
					this.OnStandardWeightGmSqmSChanging(value);
					this.SendPropertyChanging();
					this._StandardWeightGmSqmS = value;
					this.SendPropertyChanged("StandardWeightGmSqmS");
					this.OnStandardWeightGmSqmSChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectTotalPoint", DbType="Int")]
		public System.Nullable<int> Step1DefectTotalPoint
		{
			get
			{
				return this._Step1DefectTotalPoint;
			}
			set
			{
				if ((this._Step1DefectTotalPoint != value))
				{
					this.OnStep1DefectTotalPointChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectTotalPoint = value;
					this.SendPropertyChanged("Step1DefectTotalPoint");
					this.OnStep1DefectTotalPointChanged();
				}
			}
		}
		
		[Column(Storage="_Step1Pt100m2", DbType="Int")]
		public System.Nullable<int> Step1Pt100m2
		{
			get
			{
				return this._Step1Pt100m2;
			}
			set
			{
				if ((this._Step1Pt100m2 != value))
				{
					this.OnStep1Pt100m2Changing(value);
					this.SendPropertyChanging();
					this._Step1Pt100m2 = value;
					this.SendPropertyChanged("Step1Pt100m2");
					this.OnStep1Pt100m2Changed();
				}
			}
		}
		
		[Column(Storage="_Step1DefectResult", DbType="VarChar(100)")]
		public string Step1DefectResult
		{
			get
			{
				return this._Step1DefectResult;
			}
			set
			{
				if ((this._Step1DefectResult != value))
				{
					this.OnStep1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectResult = value;
					this.SendPropertyChanged("Step1DefectResult");
					this.OnStep1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasLength
		{
			get
			{
				return this._Step1MeasLength;
			}
			set
			{
				if ((this._Step1MeasLength != value))
				{
					this.OnStep1MeasLengthChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasLength = value;
					this.SendPropertyChanged("Step1MeasLength");
					this.OnStep1MeasLengthChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasWidth
		{
			get
			{
				return this._Step1MeasWidth;
			}
			set
			{
				if ((this._Step1MeasWidth != value))
				{
					this.OnStep1MeasWidthChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasWidth = value;
					this.SendPropertyChanged("Step1MeasWidth");
					this.OnStep1MeasWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Step1MeasSq", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1MeasSq
		{
			get
			{
				return this._Step1MeasSq;
			}
			set
			{
				if ((this._Step1MeasSq != value))
				{
					this.OnStep1MeasSqChanging(value);
					this.SendPropertyChanging();
					this._Step1MeasSq = value;
					this.SendPropertyChanged("Step1MeasSq");
					this.OnStep1MeasSqChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectScore1", DbType="Int")]
		public System.Nullable<int> Step1DefectScore1
		{
			get
			{
				return this._Step1DefectScore1;
			}
			set
			{
				if ((this._Step1DefectScore1 != value))
				{
					this.OnStep1DefectScore1Changing(value);
					this.SendPropertyChanging();
					this._Step1DefectScore1 = value;
					this.SendPropertyChanged("Step1DefectScore1");
					this.OnStep1DefectScore1Changed();
				}
			}
		}
		
		[Column(Storage="_Step1DefectScore2", DbType="Int")]
		public System.Nullable<int> Step1DefectScore2
		{
			get
			{
				return this._Step1DefectScore2;
			}
			set
			{
				if ((this._Step1DefectScore2 != value))
				{
					this.OnStep1DefectScore2Changing(value);
					this.SendPropertyChanging();
					this._Step1DefectScore2 = value;
					this.SendPropertyChanged("Step1DefectScore2");
					this.OnStep1DefectScore2Changed();
				}
			}
		}
		
		[Column(Storage="_Step1LossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossQty
		{
			get
			{
				return this._Step1LossQty;
			}
			set
			{
				if ((this._Step1LossQty != value))
				{
					this.OnStep1LossQtyChanging(value);
					this.SendPropertyChanging();
					this._Step1LossQty = value;
					this.SendPropertyChanged("Step1LossQty");
					this.OnStep1LossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step1LossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossPercent
		{
			get
			{
				return this._Step1LossPercent;
			}
			set
			{
				if ((this._Step1LossPercent != value))
				{
					this.OnStep1LossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step1LossPercent = value;
					this.SendPropertyChanged("Step1LossPercent");
					this.OnStep1LossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step1ClaimQtyFull", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1ClaimQtyFull
		{
			get
			{
				return this._Step1ClaimQtyFull;
			}
			set
			{
				if ((this._Step1ClaimQtyFull != value))
				{
					this.OnStep1ClaimQtyFullChanging(value);
					this.SendPropertyChanging();
					this._Step1ClaimQtyFull = value;
					this.SendPropertyChanged("Step1ClaimQtyFull");
					this.OnStep1ClaimQtyFullChanged();
				}
			}
		}
		
		[Column(Storage="_Step1ClaimQtyAQL", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1ClaimQtyAQL
		{
			get
			{
				return this._Step1ClaimQtyAQL;
			}
			set
			{
				if ((this._Step1ClaimQtyAQL != value))
				{
					this.OnStep1ClaimQtyAQLChanging(value);
					this.SendPropertyChanging();
					this._Step1ClaimQtyAQL = value;
					this.SendPropertyChanged("Step1ClaimQtyAQL");
					this.OnStep1ClaimQtyAQLChanged();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularScore1", DbType="Int")]
		public System.Nullable<int> Step2IrregularScore1
		{
			get
			{
				return this._Step2IrregularScore1;
			}
			set
			{
				if ((this._Step2IrregularScore1 != value))
				{
					this.OnStep2IrregularScore1Changing(value);
					this.SendPropertyChanging();
					this._Step2IrregularScore1 = value;
					this.SendPropertyChanged("Step2IrregularScore1");
					this.OnStep2IrregularScore1Changed();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularScore2", DbType="Int")]
		public System.Nullable<int> Step2IrregularScore2
		{
			get
			{
				return this._Step2IrregularScore2;
			}
			set
			{
				if ((this._Step2IrregularScore2 != value))
				{
					this.OnStep2IrregularScore2Changing(value);
					this.SendPropertyChanging();
					this._Step2IrregularScore2 = value;
					this.SendPropertyChanged("Step2IrregularScore2");
					this.OnStep2IrregularScore2Changed();
				}
			}
		}
		
		[Column(Storage="_Step2IrregularLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2IrregularLossQty
		{
			get
			{
				return this._Step2IrregularLossQty;
			}
			set
			{
				if ((this._Step2IrregularLossQty != value))
				{
					this.OnStep2IrregularLossQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2IrregularLossQty = value;
					this.SendPropertyChanged("Step2IrregularLossQty");
					this.OnStep2IrregularLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2IrregulardLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2IrregulardLossPercent
		{
			get
			{
				return this._Step2IrregulardLossPercent;
			}
			set
			{
				if ((this._Step2IrregulardLossPercent != value))
				{
					this.OnStep2IrregulardLossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step2IrregulardLossPercent = value;
					this.SendPropertyChanged("Step2IrregulardLossPercent");
					this.OnStep2IrregulardLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimQtyFull", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimQtyFull
		{
			get
			{
				return this._Step2ClaimQtyFull;
			}
			set
			{
				if ((this._Step2ClaimQtyFull != value))
				{
					this.OnStep2ClaimQtyFullChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimQtyFull = value;
					this.SendPropertyChanged("Step2ClaimQtyFull");
					this.OnStep2ClaimQtyFullChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimQtyAQL", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimQtyAQL
		{
			get
			{
				return this._Step2ClaimQtyAQL;
			}
			set
			{
				if ((this._Step2ClaimQtyAQL != value))
				{
					this.OnStep2ClaimQtyAQLChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimQtyAQL = value;
					this.SendPropertyChanged("Step2ClaimQtyAQL");
					this.OnStep2ClaimQtyAQLChanged();
				}
			}
		}
		
		[Column(Storage="_Step2HaveRegular", DbType="VarChar(20)")]
		public string Step2HaveRegular
		{
			get
			{
				return this._Step2HaveRegular;
			}
			set
			{
				if ((this._Step2HaveRegular != value))
				{
					this.OnStep2HaveRegularChanging(value);
					this.SendPropertyChanging();
					this._Step2HaveRegular = value;
					this.SendPropertyChanged("Step2HaveRegular");
					this.OnStep2HaveRegularChanged();
				}
			}
		}
		
		[Column(Storage="_Step2EvadeMarkerLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2EvadeMarkerLossPercent
		{
			get
			{
				return this._Step2EvadeMarkerLossPercent;
			}
			set
			{
				if ((this._Step2EvadeMarkerLossPercent != value))
				{
					this.OnStep2EvadeMarkerLossPercentChanging(value);
					this.SendPropertyChanging();
					this._Step2EvadeMarkerLossPercent = value;
					this.SendPropertyChanged("Step2EvadeMarkerLossPercent");
					this.OnStep2EvadeMarkerLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Step2RegularLossWidth", DbType="VarChar(100)")]
		public string Step2RegularLossWidth
		{
			get
			{
				return this._Step2RegularLossWidth;
			}
			set
			{
				if ((this._Step2RegularLossWidth != value))
				{
					this.OnStep2RegularLossWidthChanging(value);
					this.SendPropertyChanging();
					this._Step2RegularLossWidth = value;
					this.SendPropertyChanged("Step2RegularLossWidth");
					this.OnStep2RegularLossWidthChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ConfirmByCutting", DbType="VarChar(100)")]
		public string Step2ConfirmByCutting
		{
			get
			{
				return this._Step2ConfirmByCutting;
			}
			set
			{
				if ((this._Step2ConfirmByCutting != value))
				{
					this.OnStep2ConfirmByCuttingChanging(value);
					this.SendPropertyChanging();
					this._Step2ConfirmByCutting = value;
					this.SendPropertyChanged("Step2ConfirmByCutting");
					this.OnStep2ConfirmByCuttingChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimRegularQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimRegularQty
		{
			get
			{
				return this._Step2ClaimRegularQty;
			}
			set
			{
				if ((this._Step2ClaimRegularQty != value))
				{
					this.OnStep2ClaimRegularQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimRegularQty = value;
					this.SendPropertyChanged("Step2ClaimRegularQty");
					this.OnStep2ClaimRegularQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimSubTotalQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimSubTotalQty
		{
			get
			{
				return this._Step2ClaimSubTotalQty;
			}
			set
			{
				if ((this._Step2ClaimSubTotalQty != value))
				{
					this.OnStep2ClaimSubTotalQtyChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimSubTotalQty = value;
					this.SendPropertyChanged("Step2ClaimSubTotalQty");
					this.OnStep2ClaimSubTotalQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimAction", DbType="VarChar(100)")]
		public string Step2ClaimAction
		{
			get
			{
				return this._Step2ClaimAction;
			}
			set
			{
				if ((this._Step2ClaimAction != value))
				{
					this.OnStep2ClaimActionChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimAction = value;
					this.SendPropertyChanged("Step2ClaimAction");
					this.OnStep2ClaimActionChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverallResult", DbType="VarChar(100)")]
		public string OtherOverallResult
		{
			get
			{
				return this._OtherOverallResult;
			}
			set
			{
				if ((this._OtherOverallResult != value))
				{
					this.OnOtherOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OtherOverallResult = value;
					this.SendPropertyChanged("OtherOverallResult");
					this.OnOtherOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercent
		{
			get
			{
				return this._OverallClaimPercent;
			}
			set
			{
				if ((this._OverallClaimPercent != value))
				{
					this.OnOverallClaimPercentChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercent = value;
					this.SendPropertyChanged("OverallClaimPercent");
					this.OnOverallClaimPercentChanged();
				}
			}
		}
		
		[Column(Storage="_CutCurling", DbType="VarChar(10)")]
		public string CutCurling
		{
			get
			{
				return this._CutCurling;
			}
			set
			{
				if ((this._CutCurling != value))
				{
					this.OnCutCurlingChanging(value);
					this.SendPropertyChanging();
					this._CutCurling = value;
					this.SendPropertyChanged("CutCurling");
					this.OnCutCurlingChanged();
				}
			}
		}
		
		[Column(Storage="_CutCurlingResult", DbType="VarChar(20)")]
		public string CutCurlingResult
		{
			get
			{
				return this._CutCurlingResult;
			}
			set
			{
				if ((this._CutCurlingResult != value))
				{
					this.OnCutCurlingResultChanging(value);
					this.SendPropertyChanging();
					this._CutCurlingResult = value;
					this.SendPropertyChanged("CutCurlingResult");
					this.OnCutCurlingResultChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverallResultByBatch", DbType="VarChar(100)")]
		public string OtherOverallResultByBatch
		{
			get
			{
				return this._OtherOverallResultByBatch;
			}
			set
			{
				if ((this._OtherOverallResultByBatch != value))
				{
					this.OnOtherOverallResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._OtherOverallResultByBatch = value;
					this.SendPropertyChanged("OtherOverallResultByBatch");
					this.OnOtherOverallResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverAllClaimLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OtherOverAllClaimLength
		{
			get
			{
				return this._OtherOverAllClaimLength;
			}
			set
			{
				if ((this._OtherOverAllClaimLength != value))
				{
					this.OnOtherOverAllClaimLengthChanging(value);
					this.SendPropertyChanging();
					this._OtherOverAllClaimLength = value;
					this.SendPropertyChanged("OtherOverAllClaimLength");
					this.OnOtherOverAllClaimLengthChanged();
				}
			}
		}
		
		[Column(Storage="_OtherOverAllClaimLengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OtherOverAllClaimLengthByBatch
		{
			get
			{
				return this._OtherOverAllClaimLengthByBatch;
			}
			set
			{
				if ((this._OtherOverAllClaimLengthByBatch != value))
				{
					this.OnOtherOverAllClaimLengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._OtherOverAllClaimLengthByBatch = value;
					this.SendPropertyChanged("OtherOverAllClaimLengthByBatch");
					this.OnOtherOverAllClaimLengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_Step1DefectResultByLot", DbType="VarChar(100)")]
		public string Step1DefectResultByLot
		{
			get
			{
				return this._Step1DefectResultByLot;
			}
			set
			{
				if ((this._Step1DefectResultByLot != value))
				{
					this.OnStep1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Step1DefectResultByLot = value;
					this.SendPropertyChanged("Step1DefectResultByLot");
					this.OnStep1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalLenghtByLotExcludePass", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalLenghtByLotExcludePass
		{
			get
			{
				return this._TotalLenghtByLotExcludePass;
			}
			set
			{
				if ((this._TotalLenghtByLotExcludePass != value))
				{
					this.OnTotalLenghtByLotExcludePassChanging(value);
					this.SendPropertyChanging();
					this._TotalLenghtByLotExcludePass = value;
					this.SendPropertyChanged("TotalLenghtByLotExcludePass");
					this.OnTotalLenghtByLotExcludePassChanged();
				}
			}
		}
		
		[Column(Storage="_CutOffRollFlag", DbType="VarChar(10)")]
		public string CutOffRollFlag
		{
			get
			{
				return this._CutOffRollFlag;
			}
			set
			{
				if ((this._CutOffRollFlag != value))
				{
					this.OnCutOffRollFlagChanging(value);
					this.SendPropertyChanging();
					this._CutOffRollFlag = value;
					this.SendPropertyChanged("CutOffRollFlag");
					this.OnCutOffRollFlagChanged();
				}
			}
		}
		
		[Column(Storage="_NeedCutOut", DbType="VarChar(10)")]
		public string NeedCutOut
		{
			get
			{
				return this._NeedCutOut;
			}
			set
			{
				if ((this._NeedCutOut != value))
				{
					this.OnNeedCutOutChanging(value);
					this.SendPropertyChanging();
					this._NeedCutOut = value;
					this.SendPropertyChanged("NeedCutOut");
					this.OnNeedCutOutChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLength
		{
			get
			{
				return this._CutOutLength;
			}
			set
			{
				if ((this._CutOutLength != value))
				{
					this.OnCutOutLengthChanging(value);
					this.SendPropertyChanging();
					this._CutOutLength = value;
					this.SendPropertyChanged("CutOutLength");
					this.OnCutOutLengthChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutClaimQty
		{
			get
			{
				return this._CutOutClaimQty;
			}
			set
			{
				if ((this._CutOutClaimQty != value))
				{
					this.OnCutOutClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._CutOutClaimQty = value;
					this.SendPropertyChanged("CutOutClaimQty");
					this.OnCutOutClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQtyAgreed", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimQtyAgreed
		{
			get
			{
				return this._OverallClaimQtyAgreed;
			}
			set
			{
				if ((this._OverallClaimQtyAgreed != value))
				{
					this.OnOverallClaimQtyAgreedChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQtyAgreed = value;
					this.SendPropertyChanged("OverallClaimQtyAgreed");
					this.OnOverallClaimQtyAgreedChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimQtyByLot
		{
			get
			{
				return this._NarrowWidthClaimQtyByLot;
			}
			set
			{
				if ((this._NarrowWidthClaimQtyByLot != value))
				{
					this.OnNarrowWidthClaimQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimQtyByLot = value;
					this.SendPropertyChanged("NarrowWidthClaimQtyByLot");
					this.OnNarrowWidthClaimQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PARTIIIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PARTIIIFinalClaimQty
		{
			get
			{
				return this._PARTIIIFinalClaimQty;
			}
			set
			{
				if ((this._PARTIIIFinalClaimQty != value))
				{
					this.OnPARTIIIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PARTIIIFinalClaimQty = value;
					this.SendPropertyChanged("PARTIIIFinalClaimQty");
					this.OnPARTIIIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Name="[1111OddEvenRowFlag]", Storage="__1111OddEvenRowFlag", DbType="VarChar(1)")]
		public System.Nullable<char> _1111OddEvenRowFlag
		{
			get
			{
				return this.@__1111OddEvenRowFlag;
			}
			set
			{
				if ((this.@__1111OddEvenRowFlag != value))
				{
					this.On_1111OddEvenRowFlagChanging(value);
					this.SendPropertyChanging();
					this.@__1111OddEvenRowFlag = value;
					this.SendPropertyChanged("_1111OddEvenRowFlag");
					this.On_1111OddEvenRowFlagChanged();
				}
			}
		}
		
		[Column(Storage="_PartITotalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartITotalClaimQty
		{
			get
			{
				return this._PartITotalClaimQty;
			}
			set
			{
				if ((this._PartITotalClaimQty != value))
				{
					this.OnPartITotalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartITotalClaimQty = value;
					this.SendPropertyChanged("PartITotalClaimQty");
					this.OnPartITotalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Step2ClaimRegularQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step2ClaimRegularQtyByLot
		{
			get
			{
				return this._Step2ClaimRegularQtyByLot;
			}
			set
			{
				if ((this._Step2ClaimRegularQtyByLot != value))
				{
					this.OnStep2ClaimRegularQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._Step2ClaimRegularQtyByLot = value;
					this.SendPropertyChanged("Step2ClaimRegularQtyByLot");
					this.OnStep2ClaimRegularQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByBatch", DbType="VarChar(20)")]
		public string WidthResultByBatch
		{
			get
			{
				return this._WidthResultByBatch;
			}
			set
			{
				if ((this._WidthResultByBatch != value))
				{
					this.OnWidthResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByBatch = value;
					this.SendPropertyChanged("WidthResultByBatch");
					this.OnWidthResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(20)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(20)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ThicknessResultByLot", DbType="VarChar(20)")]
		public string ThicknessResultByLot
		{
			get
			{
				return this._ThicknessResultByLot;
			}
			set
			{
				if ((this._ThicknessResultByLot != value))
				{
					this.OnThicknessResultByLotChanging(value);
					this.SendPropertyChanging();
					this._ThicknessResultByLot = value;
					this.SendPropertyChanged("ThicknessResultByLot");
					this.OnThicknessResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditRollQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditRollQtyByLot
		{
			get
			{
				return this._AuditRollQtyByLot;
			}
			set
			{
				if ((this._AuditRollQtyByLot != value))
				{
					this.OnAuditRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditRollQtyByLot = value;
					this.SendPropertyChanged("AuditRollQtyByLot");
					this.OnAuditRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalActualLengthHasEvadeLossMarker", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalActualLengthHasEvadeLossMarker
		{
			get
			{
				return this._TotalActualLengthHasEvadeLossMarker;
			}
			set
			{
				if ((this._TotalActualLengthHasEvadeLossMarker != value))
				{
					this.OnTotalActualLengthHasEvadeLossMarkerChanging(value);
					this.SendPropertyChanging();
					this._TotalActualLengthHasEvadeLossMarker = value;
					this.SendPropertyChanged("TotalActualLengthHasEvadeLossMarker");
					this.OnTotalActualLengthHasEvadeLossMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStep2ClaimRegularQtyHasEvadeLossMarker", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> TotalStep2ClaimRegularQtyHasEvadeLossMarker
		{
			get
			{
				return this._TotalStep2ClaimRegularQtyHasEvadeLossMarker;
			}
			set
			{
				if ((this._TotalStep2ClaimRegularQtyHasEvadeLossMarker != value))
				{
					this.OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanging(value);
					this.SendPropertyChanging();
					this._TotalStep2ClaimRegularQtyHasEvadeLossMarker = value;
					this.SendPropertyChanged("TotalStep2ClaimRegularQtyHasEvadeLossMarker");
					this.OnTotalStep2ClaimRegularQtyHasEvadeLossMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_MarkerType", DbType="VarChar(20)")]
		public string MarkerType
		{
			get
			{
				return this._MarkerType;
			}
			set
			{
				if ((this._MarkerType != value))
				{
					this.OnMarkerTypeChanging(value);
					this.SendPropertyChanging();
					this._MarkerType = value;
					this.SendPropertyChanged("MarkerType");
					this.OnMarkerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimafewth", DbType="VarChar(20)")]
		public string PartIFinalClaimafewth
		{
			get
			{
				return this._PartIFinalClaimafewth;
			}
			set
			{
				if ((this._PartIFinalClaimafewth != value))
				{
					this.OnPartIFinalClaimafewthChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimafewth = value;
					this.SendPropertyChanged("PartIFinalClaimafewth");
					this.OnPartIFinalClaimafewthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditPassQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditPassQty
		{
			get
			{
				return this._AuditPassQty;
			}
			set
			{
				if ((this._AuditPassQty != value))
				{
					this.OnAuditPassQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditPassQty = value;
					this.SendPropertyChanged("AuditPassQty");
					this.OnAuditPassQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSpotDefectQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSpotDefectQtyByLot
		{
			get
			{
				return this._AuditSpotDefectQtyByLot;
			}
			set
			{
				if ((this._AuditSpotDefectQtyByLot != value))
				{
					this.OnAuditSpotDefectQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSpotDefectQtyByLot = value;
					this.SendPropertyChanged("AuditSpotDefectQtyByLot");
					this.OnAuditSpotDefectQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditVerticalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditVerticalChainDefectQty
		{
			get
			{
				return this._AuditVerticalChainDefectQty;
			}
			set
			{
				if ((this._AuditVerticalChainDefectQty != value))
				{
					this.OnAuditVerticalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditVerticalChainDefectQty = value;
					this.SendPropertyChanged("AuditVerticalChainDefectQty");
					this.OnAuditVerticalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditHorizontalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditHorizontalChainDefectQty
		{
			get
			{
				return this._AuditHorizontalChainDefectQty;
			}
			set
			{
				if ((this._AuditHorizontalChainDefectQty != value))
				{
					this.OnAuditHorizontalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditHorizontalChainDefectQty = value;
					this.SendPropertyChanged("AuditHorizontalChainDefectQty");
					this.OnAuditHorizontalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> VerticalChainDefectClaimByLot
		{
			get
			{
				return this._VerticalChainDefectClaimByLot;
			}
			set
			{
				if ((this._VerticalChainDefectClaimByLot != value))
				{
					this.OnVerticalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._VerticalChainDefectClaimByLot = value;
					this.SendPropertyChanged("VerticalChainDefectClaimByLot");
					this.OnVerticalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectLossPerentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectLossPerentByLot
		{
			get
			{
				return this._HorizontalChainDefectLossPerentByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectLossPerentByLot != value))
				{
					this.OnHorizontalChainDefectLossPerentByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectLossPerentByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectLossPerentByLot");
					this.OnHorizontalChainDefectLossPerentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectClaimByLot
		{
			get
			{
				return this._HorizontalChainDefectClaimByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectClaimByLot != value))
				{
					this.OnHorizontalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectClaimByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectClaimByLot");
					this.OnHorizontalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLengthPercent
		{
			get
			{
				return this._CutOutLengthPercent;
			}
			set
			{
				if ((this._CutOutLengthPercent != value))
				{
					this.OnCutOutLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._CutOutLengthPercent = value;
					this.SendPropertyChanged("CutOutLengthPercent");
					this.OnCutOutLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiffLossByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiffLossByLot
		{
			get
			{
				return this._LengthDiffLossByLot;
			}
			set
			{
				if ((this._LengthDiffLossByLot != value))
				{
					this.OnLengthDiffLossByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthDiffLossByLot = value;
					this.SendPropertyChanged("LengthDiffLossByLot");
					this.OnLengthDiffLossByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartIFinalClaimQty
		{
			get
			{
				return this._PartIFinalClaimQty;
			}
			set
			{
				if ((this._PartIFinalClaimQty != value))
				{
					this.OnPartIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimQty = value;
					this.SendPropertyChanged("PartIFinalClaimQty");
					this.OnPartIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PartIIFinalClaimQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PartIIFinalClaimQty
		{
			get
			{
				return this._PartIIFinalClaimQty;
			}
			set
			{
				if ((this._PartIIFinalClaimQty != value))
				{
					this.OnPartIIFinalClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._PartIIFinalClaimQty = value;
					this.SendPropertyChanged("PartIIFinalClaimQty");
					this.OnPartIIFinalClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Step1LossQtyByID", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Step1LossQtyByID
		{
			get
			{
				return this._Step1LossQtyByID;
			}
			set
			{
				if ((this._Step1LossQtyByID != value))
				{
					this.OnStep1LossQtyByIDChanging(value);
					this.SendPropertyChanging();
					this._Step1LossQtyByID = value;
					this.SendPropertyChanged("Step1LossQtyByID");
					this.OnStep1LossQtyByIDChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_MissingAudit", DbType="NVarChar(1000)")]
		public string MissingAudit
		{
			get
			{
				return this._MissingAudit;
			}
			set
			{
				if ((this._MissingAudit != value))
				{
					this.OnMissingAuditChanging(value);
					this.SendPropertyChanging();
					this._MissingAudit = value;
					this.SendPropertyChanged("MissingAudit");
					this.OnMissingAuditChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTaking", DbType="VarChar(10)")]
		public string ActionLogTaking
		{
			get
			{
				return this._ActionLogTaking;
			}
			set
			{
				if ((this._ActionLogTaking != value))
				{
					this.OnActionLogTakingChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTaking = value;
					this.SendPropertyChanged("ActionLogTaking");
					this.OnActionLogTakingChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCategory", DbType="VarChar(100)")]
		public string ActionLogCategory
		{
			get
			{
				return this._ActionLogCategory;
			}
			set
			{
				if ((this._ActionLogCategory != value))
				{
					this.OnActionLogCategoryChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCategory = value;
					this.SendPropertyChanged("ActionLogCategory");
					this.OnActionLogCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogGroup", DbType="VarChar(20)")]
		public string ActionLogGroup
		{
			get
			{
				return this._ActionLogGroup;
			}
			set
			{
				if ((this._ActionLogGroup != value))
				{
					this.OnActionLogGroupChanging(value);
					this.SendPropertyChanging();
					this._ActionLogGroup = value;
					this.SendPropertyChanged("ActionLogGroup");
					this.OnActionLogGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTargetDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogTargetDate
		{
			get
			{
				return this._ActionLogTargetDate1;
			}
			set
			{
				if ((this._ActionLogTargetDate1 != value))
				{
					this.OnActionLogTargetDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTargetDate1 = value;
					this.SendPropertyChanged("ActionLogTargetDate");
					this.OnActionLogTargetDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogRevisedDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogRevisedDate
		{
			get
			{
				return this._ActionLogRevisedDate1;
			}
			set
			{
				if ((this._ActionLogRevisedDate1 != value))
				{
					this.OnActionLogRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogRevisedDate1 = value;
					this.SendPropertyChanged("ActionLogRevisedDate");
					this.OnActionLogRevisedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCmplDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogCmplDate
		{
			get
			{
				return this._ActionLogCmplDate1;
			}
			set
			{
				if ((this._ActionLogCmplDate1 != value))
				{
					this.OnActionLogCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCmplDate1 = value;
					this.SendPropertyChanged("ActionLogCmplDate");
					this.OnActionLogCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogIsCompleted", DbType="VarChar(10)")]
		public string ActionLogIsCompleted
		{
			get
			{
				return this._ActionLogIsCompleted;
			}
			set
			{
				if ((this._ActionLogIsCompleted != value))
				{
					this.OnActionLogIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._ActionLogIsCompleted = value;
					this.SendPropertyChanged("ActionLogIsCompleted");
					this.OnActionLogIsCompletedChanged();
				}
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_PartDefect", Storage="_Fabric_Insp_PartDefects", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_PartDefect> Fabric_Insp_PartDefects
		{
			get
			{
				return this._Fabric_Insp_PartDefects;
			}
			set
			{
				this._Fabric_Insp_PartDefects.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Picture", Storage="_Fabric_Insp_Pictures", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_Picture> Fabric_Insp_Pictures
		{
			get
			{
				return this._Fabric_Insp_Pictures;
			}
			set
			{
				this._Fabric_Insp_Pictures.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_Width", Storage="_Fabric_Insp_Widths", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_Width> Fabric_Insp_Widths
		{
			get
			{
				return this._Fabric_Insp_Widths;
			}
			set
			{
				this._Fabric_Insp_Widths.Assign(value);
			}
		}
		
		[Association(Name="Fabric_Insp_Header_Fabric_Insp_SpreadDefect", Storage="_Fabric_Insp_SpreadDefects", ThisKey="Company,System_Install_No", OtherKey="Company,System_Install_No")]
		public EntitySet<Fabric_Insp_SpreadDefect> Fabric_Insp_SpreadDefects
		{
			get
			{
				return this._Fabric_Insp_SpreadDefects;
			}
			set
			{
				this._Fabric_Insp_SpreadDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fabric_Insp_PartDefects(Fabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_PartDefects(Fabric_Insp_PartDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_Pictures(Fabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_Pictures(Fabric_Insp_Picture entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_Widths(Fabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_Widths(Fabric_Insp_Width entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
		
		private void attach_Fabric_Insp_SpreadDefects(Fabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = this;
		}
		
		private void detach_Fabric_Insp_SpreadDefects(Fabric_Insp_SpreadDefect entity)
		{
			this.SendPropertyChanging();
			entity.Fabric_Insp_Header = null;
		}
	}
	
	[Table(Name="dbo.BandLaceHeader")]
	public partial class BandLaceHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _Whse;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _RollQtyByLot;
		
		private System.Nullable<int> _RollQtyByBatch;
		
		private string _LotID;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _SuppItemRef;
		
		private string _SuppCode;
		
		private string _ProjectNo;
		
		private string _PONo;
		
		private string _HDONo;
		
		private string _RollNo;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _IDAuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private string _AuditStage;
		
		private string _AuditType;
		
		private string _StepFlag;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<int> _ChainDefectPointQty;
		
		private System.Nullable<int> _TotalDefectPointQty;
		
		private System.Nullable<decimal> _PointQtyPer50M;
		
		private System.Nullable<decimal> _DeductLengthEachSpot;
		
		private System.Nullable<decimal> _SpotDefectLossPercent;
		
		private System.Nullable<decimal> _SpotDefectLossQty;
		
		private System.Nullable<decimal> _SpotDefectLossQtyByLot1;
		
		private System.Nullable<decimal> _ChainDefectLength;
		
		private System.Nullable<decimal> _ChainDefectLengthByLot1;
		
		private System.Nullable<decimal> _ChainDefectPercent;
		
		private string _Part1DefectResult;
		
		private string _Part1DefectResultByLot;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private string _NeedEvadeMarker;
		
		private System.Nullable<decimal> _EvadeMarkerLossPercent;
		
		private System.Nullable<decimal> _EvadeMarkerLossClaim;
		
		private System.Nullable<decimal> _EvadeMarkerLossClaimByLot1;
		
		private string _NeedCutoutDefect;
		
		private System.Nullable<decimal> _CutoutDefectDistance;
		
		private System.Nullable<decimal> _CutoutClaim;
		
		private System.Nullable<decimal> _CutoutClaimByLot1;
		
		private System.Nullable<decimal> _Part1DefectTotalClaimByLot;
		
		private System.Nullable<decimal> _PackingListLength;
		
		private System.Nullable<decimal> _MeasureLength;
		
		private System.Nullable<decimal> _LengthDifferent;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _CutLengthForTesting;
		
		private System.Nullable<decimal> _FinalStockInLength;
		
		private System.Nullable<decimal> _AuditLengthDifferentByLot;
		
		private System.Nullable<decimal> _AuditSampleSizeQtyByLot;
		
		private System.Nullable<decimal> _POQtyByLot;
		
		private System.Nullable<decimal> _PackingListLengthByBatch;
		
		private System.Nullable<decimal> _PackingListLengthByLot;
		
		private System.Nullable<decimal> _ShortLengthClaimQtyByLot;
		
		private string _AgreedEdgeToEdgeWidthRangeByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMinWidthByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMaxWidthByLot;
		
		private System.Nullable<decimal> _MeasureEdgeToEdgeWidth;
		
		private System.Nullable<decimal> _WidthDifferent;
		
		private System.Nullable<decimal> _MeasureWidth;
		
		private System.Nullable<decimal> _NarrowestWidthByBatch;
		
		private System.Nullable<decimal> _NarrowestWidthByLot;
		
		private System.Nullable<decimal> _NarrowWidthMarkeLossPercent;
		
		private System.Nullable<decimal> _NarrowWidthMarkeLossPercentByBatch;
		
		private string _WidthResult;
		
		private string _WidthResultByBatch;
		
		private string _WidthResultByLot;
		
		private System.Nullable<decimal> _NarrowWidthClaim;
		
		private System.Nullable<decimal> _NarrowWidthClaimByBatch;
		
		private System.Nullable<decimal> _NarrowWidthClaimByLot;
		
		private System.Nullable<decimal> _GramWeightPerSQMMin;
		
		private System.Nullable<decimal> _GramWeightPerSQMMax;
		
		private string _GramWeightPerSQMRange;
		
		private System.Nullable<decimal> _ActualWeight;
		
		private System.Nullable<decimal> _WeightDifferent;
		
		private string _WeightResultByLot;
		
		private System.Nullable<decimal> _PatternShapeMin;
		
		private System.Nullable<decimal> _PatternShapeMax;
		
		private string _PatternShapeRangeByLot;
		
		private System.Nullable<decimal> _ActualPatternShape;
		
		private System.Nullable<decimal> _PatternShapeDifferent;
		
		private System.Nullable<decimal> _PatternShapeMarkerLossPercentByLot;
		
		private string _PatternShapeResult1;
		
		private string _PatternShapeResultByLot;
		
		private System.Nullable<decimal> _PatternShapeClaimByLot;
		
		private string _Part2MeasureResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _BatchNo;
		
		private string _NeedShadeGrpg;
		
		private string _ShadeGrpgResult;
		
		private string _NeedSkewnessAndBow;
		
		private System.Nullable<decimal> _SkewnessDistanceAB;
		
		private System.Nullable<decimal> _SkewnessDistanceCD;
		
		private string _SkewnessAndBowResult;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallAgreedClaimByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _OverallConfirmBy;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _FailSolution;
		
		private string _Auditor;
		
		private string _Part4SpecificDefectResultByLot;
		
		private System.Nullable<decimal> _Part4FinalClaimByLot;
		
		private System.Nullable<int> _AuditRollQtyByLot;
		
		private System.Nullable<decimal> _DefectLossQty;
		
		private System.Nullable<decimal> _DefectLossQtyByLot;
		
		private System.Nullable<decimal> _Part1DefectClaimPercentByLot;
		
		private System.Nullable<decimal> _Part1DefectClaimByLot;
		
		private System.Nullable<decimal> _PassQty;
		
		private System.Nullable<decimal> _PassQtyByLot;
		
		private System.Nullable<decimal> _AuditSpotDefectQtyByLot;
		
		private System.Nullable<decimal> _AuditVerticalChainDefectQty;
		
		private System.Nullable<decimal> _AuditHorizontalChainDefectQty;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _VerticalChainDefectClaimByLot;
		
		private System.Nullable<decimal> _CutOutLengthPercent;
		
		private System.Nullable<decimal> _HorizontalChainDefectLossPerentByLot;
		
		private System.Nullable<decimal> _HorizontalChainDefectClaimByLot;
		
		private string _PartIFinalClaimafewth;
		
		private System.Nullable<decimal> _SpotDefectClaimByLot;
		
		private System.Nullable<decimal> _FinalStockInLengthByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private string _Status;
		
		private string _ActionLogSeqNo;
		
		private string _ActionLogID;
		
		private string _ActionLogTaking;
		
		private string _ActionLogCategory;
		
		private string _ActionLogGroup;
		
		private System.Nullable<System.DateTime> _ActionLogTargetDate1;
		
		private System.Nullable<System.DateTime> _ActionLogRevisedDate1;
		
		private System.Nullable<System.DateTime> _ActionLogCmplDate1;
		
		private string _ActionLogIsCompleted;
		
		private EntitySet<BandLaceSpotDefect> _BandLaceSpotDefects;
		
		private EntitySet<BandLandWidth> _BandLandWidths;
		
		private EntitySet<BandLandPatternShapeRepeat> _BandLandPatternShapeRepeats;
		
		private EntitySet<BandLandSkewnessBow> _BandLandSkewnessBows;
		
		private EntitySet<BandLaceChainDefect> _BandLaceChainDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnRollQtyByLotChanged();
    partial void OnRollQtyByBatchChanging(System.Nullable<int> value);
    partial void OnRollQtyByBatchChanged();
    partial void OnLotIDChanging(string value);
    partial void OnLotIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnPONoChanging(string value);
    partial void OnPONoChanged();
    partial void OnHDONoChanging(string value);
    partial void OnHDONoChanged();
    partial void OnRollNoChanging(string value);
    partial void OnRollNoChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnIDAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnStepFlagChanging(string value);
    partial void OnStepFlagChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnChainDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnChainDefectPointQtyChanged();
    partial void OnTotalDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnTotalDefectPointQtyChanged();
    partial void OnPointQtyPer50MChanging(System.Nullable<decimal> value);
    partial void OnPointQtyPer50MChanged();
    partial void OnDeductLengthEachSpotChanging(System.Nullable<decimal> value);
    partial void OnDeductLengthEachSpotChanged();
    partial void OnSpotDefectLossPercentChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectLossPercentChanged();
    partial void OnSpotDefectLossQtyChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectLossQtyChanged();
    partial void OnSpotDefectLossQtyByLot1Changing(System.Nullable<decimal> value);
    partial void OnSpotDefectLossQtyByLot1Changed();
    partial void OnChainDefectLengthChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthChanged();
    partial void OnChainDefectLengthByLot1Changing(System.Nullable<decimal> value);
    partial void OnChainDefectLengthByLot1Changed();
    partial void OnChainDefectPercentChanging(System.Nullable<decimal> value);
    partial void OnChainDefectPercentChanged();
    partial void OnPart1DefectResultChanging(string value);
    partial void OnPart1DefectResultChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnNeedEvadeMarkerChanging(string value);
    partial void OnNeedEvadeMarkerChanged();
    partial void OnEvadeMarkerLossPercentChanging(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossPercentChanged();
    partial void OnEvadeMarkerLossClaimChanging(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossClaimChanged();
    partial void OnEvadeMarkerLossClaimByLot1Changing(System.Nullable<decimal> value);
    partial void OnEvadeMarkerLossClaimByLot1Changed();
    partial void OnNeedCutoutDefectChanging(string value);
    partial void OnNeedCutoutDefectChanged();
    partial void OnCutoutDefectDistanceChanging(System.Nullable<decimal> value);
    partial void OnCutoutDefectDistanceChanged();
    partial void OnCutoutClaimChanging(System.Nullable<decimal> value);
    partial void OnCutoutClaimChanged();
    partial void OnCutoutClaimByLot1Changing(System.Nullable<decimal> value);
    partial void OnCutoutClaimByLot1Changed();
    partial void OnPart1DefectTotalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectTotalClaimByLotChanged();
    partial void OnPackingListLengthChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthChanged();
    partial void OnMeasureLengthChanging(System.Nullable<decimal> value);
    partial void OnMeasureLengthChanged();
    partial void OnLengthDifferentChanging(System.Nullable<decimal> value);
    partial void OnLengthDifferentChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnCutLengthForTestingChanging(System.Nullable<decimal> value);
    partial void OnCutLengthForTestingChanged();
    partial void OnFinalStockInLengthChanging(System.Nullable<decimal> value);
    partial void OnFinalStockInLengthChanged();
    partial void OnAuditLengthDifferentByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditLengthDifferentByLotChanged();
    partial void OnAuditSampleSizeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSampleSizeQtyByLotChanged();
    partial void OnPOQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPOQtyByLotChanged();
    partial void OnPackingListLengthByBatchChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByBatchChanged();
    partial void OnPackingListLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByLotChanged();
    partial void OnShortLengthClaimQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimQtyByLotChanged();
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanging(string value);
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanged();
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanged();
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanged();
    partial void OnMeasureEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureEdgeToEdgeWidthChanged();
    partial void OnWidthDifferentChanging(System.Nullable<decimal> value);
    partial void OnWidthDifferentChanged();
    partial void OnMeasureWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureWidthChanged();
    partial void OnNarrowestWidthByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowestWidthByBatchChanged();
    partial void OnNarrowestWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowestWidthByLotChanged();
    partial void OnNarrowWidthMarkeLossPercentChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthMarkeLossPercentChanged();
    partial void OnNarrowWidthMarkeLossPercentByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthMarkeLossPercentByBatchChanged();
    partial void OnWidthResultChanging(string value);
    partial void OnWidthResultChanged();
    partial void OnWidthResultByBatchChanging(string value);
    partial void OnWidthResultByBatchChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnNarrowWidthClaimChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimChanged();
    partial void OnNarrowWidthClaimByBatchChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimByBatchChanged();
    partial void OnNarrowWidthClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnNarrowWidthClaimByLotChanged();
    partial void OnGramWeightPerSQMMinChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPerSQMMinChanged();
    partial void OnGramWeightPerSQMMaxChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPerSQMMaxChanged();
    partial void OnGramWeightPerSQMRangeChanging(string value);
    partial void OnGramWeightPerSQMRangeChanged();
    partial void OnActualWeightChanging(System.Nullable<decimal> value);
    partial void OnActualWeightChanged();
    partial void OnWeightDifferentChanging(System.Nullable<decimal> value);
    partial void OnWeightDifferentChanged();
    partial void OnWeightResultByLotChanging(string value);
    partial void OnWeightResultByLotChanged();
    partial void OnPatternShapeMinChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMinChanged();
    partial void OnPatternShapeMaxChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMaxChanged();
    partial void OnPatternShapeRangeByLotChanging(string value);
    partial void OnPatternShapeRangeByLotChanged();
    partial void OnActualPatternShapeChanging(System.Nullable<decimal> value);
    partial void OnActualPatternShapeChanged();
    partial void OnPatternShapeDifferentChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeDifferentChanged();
    partial void OnPatternShapeMarkerLossPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMarkerLossPercentByLotChanged();
    partial void OnPatternShapeResult1Changing(string value);
    partial void OnPatternShapeResult1Changed();
    partial void OnPatternShapeResultByLotChanging(string value);
    partial void OnPatternShapeResultByLotChanged();
    partial void OnPatternShapeClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeClaimByLotChanged();
    partial void OnPart2MeasureResultByLotChanging(string value);
    partial void OnPart2MeasureResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnBatchNoChanging(string value);
    partial void OnBatchNoChanged();
    partial void OnNeedShadeGrpgChanging(string value);
    partial void OnNeedShadeGrpgChanged();
    partial void OnShadeGrpgResultChanging(string value);
    partial void OnShadeGrpgResultChanged();
    partial void OnNeedSkewnessAndBowChanging(string value);
    partial void OnNeedSkewnessAndBowChanged();
    partial void OnSkewnessDistanceABChanging(System.Nullable<decimal> value);
    partial void OnSkewnessDistanceABChanged();
    partial void OnSkewnessDistanceCDChanging(System.Nullable<decimal> value);
    partial void OnSkewnessDistanceCDChanged();
    partial void OnSkewnessAndBowResultChanging(string value);
    partial void OnSkewnessAndBowResultChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallAgreedClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallAgreedClaimByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnPart4SpecificDefectResultByLotChanging(string value);
    partial void OnPart4SpecificDefectResultByLotChanged();
    partial void OnPart4FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4FinalClaimByLotChanged();
    partial void OnAuditRollQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditRollQtyByLotChanged();
    partial void OnDefectLossQtyChanging(System.Nullable<decimal> value);
    partial void OnDefectLossQtyChanged();
    partial void OnDefectLossQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnDefectLossQtyByLotChanged();
    partial void OnPart1DefectClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectClaimPercentByLotChanged();
    partial void OnPart1DefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectClaimByLotChanged();
    partial void OnPassQtyChanging(System.Nullable<decimal> value);
    partial void OnPassQtyChanged();
    partial void OnPassQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPassQtyByLotChanged();
    partial void OnAuditSpotDefectQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAuditSpotDefectQtyByLotChanged();
    partial void OnAuditVerticalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditVerticalChainDefectQtyChanged();
    partial void OnAuditHorizontalChainDefectQtyChanging(System.Nullable<decimal> value);
    partial void OnAuditHorizontalChainDefectQtyChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnVerticalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnVerticalChainDefectClaimByLotChanged();
    partial void OnCutOutLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnCutOutLengthPercentChanged();
    partial void OnHorizontalChainDefectLossPerentByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectLossPerentByLotChanged();
    partial void OnHorizontalChainDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnHorizontalChainDefectClaimByLotChanged();
    partial void OnPartIFinalClaimafewthChanging(string value);
    partial void OnPartIFinalClaimafewthChanged();
    partial void OnSpotDefectClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnSpotDefectClaimByLotChanged();
    partial void OnFinalStockInLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnFinalStockInLengthByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogTakingChanging(string value);
    partial void OnActionLogTakingChanged();
    partial void OnActionLogCategoryChanging(string value);
    partial void OnActionLogCategoryChanged();
    partial void OnActionLogGroupChanging(string value);
    partial void OnActionLogGroupChanged();
    partial void OnActionLogTargetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogTargetDateChanged();
    partial void OnActionLogRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogRevisedDateChanged();
    partial void OnActionLogCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogCmplDateChanged();
    partial void OnActionLogIsCompletedChanging(string value);
    partial void OnActionLogIsCompletedChanged();
    #endregion
		
		public BandLaceHeader()
		{
			this._BandLaceSpotDefects = new EntitySet<BandLaceSpotDefect>(new Action<BandLaceSpotDefect>(this.attach_BandLaceSpotDefects), new Action<BandLaceSpotDefect>(this.detach_BandLaceSpotDefects));
			this._BandLandWidths = new EntitySet<BandLandWidth>(new Action<BandLandWidth>(this.attach_BandLandWidths), new Action<BandLandWidth>(this.detach_BandLandWidths));
			this._BandLandPatternShapeRepeats = new EntitySet<BandLandPatternShapeRepeat>(new Action<BandLandPatternShapeRepeat>(this.attach_BandLandPatternShapeRepeats), new Action<BandLandPatternShapeRepeat>(this.detach_BandLandPatternShapeRepeats));
			this._BandLandSkewnessBows = new EntitySet<BandLandSkewnessBow>(new Action<BandLandSkewnessBow>(this.attach_BandLandSkewnessBows), new Action<BandLandSkewnessBow>(this.detach_BandLandSkewnessBows));
			this._BandLaceChainDefects = new EntitySet<BandLaceChainDefect>(new Action<BandLaceChainDefect>(this.attach_BandLaceChainDefects), new Action<BandLaceChainDefect>(this.detach_BandLaceChainDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(10)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByLot", DbType="Int")]
		public System.Nullable<int> RollQtyByLot
		{
			get
			{
				return this._RollQtyByLot;
			}
			set
			{
				if ((this._RollQtyByLot != value))
				{
					this.OnRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByLot = value;
					this.SendPropertyChanged("RollQtyByLot");
					this.OnRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_RollQtyByBatch", DbType="Int")]
		public System.Nullable<int> RollQtyByBatch
		{
			get
			{
				return this._RollQtyByBatch;
			}
			set
			{
				if ((this._RollQtyByBatch != value))
				{
					this.OnRollQtyByBatchChanging(value);
					this.SendPropertyChanging();
					this._RollQtyByBatch = value;
					this.SendPropertyChanged("RollQtyByBatch");
					this.OnRollQtyByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_LotID", DbType="VarChar(15)")]
		public string LotID
		{
			get
			{
				return this._LotID;
			}
			set
			{
				if ((this._LotID != value))
				{
					this.OnLotIDChanging(value);
					this.SendPropertyChanging();
					this._LotID = value;
					this.SendPropertyChanged("LotID");
					this.OnLotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(20)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(30)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(20)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_PONo", DbType="VarChar(20)")]
		public string PONo
		{
			get
			{
				return this._PONo;
			}
			set
			{
				if ((this._PONo != value))
				{
					this.OnPONoChanging(value);
					this.SendPropertyChanging();
					this._PONo = value;
					this.SendPropertyChanged("PONo");
					this.OnPONoChanged();
				}
			}
		}
		
		[Column(Storage="_HDONo", DbType="VarChar(20)")]
		public string HDONo
		{
			get
			{
				return this._HDONo;
			}
			set
			{
				if ((this._HDONo != value))
				{
					this.OnHDONoChanging(value);
					this.SendPropertyChanging();
					this._HDONo = value;
					this.SendPropertyChanged("HDONo");
					this.OnHDONoChanged();
				}
			}
		}
		
		[Column(Storage="_RollNo", DbType="VarChar(10)")]
		public string RollNo
		{
			get
			{
				return this._RollNo;
			}
			set
			{
				if ((this._RollNo != value))
				{
					this.OnRollNoChanging(value);
					this.SendPropertyChanging();
					this._RollNo = value;
					this.SendPropertyChanged("RollNo");
					this.OnRollNoChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IDAuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDAuditDate
		{
			get
			{
				return this._IDAuditDate;
			}
			set
			{
				if ((this._IDAuditDate != value))
				{
					this.OnIDAuditDateChanging(value);
					this.SendPropertyChanging();
					this._IDAuditDate = value;
					this.SendPropertyChanged("IDAuditDate");
					this.OnIDAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(20)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_StepFlag", DbType="VarChar(20)")]
		public string StepFlag
		{
			get
			{
				return this._StepFlag;
			}
			set
			{
				if ((this._StepFlag != value))
				{
					this.OnStepFlagChanging(value);
					this.SendPropertyChanging();
					this._StepFlag = value;
					this.SendPropertyChanged("StepFlag");
					this.OnStepFlagChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPointQty", DbType="Int")]
		public System.Nullable<int> ChainDefectPointQty
		{
			get
			{
				return this._ChainDefectPointQty;
			}
			set
			{
				if ((this._ChainDefectPointQty != value))
				{
					this.OnChainDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPointQty = value;
					this.SendPropertyChanged("ChainDefectPointQty");
					this.OnChainDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDefectPointQty", DbType="Int")]
		public System.Nullable<int> TotalDefectPointQty
		{
			get
			{
				return this._TotalDefectPointQty;
			}
			set
			{
				if ((this._TotalDefectPointQty != value))
				{
					this.OnTotalDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalDefectPointQty = value;
					this.SendPropertyChanged("TotalDefectPointQty");
					this.OnTotalDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PointQtyPer50M", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PointQtyPer50M
		{
			get
			{
				return this._PointQtyPer50M;
			}
			set
			{
				if ((this._PointQtyPer50M != value))
				{
					this.OnPointQtyPer50MChanging(value);
					this.SendPropertyChanging();
					this._PointQtyPer50M = value;
					this.SendPropertyChanged("PointQtyPer50M");
					this.OnPointQtyPer50MChanged();
				}
			}
		}
		
		[Column(Storage="_DeductLengthEachSpot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DeductLengthEachSpot
		{
			get
			{
				return this._DeductLengthEachSpot;
			}
			set
			{
				if ((this._DeductLengthEachSpot != value))
				{
					this.OnDeductLengthEachSpotChanging(value);
					this.SendPropertyChanging();
					this._DeductLengthEachSpot = value;
					this.SendPropertyChanged("DeductLengthEachSpot");
					this.OnDeductLengthEachSpotChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossPercent
		{
			get
			{
				return this._SpotDefectLossPercent;
			}
			set
			{
				if ((this._SpotDefectLossPercent != value))
				{
					this.OnSpotDefectLossPercentChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectLossPercent = value;
					this.SendPropertyChanged("SpotDefectLossPercent");
					this.OnSpotDefectLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossQty
		{
			get
			{
				return this._SpotDefectLossQty;
			}
			set
			{
				if ((this._SpotDefectLossQty != value))
				{
					this.OnSpotDefectLossQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectLossQty = value;
					this.SendPropertyChanged("SpotDefectLossQty");
					this.OnSpotDefectLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectLossQtyByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectLossQtyByLot1
		{
			get
			{
				return this._SpotDefectLossQtyByLot1;
			}
			set
			{
				if ((this._SpotDefectLossQtyByLot1 != value))
				{
					this.OnSpotDefectLossQtyByLot1Changing(value);
					this.SendPropertyChanging();
					this._SpotDefectLossQtyByLot1 = value;
					this.SendPropertyChanged("SpotDefectLossQtyByLot1");
					this.OnSpotDefectLossQtyByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLength
		{
			get
			{
				return this._ChainDefectLength;
			}
			set
			{
				if ((this._ChainDefectLength != value))
				{
					this.OnChainDefectLengthChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLength = value;
					this.SendPropertyChanged("ChainDefectLength");
					this.OnChainDefectLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLengthByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLengthByLot1
		{
			get
			{
				return this._ChainDefectLengthByLot1;
			}
			set
			{
				if ((this._ChainDefectLengthByLot1 != value))
				{
					this.OnChainDefectLengthByLot1Changing(value);
					this.SendPropertyChanging();
					this._ChainDefectLengthByLot1 = value;
					this.SendPropertyChanged("ChainDefectLengthByLot1");
					this.OnChainDefectLengthByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectPercent
		{
			get
			{
				return this._ChainDefectPercent;
			}
			set
			{
				if ((this._ChainDefectPercent != value))
				{
					this.OnChainDefectPercentChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPercent = value;
					this.SendPropertyChanged("ChainDefectPercent");
					this.OnChainDefectPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResult", DbType="VarChar(5)")]
		public string Part1DefectResult
		{
			get
			{
				return this._Part1DefectResult;
			}
			set
			{
				if ((this._Part1DefectResult != value))
				{
					this.OnPart1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResult = value;
					this.SendPropertyChanged("Part1DefectResult");
					this.OnPart1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedEvadeMarker", DbType="VarChar(5)")]
		public string NeedEvadeMarker
		{
			get
			{
				return this._NeedEvadeMarker;
			}
			set
			{
				if ((this._NeedEvadeMarker != value))
				{
					this.OnNeedEvadeMarkerChanging(value);
					this.SendPropertyChanging();
					this._NeedEvadeMarker = value;
					this.SendPropertyChanged("NeedEvadeMarker");
					this.OnNeedEvadeMarkerChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossPercent
		{
			get
			{
				return this._EvadeMarkerLossPercent;
			}
			set
			{
				if ((this._EvadeMarkerLossPercent != value))
				{
					this.OnEvadeMarkerLossPercentChanging(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossPercent = value;
					this.SendPropertyChanged("EvadeMarkerLossPercent");
					this.OnEvadeMarkerLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossClaim
		{
			get
			{
				return this._EvadeMarkerLossClaim;
			}
			set
			{
				if ((this._EvadeMarkerLossClaim != value))
				{
					this.OnEvadeMarkerLossClaimChanging(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossClaim = value;
					this.SendPropertyChanged("EvadeMarkerLossClaim");
					this.OnEvadeMarkerLossClaimChanged();
				}
			}
		}
		
		[Column(Storage="_EvadeMarkerLossClaimByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> EvadeMarkerLossClaimByLot1
		{
			get
			{
				return this._EvadeMarkerLossClaimByLot1;
			}
			set
			{
				if ((this._EvadeMarkerLossClaimByLot1 != value))
				{
					this.OnEvadeMarkerLossClaimByLot1Changing(value);
					this.SendPropertyChanging();
					this._EvadeMarkerLossClaimByLot1 = value;
					this.SendPropertyChanged("EvadeMarkerLossClaimByLot1");
					this.OnEvadeMarkerLossClaimByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_NeedCutoutDefect", DbType="VarChar(5)")]
		public string NeedCutoutDefect
		{
			get
			{
				return this._NeedCutoutDefect;
			}
			set
			{
				if ((this._NeedCutoutDefect != value))
				{
					this.OnNeedCutoutDefectChanging(value);
					this.SendPropertyChanging();
					this._NeedCutoutDefect = value;
					this.SendPropertyChanged("NeedCutoutDefect");
					this.OnNeedCutoutDefectChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutDefectDistance", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutDefectDistance
		{
			get
			{
				return this._CutoutDefectDistance;
			}
			set
			{
				if ((this._CutoutDefectDistance != value))
				{
					this.OnCutoutDefectDistanceChanging(value);
					this.SendPropertyChanging();
					this._CutoutDefectDistance = value;
					this.SendPropertyChanged("CutoutDefectDistance");
					this.OnCutoutDefectDistanceChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutClaim
		{
			get
			{
				return this._CutoutClaim;
			}
			set
			{
				if ((this._CutoutClaim != value))
				{
					this.OnCutoutClaimChanging(value);
					this.SendPropertyChanging();
					this._CutoutClaim = value;
					this.SendPropertyChanged("CutoutClaim");
					this.OnCutoutClaimChanged();
				}
			}
		}
		
		[Column(Storage="_CutoutClaimByLot1", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutoutClaimByLot1
		{
			get
			{
				return this._CutoutClaimByLot1;
			}
			set
			{
				if ((this._CutoutClaimByLot1 != value))
				{
					this.OnCutoutClaimByLot1Changing(value);
					this.SendPropertyChanging();
					this._CutoutClaimByLot1 = value;
					this.SendPropertyChanged("CutoutClaimByLot1");
					this.OnCutoutClaimByLot1Changed();
				}
			}
		}
		
		[Column(Storage="_Part1DefectTotalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectTotalClaimByLot
		{
			get
			{
				return this._Part1DefectTotalClaimByLot;
			}
			set
			{
				if ((this._Part1DefectTotalClaimByLot != value))
				{
					this.OnPart1DefectTotalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectTotalClaimByLot = value;
					this.SendPropertyChanged("Part1DefectTotalClaimByLot");
					this.OnPart1DefectTotalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLength
		{
			get
			{
				return this._PackingListLength;
			}
			set
			{
				if ((this._PackingListLength != value))
				{
					this.OnPackingListLengthChanging(value);
					this.SendPropertyChanging();
					this._PackingListLength = value;
					this.SendPropertyChanged("PackingListLength");
					this.OnPackingListLengthChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureLength
		{
			get
			{
				return this._MeasureLength;
			}
			set
			{
				if ((this._MeasureLength != value))
				{
					this.OnMeasureLengthChanging(value);
					this.SendPropertyChanging();
					this._MeasureLength = value;
					this.SendPropertyChanged("MeasureLength");
					this.OnMeasureLengthChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDifferent
		{
			get
			{
				return this._LengthDifferent;
			}
			set
			{
				if ((this._LengthDifferent != value))
				{
					this.OnLengthDifferentChanging(value);
					this.SendPropertyChanging();
					this._LengthDifferent = value;
					this.SendPropertyChanged("LengthDifferent");
					this.OnLengthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutLengthForTesting", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutLengthForTesting
		{
			get
			{
				return this._CutLengthForTesting;
			}
			set
			{
				if ((this._CutLengthForTesting != value))
				{
					this.OnCutLengthForTestingChanging(value);
					this.SendPropertyChanging();
					this._CutLengthForTesting = value;
					this.SendPropertyChanged("CutLengthForTesting");
					this.OnCutLengthForTestingChanged();
				}
			}
		}
		
		[Column(Storage="_FinalStockInLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> FinalStockInLength
		{
			get
			{
				return this._FinalStockInLength;
			}
			set
			{
				if ((this._FinalStockInLength != value))
				{
					this.OnFinalStockInLengthChanging(value);
					this.SendPropertyChanging();
					this._FinalStockInLength = value;
					this.SendPropertyChanged("FinalStockInLength");
					this.OnFinalStockInLengthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditLengthDifferentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditLengthDifferentByLot
		{
			get
			{
				return this._AuditLengthDifferentByLot;
			}
			set
			{
				if ((this._AuditLengthDifferentByLot != value))
				{
					this.OnAuditLengthDifferentByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditLengthDifferentByLot = value;
					this.SendPropertyChanged("AuditLengthDifferentByLot");
					this.OnAuditLengthDifferentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSampleSizeQtyByLot
		{
			get
			{
				return this._AuditSampleSizeQtyByLot;
			}
			set
			{
				if ((this._AuditSampleSizeQtyByLot != value))
				{
					this.OnAuditSampleSizeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQtyByLot = value;
					this.SendPropertyChanged("AuditSampleSizeQtyByLot");
					this.OnAuditSampleSizeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POQtyByLot
		{
			get
			{
				return this._POQtyByLot;
			}
			set
			{
				if ((this._POQtyByLot != value))
				{
					this.OnPOQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._POQtyByLot = value;
					this.SendPropertyChanged("POQtyByLot");
					this.OnPOQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByBatch
		{
			get
			{
				return this._PackingListLengthByBatch;
			}
			set
			{
				if ((this._PackingListLengthByBatch != value))
				{
					this.OnPackingListLengthByBatchChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByBatch = value;
					this.SendPropertyChanged("PackingListLengthByBatch");
					this.OnPackingListLengthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByLot
		{
			get
			{
				return this._PackingListLengthByLot;
			}
			set
			{
				if ((this._PackingListLengthByLot != value))
				{
					this.OnPackingListLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByLot = value;
					this.SendPropertyChanged("PackingListLengthByLot");
					this.OnPackingListLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaimQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaimQtyByLot
		{
			get
			{
				return this._ShortLengthClaimQtyByLot;
			}
			set
			{
				if ((this._ShortLengthClaimQtyByLot != value))
				{
					this.OnShortLengthClaimQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaimQtyByLot = value;
					this.SendPropertyChanged("ShortLengthClaimQtyByLot");
					this.OnShortLengthClaimQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeWidthRangeByLot", DbType="VarChar(200)")]
		public string AgreedEdgeToEdgeWidthRangeByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeWidthRangeByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeWidthRangeByLot != value))
				{
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeWidthRangeByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeWidthRangeByLot");
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMinWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMinWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMinWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMinWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMinWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMinWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMinWidthByLot");
					this.OnAgreedEdgeToEdgeMinWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMaxWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMaxWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMaxWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMaxWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMaxWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMaxWidthByLot");
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureEdgeToEdgeWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureEdgeToEdgeWidth
		{
			get
			{
				return this._MeasureEdgeToEdgeWidth;
			}
			set
			{
				if ((this._MeasureEdgeToEdgeWidth != value))
				{
					this.OnMeasureEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureEdgeToEdgeWidth = value;
					this.SendPropertyChanged("MeasureEdgeToEdgeWidth");
					this.OnMeasureEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_WidthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WidthDifferent
		{
			get
			{
				return this._WidthDifferent;
			}
			set
			{
				if ((this._WidthDifferent != value))
				{
					this.OnWidthDifferentChanging(value);
					this.SendPropertyChanging();
					this._WidthDifferent = value;
					this.SendPropertyChanged("WidthDifferent");
					this.OnWidthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureWidth
		{
			get
			{
				return this._MeasureWidth;
			}
			set
			{
				if ((this._MeasureWidth != value))
				{
					this.OnMeasureWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureWidth = value;
					this.SendPropertyChanged("MeasureWidth");
					this.OnMeasureWidthChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowestWidthByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowestWidthByBatch
		{
			get
			{
				return this._NarrowestWidthByBatch;
			}
			set
			{
				if ((this._NarrowestWidthByBatch != value))
				{
					this.OnNarrowestWidthByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowestWidthByBatch = value;
					this.SendPropertyChanged("NarrowestWidthByBatch");
					this.OnNarrowestWidthByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowestWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowestWidthByLot
		{
			get
			{
				return this._NarrowestWidthByLot;
			}
			set
			{
				if ((this._NarrowestWidthByLot != value))
				{
					this.OnNarrowestWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowestWidthByLot = value;
					this.SendPropertyChanged("NarrowestWidthByLot");
					this.OnNarrowestWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthMarkeLossPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthMarkeLossPercent
		{
			get
			{
				return this._NarrowWidthMarkeLossPercent;
			}
			set
			{
				if ((this._NarrowWidthMarkeLossPercent != value))
				{
					this.OnNarrowWidthMarkeLossPercentChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthMarkeLossPercent = value;
					this.SendPropertyChanged("NarrowWidthMarkeLossPercent");
					this.OnNarrowWidthMarkeLossPercentChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthMarkeLossPercentByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthMarkeLossPercentByBatch
		{
			get
			{
				return this._NarrowWidthMarkeLossPercentByBatch;
			}
			set
			{
				if ((this._NarrowWidthMarkeLossPercentByBatch != value))
				{
					this.OnNarrowWidthMarkeLossPercentByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthMarkeLossPercentByBatch = value;
					this.SendPropertyChanged("NarrowWidthMarkeLossPercentByBatch");
					this.OnNarrowWidthMarkeLossPercentByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResult", DbType="VarChar(5)")]
		public string WidthResult
		{
			get
			{
				return this._WidthResult;
			}
			set
			{
				if ((this._WidthResult != value))
				{
					this.OnWidthResultChanging(value);
					this.SendPropertyChanging();
					this._WidthResult = value;
					this.SendPropertyChanged("WidthResult");
					this.OnWidthResultChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByBatch", DbType="VarChar(5)")]
		public string WidthResultByBatch
		{
			get
			{
				return this._WidthResultByBatch;
			}
			set
			{
				if ((this._WidthResultByBatch != value))
				{
					this.OnWidthResultByBatchChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByBatch = value;
					this.SendPropertyChanged("WidthResultByBatch");
					this.OnWidthResultByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(5)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaim
		{
			get
			{
				return this._NarrowWidthClaim;
			}
			set
			{
				if ((this._NarrowWidthClaim != value))
				{
					this.OnNarrowWidthClaimChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaim = value;
					this.SendPropertyChanged("NarrowWidthClaim");
					this.OnNarrowWidthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimByBatch", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimByBatch
		{
			get
			{
				return this._NarrowWidthClaimByBatch;
			}
			set
			{
				if ((this._NarrowWidthClaimByBatch != value))
				{
					this.OnNarrowWidthClaimByBatchChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimByBatch = value;
					this.SendPropertyChanged("NarrowWidthClaimByBatch");
					this.OnNarrowWidthClaimByBatchChanged();
				}
			}
		}
		
		[Column(Storage="_NarrowWidthClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> NarrowWidthClaimByLot
		{
			get
			{
				return this._NarrowWidthClaimByLot;
			}
			set
			{
				if ((this._NarrowWidthClaimByLot != value))
				{
					this.OnNarrowWidthClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._NarrowWidthClaimByLot = value;
					this.SendPropertyChanged("NarrowWidthClaimByLot");
					this.OnNarrowWidthClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPerSQMMin
		{
			get
			{
				return this._GramWeightPerSQMMin;
			}
			set
			{
				if ((this._GramWeightPerSQMMin != value))
				{
					this.OnGramWeightPerSQMMinChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMMin = value;
					this.SendPropertyChanged("GramWeightPerSQMMin");
					this.OnGramWeightPerSQMMinChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPerSQMMax
		{
			get
			{
				return this._GramWeightPerSQMMax;
			}
			set
			{
				if ((this._GramWeightPerSQMMax != value))
				{
					this.OnGramWeightPerSQMMaxChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMMax = value;
					this.SendPropertyChanged("GramWeightPerSQMMax");
					this.OnGramWeightPerSQMMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPerSQMRange", DbType="VarChar(200)")]
		public string GramWeightPerSQMRange
		{
			get
			{
				return this._GramWeightPerSQMRange;
			}
			set
			{
				if ((this._GramWeightPerSQMRange != value))
				{
					this.OnGramWeightPerSQMRangeChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPerSQMRange = value;
					this.SendPropertyChanged("GramWeightPerSQMRange");
					this.OnGramWeightPerSQMRangeChanged();
				}
			}
		}
		
		[Column(Storage="_ActualWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualWeight
		{
			get
			{
				return this._ActualWeight;
			}
			set
			{
				if ((this._ActualWeight != value))
				{
					this.OnActualWeightChanging(value);
					this.SendPropertyChanging();
					this._ActualWeight = value;
					this.SendPropertyChanged("ActualWeight");
					this.OnActualWeightChanged();
				}
			}
		}
		
		[Column(Storage="_WeightDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WeightDifferent
		{
			get
			{
				return this._WeightDifferent;
			}
			set
			{
				if ((this._WeightDifferent != value))
				{
					this.OnWeightDifferentChanging(value);
					this.SendPropertyChanging();
					this._WeightDifferent = value;
					this.SendPropertyChanged("WeightDifferent");
					this.OnWeightDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WeightResultByLot", DbType="VarChar(5)")]
		public string WeightResultByLot
		{
			get
			{
				return this._WeightResultByLot;
			}
			set
			{
				if ((this._WeightResultByLot != value))
				{
					this.OnWeightResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WeightResultByLot = value;
					this.SendPropertyChanged("WeightResultByLot");
					this.OnWeightResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMin
		{
			get
			{
				return this._PatternShapeMin;
			}
			set
			{
				if ((this._PatternShapeMin != value))
				{
					this.OnPatternShapeMinChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMin = value;
					this.SendPropertyChanged("PatternShapeMin");
					this.OnPatternShapeMinChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMax
		{
			get
			{
				return this._PatternShapeMax;
			}
			set
			{
				if ((this._PatternShapeMax != value))
				{
					this.OnPatternShapeMaxChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMax = value;
					this.SendPropertyChanged("PatternShapeMax");
					this.OnPatternShapeMaxChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRangeByLot", DbType="VarChar(200)")]
		public string PatternShapeRangeByLot
		{
			get
			{
				return this._PatternShapeRangeByLot;
			}
			set
			{
				if ((this._PatternShapeRangeByLot != value))
				{
					this.OnPatternShapeRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRangeByLot = value;
					this.SendPropertyChanged("PatternShapeRangeByLot");
					this.OnPatternShapeRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActualPatternShape", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualPatternShape
		{
			get
			{
				return this._ActualPatternShape;
			}
			set
			{
				if ((this._ActualPatternShape != value))
				{
					this.OnActualPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._ActualPatternShape = value;
					this.SendPropertyChanged("ActualPatternShape");
					this.OnActualPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeDifferent
		{
			get
			{
				return this._PatternShapeDifferent;
			}
			set
			{
				if ((this._PatternShapeDifferent != value))
				{
					this.OnPatternShapeDifferentChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeDifferent = value;
					this.SendPropertyChanged("PatternShapeDifferent");
					this.OnPatternShapeDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMarkerLossPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMarkerLossPercentByLot
		{
			get
			{
				return this._PatternShapeMarkerLossPercentByLot;
			}
			set
			{
				if ((this._PatternShapeMarkerLossPercentByLot != value))
				{
					this.OnPatternShapeMarkerLossPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMarkerLossPercentByLot = value;
					this.SendPropertyChanged("PatternShapeMarkerLossPercentByLot");
					this.OnPatternShapeMarkerLossPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResult1", DbType="VarChar(5)")]
		public string PatternShapeResult1
		{
			get
			{
				return this._PatternShapeResult1;
			}
			set
			{
				if ((this._PatternShapeResult1 != value))
				{
					this.OnPatternShapeResult1Changing(value);
					this.SendPropertyChanging();
					this._PatternShapeResult1 = value;
					this.SendPropertyChanged("PatternShapeResult1");
					this.OnPatternShapeResult1Changed();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResultByLot", DbType="VarChar(5)")]
		public string PatternShapeResultByLot
		{
			get
			{
				return this._PatternShapeResultByLot;
			}
			set
			{
				if ((this._PatternShapeResultByLot != value))
				{
					this.OnPatternShapeResultByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResultByLot = value;
					this.SendPropertyChanged("PatternShapeResultByLot");
					this.OnPatternShapeResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeClaimByLot
		{
			get
			{
				return this._PatternShapeClaimByLot;
			}
			set
			{
				if ((this._PatternShapeClaimByLot != value))
				{
					this.OnPatternShapeClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeClaimByLot = value;
					this.SendPropertyChanged("PatternShapeClaimByLot");
					this.OnPatternShapeClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2MeasureResultByLot", DbType="VarChar(5)")]
		public string Part2MeasureResultByLot
		{
			get
			{
				return this._Part2MeasureResultByLot;
			}
			set
			{
				if ((this._Part2MeasureResultByLot != value))
				{
					this.OnPart2MeasureResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2MeasureResultByLot = value;
					this.SendPropertyChanged("Part2MeasureResultByLot");
					this.OnPart2MeasureResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_BatchNo", DbType="VarChar(100)")]
		public string BatchNo
		{
			get
			{
				return this._BatchNo;
			}
			set
			{
				if ((this._BatchNo != value))
				{
					this.OnBatchNoChanging(value);
					this.SendPropertyChanging();
					this._BatchNo = value;
					this.SendPropertyChanged("BatchNo");
					this.OnBatchNoChanged();
				}
			}
		}
		
		[Column(Storage="_NeedShadeGrpg", DbType="VarChar(5)")]
		public string NeedShadeGrpg
		{
			get
			{
				return this._NeedShadeGrpg;
			}
			set
			{
				if ((this._NeedShadeGrpg != value))
				{
					this.OnNeedShadeGrpgChanging(value);
					this.SendPropertyChanging();
					this._NeedShadeGrpg = value;
					this.SendPropertyChanged("NeedShadeGrpg");
					this.OnNeedShadeGrpgChanged();
				}
			}
		}
		
		[Column(Storage="_ShadeGrpgResult", DbType="VarChar(5)")]
		public string ShadeGrpgResult
		{
			get
			{
				return this._ShadeGrpgResult;
			}
			set
			{
				if ((this._ShadeGrpgResult != value))
				{
					this.OnShadeGrpgResultChanging(value);
					this.SendPropertyChanging();
					this._ShadeGrpgResult = value;
					this.SendPropertyChanged("ShadeGrpgResult");
					this.OnShadeGrpgResultChanged();
				}
			}
		}
		
		[Column(Storage="_NeedSkewnessAndBow", DbType="VarChar(5)")]
		public string NeedSkewnessAndBow
		{
			get
			{
				return this._NeedSkewnessAndBow;
			}
			set
			{
				if ((this._NeedSkewnessAndBow != value))
				{
					this.OnNeedSkewnessAndBowChanging(value);
					this.SendPropertyChanging();
					this._NeedSkewnessAndBow = value;
					this.SendPropertyChanged("NeedSkewnessAndBow");
					this.OnNeedSkewnessAndBowChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessDistanceAB", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SkewnessDistanceAB
		{
			get
			{
				return this._SkewnessDistanceAB;
			}
			set
			{
				if ((this._SkewnessDistanceAB != value))
				{
					this.OnSkewnessDistanceABChanging(value);
					this.SendPropertyChanging();
					this._SkewnessDistanceAB = value;
					this.SendPropertyChanged("SkewnessDistanceAB");
					this.OnSkewnessDistanceABChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessDistanceCD", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SkewnessDistanceCD
		{
			get
			{
				return this._SkewnessDistanceCD;
			}
			set
			{
				if ((this._SkewnessDistanceCD != value))
				{
					this.OnSkewnessDistanceCDChanging(value);
					this.SendPropertyChanging();
					this._SkewnessDistanceCD = value;
					this.SendPropertyChanged("SkewnessDistanceCD");
					this.OnSkewnessDistanceCDChanged();
				}
			}
		}
		
		[Column(Storage="_SkewnessAndBowResult", DbType="VarChar(5)")]
		public string SkewnessAndBowResult
		{
			get
			{
				return this._SkewnessAndBowResult;
			}
			set
			{
				if ((this._SkewnessAndBowResult != value))
				{
					this.OnSkewnessAndBowResultChanging(value);
					this.SendPropertyChanging();
					this._SkewnessAndBowResult = value;
					this.SendPropertyChanged("SkewnessAndBowResult");
					this.OnSkewnessAndBowResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallAgreedClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallAgreedClaimByLot
		{
			get
			{
				return this._OverallAgreedClaimByLot;
			}
			set
			{
				if ((this._OverallAgreedClaimByLot != value))
				{
					this.OnOverallAgreedClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallAgreedClaimByLot = value;
					this.SendPropertyChanged("OverallAgreedClaimByLot");
					this.OnOverallAgreedClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(100)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Part4SpecificDefectResultByLot", DbType="VarChar(5)")]
		public string Part4SpecificDefectResultByLot
		{
			get
			{
				return this._Part4SpecificDefectResultByLot;
			}
			set
			{
				if ((this._Part4SpecificDefectResultByLot != value))
				{
					this.OnPart4SpecificDefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4SpecificDefectResultByLot = value;
					this.SendPropertyChanged("Part4SpecificDefectResultByLot");
					this.OnPart4SpecificDefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4FinalClaimByLot
		{
			get
			{
				return this._Part4FinalClaimByLot;
			}
			set
			{
				if ((this._Part4FinalClaimByLot != value))
				{
					this.OnPart4FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4FinalClaimByLot = value;
					this.SendPropertyChanged("Part4FinalClaimByLot");
					this.OnPart4FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditRollQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditRollQtyByLot
		{
			get
			{
				return this._AuditRollQtyByLot;
			}
			set
			{
				if ((this._AuditRollQtyByLot != value))
				{
					this.OnAuditRollQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditRollQtyByLot = value;
					this.SendPropertyChanged("AuditRollQtyByLot");
					this.OnAuditRollQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DefectLossQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectLossQty
		{
			get
			{
				return this._DefectLossQty;
			}
			set
			{
				if ((this._DefectLossQty != value))
				{
					this.OnDefectLossQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectLossQty = value;
					this.SendPropertyChanged("DefectLossQty");
					this.OnDefectLossQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectLossQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> DefectLossQtyByLot
		{
			get
			{
				return this._DefectLossQtyByLot;
			}
			set
			{
				if ((this._DefectLossQtyByLot != value))
				{
					this.OnDefectLossQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._DefectLossQtyByLot = value;
					this.SendPropertyChanged("DefectLossQtyByLot");
					this.OnDefectLossQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectClaimPercentByLot
		{
			get
			{
				return this._Part1DefectClaimPercentByLot;
			}
			set
			{
				if ((this._Part1DefectClaimPercentByLot != value))
				{
					this.OnPart1DefectClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectClaimPercentByLot = value;
					this.SendPropertyChanged("Part1DefectClaimPercentByLot");
					this.OnPart1DefectClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectClaimByLot
		{
			get
			{
				return this._Part1DefectClaimByLot;
			}
			set
			{
				if ((this._Part1DefectClaimByLot != value))
				{
					this.OnPart1DefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectClaimByLot = value;
					this.SendPropertyChanged("Part1DefectClaimByLot");
					this.OnPart1DefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PassQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PassQty
		{
			get
			{
				return this._PassQty;
			}
			set
			{
				if ((this._PassQty != value))
				{
					this.OnPassQtyChanging(value);
					this.SendPropertyChanging();
					this._PassQty = value;
					this.SendPropertyChanged("PassQty");
					this.OnPassQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PassQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PassQtyByLot
		{
			get
			{
				return this._PassQtyByLot;
			}
			set
			{
				if ((this._PassQtyByLot != value))
				{
					this.OnPassQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PassQtyByLot = value;
					this.SendPropertyChanged("PassQtyByLot");
					this.OnPassQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSpotDefectQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditSpotDefectQtyByLot
		{
			get
			{
				return this._AuditSpotDefectQtyByLot;
			}
			set
			{
				if ((this._AuditSpotDefectQtyByLot != value))
				{
					this.OnAuditSpotDefectQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSpotDefectQtyByLot = value;
					this.SendPropertyChanged("AuditSpotDefectQtyByLot");
					this.OnAuditSpotDefectQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditVerticalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditVerticalChainDefectQty
		{
			get
			{
				return this._AuditVerticalChainDefectQty;
			}
			set
			{
				if ((this._AuditVerticalChainDefectQty != value))
				{
					this.OnAuditVerticalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditVerticalChainDefectQty = value;
					this.SendPropertyChanged("AuditVerticalChainDefectQty");
					this.OnAuditVerticalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditHorizontalChainDefectQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AuditHorizontalChainDefectQty
		{
			get
			{
				return this._AuditHorizontalChainDefectQty;
			}
			set
			{
				if ((this._AuditHorizontalChainDefectQty != value))
				{
					this.OnAuditHorizontalChainDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditHorizontalChainDefectQty = value;
					this.SendPropertyChanged("AuditHorizontalChainDefectQty");
					this.OnAuditHorizontalChainDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_VerticalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> VerticalChainDefectClaimByLot
		{
			get
			{
				return this._VerticalChainDefectClaimByLot;
			}
			set
			{
				if ((this._VerticalChainDefectClaimByLot != value))
				{
					this.OnVerticalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._VerticalChainDefectClaimByLot = value;
					this.SendPropertyChanged("VerticalChainDefectClaimByLot");
					this.OnVerticalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CutOutLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CutOutLengthPercent
		{
			get
			{
				return this._CutOutLengthPercent;
			}
			set
			{
				if ((this._CutOutLengthPercent != value))
				{
					this.OnCutOutLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._CutOutLengthPercent = value;
					this.SendPropertyChanged("CutOutLengthPercent");
					this.OnCutOutLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectLossPerentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectLossPerentByLot
		{
			get
			{
				return this._HorizontalChainDefectLossPerentByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectLossPerentByLot != value))
				{
					this.OnHorizontalChainDefectLossPerentByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectLossPerentByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectLossPerentByLot");
					this.OnHorizontalChainDefectLossPerentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_HorizontalChainDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> HorizontalChainDefectClaimByLot
		{
			get
			{
				return this._HorizontalChainDefectClaimByLot;
			}
			set
			{
				if ((this._HorizontalChainDefectClaimByLot != value))
				{
					this.OnHorizontalChainDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._HorizontalChainDefectClaimByLot = value;
					this.SendPropertyChanged("HorizontalChainDefectClaimByLot");
					this.OnHorizontalChainDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PartIFinalClaimafewth", DbType="VarChar(20)")]
		public string PartIFinalClaimafewth
		{
			get
			{
				return this._PartIFinalClaimafewth;
			}
			set
			{
				if ((this._PartIFinalClaimafewth != value))
				{
					this.OnPartIFinalClaimafewthChanging(value);
					this.SendPropertyChanging();
					this._PartIFinalClaimafewth = value;
					this.SendPropertyChanged("PartIFinalClaimafewth");
					this.OnPartIFinalClaimafewthChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SpotDefectClaimByLot
		{
			get
			{
				return this._SpotDefectClaimByLot;
			}
			set
			{
				if ((this._SpotDefectClaimByLot != value))
				{
					this.OnSpotDefectClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectClaimByLot = value;
					this.SendPropertyChanged("SpotDefectClaimByLot");
					this.OnSpotDefectClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_FinalStockInLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> FinalStockInLengthByLot
		{
			get
			{
				return this._FinalStockInLengthByLot;
			}
			set
			{
				if ((this._FinalStockInLengthByLot != value))
				{
					this.OnFinalStockInLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._FinalStockInLengthByLot = value;
					this.SendPropertyChanged("FinalStockInLengthByLot");
					this.OnFinalStockInLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(200)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTaking", DbType="VarChar(10)")]
		public string ActionLogTaking
		{
			get
			{
				return this._ActionLogTaking;
			}
			set
			{
				if ((this._ActionLogTaking != value))
				{
					this.OnActionLogTakingChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTaking = value;
					this.SendPropertyChanged("ActionLogTaking");
					this.OnActionLogTakingChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCategory", DbType="VarChar(100)")]
		public string ActionLogCategory
		{
			get
			{
				return this._ActionLogCategory;
			}
			set
			{
				if ((this._ActionLogCategory != value))
				{
					this.OnActionLogCategoryChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCategory = value;
					this.SendPropertyChanged("ActionLogCategory");
					this.OnActionLogCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogGroup", DbType="VarChar(20)")]
		public string ActionLogGroup
		{
			get
			{
				return this._ActionLogGroup;
			}
			set
			{
				if ((this._ActionLogGroup != value))
				{
					this.OnActionLogGroupChanging(value);
					this.SendPropertyChanging();
					this._ActionLogGroup = value;
					this.SendPropertyChanged("ActionLogGroup");
					this.OnActionLogGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTargetDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogTargetDate
		{
			get
			{
				return this._ActionLogTargetDate1;
			}
			set
			{
				if ((this._ActionLogTargetDate1 != value))
				{
					this.OnActionLogTargetDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTargetDate1 = value;
					this.SendPropertyChanged("ActionLogTargetDate");
					this.OnActionLogTargetDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogRevisedDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogRevisedDate
		{
			get
			{
				return this._ActionLogRevisedDate1;
			}
			set
			{
				if ((this._ActionLogRevisedDate1 != value))
				{
					this.OnActionLogRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogRevisedDate1 = value;
					this.SendPropertyChanged("ActionLogRevisedDate");
					this.OnActionLogRevisedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCmplDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogCmplDate
		{
			get
			{
				return this._ActionLogCmplDate1;
			}
			set
			{
				if ((this._ActionLogCmplDate1 != value))
				{
					this.OnActionLogCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCmplDate1 = value;
					this.SendPropertyChanged("ActionLogCmplDate");
					this.OnActionLogCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogIsCompleted", DbType="VarChar(10)")]
		public string ActionLogIsCompleted
		{
			get
			{
				return this._ActionLogIsCompleted;
			}
			set
			{
				if ((this._ActionLogIsCompleted != value))
				{
					this.OnActionLogIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._ActionLogIsCompleted = value;
					this.SendPropertyChanged("ActionLogIsCompleted");
					this.OnActionLogIsCompletedChanged();
				}
			}
		}
		
		[Association(Name="BandLaceHeader_BandLaceSpotDefect", Storage="_BandLaceSpotDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BandLaceSpotDefect> BandLaceSpotDefects
		{
			get
			{
				return this._BandLaceSpotDefects;
			}
			set
			{
				this._BandLaceSpotDefects.Assign(value);
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandWidth", Storage="_BandLandWidths", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BandLandWidth> BandLandWidths
		{
			get
			{
				return this._BandLandWidths;
			}
			set
			{
				this._BandLandWidths.Assign(value);
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandPatternShapeRepeat", Storage="_BandLandPatternShapeRepeats", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BandLandPatternShapeRepeat> BandLandPatternShapeRepeats
		{
			get
			{
				return this._BandLandPatternShapeRepeats;
			}
			set
			{
				this._BandLandPatternShapeRepeats.Assign(value);
			}
		}
		
		[Association(Name="BandLaceHeader_BandLandSkewnessBow", Storage="_BandLandSkewnessBows", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BandLandSkewnessBow> BandLandSkewnessBows
		{
			get
			{
				return this._BandLandSkewnessBows;
			}
			set
			{
				this._BandLandSkewnessBows.Assign(value);
			}
		}
		
		[Association(Name="BandLaceHeader_BandLaceChainDefect", Storage="_BandLaceChainDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BandLaceChainDefect> BandLaceChainDefects
		{
			get
			{
				return this._BandLaceChainDefects;
			}
			set
			{
				this._BandLaceChainDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BandLaceSpotDefects(BandLaceSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = this;
		}
		
		private void detach_BandLaceSpotDefects(BandLaceSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = null;
		}
		
		private void attach_BandLandWidths(BandLandWidth entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = this;
		}
		
		private void detach_BandLandWidths(BandLandWidth entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = null;
		}
		
		private void attach_BandLandPatternShapeRepeats(BandLandPatternShapeRepeat entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = this;
		}
		
		private void detach_BandLandPatternShapeRepeats(BandLandPatternShapeRepeat entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = null;
		}
		
		private void attach_BandLandSkewnessBows(BandLandSkewnessBow entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = this;
		}
		
		private void detach_BandLandSkewnessBows(BandLandSkewnessBow entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = null;
		}
		
		private void attach_BandLaceChainDefects(BandLaceChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = this;
		}
		
		private void detach_BandLaceChainDefects(BandLaceChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.BandLaceHeader = null;
		}
	}
	
	[Table(Name="dbo.ElasticHeader")]
	public partial class ElasticHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _Whse;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQtyByLot;
		
		private string _LotID;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _SuppItemRef;
		
		private string _SuppCode;
		
		private string _ProjectNo;
		
		private string _PONo;
		
		private string _HDONo;
		
		private string _BoxNo;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _IDAuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private string _AuditStage;
		
		private string _AuditType;
		
		private string _HasChainDefect;
		
		private string _ChainDefectResult;
		
		private string _Part1DefectResult;
		
		private string _Part1DefectResultByLot;
		
		private System.Nullable<decimal> _Part1DefectTotalClaimByLot;
		
		private System.Nullable<decimal> _PackingListLength;
		
		private System.Nullable<int> _AuditSampleSizeQty;
		
		private System.Nullable<int> _AuditSampleSizeQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByLot;
		
		private System.Nullable<decimal> _POQtyByLot;
		
		private System.Nullable<decimal> _PackingListLengthByLot;
		
		private string _AgreedEdgeToEdgeWidthRangeByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMinWidthByLot;
		
		private System.Nullable<decimal> _AgreedEdgeToEdgeMaxWidthByLot;
		
		private System.Nullable<decimal> _MeasureEdgeToEdgeWidth;
		
		private System.Nullable<decimal> _WidthDifferent;
		
		private string _WidthResultByLot;
		
		private string _NeedPatternShape;
		
		private System.Nullable<decimal> _PatternShapeMin;
		
		private System.Nullable<decimal> _PatternShapeMax;
		
		private string _PatternShapeRangeByLot;
		
		private System.Nullable<decimal> _ActualPatternShape;
		
		private System.Nullable<decimal> _PatternShapeDifferent;
		
		private string _PatternShapeResult;
		
		private string _PatternShapeResultByLot;
		
		private System.Nullable<decimal> _GramWeightPer100CMMin;
		
		private System.Nullable<decimal> _GramWeightPer100CMMax;
		
		private string _GramWeightPer100CMRange;
		
		private System.Nullable<decimal> _ActualWeight;
		
		private System.Nullable<decimal> _WeightDifferent;
		
		private string _WeightResultByLot;
		
		private string _Part2MeasureResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _NeedShadeGrpg;
		
		private string _ShadeGrpgResult;
		
		private string _NeedElongation;
		
		private string _ElongationResult;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallAgreedClaimByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private string _OverallConfirmBy;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _FailSolution;
		
		private string _Auditor;
		
		private System.Nullable<decimal> _ChainDefectLength;
		
		private System.Nullable<decimal> _ChainDefectLengthPercent;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private string _Part4SpecificDefectResultByLot;
		
		private System.Nullable<decimal> _Part4FinalClaimByLot;
		
		private System.Nullable<int> _AuditBoxQtyByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private string _SpotDefectResult;
		
		private System.Nullable<int> _ChainDefectPointQty;
		
		private System.Nullable<int> _TotalDefectPointQty;
		
		private System.Nullable<decimal> _ProWeightQty;
		
		private System.Nullable<decimal> _PullBoxWeight;
		
		private System.Nullable<decimal> _SampleQuantumWeight;
		
		private System.Nullable<decimal> _LengthDiff;
		
		private System.Nullable<decimal> _LengthPercentByLot;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _ShortLengthClaim;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private string _Status;
		
		private System.Nullable<bool> _IsFullInspection;
		
		private string _ActionLogSeqNo;
		
		private string _ActionLogID;
		
		private string _ActionLogTaking;
		
		private string _ActionLogCategory;
		
		private string _ActionLogGroup;
		
		private System.Nullable<System.DateTime> _ActionLogTargetDate1;
		
		private System.Nullable<System.DateTime> _ActionLogRevisedDate1;
		
		private System.Nullable<System.DateTime> _ActionLogCmplDate1;
		
		private string _ActionLogIsCompleted;
		
		private EntitySet<ElasticSpotDefect> _ElasticSpotDefects;
		
		private EntitySet<ElasticChainDefect> _ElasticChainDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyByLotChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyByLotChanged();
    partial void OnLotIDChanging(string value);
    partial void OnLotIDChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnSuppItemRefChanging(string value);
    partial void OnSuppItemRefChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnPONoChanging(string value);
    partial void OnPONoChanged();
    partial void OnHDONoChanging(string value);
    partial void OnHDONoChanged();
    partial void OnBoxNoChanging(string value);
    partial void OnBoxNoChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnIDAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnHasChainDefectChanging(string value);
    partial void OnHasChainDefectChanged();
    partial void OnChainDefectResultChanging(string value);
    partial void OnChainDefectResultChanged();
    partial void OnPart1DefectResultChanging(string value);
    partial void OnPart1DefectResultChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart1DefectTotalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1DefectTotalClaimByLotChanged();
    partial void OnPackingListLengthChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthChanged();
    partial void OnAuditSampleSizeQtyChanging(System.Nullable<int> value);
    partial void OnAuditSampleSizeQtyChanged();
    partial void OnAuditSampleSizeQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditSampleSizeQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByLotChanged();
    partial void OnPOQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnPOQtyByLotChanged();
    partial void OnPackingListLengthByLotChanging(System.Nullable<decimal> value);
    partial void OnPackingListLengthByLotChanged();
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanging(string value);
    partial void OnAgreedEdgeToEdgeWidthRangeByLotChanged();
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMinWidthByLotChanged();
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanging(System.Nullable<decimal> value);
    partial void OnAgreedEdgeToEdgeMaxWidthByLotChanged();
    partial void OnMeasureEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnMeasureEdgeToEdgeWidthChanged();
    partial void OnWidthDifferentChanging(System.Nullable<decimal> value);
    partial void OnWidthDifferentChanged();
    partial void OnWidthResultByLotChanging(string value);
    partial void OnWidthResultByLotChanged();
    partial void OnNeedPatternShapeChanging(string value);
    partial void OnNeedPatternShapeChanged();
    partial void OnPatternShapeMinChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMinChanged();
    partial void OnPatternShapeMaxChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeMaxChanged();
    partial void OnPatternShapeRangeByLotChanging(string value);
    partial void OnPatternShapeRangeByLotChanged();
    partial void OnActualPatternShapeChanging(System.Nullable<decimal> value);
    partial void OnActualPatternShapeChanged();
    partial void OnPatternShapeDifferentChanging(System.Nullable<decimal> value);
    partial void OnPatternShapeDifferentChanged();
    partial void OnPatternShapeResultChanging(string value);
    partial void OnPatternShapeResultChanged();
    partial void OnPatternShapeResultByLotChanging(string value);
    partial void OnPatternShapeResultByLotChanged();
    partial void OnGramWeightPer100CMMinChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPer100CMMinChanged();
    partial void OnGramWeightPer100CMMaxChanging(System.Nullable<decimal> value);
    partial void OnGramWeightPer100CMMaxChanged();
    partial void OnGramWeightPer100CMRangeChanging(string value);
    partial void OnGramWeightPer100CMRangeChanged();
    partial void OnActualWeightChanging(System.Nullable<decimal> value);
    partial void OnActualWeightChanged();
    partial void OnWeightDifferentChanging(System.Nullable<decimal> value);
    partial void OnWeightDifferentChanged();
    partial void OnWeightResultByLotChanging(string value);
    partial void OnWeightResultByLotChanged();
    partial void OnPart2MeasureResultByLotChanging(string value);
    partial void OnPart2MeasureResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnNeedShadeGrpgChanging(string value);
    partial void OnNeedShadeGrpgChanged();
    partial void OnShadeGrpgResultChanging(string value);
    partial void OnShadeGrpgResultChanged();
    partial void OnNeedElongationChanging(string value);
    partial void OnNeedElongationChanged();
    partial void OnElongationResultChanging(string value);
    partial void OnElongationResultChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallAgreedClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallAgreedClaimByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnChainDefectLengthChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthChanged();
    partial void OnChainDefectLengthPercentChanging(System.Nullable<decimal> value);
    partial void OnChainDefectLengthPercentChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnPart4SpecificDefectResultByLotChanging(string value);
    partial void OnPart4SpecificDefectResultByLotChanged();
    partial void OnPart4FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4FinalClaimByLotChanged();
    partial void OnAuditBoxQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnSpotDefectResultChanging(string value);
    partial void OnSpotDefectResultChanged();
    partial void OnChainDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnChainDefectPointQtyChanged();
    partial void OnTotalDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnTotalDefectPointQtyChanged();
    partial void OnProWeightQtyChanging(System.Nullable<decimal> value);
    partial void OnProWeightQtyChanged();
    partial void OnPullBoxWeightChanging(System.Nullable<decimal> value);
    partial void OnPullBoxWeightChanged();
    partial void OnSampleQuantumWeightChanging(System.Nullable<decimal> value);
    partial void OnSampleQuantumWeightChanged();
    partial void OnLengthDiffChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffChanged();
    partial void OnLengthPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthPercentByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnIsFullInspectionChanging(System.Nullable<bool> value);
    partial void OnIsFullInspectionChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogTakingChanging(string value);
    partial void OnActionLogTakingChanged();
    partial void OnActionLogCategoryChanging(string value);
    partial void OnActionLogCategoryChanged();
    partial void OnActionLogGroupChanging(string value);
    partial void OnActionLogGroupChanged();
    partial void OnActionLogTargetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogTargetDateChanged();
    partial void OnActionLogRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogRevisedDateChanged();
    partial void OnActionLogCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogCmplDateChanged();
    partial void OnActionLogIsCompletedChanging(string value);
    partial void OnActionLogIsCompletedChanged();
    #endregion
		
		public ElasticHeader()
		{
			this._ElasticSpotDefects = new EntitySet<ElasticSpotDefect>(new Action<ElasticSpotDefect>(this.attach_ElasticSpotDefects), new Action<ElasticSpotDefect>(this.detach_ElasticSpotDefects));
			this._ElasticChainDefects = new EntitySet<ElasticChainDefect>(new Action<ElasticChainDefect>(this.attach_ElasticChainDefects), new Action<ElasticChainDefect>(this.detach_ElasticChainDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(10)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQtyByLot", DbType="Int")]
		public System.Nullable<int> TotalBoxQtyByLot
		{
			get
			{
				return this._TotalBoxQtyByLot;
			}
			set
			{
				if ((this._TotalBoxQtyByLot != value))
				{
					this.OnTotalBoxQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQtyByLot = value;
					this.SendPropertyChanged("TotalBoxQtyByLot");
					this.OnTotalBoxQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LotID", DbType="VarChar(15)")]
		public string LotID
		{
			get
			{
				return this._LotID;
			}
			set
			{
				if ((this._LotID != value))
				{
					this.OnLotIDChanging(value);
					this.SendPropertyChanging();
					this._LotID = value;
					this.SendPropertyChanged("LotID");
					this.OnLotIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(20)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_SuppItemRef", DbType="VarChar(30)")]
		public string SuppItemRef
		{
			get
			{
				return this._SuppItemRef;
			}
			set
			{
				if ((this._SuppItemRef != value))
				{
					this.OnSuppItemRefChanging(value);
					this.SendPropertyChanging();
					this._SuppItemRef = value;
					this.SendPropertyChanged("SuppItemRef");
					this.OnSuppItemRefChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(20)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_PONo", DbType="VarChar(20)")]
		public string PONo
		{
			get
			{
				return this._PONo;
			}
			set
			{
				if ((this._PONo != value))
				{
					this.OnPONoChanging(value);
					this.SendPropertyChanging();
					this._PONo = value;
					this.SendPropertyChanged("PONo");
					this.OnPONoChanged();
				}
			}
		}
		
		[Column(Storage="_HDONo", DbType="VarChar(20)")]
		public string HDONo
		{
			get
			{
				return this._HDONo;
			}
			set
			{
				if ((this._HDONo != value))
				{
					this.OnHDONoChanging(value);
					this.SendPropertyChanging();
					this._HDONo = value;
					this.SendPropertyChanged("HDONo");
					this.OnHDONoChanged();
				}
			}
		}
		
		[Column(Storage="_BoxNo", DbType="VarChar(10)")]
		public string BoxNo
		{
			get
			{
				return this._BoxNo;
			}
			set
			{
				if ((this._BoxNo != value))
				{
					this.OnBoxNoChanging(value);
					this.SendPropertyChanging();
					this._BoxNo = value;
					this.SendPropertyChanged("BoxNo");
					this.OnBoxNoChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_IDAuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDAuditDate
		{
			get
			{
				return this._IDAuditDate;
			}
			set
			{
				if ((this._IDAuditDate != value))
				{
					this.OnIDAuditDateChanging(value);
					this.SendPropertyChanging();
					this._IDAuditDate = value;
					this.SendPropertyChanged("IDAuditDate");
					this.OnIDAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(20)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_HasChainDefect", DbType="VarChar(5)")]
		public string HasChainDefect
		{
			get
			{
				return this._HasChainDefect;
			}
			set
			{
				if ((this._HasChainDefect != value))
				{
					this.OnHasChainDefectChanging(value);
					this.SendPropertyChanging();
					this._HasChainDefect = value;
					this.SendPropertyChanged("HasChainDefect");
					this.OnHasChainDefectChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectResult", DbType="VarChar(5)")]
		public string ChainDefectResult
		{
			get
			{
				return this._ChainDefectResult;
			}
			set
			{
				if ((this._ChainDefectResult != value))
				{
					this.OnChainDefectResultChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectResult = value;
					this.SendPropertyChanged("ChainDefectResult");
					this.OnChainDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResult", DbType="VarChar(5)")]
		public string Part1DefectResult
		{
			get
			{
				return this._Part1DefectResult;
			}
			set
			{
				if ((this._Part1DefectResult != value))
				{
					this.OnPart1DefectResultChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResult = value;
					this.SendPropertyChanged("Part1DefectResult");
					this.OnPart1DefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectTotalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1DefectTotalClaimByLot
		{
			get
			{
				return this._Part1DefectTotalClaimByLot;
			}
			set
			{
				if ((this._Part1DefectTotalClaimByLot != value))
				{
					this.OnPart1DefectTotalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectTotalClaimByLot = value;
					this.SendPropertyChanged("Part1DefectTotalClaimByLot");
					this.OnPart1DefectTotalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLength
		{
			get
			{
				return this._PackingListLength;
			}
			set
			{
				if ((this._PackingListLength != value))
				{
					this.OnPackingListLengthChanging(value);
					this.SendPropertyChanging();
					this._PackingListLength = value;
					this.SendPropertyChanged("PackingListLength");
					this.OnPackingListLengthChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQty", DbType="Int")]
		public System.Nullable<int> AuditSampleSizeQty
		{
			get
			{
				return this._AuditSampleSizeQty;
			}
			set
			{
				if ((this._AuditSampleSizeQty != value))
				{
					this.OnAuditSampleSizeQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQty = value;
					this.SendPropertyChanged("AuditSampleSizeQty");
					this.OnAuditSampleSizeQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSampleSizeQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditSampleSizeQtyByLot
		{
			get
			{
				return this._AuditSampleSizeQtyByLot;
			}
			set
			{
				if ((this._AuditSampleSizeQtyByLot != value))
				{
					this.OnAuditSampleSizeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditSampleSizeQtyByLot = value;
					this.SendPropertyChanged("AuditSampleSizeQtyByLot");
					this.OnAuditSampleSizeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByLot", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByLot
		{
			get
			{
				return this._AQL25StandardQtyByLot;
			}
			set
			{
				if ((this._AQL25StandardQtyByLot != value))
				{
					this.OnAQL25StandardQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByLot = value;
					this.SendPropertyChanged("AQL25StandardQtyByLot");
					this.OnAQL25StandardQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_POQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> POQtyByLot
		{
			get
			{
				return this._POQtyByLot;
			}
			set
			{
				if ((this._POQtyByLot != value))
				{
					this.OnPOQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._POQtyByLot = value;
					this.SendPropertyChanged("POQtyByLot");
					this.OnPOQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackingListLengthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PackingListLengthByLot
		{
			get
			{
				return this._PackingListLengthByLot;
			}
			set
			{
				if ((this._PackingListLengthByLot != value))
				{
					this.OnPackingListLengthByLotChanging(value);
					this.SendPropertyChanging();
					this._PackingListLengthByLot = value;
					this.SendPropertyChanged("PackingListLengthByLot");
					this.OnPackingListLengthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeWidthRangeByLot", DbType="VarChar(200)")]
		public string AgreedEdgeToEdgeWidthRangeByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeWidthRangeByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeWidthRangeByLot != value))
				{
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeWidthRangeByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeWidthRangeByLot");
					this.OnAgreedEdgeToEdgeWidthRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMinWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMinWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMinWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMinWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMinWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMinWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMinWidthByLot");
					this.OnAgreedEdgeToEdgeMinWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedEdgeToEdgeMaxWidthByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AgreedEdgeToEdgeMaxWidthByLot
		{
			get
			{
				return this._AgreedEdgeToEdgeMaxWidthByLot;
			}
			set
			{
				if ((this._AgreedEdgeToEdgeMaxWidthByLot != value))
				{
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanging(value);
					this.SendPropertyChanging();
					this._AgreedEdgeToEdgeMaxWidthByLot = value;
					this.SendPropertyChanged("AgreedEdgeToEdgeMaxWidthByLot");
					this.OnAgreedEdgeToEdgeMaxWidthByLotChanged();
				}
			}
		}
		
		[Column(Storage="_MeasureEdgeToEdgeWidth", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> MeasureEdgeToEdgeWidth
		{
			get
			{
				return this._MeasureEdgeToEdgeWidth;
			}
			set
			{
				if ((this._MeasureEdgeToEdgeWidth != value))
				{
					this.OnMeasureEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._MeasureEdgeToEdgeWidth = value;
					this.SendPropertyChanged("MeasureEdgeToEdgeWidth");
					this.OnMeasureEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_WidthDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WidthDifferent
		{
			get
			{
				return this._WidthDifferent;
			}
			set
			{
				if ((this._WidthDifferent != value))
				{
					this.OnWidthDifferentChanging(value);
					this.SendPropertyChanging();
					this._WidthDifferent = value;
					this.SendPropertyChanged("WidthDifferent");
					this.OnWidthDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByLot", DbType="VarChar(5)")]
		public string WidthResultByLot
		{
			get
			{
				return this._WidthResultByLot;
			}
			set
			{
				if ((this._WidthResultByLot != value))
				{
					this.OnWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByLot = value;
					this.SendPropertyChanged("WidthResultByLot");
					this.OnWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedPatternShape", DbType="VarChar(5)")]
		public string NeedPatternShape
		{
			get
			{
				return this._NeedPatternShape;
			}
			set
			{
				if ((this._NeedPatternShape != value))
				{
					this.OnNeedPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._NeedPatternShape = value;
					this.SendPropertyChanged("NeedPatternShape");
					this.OnNeedPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMin
		{
			get
			{
				return this._PatternShapeMin;
			}
			set
			{
				if ((this._PatternShapeMin != value))
				{
					this.OnPatternShapeMinChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMin = value;
					this.SendPropertyChanged("PatternShapeMin");
					this.OnPatternShapeMinChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeMax
		{
			get
			{
				return this._PatternShapeMax;
			}
			set
			{
				if ((this._PatternShapeMax != value))
				{
					this.OnPatternShapeMaxChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeMax = value;
					this.SendPropertyChanged("PatternShapeMax");
					this.OnPatternShapeMaxChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeRangeByLot", DbType="VarChar(200)")]
		public string PatternShapeRangeByLot
		{
			get
			{
				return this._PatternShapeRangeByLot;
			}
			set
			{
				if ((this._PatternShapeRangeByLot != value))
				{
					this.OnPatternShapeRangeByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeRangeByLot = value;
					this.SendPropertyChanged("PatternShapeRangeByLot");
					this.OnPatternShapeRangeByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActualPatternShape", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualPatternShape
		{
			get
			{
				return this._ActualPatternShape;
			}
			set
			{
				if ((this._ActualPatternShape != value))
				{
					this.OnActualPatternShapeChanging(value);
					this.SendPropertyChanging();
					this._ActualPatternShape = value;
					this.SendPropertyChanged("ActualPatternShape");
					this.OnActualPatternShapeChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PatternShapeDifferent
		{
			get
			{
				return this._PatternShapeDifferent;
			}
			set
			{
				if ((this._PatternShapeDifferent != value))
				{
					this.OnPatternShapeDifferentChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeDifferent = value;
					this.SendPropertyChanged("PatternShapeDifferent");
					this.OnPatternShapeDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResult", DbType="VarChar(5)")]
		public string PatternShapeResult
		{
			get
			{
				return this._PatternShapeResult;
			}
			set
			{
				if ((this._PatternShapeResult != value))
				{
					this.OnPatternShapeResultChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResult = value;
					this.SendPropertyChanged("PatternShapeResult");
					this.OnPatternShapeResultChanged();
				}
			}
		}
		
		[Column(Storage="_PatternShapeResultByLot", DbType="VarChar(5)")]
		public string PatternShapeResultByLot
		{
			get
			{
				return this._PatternShapeResultByLot;
			}
			set
			{
				if ((this._PatternShapeResultByLot != value))
				{
					this.OnPatternShapeResultByLotChanging(value);
					this.SendPropertyChanging();
					this._PatternShapeResultByLot = value;
					this.SendPropertyChanged("PatternShapeResultByLot");
					this.OnPatternShapeResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMMin", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPer100CMMin
		{
			get
			{
				return this._GramWeightPer100CMMin;
			}
			set
			{
				if ((this._GramWeightPer100CMMin != value))
				{
					this.OnGramWeightPer100CMMinChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMMin = value;
					this.SendPropertyChanged("GramWeightPer100CMMin");
					this.OnGramWeightPer100CMMinChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMMax", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> GramWeightPer100CMMax
		{
			get
			{
				return this._GramWeightPer100CMMax;
			}
			set
			{
				if ((this._GramWeightPer100CMMax != value))
				{
					this.OnGramWeightPer100CMMaxChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMMax = value;
					this.SendPropertyChanged("GramWeightPer100CMMax");
					this.OnGramWeightPer100CMMaxChanged();
				}
			}
		}
		
		[Column(Storage="_GramWeightPer100CMRange", DbType="VarChar(200)")]
		public string GramWeightPer100CMRange
		{
			get
			{
				return this._GramWeightPer100CMRange;
			}
			set
			{
				if ((this._GramWeightPer100CMRange != value))
				{
					this.OnGramWeightPer100CMRangeChanging(value);
					this.SendPropertyChanging();
					this._GramWeightPer100CMRange = value;
					this.SendPropertyChanged("GramWeightPer100CMRange");
					this.OnGramWeightPer100CMRangeChanged();
				}
			}
		}
		
		[Column(Storage="_ActualWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ActualWeight
		{
			get
			{
				return this._ActualWeight;
			}
			set
			{
				if ((this._ActualWeight != value))
				{
					this.OnActualWeightChanging(value);
					this.SendPropertyChanging();
					this._ActualWeight = value;
					this.SendPropertyChanged("ActualWeight");
					this.OnActualWeightChanged();
				}
			}
		}
		
		[Column(Storage="_WeightDifferent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> WeightDifferent
		{
			get
			{
				return this._WeightDifferent;
			}
			set
			{
				if ((this._WeightDifferent != value))
				{
					this.OnWeightDifferentChanging(value);
					this.SendPropertyChanging();
					this._WeightDifferent = value;
					this.SendPropertyChanged("WeightDifferent");
					this.OnWeightDifferentChanged();
				}
			}
		}
		
		[Column(Storage="_WeightResultByLot", DbType="VarChar(5)")]
		public string WeightResultByLot
		{
			get
			{
				return this._WeightResultByLot;
			}
			set
			{
				if ((this._WeightResultByLot != value))
				{
					this.OnWeightResultByLotChanging(value);
					this.SendPropertyChanging();
					this._WeightResultByLot = value;
					this.SendPropertyChanged("WeightResultByLot");
					this.OnWeightResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2MeasureResultByLot", DbType="VarChar(5)")]
		public string Part2MeasureResultByLot
		{
			get
			{
				return this._Part2MeasureResultByLot;
			}
			set
			{
				if ((this._Part2MeasureResultByLot != value))
				{
					this.OnPart2MeasureResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2MeasureResultByLot = value;
					this.SendPropertyChanged("Part2MeasureResultByLot");
					this.OnPart2MeasureResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_NeedShadeGrpg", DbType="VarChar(5)")]
		public string NeedShadeGrpg
		{
			get
			{
				return this._NeedShadeGrpg;
			}
			set
			{
				if ((this._NeedShadeGrpg != value))
				{
					this.OnNeedShadeGrpgChanging(value);
					this.SendPropertyChanging();
					this._NeedShadeGrpg = value;
					this.SendPropertyChanged("NeedShadeGrpg");
					this.OnNeedShadeGrpgChanged();
				}
			}
		}
		
		[Column(Storage="_ShadeGrpgResult", DbType="VarChar(5)")]
		public string ShadeGrpgResult
		{
			get
			{
				return this._ShadeGrpgResult;
			}
			set
			{
				if ((this._ShadeGrpgResult != value))
				{
					this.OnShadeGrpgResultChanging(value);
					this.SendPropertyChanging();
					this._ShadeGrpgResult = value;
					this.SendPropertyChanged("ShadeGrpgResult");
					this.OnShadeGrpgResultChanged();
				}
			}
		}
		
		[Column(Storage="_NeedElongation", DbType="VarChar(5)")]
		public string NeedElongation
		{
			get
			{
				return this._NeedElongation;
			}
			set
			{
				if ((this._NeedElongation != value))
				{
					this.OnNeedElongationChanging(value);
					this.SendPropertyChanging();
					this._NeedElongation = value;
					this.SendPropertyChanged("NeedElongation");
					this.OnNeedElongationChanged();
				}
			}
		}
		
		[Column(Storage="_ElongationResult", DbType="VarChar(5)")]
		public string ElongationResult
		{
			get
			{
				return this._ElongationResult;
			}
			set
			{
				if ((this._ElongationResult != value))
				{
					this.OnElongationResultChanging(value);
					this.SendPropertyChanging();
					this._ElongationResult = value;
					this.SendPropertyChanged("ElongationResult");
					this.OnElongationResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallAgreedClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallAgreedClaimByLot
		{
			get
			{
				return this._OverallAgreedClaimByLot;
			}
			set
			{
				if ((this._OverallAgreedClaimByLot != value))
				{
					this.OnOverallAgreedClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallAgreedClaimByLot = value;
					this.SendPropertyChanged("OverallAgreedClaimByLot");
					this.OnOverallAgreedClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(100)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLength", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLength
		{
			get
			{
				return this._ChainDefectLength;
			}
			set
			{
				if ((this._ChainDefectLength != value))
				{
					this.OnChainDefectLengthChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLength = value;
					this.SendPropertyChanged("ChainDefectLength");
					this.OnChainDefectLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectLengthPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ChainDefectLengthPercent
		{
			get
			{
				return this._ChainDefectLengthPercent;
			}
			set
			{
				if ((this._ChainDefectLengthPercent != value))
				{
					this.OnChainDefectLengthPercentChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectLengthPercent = value;
					this.SendPropertyChanged("ChainDefectLengthPercent");
					this.OnChainDefectLengthPercentChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4SpecificDefectResultByLot", DbType="VarChar(5)")]
		public string Part4SpecificDefectResultByLot
		{
			get
			{
				return this._Part4SpecificDefectResultByLot;
			}
			set
			{
				if ((this._Part4SpecificDefectResultByLot != value))
				{
					this.OnPart4SpecificDefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4SpecificDefectResultByLot = value;
					this.SendPropertyChanged("Part4SpecificDefectResultByLot");
					this.OnPart4SpecificDefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4FinalClaimByLot
		{
			get
			{
				return this._Part4FinalClaimByLot;
			}
			set
			{
				if ((this._Part4FinalClaimByLot != value))
				{
					this.OnPart4FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4FinalClaimByLot = value;
					this.SendPropertyChanged("Part4FinalClaimByLot");
					this.OnPart4FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditBoxQtyByLot
		{
			get
			{
				return this._AuditBoxQtyByLot;
			}
			set
			{
				if ((this._AuditBoxQtyByLot != value))
				{
					this.OnAuditBoxQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQtyByLot = value;
					this.SendPropertyChanged("AuditBoxQtyByLot");
					this.OnAuditBoxQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectResult", DbType="VarChar(5)")]
		public string SpotDefectResult
		{
			get
			{
				return this._SpotDefectResult;
			}
			set
			{
				if ((this._SpotDefectResult != value))
				{
					this.OnSpotDefectResultChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectResult = value;
					this.SendPropertyChanged("SpotDefectResult");
					this.OnSpotDefectResultChanged();
				}
			}
		}
		
		[Column(Storage="_ChainDefectPointQty", DbType="Int")]
		public System.Nullable<int> ChainDefectPointQty
		{
			get
			{
				return this._ChainDefectPointQty;
			}
			set
			{
				if ((this._ChainDefectPointQty != value))
				{
					this.OnChainDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._ChainDefectPointQty = value;
					this.SendPropertyChanged("ChainDefectPointQty");
					this.OnChainDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDefectPointQty", DbType="Int")]
		public System.Nullable<int> TotalDefectPointQty
		{
			get
			{
				return this._TotalDefectPointQty;
			}
			set
			{
				if ((this._TotalDefectPointQty != value))
				{
					this.OnTotalDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalDefectPointQty = value;
					this.SendPropertyChanged("TotalDefectPointQty");
					this.OnTotalDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ProWeightQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ProWeightQty
		{
			get
			{
				return this._ProWeightQty;
			}
			set
			{
				if ((this._ProWeightQty != value))
				{
					this.OnProWeightQtyChanging(value);
					this.SendPropertyChanging();
					this._ProWeightQty = value;
					this.SendPropertyChanged("ProWeightQty");
					this.OnProWeightQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullBoxWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PullBoxWeight
		{
			get
			{
				return this._PullBoxWeight;
			}
			set
			{
				if ((this._PullBoxWeight != value))
				{
					this.OnPullBoxWeightChanging(value);
					this.SendPropertyChanging();
					this._PullBoxWeight = value;
					this.SendPropertyChanged("PullBoxWeight");
					this.OnPullBoxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SampleQuantumWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SampleQuantumWeight
		{
			get
			{
				return this._SampleQuantumWeight;
			}
			set
			{
				if ((this._SampleQuantumWeight != value))
				{
					this.OnSampleQuantumWeightChanging(value);
					this.SendPropertyChanging();
					this._SampleQuantumWeight = value;
					this.SendPropertyChanged("SampleQuantumWeight");
					this.OnSampleQuantumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiff", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiff
		{
			get
			{
				return this._LengthDiff;
			}
			set
			{
				if ((this._LengthDiff != value))
				{
					this.OnLengthDiffChanging(value);
					this.SendPropertyChanging();
					this._LengthDiff = value;
					this.SendPropertyChanged("LengthDiff");
					this.OnLengthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_LengthPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthPercentByLot
		{
			get
			{
				return this._LengthPercentByLot;
			}
			set
			{
				if ((this._LengthPercentByLot != value))
				{
					this.OnLengthPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthPercentByLot = value;
					this.SendPropertyChanged("LengthPercentByLot");
					this.OnLengthPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaim
		{
			get
			{
				return this._ShortLengthClaim;
			}
			set
			{
				if ((this._ShortLengthClaim != value))
				{
					this.OnShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaim = value;
					this.SendPropertyChanged("ShortLengthClaim");
					this.OnShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IsFullInspection", DbType="Bit")]
		public System.Nullable<bool> IsFullInspection
		{
			get
			{
				return this._IsFullInspection;
			}
			set
			{
				if ((this._IsFullInspection != value))
				{
					this.OnIsFullInspectionChanging(value);
					this.SendPropertyChanging();
					this._IsFullInspection = value;
					this.SendPropertyChanged("IsFullInspection");
					this.OnIsFullInspectionChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(200)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTaking", DbType="VarChar(10)")]
		public string ActionLogTaking
		{
			get
			{
				return this._ActionLogTaking;
			}
			set
			{
				if ((this._ActionLogTaking != value))
				{
					this.OnActionLogTakingChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTaking = value;
					this.SendPropertyChanged("ActionLogTaking");
					this.OnActionLogTakingChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCategory", DbType="VarChar(100)")]
		public string ActionLogCategory
		{
			get
			{
				return this._ActionLogCategory;
			}
			set
			{
				if ((this._ActionLogCategory != value))
				{
					this.OnActionLogCategoryChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCategory = value;
					this.SendPropertyChanged("ActionLogCategory");
					this.OnActionLogCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogGroup", DbType="VarChar(20)")]
		public string ActionLogGroup
		{
			get
			{
				return this._ActionLogGroup;
			}
			set
			{
				if ((this._ActionLogGroup != value))
				{
					this.OnActionLogGroupChanging(value);
					this.SendPropertyChanging();
					this._ActionLogGroup = value;
					this.SendPropertyChanged("ActionLogGroup");
					this.OnActionLogGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTargetDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogTargetDate
		{
			get
			{
				return this._ActionLogTargetDate1;
			}
			set
			{
				if ((this._ActionLogTargetDate1 != value))
				{
					this.OnActionLogTargetDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTargetDate1 = value;
					this.SendPropertyChanged("ActionLogTargetDate");
					this.OnActionLogTargetDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogRevisedDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogRevisedDate
		{
			get
			{
				return this._ActionLogRevisedDate1;
			}
			set
			{
				if ((this._ActionLogRevisedDate1 != value))
				{
					this.OnActionLogRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogRevisedDate1 = value;
					this.SendPropertyChanged("ActionLogRevisedDate");
					this.OnActionLogRevisedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCmplDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogCmplDate
		{
			get
			{
				return this._ActionLogCmplDate1;
			}
			set
			{
				if ((this._ActionLogCmplDate1 != value))
				{
					this.OnActionLogCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCmplDate1 = value;
					this.SendPropertyChanged("ActionLogCmplDate");
					this.OnActionLogCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogIsCompleted", DbType="VarChar(10)")]
		public string ActionLogIsCompleted
		{
			get
			{
				return this._ActionLogIsCompleted;
			}
			set
			{
				if ((this._ActionLogIsCompleted != value))
				{
					this.OnActionLogIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._ActionLogIsCompleted = value;
					this.SendPropertyChanged("ActionLogIsCompleted");
					this.OnActionLogIsCompletedChanged();
				}
			}
		}
		
		[Association(Name="ElasticHeader_ElasticSpotDefect", Storage="_ElasticSpotDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<ElasticSpotDefect> ElasticSpotDefects
		{
			get
			{
				return this._ElasticSpotDefects;
			}
			set
			{
				this._ElasticSpotDefects.Assign(value);
			}
		}
		
		[Association(Name="ElasticHeader_ElasticChainDefect", Storage="_ElasticChainDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<ElasticChainDefect> ElasticChainDefects
		{
			get
			{
				return this._ElasticChainDefects;
			}
			set
			{
				this._ElasticChainDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ElasticSpotDefects(ElasticSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.ElasticHeader = this;
		}
		
		private void detach_ElasticSpotDefects(ElasticSpotDefect entity)
		{
			this.SendPropertyChanging();
			entity.ElasticHeader = null;
		}
		
		private void attach_ElasticChainDefects(ElasticChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.ElasticHeader = this;
		}
		
		private void detach_ElasticChainDefects(ElasticChainDefect entity)
		{
			this.SendPropertyChanging();
			entity.ElasticHeader = null;
		}
	}
	
	[Table(Name="dbo.BraCupHeader")]
	public partial class BraCupHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _SuppCode;
		
		private string _PONO;
		
		private string _HDONO;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQty;
		
		private System.Nullable<int> _PullIndQtyByLot;
		
		private System.Nullable<int> _PackListQty;
		
		private System.Nullable<int> _PackListQtyByCrossCup;
		
		private System.Nullable<int> _PackListQtyByLot;
		
		private System.Nullable<int> _TotalAQLAuditQty;
		
		private System.Nullable<int> _TotalAuditSample;
		
		private System.Nullable<int> _TotalStockInQty;
		
		private System.Nullable<int> _AuditBoxQty;
		
		private string _AuditType;
		
		private string _AuditQty;
		
		private string _Remark;
		
		private string _AuditStage;
		
		private System.Nullable<int> _DefectQty;
		
		private System.Nullable<int> _DefectCount;
		
		private System.Nullable<int> _RejectQty;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _Auditor;
		
		private string _Whse;
		
		private string _SuppRef;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _ColorShade;
		
		private string _ProjectNO;
		
		private string _ItemIDNO;
		
		private string _IndPackNO;
		
		private string _AuditSKUCrossCup;
		
		private System.Nullable<int> _TotalAuditSKUCrossCup;
		
		private string _AuditSKU;
		
		private System.Nullable<int> _TotalAuditSKU;
		
		private System.Nullable<int> _AQLAuditQty;
		
		private System.Nullable<int> _AQLAuditQtyByCrossCup;
		
		private System.Nullable<int> _AQLAuditQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByCrossCup;
		
		private string _DefectResultByID;
		
		private string _DefectResultByColor;
		
		private System.Nullable<decimal> _AgreedUsableWidthMin;
		
		private System.Nullable<decimal> _AgreedUsableWidthMax;
		
		private string _AgreedUsableWidthRange;
		
		private System.Nullable<decimal> _EdgeToEdgeWidth;
		
		private System.Nullable<decimal> _EdgeToEdgeWidthDiff;
		
		private string _EdgeToEdgeWidthResultByLot;
		
		private string _WidthResultByID;
		
		private string _WidthResultByColor;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private string _OverallConfirmBy;
		
		private string _FailSolution;
		
		private System.Nullable<int> _TotalItemIDNO;
		
		private System.Nullable<int> _TotalPONO;
		
		private System.Nullable<int> _TotalSuppRef;
		
		private System.Nullable<int> _TotalSuppCode;
		
		private System.Nullable<int> _TotalItemCode;
		
		private System.Nullable<int> _TotalColorCode;
		
		private System.Nullable<int> _TotalProject;
		
		private System.Nullable<int> _TotalClaimRejectedQty;
		
		private System.Nullable<int> _TotalOffQty;
		
		private System.Nullable<int> _OverallClaimQty;
		
		private System.Nullable<int> _CasingTotalPullQty;
		
		private string _CasingPullCaseNo;
		
		private System.Nullable<int> _CasingTotalDefectQty;
		
		private System.Nullable<int> _CasingRejectQty;
		
		private System.Nullable<int> _CasingPackListQty;
		
		private System.Nullable<int> _CasingLabelQty;
		
		private System.Nullable<int> _CasingDiffQty;
		
		private System.Nullable<decimal> _CasingDiffPercent;
		
		private System.Nullable<int> _CasingDiffQtyByLot;
		
		private string _CasingResultByLot;
		
		private System.Nullable<decimal> _CasingShortLengthClaim;
		
		private string _Part1DefectResultByLot;
		
		private string _Part2Result;
		
		private string _Part2ResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _ColorShadeResult;
		
		private System.Nullable<int> _AuditCaseQtyByLot;
		
		private System.Nullable<int> _CountQty;
		
		private System.Nullable<int> _CountDiffQty;
		
		private System.Nullable<int> _CountDiffQtyByLot;
		
		private string _CountResult;
		
		private string _Part1Result;
		
		private string _Part1ResultByLot;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<int> _UnderPullSizeCupQtyByLot;
		
		private System.Nullable<int> _UnderPackingListSizeCupQtyByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private System.Nullable<bool> _NeedCheckQty;
		
		private string _ErrorCode;
		
		private string _ErrorNameEN;
		
		private System.Nullable<int> _ErrorQty;
		
		private string _Status;
		
		private System.Nullable<int> _PackListQtyByCrossCupOnlySelected;
		
		private System.Nullable<bool> _IsByCrossCupFulInspection;
		
		private string _ActionLogNO;
		
		private string _ActionLogID;
		
		private string _ActionLogTaking;
		
		private string _ActionLogCategory;
		
		private string _ActionLogGroup;
		
		private System.Nullable<System.DateTime> _ActionLogTargetDate1;
		
		private System.Nullable<System.DateTime> _ActionLogRevisedDate1;
		
		private System.Nullable<System.DateTime> _ActionLogCmplDate1;
		
		private string _ActionLogIsCompleted;
		
		private EntitySet<BraCupDefect> _BraCupDefects;
		
		private EntitySet<BraCupCasingDefect> _BraCupCasingDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnHDONOChanging(string value);
    partial void OnHDONOChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyChanged();
    partial void OnPullIndQtyByLotChanging(System.Nullable<int> value);
    partial void OnPullIndQtyByLotChanged();
    partial void OnPackListQtyChanging(System.Nullable<int> value);
    partial void OnPackListQtyChanged();
    partial void OnPackListQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnPackListQtyByCrossCupChanged();
    partial void OnPackListQtyByLotChanging(System.Nullable<int> value);
    partial void OnPackListQtyByLotChanged();
    partial void OnTotalAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnTotalAQLAuditQtyChanged();
    partial void OnTotalAuditSampleChanging(System.Nullable<int> value);
    partial void OnTotalAuditSampleChanged();
    partial void OnTotalStockInQtyChanging(System.Nullable<int> value);
    partial void OnTotalStockInQtyChanged();
    partial void OnAuditBoxQtyChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnAuditQtyChanging(string value);
    partial void OnAuditQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    partial void OnDefectCountChanging(System.Nullable<int> value);
    partial void OnDefectCountChanged();
    partial void OnRejectQtyChanging(System.Nullable<int> value);
    partial void OnRejectQtyChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnColorShadeChanging(string value);
    partial void OnColorShadeChanged();
    partial void OnProjectNOChanging(string value);
    partial void OnProjectNOChanged();
    partial void OnItemIDNOChanging(string value);
    partial void OnItemIDNOChanged();
    partial void OnIndPackNOChanging(string value);
    partial void OnIndPackNOChanged();
    partial void OnAuditSKUCrossCupChanging(string value);
    partial void OnAuditSKUCrossCupChanged();
    partial void OnTotalAuditSKUCrossCupChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUCrossCupChanged();
    partial void OnAuditSKUChanging(string value);
    partial void OnAuditSKUChanged();
    partial void OnTotalAuditSKUChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUChanged();
    partial void OnAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyChanged();
    partial void OnAQLAuditQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByCrossCupChanged();
    partial void OnAQLAuditQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByCrossCupChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByCrossCupChanged();
    partial void OnDefectResultByIDChanging(string value);
    partial void OnDefectResultByIDChanged();
    partial void OnDefectResultByColorChanging(string value);
    partial void OnDefectResultByColorChanged();
    partial void OnAgreedUsableWidthMinChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMinChanged();
    partial void OnAgreedUsableWidthMaxChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMaxChanged();
    partial void OnAgreedUsableWidthRangeChanging(string value);
    partial void OnAgreedUsableWidthRangeChanged();
    partial void OnEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthChanged();
    partial void OnEdgeToEdgeWidthDiffChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthDiffChanged();
    partial void OnEdgeToEdgeWidthResultByLotChanging(string value);
    partial void OnEdgeToEdgeWidthResultByLotChanged();
    partial void OnWidthResultByIDChanging(string value);
    partial void OnWidthResultByIDChanged();
    partial void OnWidthResultByColorChanging(string value);
    partial void OnWidthResultByColorChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnTotalItemIDNOChanging(System.Nullable<int> value);
    partial void OnTotalItemIDNOChanged();
    partial void OnTotalPONOChanging(System.Nullable<int> value);
    partial void OnTotalPONOChanged();
    partial void OnTotalSuppRefChanging(System.Nullable<int> value);
    partial void OnTotalSuppRefChanged();
    partial void OnTotalSuppCodeChanging(System.Nullable<int> value);
    partial void OnTotalSuppCodeChanged();
    partial void OnTotalItemCodeChanging(System.Nullable<int> value);
    partial void OnTotalItemCodeChanged();
    partial void OnTotalColorCodeChanging(System.Nullable<int> value);
    partial void OnTotalColorCodeChanged();
    partial void OnTotalProjectChanging(System.Nullable<int> value);
    partial void OnTotalProjectChanged();
    partial void OnTotalClaimRejectedQtyChanging(System.Nullable<int> value);
    partial void OnTotalClaimRejectedQtyChanged();
    partial void OnTotalOffQtyChanging(System.Nullable<int> value);
    partial void OnTotalOffQtyChanged();
    partial void OnOverallClaimQtyChanging(System.Nullable<int> value);
    partial void OnOverallClaimQtyChanged();
    partial void OnCasingTotalPullQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalPullQtyChanged();
    partial void OnCasingPullCaseNoChanging(string value);
    partial void OnCasingPullCaseNoChanged();
    partial void OnCasingTotalDefectQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalDefectQtyChanged();
    partial void OnCasingRejectQtyChanging(System.Nullable<int> value);
    partial void OnCasingRejectQtyChanged();
    partial void OnCasingPackListQtyChanging(System.Nullable<int> value);
    partial void OnCasingPackListQtyChanged();
    partial void OnCasingLabelQtyChanging(System.Nullable<int> value);
    partial void OnCasingLabelQtyChanged();
    partial void OnCasingDiffQtyChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyChanged();
    partial void OnCasingDiffPercentChanging(System.Nullable<decimal> value);
    partial void OnCasingDiffPercentChanged();
    partial void OnCasingDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyByLotChanged();
    partial void OnCasingResultByLotChanging(string value);
    partial void OnCasingResultByLotChanged();
    partial void OnCasingShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnCasingShortLengthClaimChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart2ResultChanging(string value);
    partial void OnPart2ResultChanged();
    partial void OnPart2ResultByLotChanging(string value);
    partial void OnPart2ResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnColorShadeResultChanging(string value);
    partial void OnColorShadeResultChanged();
    partial void OnAuditCaseQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditCaseQtyByLotChanged();
    partial void OnCountQtyChanging(System.Nullable<int> value);
    partial void OnCountQtyChanged();
    partial void OnCountDiffQtyChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyChanged();
    partial void OnCountDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyByLotChanged();
    partial void OnCountResultChanging(string value);
    partial void OnCountResultChanged();
    partial void OnPart1ResultChanging(string value);
    partial void OnPart1ResultChanged();
    partial void OnPart1ResultByLotChanging(string value);
    partial void OnPart1ResultByLotChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnUnderPullSizeCupQtyByLotChanging(System.Nullable<int> value);
    partial void OnUnderPullSizeCupQtyByLotChanged();
    partial void OnUnderPackingListSizeCupQtyByLotChanging(System.Nullable<int> value);
    partial void OnUnderPackingListSizeCupQtyByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnNeedCheckQtyChanging(System.Nullable<bool> value);
    partial void OnNeedCheckQtyChanged();
    partial void OnErrorCodeChanging(string value);
    partial void OnErrorCodeChanged();
    partial void OnErrorNameENChanging(string value);
    partial void OnErrorNameENChanged();
    partial void OnErrorQtyChanging(System.Nullable<int> value);
    partial void OnErrorQtyChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPackListQtyByCrossCupOnlySelectedChanging(System.Nullable<int> value);
    partial void OnPackListQtyByCrossCupOnlySelectedChanged();
    partial void OnIsByCrossCupFulInspectionChanging(System.Nullable<bool> value);
    partial void OnIsByCrossCupFulInspectionChanged();
    partial void OnActionLogNOChanging(string value);
    partial void OnActionLogNOChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogTakingChanging(string value);
    partial void OnActionLogTakingChanged();
    partial void OnActionLogCategoryChanging(string value);
    partial void OnActionLogCategoryChanged();
    partial void OnActionLogGroupChanging(string value);
    partial void OnActionLogGroupChanged();
    partial void OnActionLogTargetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogTargetDateChanged();
    partial void OnActionLogRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogRevisedDateChanged();
    partial void OnActionLogCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogCmplDateChanged();
    partial void OnActionLogIsCompletedChanging(string value);
    partial void OnActionLogIsCompletedChanged();
    #endregion
		
		public BraCupHeader()
		{
			this._BraCupDefects = new EntitySet<BraCupDefect>(new Action<BraCupDefect>(this.attach_BraCupDefects), new Action<BraCupDefect>(this.detach_BraCupDefects));
			this._BraCupCasingDefects = new EntitySet<BraCupCasingDefect>(new Action<BraCupCasingDefect>(this.attach_BraCupCasingDefects), new Action<BraCupCasingDefect>(this.detach_BraCupCasingDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(5)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PONO", DbType="VarChar(20)")]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_HDONO", DbType="VarChar(20)")]
		public string HDONO
		{
			get
			{
				return this._HDONO;
			}
			set
			{
				if ((this._HDONO != value))
				{
					this.OnHDONOChanging(value);
					this.SendPropertyChanging();
					this._HDONO = value;
					this.SendPropertyChanged("HDONO");
					this.OnHDONOChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQty", DbType="Int")]
		public System.Nullable<int> TotalBoxQty
		{
			get
			{
				return this._TotalBoxQty;
			}
			set
			{
				if ((this._TotalBoxQty != value))
				{
					this.OnTotalBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQty = value;
					this.SendPropertyChanged("TotalBoxQty");
					this.OnTotalBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullIndQtyByLot", DbType="Int")]
		public System.Nullable<int> PullIndQtyByLot
		{
			get
			{
				return this._PullIndQtyByLot;
			}
			set
			{
				if ((this._PullIndQtyByLot != value))
				{
					this.OnPullIndQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PullIndQtyByLot = value;
					this.SendPropertyChanged("PullIndQtyByLot");
					this.OnPullIndQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQty", DbType="Int")]
		public System.Nullable<int> PackListQty
		{
			get
			{
				return this._PackListQty;
			}
			set
			{
				if ((this._PackListQty != value))
				{
					this.OnPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._PackListQty = value;
					this.SendPropertyChanged("PackListQty");
					this.OnPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> PackListQtyByCrossCup
		{
			get
			{
				return this._PackListQtyByCrossCup;
			}
			set
			{
				if ((this._PackListQtyByCrossCup != value))
				{
					this.OnPackListQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByCrossCup = value;
					this.SendPropertyChanged("PackListQtyByCrossCup");
					this.OnPackListQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByLot", DbType="Int")]
		public System.Nullable<int> PackListQtyByLot
		{
			get
			{
				return this._PackListQtyByLot;
			}
			set
			{
				if ((this._PackListQtyByLot != value))
				{
					this.OnPackListQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByLot = value;
					this.SendPropertyChanged("PackListQtyByLot");
					this.OnPackListQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAQLAuditQty", DbType="Int")]
		public System.Nullable<int> TotalAQLAuditQty
		{
			get
			{
				return this._TotalAQLAuditQty;
			}
			set
			{
				if ((this._TotalAQLAuditQty != value))
				{
					this.OnTotalAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalAQLAuditQty = value;
					this.SendPropertyChanged("TotalAQLAuditQty");
					this.OnTotalAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSample", DbType="Int")]
		public System.Nullable<int> TotalAuditSample
		{
			get
			{
				return this._TotalAuditSample;
			}
			set
			{
				if ((this._TotalAuditSample != value))
				{
					this.OnTotalAuditSampleChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSample = value;
					this.SendPropertyChanged("TotalAuditSample");
					this.OnTotalAuditSampleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStockInQty", DbType="Int")]
		public System.Nullable<int> TotalStockInQty
		{
			get
			{
				return this._TotalStockInQty;
			}
			set
			{
				if ((this._TotalStockInQty != value))
				{
					this.OnTotalStockInQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalStockInQty = value;
					this.SendPropertyChanged("TotalStockInQty");
					this.OnTotalStockInQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQty", DbType="Int")]
		public System.Nullable<int> AuditBoxQty
		{
			get
			{
				return this._AuditBoxQty;
			}
			set
			{
				if ((this._AuditBoxQty != value))
				{
					this.OnAuditBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQty = value;
					this.SendPropertyChanged("AuditBoxQty");
					this.OnAuditBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(50)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditQty", DbType="VarChar(50)")]
		public string AuditQty
		{
			get
			{
				return this._AuditQty;
			}
			set
			{
				if ((this._AuditQty != value))
				{
					this.OnAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditQty = value;
					this.SendPropertyChanged("AuditQty");
					this.OnAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCount", DbType="Int")]
		public System.Nullable<int> DefectCount
		{
			get
			{
				return this._DefectCount;
			}
			set
			{
				if ((this._DefectCount != value))
				{
					this.OnDefectCountChanging(value);
					this.SendPropertyChanging();
					this._DefectCount = value;
					this.SendPropertyChanged("DefectCount");
					this.OnDefectCountChanged();
				}
			}
		}
		
		[Column(Storage="_RejectQty", DbType="Int")]
		public System.Nullable<int> RejectQty
		{
			get
			{
				return this._RejectQty;
			}
			set
			{
				if ((this._RejectQty != value))
				{
					this.OnRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._RejectQty = value;
					this.SendPropertyChanged("RejectQty");
					this.OnRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(50)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(20)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShade", DbType="VarChar(20)")]
		public string ColorShade
		{
			get
			{
				return this._ColorShade;
			}
			set
			{
				if ((this._ColorShade != value))
				{
					this.OnColorShadeChanging(value);
					this.SendPropertyChanging();
					this._ColorShade = value;
					this.SendPropertyChanged("ColorShade");
					this.OnColorShadeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNO", DbType="VarChar(20)")]
		public string ProjectNO
		{
			get
			{
				return this._ProjectNO;
			}
			set
			{
				if ((this._ProjectNO != value))
				{
					this.OnProjectNOChanging(value);
					this.SendPropertyChanging();
					this._ProjectNO = value;
					this.SendPropertyChanged("ProjectNO");
					this.OnProjectNOChanged();
				}
			}
		}
		
		[Column(Storage="_ItemIDNO", DbType="VarChar(20)")]
		public string ItemIDNO
		{
			get
			{
				return this._ItemIDNO;
			}
			set
			{
				if ((this._ItemIDNO != value))
				{
					this.OnItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._ItemIDNO = value;
					this.SendPropertyChanged("ItemIDNO");
					this.OnItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_IndPackNO", DbType="VarChar(20)")]
		public string IndPackNO
		{
			get
			{
				return this._IndPackNO;
			}
			set
			{
				if ((this._IndPackNO != value))
				{
					this.OnIndPackNOChanging(value);
					this.SendPropertyChanging();
					this._IndPackNO = value;
					this.SendPropertyChanged("IndPackNO");
					this.OnIndPackNOChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKUCrossCup", DbType="VarChar(100)")]
		public string AuditSKUCrossCup
		{
			get
			{
				return this._AuditSKUCrossCup;
			}
			set
			{
				if ((this._AuditSKUCrossCup != value))
				{
					this.OnAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AuditSKUCrossCup = value;
					this.SendPropertyChanged("AuditSKUCrossCup");
					this.OnAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKUCrossCup", DbType="Int")]
		public System.Nullable<int> TotalAuditSKUCrossCup
		{
			get
			{
				return this._TotalAuditSKUCrossCup;
			}
			set
			{
				if ((this._TotalAuditSKUCrossCup != value))
				{
					this.OnTotalAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKUCrossCup = value;
					this.SendPropertyChanged("TotalAuditSKUCrossCup");
					this.OnTotalAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKU", DbType="VarChar(50)")]
		public string AuditSKU
		{
			get
			{
				return this._AuditSKU;
			}
			set
			{
				if ((this._AuditSKU != value))
				{
					this.OnAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._AuditSKU = value;
					this.SendPropertyChanged("AuditSKU");
					this.OnAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKU", DbType="Int")]
		public System.Nullable<int> TotalAuditSKU
		{
			get
			{
				return this._TotalAuditSKU;
			}
			set
			{
				if ((this._TotalAuditSKU != value))
				{
					this.OnTotalAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKU = value;
					this.SendPropertyChanged("TotalAuditSKU");
					this.OnTotalAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQty", DbType="Int")]
		public System.Nullable<int> AQLAuditQty
		{
			get
			{
				return this._AQLAuditQty;
			}
			set
			{
				if ((this._AQLAuditQty != value))
				{
					this.OnAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQty = value;
					this.SendPropertyChanged("AQLAuditQty");
					this.OnAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByCrossCup
		{
			get
			{
				return this._AQLAuditQtyByCrossCup;
			}
			set
			{
				if ((this._AQLAuditQtyByCrossCup != value))
				{
					this.OnAQLAuditQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByCrossCup = value;
					this.SendPropertyChanged("AQLAuditQtyByCrossCup");
					this.OnAQLAuditQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByLot", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByLot
		{
			get
			{
				return this._AQLAuditQtyByLot;
			}
			set
			{
				if ((this._AQLAuditQtyByLot != value))
				{
					this.OnAQLAuditQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByLot = value;
					this.SendPropertyChanged("AQLAuditQtyByLot");
					this.OnAQLAuditQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByCrossCup", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByCrossCup
		{
			get
			{
				return this._AQL25StandardQtyByCrossCup;
			}
			set
			{
				if ((this._AQL25StandardQtyByCrossCup != value))
				{
					this.OnAQL25StandardQtyByCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByCrossCup = value;
					this.SendPropertyChanged("AQL25StandardQtyByCrossCup");
					this.OnAQL25StandardQtyByCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByID", DbType="VarChar(20)")]
		public string DefectResultByID
		{
			get
			{
				return this._DefectResultByID;
			}
			set
			{
				if ((this._DefectResultByID != value))
				{
					this.OnDefectResultByIDChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByID = value;
					this.SendPropertyChanged("DefectResultByID");
					this.OnDefectResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByColor", DbType="VarChar(20)")]
		public string DefectResultByColor
		{
			get
			{
				return this._DefectResultByColor;
			}
			set
			{
				if ((this._DefectResultByColor != value))
				{
					this.OnDefectResultByColorChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByColor = value;
					this.SendPropertyChanged("DefectResultByColor");
					this.OnDefectResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMin
		{
			get
			{
				return this._AgreedUsableWidthMin;
			}
			set
			{
				if ((this._AgreedUsableWidthMin != value))
				{
					this.OnAgreedUsableWidthMinChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMin = value;
					this.SendPropertyChanged("AgreedUsableWidthMin");
					this.OnAgreedUsableWidthMinChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMax
		{
			get
			{
				return this._AgreedUsableWidthMax;
			}
			set
			{
				if ((this._AgreedUsableWidthMax != value))
				{
					this.OnAgreedUsableWidthMaxChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMax = value;
					this.SendPropertyChanged("AgreedUsableWidthMax");
					this.OnAgreedUsableWidthMaxChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthRange", DbType="VarChar(200)")]
		public string AgreedUsableWidthRange
		{
			get
			{
				return this._AgreedUsableWidthRange;
			}
			set
			{
				if ((this._AgreedUsableWidthRange != value))
				{
					this.OnAgreedUsableWidthRangeChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthRange = value;
					this.SendPropertyChanged("AgreedUsableWidthRange");
					this.OnAgreedUsableWidthRangeChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidth
		{
			get
			{
				return this._EdgeToEdgeWidth;
			}
			set
			{
				if ((this._EdgeToEdgeWidth != value))
				{
					this.OnEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidth = value;
					this.SendPropertyChanged("EdgeToEdgeWidth");
					this.OnEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthDiff", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidthDiff
		{
			get
			{
				return this._EdgeToEdgeWidthDiff;
			}
			set
			{
				if ((this._EdgeToEdgeWidthDiff != value))
				{
					this.OnEdgeToEdgeWidthDiffChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthDiff = value;
					this.SendPropertyChanged("EdgeToEdgeWidthDiff");
					this.OnEdgeToEdgeWidthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthResultByLot", DbType="VarChar(5)")]
		public string EdgeToEdgeWidthResultByLot
		{
			get
			{
				return this._EdgeToEdgeWidthResultByLot;
			}
			set
			{
				if ((this._EdgeToEdgeWidthResultByLot != value))
				{
					this.OnEdgeToEdgeWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthResultByLot = value;
					this.SendPropertyChanged("EdgeToEdgeWidthResultByLot");
					this.OnEdgeToEdgeWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByID", DbType="VarChar(20)")]
		public string WidthResultByID
		{
			get
			{
				return this._WidthResultByID;
			}
			set
			{
				if ((this._WidthResultByID != value))
				{
					this.OnWidthResultByIDChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByID = value;
					this.SendPropertyChanged("WidthResultByID");
					this.OnWidthResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByColor", DbType="VarChar(20)")]
		public string WidthResultByColor
		{
			get
			{
				return this._WidthResultByColor;
			}
			set
			{
				if ((this._WidthResultByColor != value))
				{
					this.OnWidthResultByColorChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByColor = value;
					this.SendPropertyChanged("WidthResultByColor");
					this.OnWidthResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemIDNO", DbType="Int")]
		public System.Nullable<int> TotalItemIDNO
		{
			get
			{
				return this._TotalItemIDNO;
			}
			set
			{
				if ((this._TotalItemIDNO != value))
				{
					this.OnTotalItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._TotalItemIDNO = value;
					this.SendPropertyChanged("TotalItemIDNO");
					this.OnTotalItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPONO", DbType="Int")]
		public System.Nullable<int> TotalPONO
		{
			get
			{
				return this._TotalPONO;
			}
			set
			{
				if ((this._TotalPONO != value))
				{
					this.OnTotalPONOChanging(value);
					this.SendPropertyChanging();
					this._TotalPONO = value;
					this.SendPropertyChanged("TotalPONO");
					this.OnTotalPONOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppRef", DbType="Int")]
		public System.Nullable<int> TotalSuppRef
		{
			get
			{
				return this._TotalSuppRef;
			}
			set
			{
				if ((this._TotalSuppRef != value))
				{
					this.OnTotalSuppRefChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppRef = value;
					this.SendPropertyChanged("TotalSuppRef");
					this.OnTotalSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppCode", DbType="Int")]
		public System.Nullable<int> TotalSuppCode
		{
			get
			{
				return this._TotalSuppCode;
			}
			set
			{
				if ((this._TotalSuppCode != value))
				{
					this.OnTotalSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppCode = value;
					this.SendPropertyChanged("TotalSuppCode");
					this.OnTotalSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemCode", DbType="Int")]
		public System.Nullable<int> TotalItemCode
		{
			get
			{
				return this._TotalItemCode;
			}
			set
			{
				if ((this._TotalItemCode != value))
				{
					this.OnTotalItemCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalItemCode = value;
					this.SendPropertyChanged("TotalItemCode");
					this.OnTotalItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalColorCode", DbType="Int")]
		public System.Nullable<int> TotalColorCode
		{
			get
			{
				return this._TotalColorCode;
			}
			set
			{
				if ((this._TotalColorCode != value))
				{
					this.OnTotalColorCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalColorCode = value;
					this.SendPropertyChanged("TotalColorCode");
					this.OnTotalColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalProject", DbType="Int")]
		public System.Nullable<int> TotalProject
		{
			get
			{
				return this._TotalProject;
			}
			set
			{
				if ((this._TotalProject != value))
				{
					this.OnTotalProjectChanging(value);
					this.SendPropertyChanging();
					this._TotalProject = value;
					this.SendPropertyChanged("TotalProject");
					this.OnTotalProjectChanged();
				}
			}
		}
		
		[Column(Storage="_TotalClaimRejectedQty", DbType="Int")]
		public System.Nullable<int> TotalClaimRejectedQty
		{
			get
			{
				return this._TotalClaimRejectedQty;
			}
			set
			{
				if ((this._TotalClaimRejectedQty != value))
				{
					this.OnTotalClaimRejectedQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalClaimRejectedQty = value;
					this.SendPropertyChanged("TotalClaimRejectedQty");
					this.OnTotalClaimRejectedQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalOffQty", DbType="Int")]
		public System.Nullable<int> TotalOffQty
		{
			get
			{
				return this._TotalOffQty;
			}
			set
			{
				if ((this._TotalOffQty != value))
				{
					this.OnTotalOffQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalOffQty = value;
					this.SendPropertyChanged("TotalOffQty");
					this.OnTotalOffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQty", DbType="Int")]
		public System.Nullable<int> OverallClaimQty
		{
			get
			{
				return this._OverallClaimQty;
			}
			set
			{
				if ((this._OverallClaimQty != value))
				{
					this.OnOverallClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQty = value;
					this.SendPropertyChanged("OverallClaimQty");
					this.OnOverallClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalPullQty", DbType="Int")]
		public System.Nullable<int> CasingTotalPullQty
		{
			get
			{
				return this._CasingTotalPullQty;
			}
			set
			{
				if ((this._CasingTotalPullQty != value))
				{
					this.OnCasingTotalPullQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalPullQty = value;
					this.SendPropertyChanged("CasingTotalPullQty");
					this.OnCasingTotalPullQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPullCaseNo", DbType="VarChar(50)")]
		public string CasingPullCaseNo
		{
			get
			{
				return this._CasingPullCaseNo;
			}
			set
			{
				if ((this._CasingPullCaseNo != value))
				{
					this.OnCasingPullCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CasingPullCaseNo = value;
					this.SendPropertyChanged("CasingPullCaseNo");
					this.OnCasingPullCaseNoChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalDefectQty", DbType="Int")]
		public System.Nullable<int> CasingTotalDefectQty
		{
			get
			{
				return this._CasingTotalDefectQty;
			}
			set
			{
				if ((this._CasingTotalDefectQty != value))
				{
					this.OnCasingTotalDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalDefectQty = value;
					this.SendPropertyChanged("CasingTotalDefectQty");
					this.OnCasingTotalDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingRejectQty", DbType="Int")]
		public System.Nullable<int> CasingRejectQty
		{
			get
			{
				return this._CasingRejectQty;
			}
			set
			{
				if ((this._CasingRejectQty != value))
				{
					this.OnCasingRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingRejectQty = value;
					this.SendPropertyChanged("CasingRejectQty");
					this.OnCasingRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPackListQty", DbType="Int")]
		public System.Nullable<int> CasingPackListQty
		{
			get
			{
				return this._CasingPackListQty;
			}
			set
			{
				if ((this._CasingPackListQty != value))
				{
					this.OnCasingPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingPackListQty = value;
					this.SendPropertyChanged("CasingPackListQty");
					this.OnCasingPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingLabelQty", DbType="Int")]
		public System.Nullable<int> CasingLabelQty
		{
			get
			{
				return this._CasingLabelQty;
			}
			set
			{
				if ((this._CasingLabelQty != value))
				{
					this.OnCasingLabelQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingLabelQty = value;
					this.SendPropertyChanged("CasingLabelQty");
					this.OnCasingLabelQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQty", DbType="Int")]
		public System.Nullable<int> CasingDiffQty
		{
			get
			{
				return this._CasingDiffQty;
			}
			set
			{
				if ((this._CasingDiffQty != value))
				{
					this.OnCasingDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQty = value;
					this.SendPropertyChanged("CasingDiffQty");
					this.OnCasingDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CasingDiffPercent
		{
			get
			{
				return this._CasingDiffPercent;
			}
			set
			{
				if ((this._CasingDiffPercent != value))
				{
					this.OnCasingDiffPercentChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffPercent = value;
					this.SendPropertyChanged("CasingDiffPercent");
					this.OnCasingDiffPercentChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CasingDiffQtyByLot
		{
			get
			{
				return this._CasingDiffQtyByLot;
			}
			set
			{
				if ((this._CasingDiffQtyByLot != value))
				{
					this.OnCasingDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQtyByLot = value;
					this.SendPropertyChanged("CasingDiffQtyByLot");
					this.OnCasingDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CasingResultByLot", DbType="VarChar(5)")]
		public string CasingResultByLot
		{
			get
			{
				return this._CasingResultByLot;
			}
			set
			{
				if ((this._CasingResultByLot != value))
				{
					this.OnCasingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingResultByLot = value;
					this.SendPropertyChanged("CasingResultByLot");
					this.OnCasingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CasingShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> CasingShortLengthClaim
		{
			get
			{
				return this._CasingShortLengthClaim;
			}
			set
			{
				if ((this._CasingShortLengthClaim != value))
				{
					this.OnCasingShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._CasingShortLengthClaim = value;
					this.SendPropertyChanged("CasingShortLengthClaim");
					this.OnCasingShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Result", DbType="VarChar(5)")]
		public string Part2Result
		{
			get
			{
				return this._Part2Result;
			}
			set
			{
				if ((this._Part2Result != value))
				{
					this.OnPart2ResultChanging(value);
					this.SendPropertyChanging();
					this._Part2Result = value;
					this.SendPropertyChanged("Part2Result");
					this.OnPart2ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part2ResultByLot", DbType="VarChar(5)")]
		public string Part2ResultByLot
		{
			get
			{
				return this._Part2ResultByLot;
			}
			set
			{
				if ((this._Part2ResultByLot != value))
				{
					this.OnPart2ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2ResultByLot = value;
					this.SendPropertyChanged("Part2ResultByLot");
					this.OnPart2ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShadeResult", DbType="VarChar(5)")]
		public string ColorShadeResult
		{
			get
			{
				return this._ColorShadeResult;
			}
			set
			{
				if ((this._ColorShadeResult != value))
				{
					this.OnColorShadeResultChanging(value);
					this.SendPropertyChanging();
					this._ColorShadeResult = value;
					this.SendPropertyChanged("ColorShadeResult");
					this.OnColorShadeResultChanged();
				}
			}
		}
		
		[Column(Storage="_AuditCaseQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditCaseQtyByLot
		{
			get
			{
				return this._AuditCaseQtyByLot;
			}
			set
			{
				if ((this._AuditCaseQtyByLot != value))
				{
					this.OnAuditCaseQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditCaseQtyByLot = value;
					this.SendPropertyChanged("AuditCaseQtyByLot");
					this.OnAuditCaseQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountQty", DbType="Int")]
		public System.Nullable<int> CountQty
		{
			get
			{
				return this._CountQty;
			}
			set
			{
				if ((this._CountQty != value))
				{
					this.OnCountQtyChanging(value);
					this.SendPropertyChanging();
					this._CountQty = value;
					this.SendPropertyChanged("CountQty");
					this.OnCountQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQty", DbType="Int")]
		public System.Nullable<int> CountDiffQty
		{
			get
			{
				return this._CountDiffQty;
			}
			set
			{
				if ((this._CountDiffQty != value))
				{
					this.OnCountDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQty = value;
					this.SendPropertyChanged("CountDiffQty");
					this.OnCountDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CountDiffQtyByLot
		{
			get
			{
				return this._CountDiffQtyByLot;
			}
			set
			{
				if ((this._CountDiffQtyByLot != value))
				{
					this.OnCountDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQtyByLot = value;
					this.SendPropertyChanged("CountDiffQtyByLot");
					this.OnCountDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountResult", DbType="VarChar(5)")]
		public string CountResult
		{
			get
			{
				return this._CountResult;
			}
			set
			{
				if ((this._CountResult != value))
				{
					this.OnCountResultChanging(value);
					this.SendPropertyChanging();
					this._CountResult = value;
					this.SendPropertyChanged("CountResult");
					this.OnCountResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Result", DbType="VarChar(5)")]
		public string Part1Result
		{
			get
			{
				return this._Part1Result;
			}
			set
			{
				if ((this._Part1Result != value))
				{
					this.OnPart1ResultChanging(value);
					this.SendPropertyChanging();
					this._Part1Result = value;
					this.SendPropertyChanged("Part1Result");
					this.OnPart1ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1ResultByLot", DbType="VarChar(5)")]
		public string Part1ResultByLot
		{
			get
			{
				return this._Part1ResultByLot;
			}
			set
			{
				if ((this._Part1ResultByLot != value))
				{
					this.OnPart1ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1ResultByLot = value;
					this.SendPropertyChanged("Part1ResultByLot");
					this.OnPart1ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_UnderPullSizeCupQtyByLot", DbType="Int")]
		public System.Nullable<int> UnderPullSizeCupQtyByLot
		{
			get
			{
				return this._UnderPullSizeCupQtyByLot;
			}
			set
			{
				if ((this._UnderPullSizeCupQtyByLot != value))
				{
					this.OnUnderPullSizeCupQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._UnderPullSizeCupQtyByLot = value;
					this.SendPropertyChanged("UnderPullSizeCupQtyByLot");
					this.OnUnderPullSizeCupQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_UnderPackingListSizeCupQtyByLot", DbType="Int")]
		public System.Nullable<int> UnderPackingListSizeCupQtyByLot
		{
			get
			{
				return this._UnderPackingListSizeCupQtyByLot;
			}
			set
			{
				if ((this._UnderPackingListSizeCupQtyByLot != value))
				{
					this.OnUnderPackingListSizeCupQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._UnderPackingListSizeCupQtyByLot = value;
					this.SendPropertyChanged("UnderPackingListSizeCupQtyByLot");
					this.OnUnderPackingListSizeCupQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_NeedCheckQty", DbType="Bit")]
		public System.Nullable<bool> NeedCheckQty
		{
			get
			{
				return this._NeedCheckQty;
			}
			set
			{
				if ((this._NeedCheckQty != value))
				{
					this.OnNeedCheckQtyChanging(value);
					this.SendPropertyChanging();
					this._NeedCheckQty = value;
					this.SendPropertyChanged("NeedCheckQty");
					this.OnNeedCheckQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorCode", DbType="VarChar(20)")]
		public string ErrorCode
		{
			get
			{
				return this._ErrorCode;
			}
			set
			{
				if ((this._ErrorCode != value))
				{
					this.OnErrorCodeChanging(value);
					this.SendPropertyChanging();
					this._ErrorCode = value;
					this.SendPropertyChanged("ErrorCode");
					this.OnErrorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorNameEN", DbType="VarChar(300)")]
		public string ErrorNameEN
		{
			get
			{
				return this._ErrorNameEN;
			}
			set
			{
				if ((this._ErrorNameEN != value))
				{
					this.OnErrorNameENChanging(value);
					this.SendPropertyChanging();
					this._ErrorNameEN = value;
					this.SendPropertyChanged("ErrorNameEN");
					this.OnErrorNameENChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorQty", DbType="Int")]
		public System.Nullable<int> ErrorQty
		{
			get
			{
				return this._ErrorQty;
			}
			set
			{
				if ((this._ErrorQty != value))
				{
					this.OnErrorQtyChanging(value);
					this.SendPropertyChanging();
					this._ErrorQty = value;
					this.SendPropertyChanged("ErrorQty");
					this.OnErrorQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByCrossCupOnlySelected", DbType="Int")]
		public System.Nullable<int> PackListQtyByCrossCupOnlySelected
		{
			get
			{
				return this._PackListQtyByCrossCupOnlySelected;
			}
			set
			{
				if ((this._PackListQtyByCrossCupOnlySelected != value))
				{
					this.OnPackListQtyByCrossCupOnlySelectedChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByCrossCupOnlySelected = value;
					this.SendPropertyChanged("PackListQtyByCrossCupOnlySelected");
					this.OnPackListQtyByCrossCupOnlySelectedChanged();
				}
			}
		}
		
		[Column(Storage="_IsByCrossCupFulInspection", DbType="Bit")]
		public System.Nullable<bool> IsByCrossCupFulInspection
		{
			get
			{
				return this._IsByCrossCupFulInspection;
			}
			set
			{
				if ((this._IsByCrossCupFulInspection != value))
				{
					this.OnIsByCrossCupFulInspectionChanging(value);
					this.SendPropertyChanging();
					this._IsByCrossCupFulInspection = value;
					this.SendPropertyChanged("IsByCrossCupFulInspection");
					this.OnIsByCrossCupFulInspectionChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogNO", DbType="VarChar(200)")]
		public string ActionLogNO
		{
			get
			{
				return this._ActionLogNO;
			}
			set
			{
				if ((this._ActionLogNO != value))
				{
					this.OnActionLogNOChanging(value);
					this.SendPropertyChanging();
					this._ActionLogNO = value;
					this.SendPropertyChanged("ActionLogNO");
					this.OnActionLogNOChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTaking", DbType="VarChar(10)")]
		public string ActionLogTaking
		{
			get
			{
				return this._ActionLogTaking;
			}
			set
			{
				if ((this._ActionLogTaking != value))
				{
					this.OnActionLogTakingChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTaking = value;
					this.SendPropertyChanged("ActionLogTaking");
					this.OnActionLogTakingChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCategory", DbType="VarChar(100)")]
		public string ActionLogCategory
		{
			get
			{
				return this._ActionLogCategory;
			}
			set
			{
				if ((this._ActionLogCategory != value))
				{
					this.OnActionLogCategoryChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCategory = value;
					this.SendPropertyChanged("ActionLogCategory");
					this.OnActionLogCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogGroup", DbType="VarChar(20)")]
		public string ActionLogGroup
		{
			get
			{
				return this._ActionLogGroup;
			}
			set
			{
				if ((this._ActionLogGroup != value))
				{
					this.OnActionLogGroupChanging(value);
					this.SendPropertyChanging();
					this._ActionLogGroup = value;
					this.SendPropertyChanged("ActionLogGroup");
					this.OnActionLogGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTargetDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogTargetDate
		{
			get
			{
				return this._ActionLogTargetDate1;
			}
			set
			{
				if ((this._ActionLogTargetDate1 != value))
				{
					this.OnActionLogTargetDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTargetDate1 = value;
					this.SendPropertyChanged("ActionLogTargetDate");
					this.OnActionLogTargetDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogRevisedDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogRevisedDate
		{
			get
			{
				return this._ActionLogRevisedDate1;
			}
			set
			{
				if ((this._ActionLogRevisedDate1 != value))
				{
					this.OnActionLogRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogRevisedDate1 = value;
					this.SendPropertyChanged("ActionLogRevisedDate");
					this.OnActionLogRevisedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCmplDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogCmplDate
		{
			get
			{
				return this._ActionLogCmplDate1;
			}
			set
			{
				if ((this._ActionLogCmplDate1 != value))
				{
					this.OnActionLogCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCmplDate1 = value;
					this.SendPropertyChanged("ActionLogCmplDate");
					this.OnActionLogCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogIsCompleted", DbType="VarChar(10)")]
		public string ActionLogIsCompleted
		{
			get
			{
				return this._ActionLogIsCompleted;
			}
			set
			{
				if ((this._ActionLogIsCompleted != value))
				{
					this.OnActionLogIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._ActionLogIsCompleted = value;
					this.SendPropertyChanged("ActionLogIsCompleted");
					this.OnActionLogIsCompletedChanged();
				}
			}
		}
		
		[Association(Name="BraCupHeader_BraCupDefect", Storage="_BraCupDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BraCupDefect> BraCupDefects
		{
			get
			{
				return this._BraCupDefects;
			}
			set
			{
				this._BraCupDefects.Assign(value);
			}
		}
		
		[Association(Name="BraCupHeader_BraCupCasingDefect", Storage="_BraCupCasingDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<BraCupCasingDefect> BraCupCasingDefects
		{
			get
			{
				return this._BraCupCasingDefects;
			}
			set
			{
				this._BraCupCasingDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BraCupDefects(BraCupDefect entity)
		{
			this.SendPropertyChanging();
			entity.BraCupHeader = this;
		}
		
		private void detach_BraCupDefects(BraCupDefect entity)
		{
			this.SendPropertyChanging();
			entity.BraCupHeader = null;
		}
		
		private void attach_BraCupCasingDefects(BraCupCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.BraCupHeader = this;
		}
		
		private void detach_BraCupCasingDefects(BraCupCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.BraCupHeader = null;
		}
	}
	
	[Table(Name="dbo.AccessoryHeader")]
	public partial class AccessoryHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Company;
		
		private string _SuppCode;
		
		private string _PONO;
		
		private string _HDONO;
		
		private System.Nullable<System.DateTime> _IDCreateDate;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private System.Nullable<int> _DueDay;
		
		private System.Nullable<int> _AuditNo;
		
		private System.Nullable<int> _TotalBoxQty;
		
		private System.Nullable<int> _PullIndQtyByLot;
		
		private System.Nullable<int> _TotalAuditSample;
		
		private System.Nullable<int> _TotalStockInQty;
		
		private System.Nullable<int> _AuditBoxQty;
		
		private string _AuditType;
		
		private string _AuditQty;
		
		private string _Remark;
		
		private string _AuditStage;
		
		private System.Nullable<int> _DefectQty;
		
		private System.Nullable<int> _DefectCount;
		
		private System.Nullable<int> _RejectQty;
		
		private System.Nullable<decimal> _OverallProposaClaimlByLot;
		
		private System.Nullable<decimal> _OverallClaimPercentByLot;
		
		private System.Nullable<long> _ActionLogOID;
		
		private string _Auditor;
		
		private string _Whse;
		
		private string _SuppRef;
		
		private string _ItemCode;
		
		private string _ColorCode;
		
		private string _ColorShade;
		
		private string _ProjectNO;
		
		private string _ItemIDNO;
		
		private string _IndPackNO;
		
		private string _AuditSKUCrossCup;
		
		private System.Nullable<int> _TotalAuditSKUCrossCup;
		
		private string _AuditSKU;
		
		private System.Nullable<int> _TotalAuditSKU;
		
		private System.Nullable<int> _PackListQty;
		
		private System.Nullable<int> _PackListQtyByLot;
		
		private System.Nullable<int> _AQLAuditQty;
		
		private System.Nullable<int> _AQLAuditQtyByLot;
		
		private System.Nullable<int> _AQL25StandardQty;
		
		private System.Nullable<int> _AQL25StandardQtyByLot;
		
		private string _DefectResultByID;
		
		private string _DefectResultByColor;
		
		private System.Nullable<decimal> _AgreedUsableWidthMin;
		
		private System.Nullable<decimal> _AgreedUsableWidthMax;
		
		private string _AgreedUsableWidthRange;
		
		private System.Nullable<decimal> _EdgeToEdgeWidth;
		
		private System.Nullable<decimal> _EdgeToEdgeWidthDiff;
		
		private string _EdgeToEdgeWidthResultByLot;
		
		private string _WidthResultByID;
		
		private string _WidthResultByColor;
		
		private string _InvoiceNo;
		
		private string _OverallResult;
		
		private string _OverallResultCoreDefectSupport;
		
		private string _OverallConfirmBy;
		
		private string _FailSolution;
		
		private System.Nullable<int> _TotalItemIDNO;
		
		private System.Nullable<int> _TotalPONO;
		
		private System.Nullable<int> _TotalSuppRef;
		
		private System.Nullable<int> _TotalSuppCode;
		
		private System.Nullable<int> _TotalItemCode;
		
		private System.Nullable<int> _TotalColorCode;
		
		private System.Nullable<int> _TotalProject;
		
		private System.Nullable<int> _TotalClaimRejectedQty;
		
		private System.Nullable<int> _TotalOffQty;
		
		private System.Nullable<int> _OverallClaimQty;
		
		private System.Nullable<int> _CasingTotalPullQty;
		
		private string _CasingPullCaseNo;
		
		private System.Nullable<int> _CasingTotalDefectQty;
		
		private System.Nullable<int> _CasingRejectQty;
		
		private System.Nullable<int> _CasingPackListQty;
		
		private System.Nullable<int> _CasingLabelQty;
		
		private System.Nullable<int> _CasingDiffQty;
		
		private System.Nullable<int> _CasingDiffQtyByLot;
		
		private string _Part1DefectResultByLot;
		
		private string _Part2Result;
		
		private string _Part2ResultByLot;
		
		private System.Nullable<decimal> _Part2FinalClaimByLot;
		
		private string _Part3TestingResultByLot;
		
		private System.Nullable<decimal> _Part3FinalClaimByLot;
		
		private string _ColorShadeResult;
		
		private System.Nullable<int> _AuditCaseQtyByLot;
		
		private System.Nullable<int> _CountQty;
		
		private System.Nullable<int> _CountDiffQty;
		
		private System.Nullable<int> _CountDiffQtyByLot;
		
		private string _CountResult;
		
		private string _Part1Result;
		
		private string _Part1ResultByLot;
		
		private System.Nullable<decimal> _AdjustQty;
		
		private System.Nullable<decimal> _AdjustQtyByLot;
		
		private System.Nullable<decimal> _ReplenishQtyByLot;
		
		private System.Nullable<decimal> _ReturnQtyByLot;
		
		private string _Part1Nature;
		
		private string _Part2Nature;
		
		private string _Part3Nature;
		
		private string _Part4Nature;
		
		private string _OverallNature;
		
		private System.Nullable<int> _SpotDefectPointQty;
		
		private System.Nullable<decimal> _Part1FinalClaimByLot;
		
		private System.Nullable<decimal> _ProWeightQty;
		
		private System.Nullable<decimal> _PullBoxWeight;
		
		private System.Nullable<decimal> _SampleQuantumWeight;
		
		private System.Nullable<decimal> _LengthDiff;
		
		private System.Nullable<decimal> _LengthPercentByLot;
		
		private string _LengthResultByLot;
		
		private System.Nullable<decimal> _ShortLengthClaim;
		
		private string _Part4ResultByLot;
		
		private System.Nullable<decimal> _Part4ClaimByLot;
		
		private string _OverallResultReasonGroup;
		
		private string _OverallResultDefectKind;
		
		private string _OverallResultCoreDefecName;
		
		private System.Nullable<decimal> _WeightMinFromMIDc;
		
		private System.Nullable<decimal> _WeightMaxFromMIDc;
		
		private string _WeightRange;
		
		private System.Nullable<System.DateTime> _FWStartDate;
		
		private System.Nullable<decimal> _ConcedeQtyByLot;
		
		private string _AuditNo1;
		
		private string _OverallResultReasonPart;
		
		private string _Status;
		
		private System.Nullable<bool> _IsFullInspection;
		
		private string _ActionLogNO;
		
		private string _ActionLogID;
		
		private string _ActionLogTaking;
		
		private string _ActionLogCategory;
		
		private string _ActionLogGroup;
		
		private System.Nullable<System.DateTime> _ActionLogTargetDate1;
		
		private System.Nullable<System.DateTime> _ActionLogRevisedDate1;
		
		private System.Nullable<System.DateTime> _ActionLogCmplDate1;
		
		private string _ActionLogIsCompleted;
		
		private EntitySet<AccessoryDefect> _AccessoryDefects;
		
		private EntitySet<AccessoryCasingDefect> _AccessoryCasingDefects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnHDONOChanging(string value);
    partial void OnHDONOChanged();
    partial void OnIDCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIDCreateDateChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnDueDayChanging(System.Nullable<int> value);
    partial void OnDueDayChanged();
    partial void OnAuditNoChanging(System.Nullable<int> value);
    partial void OnAuditNoChanged();
    partial void OnTotalBoxQtyChanging(System.Nullable<int> value);
    partial void OnTotalBoxQtyChanged();
    partial void OnPullIndQtyByLotChanging(System.Nullable<int> value);
    partial void OnPullIndQtyByLotChanged();
    partial void OnTotalAuditSampleChanging(System.Nullable<int> value);
    partial void OnTotalAuditSampleChanged();
    partial void OnTotalStockInQtyChanging(System.Nullable<int> value);
    partial void OnTotalStockInQtyChanged();
    partial void OnAuditBoxQtyChanging(System.Nullable<int> value);
    partial void OnAuditBoxQtyChanged();
    partial void OnAuditTypeChanging(string value);
    partial void OnAuditTypeChanged();
    partial void OnAuditQtyChanging(string value);
    partial void OnAuditQtyChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnDefectQtyChanging(System.Nullable<int> value);
    partial void OnDefectQtyChanged();
    partial void OnDefectCountChanging(System.Nullable<int> value);
    partial void OnDefectCountChanged();
    partial void OnRejectQtyChanging(System.Nullable<int> value);
    partial void OnRejectQtyChanged();
    partial void OnOverallProposaClaimlByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallProposaClaimlByLotChanged();
    partial void OnOverallClaimPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentByLotChanged();
    partial void OnActionLogOIDChanging(System.Nullable<long> value);
    partial void OnActionLogOIDChanged();
    partial void OnAuditorChanging(string value);
    partial void OnAuditorChanged();
    partial void OnWhseChanging(string value);
    partial void OnWhseChanged();
    partial void OnSuppRefChanging(string value);
    partial void OnSuppRefChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnColorShadeChanging(string value);
    partial void OnColorShadeChanged();
    partial void OnProjectNOChanging(string value);
    partial void OnProjectNOChanged();
    partial void OnItemIDNOChanging(string value);
    partial void OnItemIDNOChanged();
    partial void OnIndPackNOChanging(string value);
    partial void OnIndPackNOChanged();
    partial void OnAuditSKUCrossCupChanging(string value);
    partial void OnAuditSKUCrossCupChanged();
    partial void OnTotalAuditSKUCrossCupChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUCrossCupChanged();
    partial void OnAuditSKUChanging(string value);
    partial void OnAuditSKUChanged();
    partial void OnTotalAuditSKUChanging(System.Nullable<int> value);
    partial void OnTotalAuditSKUChanged();
    partial void OnPackListQtyChanging(System.Nullable<int> value);
    partial void OnPackListQtyChanged();
    partial void OnPackListQtyByLotChanging(System.Nullable<int> value);
    partial void OnPackListQtyByLotChanged();
    partial void OnAQLAuditQtyChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyChanged();
    partial void OnAQLAuditQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQLAuditQtyByLotChanged();
    partial void OnAQL25StandardQtyChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyChanged();
    partial void OnAQL25StandardQtyByLotChanging(System.Nullable<int> value);
    partial void OnAQL25StandardQtyByLotChanged();
    partial void OnDefectResultByIDChanging(string value);
    partial void OnDefectResultByIDChanged();
    partial void OnDefectResultByColorChanging(string value);
    partial void OnDefectResultByColorChanged();
    partial void OnAgreedUsableWidthMinChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMinChanged();
    partial void OnAgreedUsableWidthMaxChanging(System.Nullable<decimal> value);
    partial void OnAgreedUsableWidthMaxChanged();
    partial void OnAgreedUsableWidthRangeChanging(string value);
    partial void OnAgreedUsableWidthRangeChanged();
    partial void OnEdgeToEdgeWidthChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthChanged();
    partial void OnEdgeToEdgeWidthDiffChanging(System.Nullable<decimal> value);
    partial void OnEdgeToEdgeWidthDiffChanged();
    partial void OnEdgeToEdgeWidthResultByLotChanging(string value);
    partial void OnEdgeToEdgeWidthResultByLotChanged();
    partial void OnWidthResultByIDChanging(string value);
    partial void OnWidthResultByIDChanged();
    partial void OnWidthResultByColorChanging(string value);
    partial void OnWidthResultByColorChanged();
    partial void OnInvoiceNoChanging(string value);
    partial void OnInvoiceNoChanged();
    partial void OnOverallResultChanging(string value);
    partial void OnOverallResultChanged();
    partial void OnOverallResultCoreDefectSupportChanging(string value);
    partial void OnOverallResultCoreDefectSupportChanged();
    partial void OnOverallConfirmByChanging(string value);
    partial void OnOverallConfirmByChanged();
    partial void OnFailSolutionChanging(string value);
    partial void OnFailSolutionChanged();
    partial void OnTotalItemIDNOChanging(System.Nullable<int> value);
    partial void OnTotalItemIDNOChanged();
    partial void OnTotalPONOChanging(System.Nullable<int> value);
    partial void OnTotalPONOChanged();
    partial void OnTotalSuppRefChanging(System.Nullable<int> value);
    partial void OnTotalSuppRefChanged();
    partial void OnTotalSuppCodeChanging(System.Nullable<int> value);
    partial void OnTotalSuppCodeChanged();
    partial void OnTotalItemCodeChanging(System.Nullable<int> value);
    partial void OnTotalItemCodeChanged();
    partial void OnTotalColorCodeChanging(System.Nullable<int> value);
    partial void OnTotalColorCodeChanged();
    partial void OnTotalProjectChanging(System.Nullable<int> value);
    partial void OnTotalProjectChanged();
    partial void OnTotalClaimRejectedQtyChanging(System.Nullable<int> value);
    partial void OnTotalClaimRejectedQtyChanged();
    partial void OnTotalOffQtyChanging(System.Nullable<int> value);
    partial void OnTotalOffQtyChanged();
    partial void OnOverallClaimQtyChanging(System.Nullable<int> value);
    partial void OnOverallClaimQtyChanged();
    partial void OnCasingTotalPullQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalPullQtyChanged();
    partial void OnCasingPullCaseNoChanging(string value);
    partial void OnCasingPullCaseNoChanged();
    partial void OnCasingTotalDefectQtyChanging(System.Nullable<int> value);
    partial void OnCasingTotalDefectQtyChanged();
    partial void OnCasingRejectQtyChanging(System.Nullable<int> value);
    partial void OnCasingRejectQtyChanged();
    partial void OnCasingPackListQtyChanging(System.Nullable<int> value);
    partial void OnCasingPackListQtyChanged();
    partial void OnCasingLabelQtyChanging(System.Nullable<int> value);
    partial void OnCasingLabelQtyChanged();
    partial void OnCasingDiffQtyChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyChanged();
    partial void OnCasingDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCasingDiffQtyByLotChanged();
    partial void OnPart1DefectResultByLotChanging(string value);
    partial void OnPart1DefectResultByLotChanged();
    partial void OnPart2ResultChanging(string value);
    partial void OnPart2ResultChanged();
    partial void OnPart2ResultByLotChanging(string value);
    partial void OnPart2ResultByLotChanged();
    partial void OnPart2FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart2FinalClaimByLotChanged();
    partial void OnPart3TestingResultByLotChanging(string value);
    partial void OnPart3TestingResultByLotChanged();
    partial void OnPart3FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart3FinalClaimByLotChanged();
    partial void OnColorShadeResultChanging(string value);
    partial void OnColorShadeResultChanged();
    partial void OnAuditCaseQtyByLotChanging(System.Nullable<int> value);
    partial void OnAuditCaseQtyByLotChanged();
    partial void OnCountQtyChanging(System.Nullable<int> value);
    partial void OnCountQtyChanged();
    partial void OnCountDiffQtyChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyChanged();
    partial void OnCountDiffQtyByLotChanging(System.Nullable<int> value);
    partial void OnCountDiffQtyByLotChanged();
    partial void OnCountResultChanging(string value);
    partial void OnCountResultChanged();
    partial void OnPart1ResultChanging(string value);
    partial void OnPart1ResultChanged();
    partial void OnPart1ResultByLotChanging(string value);
    partial void OnPart1ResultByLotChanged();
    partial void OnAdjustQtyChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyChanged();
    partial void OnAdjustQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnAdjustQtyByLotChanged();
    partial void OnReplenishQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReplenishQtyByLotChanged();
    partial void OnReturnQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnReturnQtyByLotChanged();
    partial void OnPart1NatureChanging(string value);
    partial void OnPart1NatureChanged();
    partial void OnPart2NatureChanging(string value);
    partial void OnPart2NatureChanged();
    partial void OnPart3NatureChanging(string value);
    partial void OnPart3NatureChanged();
    partial void OnPart4NatureChanging(string value);
    partial void OnPart4NatureChanged();
    partial void OnOverallNatureChanging(string value);
    partial void OnOverallNatureChanged();
    partial void OnSpotDefectPointQtyChanging(System.Nullable<int> value);
    partial void OnSpotDefectPointQtyChanged();
    partial void OnPart1FinalClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart1FinalClaimByLotChanged();
    partial void OnProWeightQtyChanging(System.Nullable<decimal> value);
    partial void OnProWeightQtyChanged();
    partial void OnPullBoxWeightChanging(System.Nullable<decimal> value);
    partial void OnPullBoxWeightChanged();
    partial void OnSampleQuantumWeightChanging(System.Nullable<decimal> value);
    partial void OnSampleQuantumWeightChanged();
    partial void OnLengthDiffChanging(System.Nullable<decimal> value);
    partial void OnLengthDiffChanged();
    partial void OnLengthPercentByLotChanging(System.Nullable<decimal> value);
    partial void OnLengthPercentByLotChanged();
    partial void OnLengthResultByLotChanging(string value);
    partial void OnLengthResultByLotChanged();
    partial void OnShortLengthClaimChanging(System.Nullable<decimal> value);
    partial void OnShortLengthClaimChanged();
    partial void OnPart4ResultByLotChanging(string value);
    partial void OnPart4ResultByLotChanged();
    partial void OnPart4ClaimByLotChanging(System.Nullable<decimal> value);
    partial void OnPart4ClaimByLotChanged();
    partial void OnOverallResultReasonGroupChanging(string value);
    partial void OnOverallResultReasonGroupChanged();
    partial void OnOverallResultDefectKindChanging(string value);
    partial void OnOverallResultDefectKindChanged();
    partial void OnOverallResultCoreDefecNameChanging(string value);
    partial void OnOverallResultCoreDefecNameChanged();
    partial void OnWeightMinFromMIDcChanging(System.Nullable<decimal> value);
    partial void OnWeightMinFromMIDcChanged();
    partial void OnWeightMaxFromMIDcChanging(System.Nullable<decimal> value);
    partial void OnWeightMaxFromMIDcChanged();
    partial void OnWeightRangeChanging(string value);
    partial void OnWeightRangeChanged();
    partial void OnFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFWStartDateChanged();
    partial void OnConcedeQtyByLotChanging(System.Nullable<decimal> value);
    partial void OnConcedeQtyByLotChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnOverallResultReasonPartChanging(string value);
    partial void OnOverallResultReasonPartChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnIsFullInspectionChanging(System.Nullable<bool> value);
    partial void OnIsFullInspectionChanged();
    partial void OnActionLogNOChanging(string value);
    partial void OnActionLogNOChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogTakingChanging(string value);
    partial void OnActionLogTakingChanged();
    partial void OnActionLogCategoryChanging(string value);
    partial void OnActionLogCategoryChanged();
    partial void OnActionLogGroupChanging(string value);
    partial void OnActionLogGroupChanged();
    partial void OnActionLogTargetDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogTargetDateChanged();
    partial void OnActionLogRevisedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogRevisedDateChanged();
    partial void OnActionLogCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionLogCmplDateChanged();
    partial void OnActionLogIsCompletedChanging(string value);
    partial void OnActionLogIsCompletedChanged();
    #endregion
		
		public AccessoryHeader()
		{
			this._AccessoryDefects = new EntitySet<AccessoryDefect>(new Action<AccessoryDefect>(this.attach_AccessoryDefects), new Action<AccessoryDefect>(this.detach_AccessoryDefects));
			this._AccessoryCasingDefects = new EntitySet<AccessoryCasingDefect>(new Action<AccessoryCasingDefect>(this.attach_AccessoryCasingDefects), new Action<AccessoryCasingDefect>(this.detach_AccessoryCasingDefects));
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(5)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(10)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PONO", DbType="VarChar(20)")]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_HDONO", DbType="VarChar(20)")]
		public string HDONO
		{
			get
			{
				return this._HDONO;
			}
			set
			{
				if ((this._HDONO != value))
				{
					this.OnHDONOChanging(value);
					this.SendPropertyChanging();
					this._HDONO = value;
					this.SendPropertyChanged("HDONO");
					this.OnHDONOChanged();
				}
			}
		}
		
		[Column(Storage="_IDCreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IDCreateDate
		{
			get
			{
				return this._IDCreateDate;
			}
			set
			{
				if ((this._IDCreateDate != value))
				{
					this.OnIDCreateDateChanging(value);
					this.SendPropertyChanging();
					this._IDCreateDate = value;
					this.SendPropertyChanged("IDCreateDate");
					this.OnIDCreateDateChanged();
				}
			}
		}
		
		[Column(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDay", DbType="Int")]
		public System.Nullable<int> DueDay
		{
			get
			{
				return this._DueDay;
			}
			set
			{
				if ((this._DueDay != value))
				{
					this.OnDueDayChanging(value);
					this.SendPropertyChanging();
					this._DueDay = value;
					this.SendPropertyChanged("DueDay");
					this.OnDueDayChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo", DbType="Int")]
		public System.Nullable<int> AuditNo
		{
			get
			{
				return this._AuditNo;
			}
			set
			{
				if ((this._AuditNo != value))
				{
					this.OnAuditNoChanging(value);
					this.SendPropertyChanging();
					this._AuditNo = value;
					this.SendPropertyChanged("AuditNo");
					this.OnAuditNoChanged();
				}
			}
		}
		
		[Column(Storage="_TotalBoxQty", DbType="Int")]
		public System.Nullable<int> TotalBoxQty
		{
			get
			{
				return this._TotalBoxQty;
			}
			set
			{
				if ((this._TotalBoxQty != value))
				{
					this.OnTotalBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalBoxQty = value;
					this.SendPropertyChanged("TotalBoxQty");
					this.OnTotalBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullIndQtyByLot", DbType="Int")]
		public System.Nullable<int> PullIndQtyByLot
		{
			get
			{
				return this._PullIndQtyByLot;
			}
			set
			{
				if ((this._PullIndQtyByLot != value))
				{
					this.OnPullIndQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PullIndQtyByLot = value;
					this.SendPropertyChanged("PullIndQtyByLot");
					this.OnPullIndQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSample", DbType="Int")]
		public System.Nullable<int> TotalAuditSample
		{
			get
			{
				return this._TotalAuditSample;
			}
			set
			{
				if ((this._TotalAuditSample != value))
				{
					this.OnTotalAuditSampleChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSample = value;
					this.SendPropertyChanged("TotalAuditSample");
					this.OnTotalAuditSampleChanged();
				}
			}
		}
		
		[Column(Storage="_TotalStockInQty", DbType="Int")]
		public System.Nullable<int> TotalStockInQty
		{
			get
			{
				return this._TotalStockInQty;
			}
			set
			{
				if ((this._TotalStockInQty != value))
				{
					this.OnTotalStockInQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalStockInQty = value;
					this.SendPropertyChanged("TotalStockInQty");
					this.OnTotalStockInQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditBoxQty", DbType="Int")]
		public System.Nullable<int> AuditBoxQty
		{
			get
			{
				return this._AuditBoxQty;
			}
			set
			{
				if ((this._AuditBoxQty != value))
				{
					this.OnAuditBoxQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditBoxQty = value;
					this.SendPropertyChanged("AuditBoxQty");
					this.OnAuditBoxQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AuditType", DbType="VarChar(50)")]
		public string AuditType
		{
			get
			{
				return this._AuditType;
			}
			set
			{
				if ((this._AuditType != value))
				{
					this.OnAuditTypeChanging(value);
					this.SendPropertyChanging();
					this._AuditType = value;
					this.SendPropertyChanged("AuditType");
					this.OnAuditTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditQty", DbType="VarChar(50)")]
		public string AuditQty
		{
			get
			{
				return this._AuditQty;
			}
			set
			{
				if ((this._AuditQty != value))
				{
					this.OnAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AuditQty = value;
					this.SendPropertyChanged("AuditQty");
					this.OnAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="VarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(100)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_DefectQty", DbType="Int")]
		public System.Nullable<int> DefectQty
		{
			get
			{
				return this._DefectQty;
			}
			set
			{
				if ((this._DefectQty != value))
				{
					this.OnDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._DefectQty = value;
					this.SendPropertyChanged("DefectQty");
					this.OnDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_DefectCount", DbType="Int")]
		public System.Nullable<int> DefectCount
		{
			get
			{
				return this._DefectCount;
			}
			set
			{
				if ((this._DefectCount != value))
				{
					this.OnDefectCountChanging(value);
					this.SendPropertyChanging();
					this._DefectCount = value;
					this.SendPropertyChanged("DefectCount");
					this.OnDefectCountChanged();
				}
			}
		}
		
		[Column(Storage="_RejectQty", DbType="Int")]
		public System.Nullable<int> RejectQty
		{
			get
			{
				return this._RejectQty;
			}
			set
			{
				if ((this._RejectQty != value))
				{
					this.OnRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._RejectQty = value;
					this.SendPropertyChanged("RejectQty");
					this.OnRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallProposaClaimlByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallProposaClaimlByLot
		{
			get
			{
				return this._OverallProposaClaimlByLot;
			}
			set
			{
				if ((this._OverallProposaClaimlByLot != value))
				{
					this.OnOverallProposaClaimlByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallProposaClaimlByLot = value;
					this.SendPropertyChanged("OverallProposaClaimlByLot");
					this.OnOverallProposaClaimlByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercentByLot
		{
			get
			{
				return this._OverallClaimPercentByLot;
			}
			set
			{
				if ((this._OverallClaimPercentByLot != value))
				{
					this.OnOverallClaimPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercentByLot = value;
					this.SendPropertyChanged("OverallClaimPercentByLot");
					this.OnOverallClaimPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogOID", DbType="BigInt")]
		public System.Nullable<long> ActionLogOID
		{
			get
			{
				return this._ActionLogOID;
			}
			set
			{
				if ((this._ActionLogOID != value))
				{
					this.OnActionLogOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogOID = value;
					this.SendPropertyChanged("ActionLogOID");
					this.OnActionLogOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Auditor", DbType="VarChar(50)")]
		public string Auditor
		{
			get
			{
				return this._Auditor;
			}
			set
			{
				if ((this._Auditor != value))
				{
					this.OnAuditorChanging(value);
					this.SendPropertyChanging();
					this._Auditor = value;
					this.SendPropertyChanged("Auditor");
					this.OnAuditorChanged();
				}
			}
		}
		
		[Column(Storage="_Whse", DbType="VarChar(20)")]
		public string Whse
		{
			get
			{
				return this._Whse;
			}
			set
			{
				if ((this._Whse != value))
				{
					this.OnWhseChanging(value);
					this.SendPropertyChanging();
					this._Whse = value;
					this.SendPropertyChanged("Whse");
					this.OnWhseChanged();
				}
			}
		}
		
		[Column(Storage="_SuppRef", DbType="VarChar(50)")]
		public string SuppRef
		{
			get
			{
				return this._SuppRef;
			}
			set
			{
				if ((this._SuppRef != value))
				{
					this.OnSuppRefChanging(value);
					this.SendPropertyChanging();
					this._SuppRef = value;
					this.SendPropertyChanged("SuppRef");
					this.OnSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(50)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="VarChar(10)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShade", DbType="VarChar(20)")]
		public string ColorShade
		{
			get
			{
				return this._ColorShade;
			}
			set
			{
				if ((this._ColorShade != value))
				{
					this.OnColorShadeChanging(value);
					this.SendPropertyChanging();
					this._ColorShade = value;
					this.SendPropertyChanged("ColorShade");
					this.OnColorShadeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNO", DbType="VarChar(20)")]
		public string ProjectNO
		{
			get
			{
				return this._ProjectNO;
			}
			set
			{
				if ((this._ProjectNO != value))
				{
					this.OnProjectNOChanging(value);
					this.SendPropertyChanging();
					this._ProjectNO = value;
					this.SendPropertyChanged("ProjectNO");
					this.OnProjectNOChanged();
				}
			}
		}
		
		[Column(Storage="_ItemIDNO", DbType="VarChar(20)")]
		public string ItemIDNO
		{
			get
			{
				return this._ItemIDNO;
			}
			set
			{
				if ((this._ItemIDNO != value))
				{
					this.OnItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._ItemIDNO = value;
					this.SendPropertyChanged("ItemIDNO");
					this.OnItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_IndPackNO", DbType="VarChar(20)")]
		public string IndPackNO
		{
			get
			{
				return this._IndPackNO;
			}
			set
			{
				if ((this._IndPackNO != value))
				{
					this.OnIndPackNOChanging(value);
					this.SendPropertyChanging();
					this._IndPackNO = value;
					this.SendPropertyChanged("IndPackNO");
					this.OnIndPackNOChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKUCrossCup", DbType="VarChar(100)")]
		public string AuditSKUCrossCup
		{
			get
			{
				return this._AuditSKUCrossCup;
			}
			set
			{
				if ((this._AuditSKUCrossCup != value))
				{
					this.OnAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._AuditSKUCrossCup = value;
					this.SendPropertyChanged("AuditSKUCrossCup");
					this.OnAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKUCrossCup", DbType="Int")]
		public System.Nullable<int> TotalAuditSKUCrossCup
		{
			get
			{
				return this._TotalAuditSKUCrossCup;
			}
			set
			{
				if ((this._TotalAuditSKUCrossCup != value))
				{
					this.OnTotalAuditSKUCrossCupChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKUCrossCup = value;
					this.SendPropertyChanged("TotalAuditSKUCrossCup");
					this.OnTotalAuditSKUCrossCupChanged();
				}
			}
		}
		
		[Column(Storage="_AuditSKU", DbType="VarChar(50)")]
		public string AuditSKU
		{
			get
			{
				return this._AuditSKU;
			}
			set
			{
				if ((this._AuditSKU != value))
				{
					this.OnAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._AuditSKU = value;
					this.SendPropertyChanged("AuditSKU");
					this.OnAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_TotalAuditSKU", DbType="Int")]
		public System.Nullable<int> TotalAuditSKU
		{
			get
			{
				return this._TotalAuditSKU;
			}
			set
			{
				if ((this._TotalAuditSKU != value))
				{
					this.OnTotalAuditSKUChanging(value);
					this.SendPropertyChanging();
					this._TotalAuditSKU = value;
					this.SendPropertyChanged("TotalAuditSKU");
					this.OnTotalAuditSKUChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQty", DbType="Int")]
		public System.Nullable<int> PackListQty
		{
			get
			{
				return this._PackListQty;
			}
			set
			{
				if ((this._PackListQty != value))
				{
					this.OnPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._PackListQty = value;
					this.SendPropertyChanged("PackListQty");
					this.OnPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PackListQtyByLot", DbType="Int")]
		public System.Nullable<int> PackListQtyByLot
		{
			get
			{
				return this._PackListQtyByLot;
			}
			set
			{
				if ((this._PackListQtyByLot != value))
				{
					this.OnPackListQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._PackListQtyByLot = value;
					this.SendPropertyChanged("PackListQtyByLot");
					this.OnPackListQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQty", DbType="Int")]
		public System.Nullable<int> AQLAuditQty
		{
			get
			{
				return this._AQLAuditQty;
			}
			set
			{
				if ((this._AQLAuditQty != value))
				{
					this.OnAQLAuditQtyChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQty = value;
					this.SendPropertyChanged("AQLAuditQty");
					this.OnAQLAuditQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQLAuditQtyByLot", DbType="Int")]
		public System.Nullable<int> AQLAuditQtyByLot
		{
			get
			{
				return this._AQLAuditQtyByLot;
			}
			set
			{
				if ((this._AQLAuditQtyByLot != value))
				{
					this.OnAQLAuditQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQLAuditQtyByLot = value;
					this.SendPropertyChanged("AQLAuditQtyByLot");
					this.OnAQLAuditQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQty", DbType="Int")]
		public System.Nullable<int> AQL25StandardQty
		{
			get
			{
				return this._AQL25StandardQty;
			}
			set
			{
				if ((this._AQL25StandardQty != value))
				{
					this.OnAQL25StandardQtyChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQty = value;
					this.SendPropertyChanged("AQL25StandardQty");
					this.OnAQL25StandardQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AQL25StandardQtyByLot", DbType="Int")]
		public System.Nullable<int> AQL25StandardQtyByLot
		{
			get
			{
				return this._AQL25StandardQtyByLot;
			}
			set
			{
				if ((this._AQL25StandardQtyByLot != value))
				{
					this.OnAQL25StandardQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AQL25StandardQtyByLot = value;
					this.SendPropertyChanged("AQL25StandardQtyByLot");
					this.OnAQL25StandardQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByID", DbType="VarChar(20)")]
		public string DefectResultByID
		{
			get
			{
				return this._DefectResultByID;
			}
			set
			{
				if ((this._DefectResultByID != value))
				{
					this.OnDefectResultByIDChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByID = value;
					this.SendPropertyChanged("DefectResultByID");
					this.OnDefectResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefectResultByColor", DbType="VarChar(20)")]
		public string DefectResultByColor
		{
			get
			{
				return this._DefectResultByColor;
			}
			set
			{
				if ((this._DefectResultByColor != value))
				{
					this.OnDefectResultByColorChanging(value);
					this.SendPropertyChanging();
					this._DefectResultByColor = value;
					this.SendPropertyChanged("DefectResultByColor");
					this.OnDefectResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMin", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMin
		{
			get
			{
				return this._AgreedUsableWidthMin;
			}
			set
			{
				if ((this._AgreedUsableWidthMin != value))
				{
					this.OnAgreedUsableWidthMinChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMin = value;
					this.SendPropertyChanged("AgreedUsableWidthMin");
					this.OnAgreedUsableWidthMinChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthMax", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> AgreedUsableWidthMax
		{
			get
			{
				return this._AgreedUsableWidthMax;
			}
			set
			{
				if ((this._AgreedUsableWidthMax != value))
				{
					this.OnAgreedUsableWidthMaxChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthMax = value;
					this.SendPropertyChanged("AgreedUsableWidthMax");
					this.OnAgreedUsableWidthMaxChanged();
				}
			}
		}
		
		[Column(Storage="_AgreedUsableWidthRange", DbType="VarChar(200)")]
		public string AgreedUsableWidthRange
		{
			get
			{
				return this._AgreedUsableWidthRange;
			}
			set
			{
				if ((this._AgreedUsableWidthRange != value))
				{
					this.OnAgreedUsableWidthRangeChanging(value);
					this.SendPropertyChanging();
					this._AgreedUsableWidthRange = value;
					this.SendPropertyChanged("AgreedUsableWidthRange");
					this.OnAgreedUsableWidthRangeChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidth", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidth
		{
			get
			{
				return this._EdgeToEdgeWidth;
			}
			set
			{
				if ((this._EdgeToEdgeWidth != value))
				{
					this.OnEdgeToEdgeWidthChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidth = value;
					this.SendPropertyChanged("EdgeToEdgeWidth");
					this.OnEdgeToEdgeWidthChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthDiff", DbType="Decimal(15,4)")]
		public System.Nullable<decimal> EdgeToEdgeWidthDiff
		{
			get
			{
				return this._EdgeToEdgeWidthDiff;
			}
			set
			{
				if ((this._EdgeToEdgeWidthDiff != value))
				{
					this.OnEdgeToEdgeWidthDiffChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthDiff = value;
					this.SendPropertyChanged("EdgeToEdgeWidthDiff");
					this.OnEdgeToEdgeWidthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_EdgeToEdgeWidthResultByLot", DbType="VarChar(5)")]
		public string EdgeToEdgeWidthResultByLot
		{
			get
			{
				return this._EdgeToEdgeWidthResultByLot;
			}
			set
			{
				if ((this._EdgeToEdgeWidthResultByLot != value))
				{
					this.OnEdgeToEdgeWidthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._EdgeToEdgeWidthResultByLot = value;
					this.SendPropertyChanged("EdgeToEdgeWidthResultByLot");
					this.OnEdgeToEdgeWidthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByID", DbType="VarChar(20)")]
		public string WidthResultByID
		{
			get
			{
				return this._WidthResultByID;
			}
			set
			{
				if ((this._WidthResultByID != value))
				{
					this.OnWidthResultByIDChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByID = value;
					this.SendPropertyChanged("WidthResultByID");
					this.OnWidthResultByIDChanged();
				}
			}
		}
		
		[Column(Storage="_WidthResultByColor", DbType="VarChar(20)")]
		public string WidthResultByColor
		{
			get
			{
				return this._WidthResultByColor;
			}
			set
			{
				if ((this._WidthResultByColor != value))
				{
					this.OnWidthResultByColorChanging(value);
					this.SendPropertyChanging();
					this._WidthResultByColor = value;
					this.SendPropertyChanged("WidthResultByColor");
					this.OnWidthResultByColorChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceNo", DbType="VarChar(100)")]
		public string InvoiceNo
		{
			get
			{
				return this._InvoiceNo;
			}
			set
			{
				if ((this._InvoiceNo != value))
				{
					this.OnInvoiceNoChanging(value);
					this.SendPropertyChanging();
					this._InvoiceNo = value;
					this.SendPropertyChanged("InvoiceNo");
					this.OnInvoiceNoChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResult", DbType="VarChar(5)")]
		public string OverallResult
		{
			get
			{
				return this._OverallResult;
			}
			set
			{
				if ((this._OverallResult != value))
				{
					this.OnOverallResultChanging(value);
					this.SendPropertyChanging();
					this._OverallResult = value;
					this.SendPropertyChanged("OverallResult");
					this.OnOverallResultChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefectSupport", DbType="VarChar(1000)")]
		public string OverallResultCoreDefectSupport
		{
			get
			{
				return this._OverallResultCoreDefectSupport;
			}
			set
			{
				if ((this._OverallResultCoreDefectSupport != value))
				{
					this.OnOverallResultCoreDefectSupportChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefectSupport = value;
					this.SendPropertyChanged("OverallResultCoreDefectSupport");
					this.OnOverallResultCoreDefectSupportChanged();
				}
			}
		}
		
		[Column(Storage="_OverallConfirmBy", DbType="VarChar(50)")]
		public string OverallConfirmBy
		{
			get
			{
				return this._OverallConfirmBy;
			}
			set
			{
				if ((this._OverallConfirmBy != value))
				{
					this.OnOverallConfirmByChanging(value);
					this.SendPropertyChanging();
					this._OverallConfirmBy = value;
					this.SendPropertyChanged("OverallConfirmBy");
					this.OnOverallConfirmByChanged();
				}
			}
		}
		
		[Column(Storage="_FailSolution", DbType="VarChar(1000)")]
		public string FailSolution
		{
			get
			{
				return this._FailSolution;
			}
			set
			{
				if ((this._FailSolution != value))
				{
					this.OnFailSolutionChanging(value);
					this.SendPropertyChanging();
					this._FailSolution = value;
					this.SendPropertyChanged("FailSolution");
					this.OnFailSolutionChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemIDNO", DbType="Int")]
		public System.Nullable<int> TotalItemIDNO
		{
			get
			{
				return this._TotalItemIDNO;
			}
			set
			{
				if ((this._TotalItemIDNO != value))
				{
					this.OnTotalItemIDNOChanging(value);
					this.SendPropertyChanging();
					this._TotalItemIDNO = value;
					this.SendPropertyChanged("TotalItemIDNO");
					this.OnTotalItemIDNOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPONO", DbType="Int")]
		public System.Nullable<int> TotalPONO
		{
			get
			{
				return this._TotalPONO;
			}
			set
			{
				if ((this._TotalPONO != value))
				{
					this.OnTotalPONOChanging(value);
					this.SendPropertyChanging();
					this._TotalPONO = value;
					this.SendPropertyChanged("TotalPONO");
					this.OnTotalPONOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppRef", DbType="Int")]
		public System.Nullable<int> TotalSuppRef
		{
			get
			{
				return this._TotalSuppRef;
			}
			set
			{
				if ((this._TotalSuppRef != value))
				{
					this.OnTotalSuppRefChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppRef = value;
					this.SendPropertyChanged("TotalSuppRef");
					this.OnTotalSuppRefChanged();
				}
			}
		}
		
		[Column(Storage="_TotalSuppCode", DbType="Int")]
		public System.Nullable<int> TotalSuppCode
		{
			get
			{
				return this._TotalSuppCode;
			}
			set
			{
				if ((this._TotalSuppCode != value))
				{
					this.OnTotalSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalSuppCode = value;
					this.SendPropertyChanged("TotalSuppCode");
					this.OnTotalSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalItemCode", DbType="Int")]
		public System.Nullable<int> TotalItemCode
		{
			get
			{
				return this._TotalItemCode;
			}
			set
			{
				if ((this._TotalItemCode != value))
				{
					this.OnTotalItemCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalItemCode = value;
					this.SendPropertyChanged("TotalItemCode");
					this.OnTotalItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalColorCode", DbType="Int")]
		public System.Nullable<int> TotalColorCode
		{
			get
			{
				return this._TotalColorCode;
			}
			set
			{
				if ((this._TotalColorCode != value))
				{
					this.OnTotalColorCodeChanging(value);
					this.SendPropertyChanging();
					this._TotalColorCode = value;
					this.SendPropertyChanged("TotalColorCode");
					this.OnTotalColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_TotalProject", DbType="Int")]
		public System.Nullable<int> TotalProject
		{
			get
			{
				return this._TotalProject;
			}
			set
			{
				if ((this._TotalProject != value))
				{
					this.OnTotalProjectChanging(value);
					this.SendPropertyChanging();
					this._TotalProject = value;
					this.SendPropertyChanged("TotalProject");
					this.OnTotalProjectChanged();
				}
			}
		}
		
		[Column(Storage="_TotalClaimRejectedQty", DbType="Int")]
		public System.Nullable<int> TotalClaimRejectedQty
		{
			get
			{
				return this._TotalClaimRejectedQty;
			}
			set
			{
				if ((this._TotalClaimRejectedQty != value))
				{
					this.OnTotalClaimRejectedQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalClaimRejectedQty = value;
					this.SendPropertyChanged("TotalClaimRejectedQty");
					this.OnTotalClaimRejectedQtyChanged();
				}
			}
		}
		
		[Column(Storage="_TotalOffQty", DbType="Int")]
		public System.Nullable<int> TotalOffQty
		{
			get
			{
				return this._TotalOffQty;
			}
			set
			{
				if ((this._TotalOffQty != value))
				{
					this.OnTotalOffQtyChanging(value);
					this.SendPropertyChanging();
					this._TotalOffQty = value;
					this.SendPropertyChanged("TotalOffQty");
					this.OnTotalOffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimQty", DbType="Int")]
		public System.Nullable<int> OverallClaimQty
		{
			get
			{
				return this._OverallClaimQty;
			}
			set
			{
				if ((this._OverallClaimQty != value))
				{
					this.OnOverallClaimQtyChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimQty = value;
					this.SendPropertyChanged("OverallClaimQty");
					this.OnOverallClaimQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalPullQty", DbType="Int")]
		public System.Nullable<int> CasingTotalPullQty
		{
			get
			{
				return this._CasingTotalPullQty;
			}
			set
			{
				if ((this._CasingTotalPullQty != value))
				{
					this.OnCasingTotalPullQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalPullQty = value;
					this.SendPropertyChanged("CasingTotalPullQty");
					this.OnCasingTotalPullQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPullCaseNo", DbType="VarChar(50)")]
		public string CasingPullCaseNo
		{
			get
			{
				return this._CasingPullCaseNo;
			}
			set
			{
				if ((this._CasingPullCaseNo != value))
				{
					this.OnCasingPullCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CasingPullCaseNo = value;
					this.SendPropertyChanged("CasingPullCaseNo");
					this.OnCasingPullCaseNoChanged();
				}
			}
		}
		
		[Column(Storage="_CasingTotalDefectQty", DbType="Int")]
		public System.Nullable<int> CasingTotalDefectQty
		{
			get
			{
				return this._CasingTotalDefectQty;
			}
			set
			{
				if ((this._CasingTotalDefectQty != value))
				{
					this.OnCasingTotalDefectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingTotalDefectQty = value;
					this.SendPropertyChanged("CasingTotalDefectQty");
					this.OnCasingTotalDefectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingRejectQty", DbType="Int")]
		public System.Nullable<int> CasingRejectQty
		{
			get
			{
				return this._CasingRejectQty;
			}
			set
			{
				if ((this._CasingRejectQty != value))
				{
					this.OnCasingRejectQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingRejectQty = value;
					this.SendPropertyChanged("CasingRejectQty");
					this.OnCasingRejectQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingPackListQty", DbType="Int")]
		public System.Nullable<int> CasingPackListQty
		{
			get
			{
				return this._CasingPackListQty;
			}
			set
			{
				if ((this._CasingPackListQty != value))
				{
					this.OnCasingPackListQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingPackListQty = value;
					this.SendPropertyChanged("CasingPackListQty");
					this.OnCasingPackListQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingLabelQty", DbType="Int")]
		public System.Nullable<int> CasingLabelQty
		{
			get
			{
				return this._CasingLabelQty;
			}
			set
			{
				if ((this._CasingLabelQty != value))
				{
					this.OnCasingLabelQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingLabelQty = value;
					this.SendPropertyChanged("CasingLabelQty");
					this.OnCasingLabelQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQty", DbType="Int")]
		public System.Nullable<int> CasingDiffQty
		{
			get
			{
				return this._CasingDiffQty;
			}
			set
			{
				if ((this._CasingDiffQty != value))
				{
					this.OnCasingDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQty = value;
					this.SendPropertyChanged("CasingDiffQty");
					this.OnCasingDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CasingDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CasingDiffQtyByLot
		{
			get
			{
				return this._CasingDiffQtyByLot;
			}
			set
			{
				if ((this._CasingDiffQtyByLot != value))
				{
					this.OnCasingDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CasingDiffQtyByLot = value;
					this.SendPropertyChanged("CasingDiffQtyByLot");
					this.OnCasingDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1DefectResultByLot", DbType="VarChar(5)")]
		public string Part1DefectResultByLot
		{
			get
			{
				return this._Part1DefectResultByLot;
			}
			set
			{
				if ((this._Part1DefectResultByLot != value))
				{
					this.OnPart1DefectResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1DefectResultByLot = value;
					this.SendPropertyChanged("Part1DefectResultByLot");
					this.OnPart1DefectResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Result", DbType="VarChar(5)")]
		public string Part2Result
		{
			get
			{
				return this._Part2Result;
			}
			set
			{
				if ((this._Part2Result != value))
				{
					this.OnPart2ResultChanging(value);
					this.SendPropertyChanging();
					this._Part2Result = value;
					this.SendPropertyChanged("Part2Result");
					this.OnPart2ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part2ResultByLot", DbType="VarChar(5)")]
		public string Part2ResultByLot
		{
			get
			{
				return this._Part2ResultByLot;
			}
			set
			{
				if ((this._Part2ResultByLot != value))
				{
					this.OnPart2ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2ResultByLot = value;
					this.SendPropertyChanged("Part2ResultByLot");
					this.OnPart2ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part2FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part2FinalClaimByLot
		{
			get
			{
				return this._Part2FinalClaimByLot;
			}
			set
			{
				if ((this._Part2FinalClaimByLot != value))
				{
					this.OnPart2FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part2FinalClaimByLot = value;
					this.SendPropertyChanged("Part2FinalClaimByLot");
					this.OnPart2FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3TestingResultByLot", DbType="VarChar(5)")]
		public string Part3TestingResultByLot
		{
			get
			{
				return this._Part3TestingResultByLot;
			}
			set
			{
				if ((this._Part3TestingResultByLot != value))
				{
					this.OnPart3TestingResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3TestingResultByLot = value;
					this.SendPropertyChanged("Part3TestingResultByLot");
					this.OnPart3TestingResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part3FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part3FinalClaimByLot
		{
			get
			{
				return this._Part3FinalClaimByLot;
			}
			set
			{
				if ((this._Part3FinalClaimByLot != value))
				{
					this.OnPart3FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part3FinalClaimByLot = value;
					this.SendPropertyChanged("Part3FinalClaimByLot");
					this.OnPart3FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ColorShadeResult", DbType="VarChar(5)")]
		public string ColorShadeResult
		{
			get
			{
				return this._ColorShadeResult;
			}
			set
			{
				if ((this._ColorShadeResult != value))
				{
					this.OnColorShadeResultChanging(value);
					this.SendPropertyChanging();
					this._ColorShadeResult = value;
					this.SendPropertyChanged("ColorShadeResult");
					this.OnColorShadeResultChanged();
				}
			}
		}
		
		[Column(Storage="_AuditCaseQtyByLot", DbType="Int")]
		public System.Nullable<int> AuditCaseQtyByLot
		{
			get
			{
				return this._AuditCaseQtyByLot;
			}
			set
			{
				if ((this._AuditCaseQtyByLot != value))
				{
					this.OnAuditCaseQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AuditCaseQtyByLot = value;
					this.SendPropertyChanged("AuditCaseQtyByLot");
					this.OnAuditCaseQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountQty", DbType="Int")]
		public System.Nullable<int> CountQty
		{
			get
			{
				return this._CountQty;
			}
			set
			{
				if ((this._CountQty != value))
				{
					this.OnCountQtyChanging(value);
					this.SendPropertyChanging();
					this._CountQty = value;
					this.SendPropertyChanged("CountQty");
					this.OnCountQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQty", DbType="Int")]
		public System.Nullable<int> CountDiffQty
		{
			get
			{
				return this._CountDiffQty;
			}
			set
			{
				if ((this._CountDiffQty != value))
				{
					this.OnCountDiffQtyChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQty = value;
					this.SendPropertyChanged("CountDiffQty");
					this.OnCountDiffQtyChanged();
				}
			}
		}
		
		[Column(Storage="_CountDiffQtyByLot", DbType="Int")]
		public System.Nullable<int> CountDiffQtyByLot
		{
			get
			{
				return this._CountDiffQtyByLot;
			}
			set
			{
				if ((this._CountDiffQtyByLot != value))
				{
					this.OnCountDiffQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._CountDiffQtyByLot = value;
					this.SendPropertyChanged("CountDiffQtyByLot");
					this.OnCountDiffQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_CountResult", DbType="VarChar(5)")]
		public string CountResult
		{
			get
			{
				return this._CountResult;
			}
			set
			{
				if ((this._CountResult != value))
				{
					this.OnCountResultChanging(value);
					this.SendPropertyChanging();
					this._CountResult = value;
					this.SendPropertyChanged("CountResult");
					this.OnCountResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Result", DbType="VarChar(5)")]
		public string Part1Result
		{
			get
			{
				return this._Part1Result;
			}
			set
			{
				if ((this._Part1Result != value))
				{
					this.OnPart1ResultChanging(value);
					this.SendPropertyChanging();
					this._Part1Result = value;
					this.SendPropertyChanged("Part1Result");
					this.OnPart1ResultChanged();
				}
			}
		}
		
		[Column(Storage="_Part1ResultByLot", DbType="VarChar(5)")]
		public string Part1ResultByLot
		{
			get
			{
				return this._Part1ResultByLot;
			}
			set
			{
				if ((this._Part1ResultByLot != value))
				{
					this.OnPart1ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1ResultByLot = value;
					this.SendPropertyChanged("Part1ResultByLot");
					this.OnPart1ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQty
		{
			get
			{
				return this._AdjustQty;
			}
			set
			{
				if ((this._AdjustQty != value))
				{
					this.OnAdjustQtyChanging(value);
					this.SendPropertyChanging();
					this._AdjustQty = value;
					this.SendPropertyChanged("AdjustQty");
					this.OnAdjustQtyChanged();
				}
			}
		}
		
		[Column(Storage="_AdjustQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> AdjustQtyByLot
		{
			get
			{
				return this._AdjustQtyByLot;
			}
			set
			{
				if ((this._AdjustQtyByLot != value))
				{
					this.OnAdjustQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._AdjustQtyByLot = value;
					this.SendPropertyChanged("AdjustQtyByLot");
					this.OnAdjustQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReplenishQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReplenishQtyByLot
		{
			get
			{
				return this._ReplenishQtyByLot;
			}
			set
			{
				if ((this._ReplenishQtyByLot != value))
				{
					this.OnReplenishQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReplenishQtyByLot = value;
					this.SendPropertyChanged("ReplenishQtyByLot");
					this.OnReplenishQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ReturnQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ReturnQtyByLot
		{
			get
			{
				return this._ReturnQtyByLot;
			}
			set
			{
				if ((this._ReturnQtyByLot != value))
				{
					this.OnReturnQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ReturnQtyByLot = value;
					this.SendPropertyChanged("ReturnQtyByLot");
					this.OnReturnQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part1Nature", DbType="VarChar(100)")]
		public string Part1Nature
		{
			get
			{
				return this._Part1Nature;
			}
			set
			{
				if ((this._Part1Nature != value))
				{
					this.OnPart1NatureChanging(value);
					this.SendPropertyChanging();
					this._Part1Nature = value;
					this.SendPropertyChanged("Part1Nature");
					this.OnPart1NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part2Nature", DbType="VarChar(100)")]
		public string Part2Nature
		{
			get
			{
				return this._Part2Nature;
			}
			set
			{
				if ((this._Part2Nature != value))
				{
					this.OnPart2NatureChanging(value);
					this.SendPropertyChanging();
					this._Part2Nature = value;
					this.SendPropertyChanged("Part2Nature");
					this.OnPart2NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part3Nature", DbType="VarChar(100)")]
		public string Part3Nature
		{
			get
			{
				return this._Part3Nature;
			}
			set
			{
				if ((this._Part3Nature != value))
				{
					this.OnPart3NatureChanging(value);
					this.SendPropertyChanging();
					this._Part3Nature = value;
					this.SendPropertyChanged("Part3Nature");
					this.OnPart3NatureChanged();
				}
			}
		}
		
		[Column(Storage="_Part4Nature", DbType="VarChar(100)")]
		public string Part4Nature
		{
			get
			{
				return this._Part4Nature;
			}
			set
			{
				if ((this._Part4Nature != value))
				{
					this.OnPart4NatureChanging(value);
					this.SendPropertyChanging();
					this._Part4Nature = value;
					this.SendPropertyChanged("Part4Nature");
					this.OnPart4NatureChanged();
				}
			}
		}
		
		[Column(Storage="_OverallNature", DbType="VarChar(100)")]
		public string OverallNature
		{
			get
			{
				return this._OverallNature;
			}
			set
			{
				if ((this._OverallNature != value))
				{
					this.OnOverallNatureChanging(value);
					this.SendPropertyChanging();
					this._OverallNature = value;
					this.SendPropertyChanged("OverallNature");
					this.OnOverallNatureChanged();
				}
			}
		}
		
		[Column(Storage="_SpotDefectPointQty", DbType="Int")]
		public System.Nullable<int> SpotDefectPointQty
		{
			get
			{
				return this._SpotDefectPointQty;
			}
			set
			{
				if ((this._SpotDefectPointQty != value))
				{
					this.OnSpotDefectPointQtyChanging(value);
					this.SendPropertyChanging();
					this._SpotDefectPointQty = value;
					this.SendPropertyChanged("SpotDefectPointQty");
					this.OnSpotDefectPointQtyChanged();
				}
			}
		}
		
		[Column(Storage="_Part1FinalClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part1FinalClaimByLot
		{
			get
			{
				return this._Part1FinalClaimByLot;
			}
			set
			{
				if ((this._Part1FinalClaimByLot != value))
				{
					this.OnPart1FinalClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part1FinalClaimByLot = value;
					this.SendPropertyChanged("Part1FinalClaimByLot");
					this.OnPart1FinalClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ProWeightQty", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ProWeightQty
		{
			get
			{
				return this._ProWeightQty;
			}
			set
			{
				if ((this._ProWeightQty != value))
				{
					this.OnProWeightQtyChanging(value);
					this.SendPropertyChanging();
					this._ProWeightQty = value;
					this.SendPropertyChanged("ProWeightQty");
					this.OnProWeightQtyChanged();
				}
			}
		}
		
		[Column(Storage="_PullBoxWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> PullBoxWeight
		{
			get
			{
				return this._PullBoxWeight;
			}
			set
			{
				if ((this._PullBoxWeight != value))
				{
					this.OnPullBoxWeightChanging(value);
					this.SendPropertyChanging();
					this._PullBoxWeight = value;
					this.SendPropertyChanged("PullBoxWeight");
					this.OnPullBoxWeightChanged();
				}
			}
		}
		
		[Column(Storage="_SampleQuantumWeight", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> SampleQuantumWeight
		{
			get
			{
				return this._SampleQuantumWeight;
			}
			set
			{
				if ((this._SampleQuantumWeight != value))
				{
					this.OnSampleQuantumWeightChanging(value);
					this.SendPropertyChanging();
					this._SampleQuantumWeight = value;
					this.SendPropertyChanged("SampleQuantumWeight");
					this.OnSampleQuantumWeightChanged();
				}
			}
		}
		
		[Column(Storage="_LengthDiff", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthDiff
		{
			get
			{
				return this._LengthDiff;
			}
			set
			{
				if ((this._LengthDiff != value))
				{
					this.OnLengthDiffChanging(value);
					this.SendPropertyChanging();
					this._LengthDiff = value;
					this.SendPropertyChanged("LengthDiff");
					this.OnLengthDiffChanged();
				}
			}
		}
		
		[Column(Storage="_LengthPercentByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> LengthPercentByLot
		{
			get
			{
				return this._LengthPercentByLot;
			}
			set
			{
				if ((this._LengthPercentByLot != value))
				{
					this.OnLengthPercentByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthPercentByLot = value;
					this.SendPropertyChanged("LengthPercentByLot");
					this.OnLengthPercentByLotChanged();
				}
			}
		}
		
		[Column(Storage="_LengthResultByLot", DbType="VarChar(5)")]
		public string LengthResultByLot
		{
			get
			{
				return this._LengthResultByLot;
			}
			set
			{
				if ((this._LengthResultByLot != value))
				{
					this.OnLengthResultByLotChanging(value);
					this.SendPropertyChanging();
					this._LengthResultByLot = value;
					this.SendPropertyChanged("LengthResultByLot");
					this.OnLengthResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_ShortLengthClaim", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ShortLengthClaim
		{
			get
			{
				return this._ShortLengthClaim;
			}
			set
			{
				if ((this._ShortLengthClaim != value))
				{
					this.OnShortLengthClaimChanging(value);
					this.SendPropertyChanging();
					this._ShortLengthClaim = value;
					this.SendPropertyChanged("ShortLengthClaim");
					this.OnShortLengthClaimChanged();
				}
			}
		}
		
		[Column(Storage="_Part4ResultByLot", DbType="VarChar(5)")]
		public string Part4ResultByLot
		{
			get
			{
				return this._Part4ResultByLot;
			}
			set
			{
				if ((this._Part4ResultByLot != value))
				{
					this.OnPart4ResultByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4ResultByLot = value;
					this.SendPropertyChanged("Part4ResultByLot");
					this.OnPart4ResultByLotChanged();
				}
			}
		}
		
		[Column(Storage="_Part4ClaimByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> Part4ClaimByLot
		{
			get
			{
				return this._Part4ClaimByLot;
			}
			set
			{
				if ((this._Part4ClaimByLot != value))
				{
					this.OnPart4ClaimByLotChanging(value);
					this.SendPropertyChanging();
					this._Part4ClaimByLot = value;
					this.SendPropertyChanged("Part4ClaimByLot");
					this.OnPart4ClaimByLotChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonGroup", DbType="VarChar(1000)")]
		public string OverallResultReasonGroup
		{
			get
			{
				return this._OverallResultReasonGroup;
			}
			set
			{
				if ((this._OverallResultReasonGroup != value))
				{
					this.OnOverallResultReasonGroupChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonGroup = value;
					this.SendPropertyChanged("OverallResultReasonGroup");
					this.OnOverallResultReasonGroupChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultDefectKind", DbType="VarChar(20)")]
		public string OverallResultDefectKind
		{
			get
			{
				return this._OverallResultDefectKind;
			}
			set
			{
				if ((this._OverallResultDefectKind != value))
				{
					this.OnOverallResultDefectKindChanging(value);
					this.SendPropertyChanging();
					this._OverallResultDefectKind = value;
					this.SendPropertyChanged("OverallResultDefectKind");
					this.OnOverallResultDefectKindChanged();
				}
			}
		}
		
		[Column(Storage="_OverallResultCoreDefecName", DbType="VarChar(5000)")]
		public string OverallResultCoreDefecName
		{
			get
			{
				return this._OverallResultCoreDefecName;
			}
			set
			{
				if ((this._OverallResultCoreDefecName != value))
				{
					this.OnOverallResultCoreDefecNameChanging(value);
					this.SendPropertyChanging();
					this._OverallResultCoreDefecName = value;
					this.SendPropertyChanged("OverallResultCoreDefecName");
					this.OnOverallResultCoreDefecNameChanged();
				}
			}
		}
		
		[Column(Storage="_WeightMinFromMIDc", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> WeightMinFromMIDc
		{
			get
			{
				return this._WeightMinFromMIDc;
			}
			set
			{
				if ((this._WeightMinFromMIDc != value))
				{
					this.OnWeightMinFromMIDcChanging(value);
					this.SendPropertyChanging();
					this._WeightMinFromMIDc = value;
					this.SendPropertyChanged("WeightMinFromMIDc");
					this.OnWeightMinFromMIDcChanged();
				}
			}
		}
		
		[Column(Storage="_WeightMaxFromMIDc", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> WeightMaxFromMIDc
		{
			get
			{
				return this._WeightMaxFromMIDc;
			}
			set
			{
				if ((this._WeightMaxFromMIDc != value))
				{
					this.OnWeightMaxFromMIDcChanging(value);
					this.SendPropertyChanging();
					this._WeightMaxFromMIDc = value;
					this.SendPropertyChanged("WeightMaxFromMIDc");
					this.OnWeightMaxFromMIDcChanged();
				}
			}
		}
		
		[Column(Storage="_WeightRange", DbType="VarChar(200)")]
		public string WeightRange
		{
			get
			{
				return this._WeightRange;
			}
			set
			{
				if ((this._WeightRange != value))
				{
					this.OnWeightRangeChanging(value);
					this.SendPropertyChanging();
					this._WeightRange = value;
					this.SendPropertyChanged("WeightRange");
					this.OnWeightRangeChanged();
				}
			}
		}
		
		[Column(Storage="_FWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FWStartDate
		{
			get
			{
				return this._FWStartDate;
			}
			set
			{
				if ((this._FWStartDate != value))
				{
					this.OnFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._FWStartDate = value;
					this.SendPropertyChanged("FWStartDate");
					this.OnFWStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_ConcedeQtyByLot", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> ConcedeQtyByLot
		{
			get
			{
				return this._ConcedeQtyByLot;
			}
			set
			{
				if ((this._ConcedeQtyByLot != value))
				{
					this.OnConcedeQtyByLotChanging(value);
					this.SendPropertyChanging();
					this._ConcedeQtyByLot = value;
					this.SendPropertyChanged("ConcedeQtyByLot");
					this.OnConcedeQtyByLotChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_OverallResultReasonPart", DbType="VarChar(200)")]
		public string OverallResultReasonPart
		{
			get
			{
				return this._OverallResultReasonPart;
			}
			set
			{
				if ((this._OverallResultReasonPart != value))
				{
					this.OnOverallResultReasonPartChanging(value);
					this.SendPropertyChanging();
					this._OverallResultReasonPart = value;
					this.SendPropertyChanged("OverallResultReasonPart");
					this.OnOverallResultReasonPartChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(20)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_IsFullInspection", DbType="Bit")]
		public System.Nullable<bool> IsFullInspection
		{
			get
			{
				return this._IsFullInspection;
			}
			set
			{
				if ((this._IsFullInspection != value))
				{
					this.OnIsFullInspectionChanging(value);
					this.SendPropertyChanging();
					this._IsFullInspection = value;
					this.SendPropertyChanged("IsFullInspection");
					this.OnIsFullInspectionChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogNO", DbType="VarChar(200)")]
		public string ActionLogNO
		{
			get
			{
				return this._ActionLogNO;
			}
			set
			{
				if ((this._ActionLogNO != value))
				{
					this.OnActionLogNOChanging(value);
					this.SendPropertyChanging();
					this._ActionLogNO = value;
					this.SendPropertyChanged("ActionLogNO");
					this.OnActionLogNOChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTaking", DbType="VarChar(10)")]
		public string ActionLogTaking
		{
			get
			{
				return this._ActionLogTaking;
			}
			set
			{
				if ((this._ActionLogTaking != value))
				{
					this.OnActionLogTakingChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTaking = value;
					this.SendPropertyChanged("ActionLogTaking");
					this.OnActionLogTakingChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCategory", DbType="VarChar(100)")]
		public string ActionLogCategory
		{
			get
			{
				return this._ActionLogCategory;
			}
			set
			{
				if ((this._ActionLogCategory != value))
				{
					this.OnActionLogCategoryChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCategory = value;
					this.SendPropertyChanged("ActionLogCategory");
					this.OnActionLogCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogGroup", DbType="VarChar(20)")]
		public string ActionLogGroup
		{
			get
			{
				return this._ActionLogGroup;
			}
			set
			{
				if ((this._ActionLogGroup != value))
				{
					this.OnActionLogGroupChanging(value);
					this.SendPropertyChanging();
					this._ActionLogGroup = value;
					this.SendPropertyChanged("ActionLogGroup");
					this.OnActionLogGroupChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogTargetDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogTargetDate
		{
			get
			{
				return this._ActionLogTargetDate1;
			}
			set
			{
				if ((this._ActionLogTargetDate1 != value))
				{
					this.OnActionLogTargetDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogTargetDate1 = value;
					this.SendPropertyChanged("ActionLogTargetDate");
					this.OnActionLogTargetDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogRevisedDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogRevisedDate
		{
			get
			{
				return this._ActionLogRevisedDate1;
			}
			set
			{
				if ((this._ActionLogRevisedDate1 != value))
				{
					this.OnActionLogRevisedDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogRevisedDate1 = value;
					this.SendPropertyChanged("ActionLogRevisedDate");
					this.OnActionLogRevisedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCmplDate1", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionLogCmplDate
		{
			get
			{
				return this._ActionLogCmplDate1;
			}
			set
			{
				if ((this._ActionLogCmplDate1 != value))
				{
					this.OnActionLogCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCmplDate1 = value;
					this.SendPropertyChanged("ActionLogCmplDate");
					this.OnActionLogCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogIsCompleted", DbType="VarChar(10)")]
		public string ActionLogIsCompleted
		{
			get
			{
				return this._ActionLogIsCompleted;
			}
			set
			{
				if ((this._ActionLogIsCompleted != value))
				{
					this.OnActionLogIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._ActionLogIsCompleted = value;
					this.SendPropertyChanged("ActionLogIsCompleted");
					this.OnActionLogIsCompletedChanged();
				}
			}
		}
		
		[Association(Name="AccessoryHeader_AccessoryDefect", Storage="_AccessoryDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<AccessoryDefect> AccessoryDefects
		{
			get
			{
				return this._AccessoryDefects;
			}
			set
			{
				this._AccessoryDefects.Assign(value);
			}
		}
		
		[Association(Name="AccessoryHeader_AccessoryCasingDefect", Storage="_AccessoryCasingDefects", ThisKey="OID", OtherKey="HeaderOID")]
		public EntitySet<AccessoryCasingDefect> AccessoryCasingDefects
		{
			get
			{
				return this._AccessoryCasingDefects;
			}
			set
			{
				this._AccessoryCasingDefects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessoryDefects(AccessoryDefect entity)
		{
			this.SendPropertyChanging();
			entity.AccessoryHeader = this;
		}
		
		private void detach_AccessoryDefects(AccessoryDefect entity)
		{
			this.SendPropertyChanging();
			entity.AccessoryHeader = null;
		}
		
		private void attach_AccessoryCasingDefects(AccessoryCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.AccessoryHeader = this;
		}
		
		private void detach_AccessoryCasingDefects(AccessoryCasingDefect entity)
		{
			this.SendPropertyChanging();
			entity.AccessoryHeader = null;
		}
	}
	
	[Table(Name="dbo.ActionLogIMQE")]
	public partial class ActionLogIMQE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _ActionLogID;
		
		private System.Nullable<System.DateTime> _DataCrossTransferCmplDate;
		
		private string _SuppCode;
		
		private string _ItemCode;
		
		private string _AuditNo1;
		
		private string _AuditStage;
		
		private System.Nullable<decimal> _OverallClaimPercent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnDataCrossTransferCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDataCrossTransferCmplDateChanged();
    partial void OnSuppCodeChanging(string value);
    partial void OnSuppCodeChanged();
    partial void OnItemCodeChanging(string value);
    partial void OnItemCodeChanged();
    partial void OnAuditNo1Changing(string value);
    partial void OnAuditNo1Changed();
    partial void OnAuditStageChanging(string value);
    partial void OnAuditStageChanged();
    partial void OnOverallClaimPercentChanging(System.Nullable<decimal> value);
    partial void OnOverallClaimPercentChanged();
    #endregion
		
		public ActionLogIMQE()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_DataCrossTransferCmplDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DataCrossTransferCmplDate
		{
			get
			{
				return this._DataCrossTransferCmplDate;
			}
			set
			{
				if ((this._DataCrossTransferCmplDate != value))
				{
					this.OnDataCrossTransferCmplDateChanging(value);
					this.SendPropertyChanging();
					this._DataCrossTransferCmplDate = value;
					this.SendPropertyChanged("DataCrossTransferCmplDate");
					this.OnDataCrossTransferCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_SuppCode", DbType="VarChar(100)")]
		public string SuppCode
		{
			get
			{
				return this._SuppCode;
			}
			set
			{
				if ((this._SuppCode != value))
				{
					this.OnSuppCodeChanging(value);
					this.SendPropertyChanging();
					this._SuppCode = value;
					this.SendPropertyChanged("SuppCode");
					this.OnSuppCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ItemCode", DbType="VarChar(200)")]
		public string ItemCode
		{
			get
			{
				return this._ItemCode;
			}
			set
			{
				if ((this._ItemCode != value))
				{
					this.OnItemCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemCode = value;
					this.SendPropertyChanged("ItemCode");
					this.OnItemCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AuditNo1", DbType="VarChar(20)")]
		public string AuditNo1
		{
			get
			{
				return this._AuditNo1;
			}
			set
			{
				if ((this._AuditNo1 != value))
				{
					this.OnAuditNo1Changing(value);
					this.SendPropertyChanging();
					this._AuditNo1 = value;
					this.SendPropertyChanged("AuditNo1");
					this.OnAuditNo1Changed();
				}
			}
		}
		
		[Column(Storage="_AuditStage", DbType="VarChar(20)")]
		public string AuditStage
		{
			get
			{
				return this._AuditStage;
			}
			set
			{
				if ((this._AuditStage != value))
				{
					this.OnAuditStageChanging(value);
					this.SendPropertyChanging();
					this._AuditStage = value;
					this.SendPropertyChanged("AuditStage");
					this.OnAuditStageChanged();
				}
			}
		}
		
		[Column(Storage="_OverallClaimPercent", DbType="Decimal(20,4)")]
		public System.Nullable<decimal> OverallClaimPercent
		{
			get
			{
				return this._OverallClaimPercent;
			}
			set
			{
				if ((this._OverallClaimPercent != value))
				{
					this.OnOverallClaimPercentChanging(value);
					this.SendPropertyChanging();
					this._OverallClaimPercent = value;
					this.SendPropertyChanged("OverallClaimPercent");
					this.OnOverallClaimPercentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogHeader")]
	public partial class ActionLogHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _ActionLogID;
		
		private string _ActionLogSeqNo;
		
		private System.Nullable<int> _StageSeqNo;
		
		private System.Nullable<long> _RefID;
		
		private string _CreateMan;
		
		private string _LineCode;
		
		private string _AcitonID;
		
		private string _ItemNo;
		
		private string _ItemSubject;
		
		private string _ItemSubjectCN;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _PlanEndDate;
		
		private System.Nullable<System.DateTime> _CompletedDate;
		
		private System.Nullable<System.DateTime> _ReviseCmplDate;
		
		private System.Nullable<bool> _IsCompleted;
		
		private System.Nullable<System.DateTime> _LastStageTargetCompleteDate;
		
		private System.Nullable<System.DateTime> _LastStageCompletedDate;
		
		private System.Nullable<bool> _LastStageIsCompleted;
		
		private string _EmailTo;
		
		private string _EmailCc;
		
		private System.Nullable<int> _CompleteSendEmailCount;
		
		private System.Nullable<int> _ActionLogCompleteReasonOID;
		
		private string _ActionLogCompleteReasonRemark;
		
		private System.Nullable<System.DateTime> _LastStageReviseTargetCompleteDate;
		
		private System.Nullable<int> _SeqNo1;
		
		private System.Nullable<int> _SeqNo2;
		
		private string _Flag;
		
		private string _MainSheetFlag;
		
		private System.Nullable<double> _RelatedShptPercent;
		
		private string _PONO;
		
		private System.Nullable<int> _TotalPOLine;
		
		private string _ColorCode;
		
		private string _ProjectNo;
		
		private System.Nullable<System.DateTime> _WOFWStartDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnActionLogIDChanging(string value);
    partial void OnActionLogIDChanged();
    partial void OnActionLogSeqNoChanging(string value);
    partial void OnActionLogSeqNoChanged();
    partial void OnStageSeqNoChanging(System.Nullable<int> value);
    partial void OnStageSeqNoChanged();
    partial void OnRefIDChanging(System.Nullable<long> value);
    partial void OnRefIDChanged();
    partial void OnCreateManChanging(string value);
    partial void OnCreateManChanged();
    partial void OnLineCodeChanging(string value);
    partial void OnLineCodeChanged();
    partial void OnAcitonIDChanging(string value);
    partial void OnAcitonIDChanged();
    partial void OnItemNoChanging(string value);
    partial void OnItemNoChanged();
    partial void OnItemSubjectChanging(string value);
    partial void OnItemSubjectChanged();
    partial void OnItemSubjectCNChanging(string value);
    partial void OnItemSubjectCNChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnPlanEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPlanEndDateChanged();
    partial void OnCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCompletedDateChanged();
    partial void OnReviseCmplDateChanging(System.Nullable<System.DateTime> value);
    partial void OnReviseCmplDateChanged();
    partial void OnIsCompletedChanging(System.Nullable<bool> value);
    partial void OnIsCompletedChanged();
    partial void OnLastStageTargetCompleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastStageTargetCompleteDateChanged();
    partial void OnLastStageCompletedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastStageCompletedDateChanged();
    partial void OnLastStageIsCompletedChanging(System.Nullable<bool> value);
    partial void OnLastStageIsCompletedChanged();
    partial void OnEmailToChanging(string value);
    partial void OnEmailToChanged();
    partial void OnEmailCcChanging(string value);
    partial void OnEmailCcChanged();
    partial void OnCompleteSendEmailCountChanging(System.Nullable<int> value);
    partial void OnCompleteSendEmailCountChanged();
    partial void OnActionLogCompleteReasonOIDChanging(System.Nullable<int> value);
    partial void OnActionLogCompleteReasonOIDChanged();
    partial void OnActionLogCompleteReasonRemarkChanging(string value);
    partial void OnActionLogCompleteReasonRemarkChanged();
    partial void OnLastStageReviseTargetCompleteDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastStageReviseTargetCompleteDateChanged();
    partial void OnSeqNo1Changing(System.Nullable<int> value);
    partial void OnSeqNo1Changed();
    partial void OnSeqNo2Changing(System.Nullable<int> value);
    partial void OnSeqNo2Changed();
    partial void OnFlagChanging(string value);
    partial void OnFlagChanged();
    partial void OnMainSheetFlagChanging(string value);
    partial void OnMainSheetFlagChanged();
    partial void OnRelatedShptPercentChanging(System.Nullable<double> value);
    partial void OnRelatedShptPercentChanged();
    partial void OnPONOChanging(string value);
    partial void OnPONOChanged();
    partial void OnTotalPOLineChanging(System.Nullable<int> value);
    partial void OnTotalPOLineChanged();
    partial void OnColorCodeChanging(string value);
    partial void OnColorCodeChanged();
    partial void OnProjectNoChanging(string value);
    partial void OnProjectNoChanged();
    partial void OnWOFWStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnWOFWStartDateChanged();
    #endregion
		
		public ActionLogHeader()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogID", DbType="VarChar(100)")]
		public string ActionLogID
		{
			get
			{
				return this._ActionLogID;
			}
			set
			{
				if ((this._ActionLogID != value))
				{
					this.OnActionLogIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogID = value;
					this.SendPropertyChanged("ActionLogID");
					this.OnActionLogIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogSeqNo", DbType="VarChar(100)")]
		public string ActionLogSeqNo
		{
			get
			{
				return this._ActionLogSeqNo;
			}
			set
			{
				if ((this._ActionLogSeqNo != value))
				{
					this.OnActionLogSeqNoChanging(value);
					this.SendPropertyChanging();
					this._ActionLogSeqNo = value;
					this.SendPropertyChanged("ActionLogSeqNo");
					this.OnActionLogSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_StageSeqNo", DbType="Int")]
		public System.Nullable<int> StageSeqNo
		{
			get
			{
				return this._StageSeqNo;
			}
			set
			{
				if ((this._StageSeqNo != value))
				{
					this.OnStageSeqNoChanging(value);
					this.SendPropertyChanging();
					this._StageSeqNo = value;
					this.SendPropertyChanged("StageSeqNo");
					this.OnStageSeqNoChanged();
				}
			}
		}
		
		[Column(Storage="_RefID", DbType="BigInt")]
		public System.Nullable<long> RefID
		{
			get
			{
				return this._RefID;
			}
			set
			{
				if ((this._RefID != value))
				{
					this.OnRefIDChanging(value);
					this.SendPropertyChanging();
					this._RefID = value;
					this.SendPropertyChanged("RefID");
					this.OnRefIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreateMan", DbType="VarChar(50)")]
		public string CreateMan
		{
			get
			{
				return this._CreateMan;
			}
			set
			{
				if ((this._CreateMan != value))
				{
					this.OnCreateManChanging(value);
					this.SendPropertyChanging();
					this._CreateMan = value;
					this.SendPropertyChanged("CreateMan");
					this.OnCreateManChanged();
				}
			}
		}
		
		[Column(Storage="_LineCode", DbType="VarChar(50)")]
		public string LineCode
		{
			get
			{
				return this._LineCode;
			}
			set
			{
				if ((this._LineCode != value))
				{
					this.OnLineCodeChanging(value);
					this.SendPropertyChanging();
					this._LineCode = value;
					this.SendPropertyChanged("LineCode");
					this.OnLineCodeChanged();
				}
			}
		}
		
		[Column(Storage="_AcitonID", DbType="VarChar(20)")]
		public string AcitonID
		{
			get
			{
				return this._AcitonID;
			}
			set
			{
				if ((this._AcitonID != value))
				{
					this.OnAcitonIDChanging(value);
					this.SendPropertyChanging();
					this._AcitonID = value;
					this.SendPropertyChanged("AcitonID");
					this.OnAcitonIDChanged();
				}
			}
		}
		
		[Column(Storage="_ItemNo", DbType="NVarChar(100)")]
		public string ItemNo
		{
			get
			{
				return this._ItemNo;
			}
			set
			{
				if ((this._ItemNo != value))
				{
					this.OnItemNoChanging(value);
					this.SendPropertyChanging();
					this._ItemNo = value;
					this.SendPropertyChanged("ItemNo");
					this.OnItemNoChanged();
				}
			}
		}
		
		[Column(Storage="_ItemSubject", DbType="NVarChar(1000)")]
		public string ItemSubject
		{
			get
			{
				return this._ItemSubject;
			}
			set
			{
				if ((this._ItemSubject != value))
				{
					this.OnItemSubjectChanging(value);
					this.SendPropertyChanging();
					this._ItemSubject = value;
					this.SendPropertyChanged("ItemSubject");
					this.OnItemSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_ItemSubjectCN", DbType="NVarChar(1000)")]
		public string ItemSubjectCN
		{
			get
			{
				return this._ItemSubjectCN;
			}
			set
			{
				if ((this._ItemSubjectCN != value))
				{
					this.OnItemSubjectCNChanging(value);
					this.SendPropertyChanging();
					this._ItemSubjectCN = value;
					this.SendPropertyChanged("ItemSubjectCN");
					this.OnItemSubjectCNChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_PlanEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PlanEndDate
		{
			get
			{
				return this._PlanEndDate;
			}
			set
			{
				if ((this._PlanEndDate != value))
				{
					this.OnPlanEndDateChanging(value);
					this.SendPropertyChanging();
					this._PlanEndDate = value;
					this.SendPropertyChanged("PlanEndDate");
					this.OnPlanEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_CompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CompletedDate
		{
			get
			{
				return this._CompletedDate;
			}
			set
			{
				if ((this._CompletedDate != value))
				{
					this.OnCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._CompletedDate = value;
					this.SendPropertyChanged("CompletedDate");
					this.OnCompletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_ReviseCmplDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReviseCmplDate
		{
			get
			{
				return this._ReviseCmplDate;
			}
			set
			{
				if ((this._ReviseCmplDate != value))
				{
					this.OnReviseCmplDateChanging(value);
					this.SendPropertyChanging();
					this._ReviseCmplDate = value;
					this.SendPropertyChanged("ReviseCmplDate");
					this.OnReviseCmplDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsCompleted", DbType="Bit")]
		public System.Nullable<bool> IsCompleted
		{
			get
			{
				return this._IsCompleted;
			}
			set
			{
				if ((this._IsCompleted != value))
				{
					this.OnIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._IsCompleted = value;
					this.SendPropertyChanged("IsCompleted");
					this.OnIsCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_LastStageTargetCompleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastStageTargetCompleteDate
		{
			get
			{
				return this._LastStageTargetCompleteDate;
			}
			set
			{
				if ((this._LastStageTargetCompleteDate != value))
				{
					this.OnLastStageTargetCompleteDateChanging(value);
					this.SendPropertyChanging();
					this._LastStageTargetCompleteDate = value;
					this.SendPropertyChanged("LastStageTargetCompleteDate");
					this.OnLastStageTargetCompleteDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastStageCompletedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastStageCompletedDate
		{
			get
			{
				return this._LastStageCompletedDate;
			}
			set
			{
				if ((this._LastStageCompletedDate != value))
				{
					this.OnLastStageCompletedDateChanging(value);
					this.SendPropertyChanging();
					this._LastStageCompletedDate = value;
					this.SendPropertyChanged("LastStageCompletedDate");
					this.OnLastStageCompletedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastStageIsCompleted", DbType="Bit")]
		public System.Nullable<bool> LastStageIsCompleted
		{
			get
			{
				return this._LastStageIsCompleted;
			}
			set
			{
				if ((this._LastStageIsCompleted != value))
				{
					this.OnLastStageIsCompletedChanging(value);
					this.SendPropertyChanging();
					this._LastStageIsCompleted = value;
					this.SendPropertyChanged("LastStageIsCompleted");
					this.OnLastStageIsCompletedChanged();
				}
			}
		}
		
		[Column(Storage="_EmailTo", DbType="VarChar(2000)")]
		public string EmailTo
		{
			get
			{
				return this._EmailTo;
			}
			set
			{
				if ((this._EmailTo != value))
				{
					this.OnEmailToChanging(value);
					this.SendPropertyChanging();
					this._EmailTo = value;
					this.SendPropertyChanged("EmailTo");
					this.OnEmailToChanged();
				}
			}
		}
		
		[Column(Storage="_EmailCc", DbType="VarChar(2000)")]
		public string EmailCc
		{
			get
			{
				return this._EmailCc;
			}
			set
			{
				if ((this._EmailCc != value))
				{
					this.OnEmailCcChanging(value);
					this.SendPropertyChanging();
					this._EmailCc = value;
					this.SendPropertyChanged("EmailCc");
					this.OnEmailCcChanged();
				}
			}
		}
		
		[Column(Storage="_CompleteSendEmailCount", DbType="Int")]
		public System.Nullable<int> CompleteSendEmailCount
		{
			get
			{
				return this._CompleteSendEmailCount;
			}
			set
			{
				if ((this._CompleteSendEmailCount != value))
				{
					this.OnCompleteSendEmailCountChanging(value);
					this.SendPropertyChanging();
					this._CompleteSendEmailCount = value;
					this.SendPropertyChanged("CompleteSendEmailCount");
					this.OnCompleteSendEmailCountChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCompleteReasonOID", DbType="Int")]
		public System.Nullable<int> ActionLogCompleteReasonOID
		{
			get
			{
				return this._ActionLogCompleteReasonOID;
			}
			set
			{
				if ((this._ActionLogCompleteReasonOID != value))
				{
					this.OnActionLogCompleteReasonOIDChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCompleteReasonOID = value;
					this.SendPropertyChanged("ActionLogCompleteReasonOID");
					this.OnActionLogCompleteReasonOIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActionLogCompleteReasonRemark", DbType="VarChar(1000)")]
		public string ActionLogCompleteReasonRemark
		{
			get
			{
				return this._ActionLogCompleteReasonRemark;
			}
			set
			{
				if ((this._ActionLogCompleteReasonRemark != value))
				{
					this.OnActionLogCompleteReasonRemarkChanging(value);
					this.SendPropertyChanging();
					this._ActionLogCompleteReasonRemark = value;
					this.SendPropertyChanged("ActionLogCompleteReasonRemark");
					this.OnActionLogCompleteReasonRemarkChanged();
				}
			}
		}
		
		[Column(Storage="_LastStageReviseTargetCompleteDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastStageReviseTargetCompleteDate
		{
			get
			{
				return this._LastStageReviseTargetCompleteDate;
			}
			set
			{
				if ((this._LastStageReviseTargetCompleteDate != value))
				{
					this.OnLastStageReviseTargetCompleteDateChanging(value);
					this.SendPropertyChanging();
					this._LastStageReviseTargetCompleteDate = value;
					this.SendPropertyChanged("LastStageReviseTargetCompleteDate");
					this.OnLastStageReviseTargetCompleteDateChanged();
				}
			}
		}
		
		[Column(Storage="_SeqNo1", DbType="Int")]
		public System.Nullable<int> SeqNo1
		{
			get
			{
				return this._SeqNo1;
			}
			set
			{
				if ((this._SeqNo1 != value))
				{
					this.OnSeqNo1Changing(value);
					this.SendPropertyChanging();
					this._SeqNo1 = value;
					this.SendPropertyChanged("SeqNo1");
					this.OnSeqNo1Changed();
				}
			}
		}
		
		[Column(Storage="_SeqNo2", DbType="Int")]
		public System.Nullable<int> SeqNo2
		{
			get
			{
				return this._SeqNo2;
			}
			set
			{
				if ((this._SeqNo2 != value))
				{
					this.OnSeqNo2Changing(value);
					this.SendPropertyChanging();
					this._SeqNo2 = value;
					this.SendPropertyChanged("SeqNo2");
					this.OnSeqNo2Changed();
				}
			}
		}
		
		[Column(Storage="_Flag", DbType="VarChar(20)")]
		public string Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[Column(Storage="_MainSheetFlag", DbType="VarChar(30)")]
		public string MainSheetFlag
		{
			get
			{
				return this._MainSheetFlag;
			}
			set
			{
				if ((this._MainSheetFlag != value))
				{
					this.OnMainSheetFlagChanging(value);
					this.SendPropertyChanging();
					this._MainSheetFlag = value;
					this.SendPropertyChanged("MainSheetFlag");
					this.OnMainSheetFlagChanged();
				}
			}
		}
		
		[Column(Storage="_RelatedShptPercent", DbType="Float")]
		public System.Nullable<double> RelatedShptPercent
		{
			get
			{
				return this._RelatedShptPercent;
			}
			set
			{
				if ((this._RelatedShptPercent != value))
				{
					this.OnRelatedShptPercentChanging(value);
					this.SendPropertyChanging();
					this._RelatedShptPercent = value;
					this.SendPropertyChanged("RelatedShptPercent");
					this.OnRelatedShptPercentChanged();
				}
			}
		}
		
		[Column(Storage="_PONO", DbType="VarChar(20)")]
		public string PONO
		{
			get
			{
				return this._PONO;
			}
			set
			{
				if ((this._PONO != value))
				{
					this.OnPONOChanging(value);
					this.SendPropertyChanging();
					this._PONO = value;
					this.SendPropertyChanged("PONO");
					this.OnPONOChanged();
				}
			}
		}
		
		[Column(Storage="_TotalPOLine", DbType="Int")]
		public System.Nullable<int> TotalPOLine
		{
			get
			{
				return this._TotalPOLine;
			}
			set
			{
				if ((this._TotalPOLine != value))
				{
					this.OnTotalPOLineChanging(value);
					this.SendPropertyChanging();
					this._TotalPOLine = value;
					this.SendPropertyChanged("TotalPOLine");
					this.OnTotalPOLineChanged();
				}
			}
		}
		
		[Column(Storage="_ColorCode", DbType="NVarChar(40)")]
		public string ColorCode
		{
			get
			{
				return this._ColorCode;
			}
			set
			{
				if ((this._ColorCode != value))
				{
					this.OnColorCodeChanging(value);
					this.SendPropertyChanging();
					this._ColorCode = value;
					this.SendPropertyChanged("ColorCode");
					this.OnColorCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ProjectNo", DbType="VarChar(200)")]
		public string ProjectNo
		{
			get
			{
				return this._ProjectNo;
			}
			set
			{
				if ((this._ProjectNo != value))
				{
					this.OnProjectNoChanging(value);
					this.SendPropertyChanging();
					this._ProjectNo = value;
					this.SendPropertyChanged("ProjectNo");
					this.OnProjectNoChanged();
				}
			}
		}
		
		[Column(Storage="_WOFWStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> WOFWStartDate
		{
			get
			{
				return this._WOFWStartDate;
			}
			set
			{
				if ((this._WOFWStartDate != value))
				{
					this.OnWOFWStartDateChanging(value);
					this.SendPropertyChanging();
					this._WOFWStartDate = value;
					this.SendPropertyChanged("WOFWStartDate");
					this.OnWOFWStartDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ActionLogCategory")]
	public partial class ActionLogCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _OID;
		
		private string _Code;
		
		private string _BigCategory;
		
		private string _Category;
		
		private string _Description;
		
		private string _Description_EN;
		
		private string _Description_BD;
		
		private string _RC;
		
		private string _GroupCode;
		
		private string _GroupName_EN;
		
		private string _GroupName_CN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOIDChanging(long value);
    partial void OnOIDChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnBigCategoryChanging(string value);
    partial void OnBigCategoryChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDescription_ENChanging(string value);
    partial void OnDescription_ENChanged();
    partial void OnDescription_BDChanging(string value);
    partial void OnDescription_BDChanged();
    partial void OnRCChanging(string value);
    partial void OnRCChanged();
    partial void OnGroupCodeChanging(string value);
    partial void OnGroupCodeChanged();
    partial void OnGroupName_ENChanging(string value);
    partial void OnGroupName_ENChanged();
    partial void OnGroupName_CNChanging(string value);
    partial void OnGroupName_CNChanged();
    #endregion
		
		public ActionLogCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_OID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long OID
		{
			get
			{
				return this._OID;
			}
			set
			{
				if ((this._OID != value))
				{
					this.OnOIDChanging(value);
					this.SendPropertyChanging();
					this._OID = value;
					this.SendPropertyChanged("OID");
					this.OnOIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BigCategory", DbType="NVarChar(100)")]
		public string BigCategory
		{
			get
			{
				return this._BigCategory;
			}
			set
			{
				if ((this._BigCategory != value))
				{
					this.OnBigCategoryChanging(value);
					this.SendPropertyChanging();
					this._BigCategory = value;
					this.SendPropertyChanged("BigCategory");
					this.OnBigCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(100)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Description_EN", DbType="NVarChar(1000)")]
		public string Description_EN
		{
			get
			{
				return this._Description_EN;
			}
			set
			{
				if ((this._Description_EN != value))
				{
					this.OnDescription_ENChanging(value);
					this.SendPropertyChanging();
					this._Description_EN = value;
					this.SendPropertyChanged("Description_EN");
					this.OnDescription_ENChanged();
				}
			}
		}
		
		[Column(Storage="_Description_BD", DbType="NVarChar(1000)")]
		public string Description_BD
		{
			get
			{
				return this._Description_BD;
			}
			set
			{
				if ((this._Description_BD != value))
				{
					this.OnDescription_BDChanging(value);
					this.SendPropertyChanging();
					this._Description_BD = value;
					this.SendPropertyChanged("Description_BD");
					this.OnDescription_BDChanged();
				}
			}
		}
		
		[Column(Storage="_RC", DbType="VarChar(100)")]
		public string RC
		{
			get
			{
				return this._RC;
			}
			set
			{
				if ((this._RC != value))
				{
					this.OnRCChanging(value);
					this.SendPropertyChanging();
					this._RC = value;
					this.SendPropertyChanged("RC");
					this.OnRCChanged();
				}
			}
		}
		
		[Column(Storage="_GroupCode", DbType="VarChar(20)")]
		public string GroupCode
		{
			get
			{
				return this._GroupCode;
			}
			set
			{
				if ((this._GroupCode != value))
				{
					this.OnGroupCodeChanging(value);
					this.SendPropertyChanging();
					this._GroupCode = value;
					this.SendPropertyChanged("GroupCode");
					this.OnGroupCodeChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName_EN", DbType="NVarChar(1000)")]
		public string GroupName_EN
		{
			get
			{
				return this._GroupName_EN;
			}
			set
			{
				if ((this._GroupName_EN != value))
				{
					this.OnGroupName_ENChanging(value);
					this.SendPropertyChanging();
					this._GroupName_EN = value;
					this.SendPropertyChanged("GroupName_EN");
					this.OnGroupName_ENChanged();
				}
			}
		}
		
		[Column(Storage="_GroupName_CN", DbType="NVarChar(1000)")]
		public string GroupName_CN
		{
			get
			{
				return this._GroupName_CN;
			}
			set
			{
				if ((this._GroupName_CN != value))
				{
					this.OnGroupName_CNChanging(value);
					this.SendPropertyChanging();
					this._GroupName_CN = value;
					this.SendPropertyChanged("GroupName_CN");
					this.OnGroupName_CNChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class rpt_DefectRejectResult
	{
		
		private string _Lot_Id;
		
		private string _Batch_No;
		
		private string _Roll_No;
		
		private System.Nullable<decimal> _Supplier_Length;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Reject_Reason;
		
		private int _System_Install_No;
		
		private string _Company;
		
		public rpt_DefectRejectResult()
		{
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(15)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this._Lot_Id = value;
				}
			}
		}
		
		[Column(Storage="_Batch_No", DbType="VarChar(50)")]
		public string Batch_No
		{
			get
			{
				return this._Batch_No;
			}
			set
			{
				if ((this._Batch_No != value))
				{
					this._Batch_No = value;
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this._Roll_No = value;
				}
			}
		}
		
		[Column(Storage="_Supplier_Length", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Supplier_Length
		{
			get
			{
				return this._Supplier_Length;
			}
			set
			{
				if ((this._Supplier_Length != value))
				{
					this._Supplier_Length = value;
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this._Usable_Width = value;
				}
			}
		}
		
		[Column(Storage="_Reject_Reason", DbType="VarChar(100)")]
		public string Reject_Reason
		{
			get
			{
				return this._Reject_Reason;
			}
			set
			{
				if ((this._Reject_Reason != value))
				{
					this._Reject_Reason = value;
				}
			}
		}
		
		[Column(Storage="_System_Install_No", DbType="Int NOT NULL")]
		public int System_Install_No
		{
			get
			{
				return this._System_Install_No;
			}
			set
			{
				if ((this._System_Install_No != value))
				{
					this._System_Install_No = value;
				}
			}
		}
		
		[Column(Storage="_Company", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this._Company = value;
				}
			}
		}
	}
	
	public partial class rpt_ColorRejectResult
	{
		
		private string _Lot_Id;
		
		private string _Batch_No;
		
		private string _Roll_No;
		
		private System.Nullable<decimal> _Supplier_Length;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Reject_Reason;
		
		public rpt_ColorRejectResult()
		{
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(15)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this._Lot_Id = value;
				}
			}
		}
		
		[Column(Storage="_Batch_No", DbType="VarChar(50)")]
		public string Batch_No
		{
			get
			{
				return this._Batch_No;
			}
			set
			{
				if ((this._Batch_No != value))
				{
					this._Batch_No = value;
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this._Roll_No = value;
				}
			}
		}
		
		[Column(Storage="_Supplier_Length", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Supplier_Length
		{
			get
			{
				return this._Supplier_Length;
			}
			set
			{
				if ((this._Supplier_Length != value))
				{
					this._Supplier_Length = value;
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this._Usable_Width = value;
				}
			}
		}
		
		[Column(Storage="_Reject_Reason", DbType="VarChar(100)")]
		public string Reject_Reason
		{
			get
			{
				return this._Reject_Reason;
			}
			set
			{
				if ((this._Reject_Reason != value))
				{
					this._Reject_Reason = value;
				}
			}
		}
	}
	
	public partial class Rpt_PhysicalPropertiesRejectResult
	{
		
		private string _Lot_Id;
		
		private string _Batch_No;
		
		private string _Roll_No;
		
		private System.Nullable<decimal> _Supplier_Length;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private string _Reject_Reason;
		
		public Rpt_PhysicalPropertiesRejectResult()
		{
		}
		
		[Column(Storage="_Lot_Id", DbType="VarChar(15)")]
		public string Lot_Id
		{
			get
			{
				return this._Lot_Id;
			}
			set
			{
				if ((this._Lot_Id != value))
				{
					this._Lot_Id = value;
				}
			}
		}
		
		[Column(Storage="_Batch_No", DbType="VarChar(50)")]
		public string Batch_No
		{
			get
			{
				return this._Batch_No;
			}
			set
			{
				if ((this._Batch_No != value))
				{
					this._Batch_No = value;
				}
			}
		}
		
		[Column(Storage="_Roll_No", DbType="VarChar(50)")]
		public string Roll_No
		{
			get
			{
				return this._Roll_No;
			}
			set
			{
				if ((this._Roll_No != value))
				{
					this._Roll_No = value;
				}
			}
		}
		
		[Column(Storage="_Supplier_Length", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Supplier_Length
		{
			get
			{
				return this._Supplier_Length;
			}
			set
			{
				if ((this._Supplier_Length != value))
				{
					this._Supplier_Length = value;
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this._Usable_Width = value;
				}
			}
		}
		
		[Column(Storage="_Reject_Reason", DbType="VarChar(100)")]
		public string Reject_Reason
		{
			get
			{
				return this._Reject_Reason;
			}
			set
			{
				if ((this._Reject_Reason != value))
				{
					this._Reject_Reason = value;
				}
			}
		}
	}
	
	public partial class rpt_MainMaterialsInspectionDetailReportResult
	{
		
		private string _company;
		
		private int _system_install_no;
		
		private string _lot_id;
		
		private string _Supplich_Batch;
		
		private string _roll_no;
		
		private System.Nullable<decimal> _insp_length;
		
		private System.Nullable<decimal> _Actual_Length;
		
		private System.Nullable<decimal> _PH_Sample;
		
		private System.Nullable<decimal> _Usable_Width;
		
		private System.Nullable<decimal> _Points_Hundred_SQM;
		
		private System.Nullable<decimal> _Wastage;
		
		private System.Nullable<decimal> _Actual_Weight;
		
		private System.Nullable<decimal> _QtyDifference;
		
		private System.Nullable<decimal> _Special_Marker;
		
		private string _Mould_Trial_Result;
		
		private string _Item_no;
		
		private string _PHMaterial;
		
		private string _supplier_item_no;
		
		private string _stock_in_date;
		
		private string _PHMaterialColor;
		
		private string _supplieritemColor;
		
		private string _Color_Group_Status;
		
		private string _WeftYarnClass;
		
		private System.Nullable<decimal> _WeftYarnWastage;
		
		private string _WeftYarnSolution1;
		
		private string _WeftYarnSolution2;
		
		private string _WeftYarnStatus;
		
		private string _IQCInspectionDate;
		
		private string _Spread_Insp_Result;
		
		public rpt_MainMaterialsInspectionDetailReportResult()
		{
		}
		
		[Column(Storage="_company", DbType="VarChar(2) NOT NULL", CanBeNull=false)]
		public string company
		{
			get
			{
				return this._company;
			}
			set
			{
				if ((this._company != value))
				{
					this._company = value;
				}
			}
		}
		
		[Column(Storage="_system_install_no", DbType="Int NOT NULL")]
		public int system_install_no
		{
			get
			{
				return this._system_install_no;
			}
			set
			{
				if ((this._system_install_no != value))
				{
					this._system_install_no = value;
				}
			}
		}
		
		[Column(Storage="_lot_id", DbType="VarChar(15)")]
		public string lot_id
		{
			get
			{
				return this._lot_id;
			}
			set
			{
				if ((this._lot_id != value))
				{
					this._lot_id = value;
				}
			}
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50)")]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this._Supplich_Batch = value;
				}
			}
		}
		
		[Column(Storage="_roll_no", DbType="VarChar(50)")]
		public string roll_no
		{
			get
			{
				return this._roll_no;
			}
			set
			{
				if ((this._roll_no != value))
				{
					this._roll_no = value;
				}
			}
		}
		
		[Column(Storage="_insp_length", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> insp_length
		{
			get
			{
				return this._insp_length;
			}
			set
			{
				if ((this._insp_length != value))
				{
					this._insp_length = value;
				}
			}
		}
		
		[Column(Storage="_Actual_Length", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Actual_Length
		{
			get
			{
				return this._Actual_Length;
			}
			set
			{
				if ((this._Actual_Length != value))
				{
					this._Actual_Length = value;
				}
			}
		}
		
		[Column(Storage="_PH_Sample", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> PH_Sample
		{
			get
			{
				return this._PH_Sample;
			}
			set
			{
				if ((this._PH_Sample != value))
				{
					this._PH_Sample = value;
				}
			}
		}
		
		[Column(Storage="_Usable_Width", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Usable_Width
		{
			get
			{
				return this._Usable_Width;
			}
			set
			{
				if ((this._Usable_Width != value))
				{
					this._Usable_Width = value;
				}
			}
		}
		
		[Column(Storage="_Points_Hundred_SQM", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Points_Hundred_SQM
		{
			get
			{
				return this._Points_Hundred_SQM;
			}
			set
			{
				if ((this._Points_Hundred_SQM != value))
				{
					this._Points_Hundred_SQM = value;
				}
			}
		}
		
		[Column(Storage="_Wastage", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Wastage
		{
			get
			{
				return this._Wastage;
			}
			set
			{
				if ((this._Wastage != value))
				{
					this._Wastage = value;
				}
			}
		}
		
		[Column(Storage="_Actual_Weight", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Actual_Weight
		{
			get
			{
				return this._Actual_Weight;
			}
			set
			{
				if ((this._Actual_Weight != value))
				{
					this._Actual_Weight = value;
				}
			}
		}
		
		[Column(Storage="_QtyDifference", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> QtyDifference
		{
			get
			{
				return this._QtyDifference;
			}
			set
			{
				if ((this._QtyDifference != value))
				{
					this._QtyDifference = value;
				}
			}
		}
		
		[Column(Storage="_Special_Marker", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Special_Marker
		{
			get
			{
				return this._Special_Marker;
			}
			set
			{
				if ((this._Special_Marker != value))
				{
					this._Special_Marker = value;
				}
			}
		}
		
		[Column(Storage="_Mould_Trial_Result", DbType="VarChar(50)")]
		public string Mould_Trial_Result
		{
			get
			{
				return this._Mould_Trial_Result;
			}
			set
			{
				if ((this._Mould_Trial_Result != value))
				{
					this._Mould_Trial_Result = value;
				}
			}
		}
		
		[Column(Storage="_Item_no", DbType="VarChar(15)")]
		public string Item_no
		{
			get
			{
				return this._Item_no;
			}
			set
			{
				if ((this._Item_no != value))
				{
					this._Item_no = value;
				}
			}
		}
		
		[Column(Storage="_PHMaterial", DbType="VarChar(15)")]
		public string PHMaterial
		{
			get
			{
				return this._PHMaterial;
			}
			set
			{
				if ((this._PHMaterial != value))
				{
					this._PHMaterial = value;
				}
			}
		}
		
		[Column(Storage="_supplier_item_no", DbType="VarChar(50)")]
		public string supplier_item_no
		{
			get
			{
				return this._supplier_item_no;
			}
			set
			{
				if ((this._supplier_item_no != value))
				{
					this._supplier_item_no = value;
				}
			}
		}
		
		[Column(Storage="_stock_in_date", DbType="VarChar(10)")]
		public string stock_in_date
		{
			get
			{
				return this._stock_in_date;
			}
			set
			{
				if ((this._stock_in_date != value))
				{
					this._stock_in_date = value;
				}
			}
		}
		
		[Column(Storage="_PHMaterialColor", DbType="VarChar(6)")]
		public string PHMaterialColor
		{
			get
			{
				return this._PHMaterialColor;
			}
			set
			{
				if ((this._PHMaterialColor != value))
				{
					this._PHMaterialColor = value;
				}
			}
		}
		
		[Column(Storage="_supplieritemColor", DbType="VarChar(50)")]
		public string supplieritemColor
		{
			get
			{
				return this._supplieritemColor;
			}
			set
			{
				if ((this._supplieritemColor != value))
				{
					this._supplieritemColor = value;
				}
			}
		}
		
		[Column(Storage="_Color_Group_Status", DbType="VarChar(50)")]
		public string Color_Group_Status
		{
			get
			{
				return this._Color_Group_Status;
			}
			set
			{
				if ((this._Color_Group_Status != value))
				{
					this._Color_Group_Status = value;
				}
			}
		}
		
		[Column(Storage="_WeftYarnClass", DbType="NVarChar(50)")]
		public string WeftYarnClass
		{
			get
			{
				return this._WeftYarnClass;
			}
			set
			{
				if ((this._WeftYarnClass != value))
				{
					this._WeftYarnClass = value;
				}
			}
		}
		
		[Column(Storage="_WeftYarnWastage", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> WeftYarnWastage
		{
			get
			{
				return this._WeftYarnWastage;
			}
			set
			{
				if ((this._WeftYarnWastage != value))
				{
					this._WeftYarnWastage = value;
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution1", DbType="NVarChar(50)")]
		public string WeftYarnSolution1
		{
			get
			{
				return this._WeftYarnSolution1;
			}
			set
			{
				if ((this._WeftYarnSolution1 != value))
				{
					this._WeftYarnSolution1 = value;
				}
			}
		}
		
		[Column(Storage="_WeftYarnSolution2", DbType="NVarChar(50)")]
		public string WeftYarnSolution2
		{
			get
			{
				return this._WeftYarnSolution2;
			}
			set
			{
				if ((this._WeftYarnSolution2 != value))
				{
					this._WeftYarnSolution2 = value;
				}
			}
		}
		
		[Column(Storage="_WeftYarnStatus", DbType="VarChar(50)")]
		public string WeftYarnStatus
		{
			get
			{
				return this._WeftYarnStatus;
			}
			set
			{
				if ((this._WeftYarnStatus != value))
				{
					this._WeftYarnStatus = value;
				}
			}
		}
		
		[Column(Storage="_IQCInspectionDate", DbType="VarChar(10)")]
		public string IQCInspectionDate
		{
			get
			{
				return this._IQCInspectionDate;
			}
			set
			{
				if ((this._IQCInspectionDate != value))
				{
					this._IQCInspectionDate = value;
				}
			}
		}
		
		[Column(Storage="_Spread_Insp_Result", DbType="VarChar(50)")]
		public string Spread_Insp_Result
		{
			get
			{
				return this._Spread_Insp_Result;
			}
			set
			{
				if ((this._Spread_Insp_Result != value))
				{
					this._Spread_Insp_Result = value;
				}
			}
		}
	}
	
	public partial class P_GetMaterialTypeDefectOrderResult
	{
		
		private string _MaterialType;
		
		private string _Defect_Name;
		
		private System.Nullable<int> _Defect_Deduce_Points;
		
		private string _DefectEnglishName;
		
		private string _DefectChineseName;
		
		private string _DefectThaiName;
		
		private System.Nullable<decimal> _Length_Gross;
		
		private System.Nullable<decimal> _Length_Net;
		
		public P_GetMaterialTypeDefectOrderResult()
		{
		}
		
		[Column(Storage="_MaterialType", DbType="VarChar(6)")]
		public string MaterialType
		{
			get
			{
				return this._MaterialType;
			}
			set
			{
				if ((this._MaterialType != value))
				{
					this._MaterialType = value;
				}
			}
		}
		
		[Column(Storage="_Defect_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Defect_Name
		{
			get
			{
				return this._Defect_Name;
			}
			set
			{
				if ((this._Defect_Name != value))
				{
					this._Defect_Name = value;
				}
			}
		}
		
		[Column(Storage="_Defect_Deduce_Points", DbType="Int")]
		public System.Nullable<int> Defect_Deduce_Points
		{
			get
			{
				return this._Defect_Deduce_Points;
			}
			set
			{
				if ((this._Defect_Deduce_Points != value))
				{
					this._Defect_Deduce_Points = value;
				}
			}
		}
		
		[Column(Storage="_DefectEnglishName", DbType="VarChar(200)")]
		public string DefectEnglishName
		{
			get
			{
				return this._DefectEnglishName;
			}
			set
			{
				if ((this._DefectEnglishName != value))
				{
					this._DefectEnglishName = value;
				}
			}
		}
		
		[Column(Storage="_DefectChineseName", DbType="NVarChar(200)")]
		public string DefectChineseName
		{
			get
			{
				return this._DefectChineseName;
			}
			set
			{
				if ((this._DefectChineseName != value))
				{
					this._DefectChineseName = value;
				}
			}
		}
		
		[Column(Storage="_DefectThaiName", DbType="NVarChar(200)")]
		public string DefectThaiName
		{
			get
			{
				return this._DefectThaiName;
			}
			set
			{
				if ((this._DefectThaiName != value))
				{
					this._DefectThaiName = value;
				}
			}
		}
		
		[Column(Storage="_Length_Gross", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Length_Gross
		{
			get
			{
				return this._Length_Gross;
			}
			set
			{
				if ((this._Length_Gross != value))
				{
					this._Length_Gross = value;
				}
			}
		}
		
		[Column(Storage="_Length_Net", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> Length_Net
		{
			get
			{
				return this._Length_Net;
			}
			set
			{
				if ((this._Length_Net != value))
				{
					this._Length_Net = value;
				}
			}
		}
	}
	
	public partial class P_GetSupplierBatchInfResult
	{
		
		private string _Supplich_Batch;
		
		private string _Item_No;
		
		private string _Item_Desc;
		
		private string _Stock_In_Date;
		
		private System.Nullable<int> _RollQty;
		
		private System.Nullable<decimal> _TotalLength;
		
		private string _Remark;
		
		private string _CreateByUser;
		
		private System.Nullable<System.DateTime> _CreateOnDate;
		
		private string _AlterByUser;
		
		private System.Nullable<System.DateTime> _AlterOnDate;
		
		public P_GetSupplierBatchInfResult()
		{
		}
		
		[Column(Storage="_Supplich_Batch", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Supplich_Batch
		{
			get
			{
				return this._Supplich_Batch;
			}
			set
			{
				if ((this._Supplich_Batch != value))
				{
					this._Supplich_Batch = value;
				}
			}
		}
		
		[Column(Storage="_Item_No", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string Item_No
		{
			get
			{
				return this._Item_No;
			}
			set
			{
				if ((this._Item_No != value))
				{
					this._Item_No = value;
				}
			}
		}
		
		[Column(Storage="_Item_Desc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Desc
		{
			get
			{
				return this._Item_Desc;
			}
			set
			{
				if ((this._Item_Desc != value))
				{
					this._Item_Desc = value;
				}
			}
		}
		
		[Column(Storage="_Stock_In_Date", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string Stock_In_Date
		{
			get
			{
				return this._Stock_In_Date;
			}
			set
			{
				if ((this._Stock_In_Date != value))
				{
					this._Stock_In_Date = value;
				}
			}
		}
		
		[Column(Storage="_RollQty", DbType="Int")]
		public System.Nullable<int> RollQty
		{
			get
			{
				return this._RollQty;
			}
			set
			{
				if ((this._RollQty != value))
				{
					this._RollQty = value;
				}
			}
		}
		
		[Column(Storage="_TotalLength", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> TotalLength
		{
			get
			{
				return this._TotalLength;
			}
			set
			{
				if ((this._TotalLength != value))
				{
					this._TotalLength = value;
				}
			}
		}
		
		[Column(Storage="_Remark", DbType="NVarChar(1000)")]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this._Remark = value;
				}
			}
		}
		
		[Column(Storage="_CreateByUser", DbType="NVarChar(50)")]
		public string CreateByUser
		{
			get
			{
				return this._CreateByUser;
			}
			set
			{
				if ((this._CreateByUser != value))
				{
					this._CreateByUser = value;
				}
			}
		}
		
		[Column(Storage="_CreateOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateOnDate
		{
			get
			{
				return this._CreateOnDate;
			}
			set
			{
				if ((this._CreateOnDate != value))
				{
					this._CreateOnDate = value;
				}
			}
		}
		
		[Column(Storage="_AlterByUser", DbType="NVarChar(50)")]
		public string AlterByUser
		{
			get
			{
				return this._AlterByUser;
			}
			set
			{
				if ((this._AlterByUser != value))
				{
					this._AlterByUser = value;
				}
			}
		}
		
		[Column(Storage="_AlterOnDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AlterOnDate
		{
			get
			{
				return this._AlterOnDate;
			}
			set
			{
				if ((this._AlterOnDate != value))
				{
					this._AlterOnDate = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
